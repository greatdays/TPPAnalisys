using System;
using System.Collections.Generic;
using DeveloperPortal.DataAccess.Entity.Models.Generated;
using Microsoft.EntityFrameworkCore;

namespace DeveloperPortal.DataAccess.Entity.Data;

public partial class AAHREntities : DbContext
{
    public AAHREntities()
    {
    }

    public AAHREntities(DbContextOptions<AAHREntities> options)
        : base(options)
    {
    }

    public virtual DbSet<AKASiteAddressSnap> AKASiteAddressSnaps { get; set; }

    public virtual DbSet<APN> APNs { get; set; }

    public virtual DbSet<APNPIN> APNPINs { get; set; }

    public virtual DbSet<AUTransferWaitList> AUTransferWaitLists { get; set; }

    public virtual DbSet<AUWaitList> AUWaitLists { get; set; }

    public virtual DbSet<AcHPAPN> AcHPAPNs { get; set; }

    public virtual DbSet<AcHPPropertyManagementPlan> AcHPPropertyManagementPlans { get; set; }

    public virtual DbSet<AccessLog> AccessLogs { get; set; }

    public virtual DbSet<AccountDeactivation> AccountDeactivations { get; set; }

    public virtual DbSet<AccountDeactivationLog> AccountDeactivationLogs { get; set; }

    public virtual DbSet<AdvanceSearchQuery> AdvanceSearchQueries { get; set; }

    public virtual DbSet<AffordableOnlyOwner> AffordableOnlyOwners { get; set; }

    public virtual DbSet<AppConfig> AppConfigs { get; set; }

    public virtual DbSet<ApplicationMaster> ApplicationMasters { get; set; }

    public virtual DbSet<AssnActionSchemaTemplate> AssnActionSchemaTemplates { get; set; }

    public virtual DbSet<AssnApplicationDeclineReason> AssnApplicationDeclineReasons { get; set; }

    public virtual DbSet<AssnBGCNonCoveredProperty> AssnBGCNonCoveredProperties { get; set; }

    public virtual DbSet<AssnBackgroundCheck> AssnBackgroundChecks { get; set; }

    public virtual DbSet<AssnBidScopeOfWork> AssnBidScopeOfWorks { get; set; }

    public virtual DbSet<AssnCaseProjectSiteFolder> AssnCaseProjectSiteFolders { get; set; }

    public virtual DbSet<AssnComment> AssnComments { get; set; }

    public virtual DbSet<AssnContactContact> AssnContactContacts { get; set; }

    public virtual DbSet<AssnCoursePrerequisiteCourse> AssnCoursePrerequisiteCourses { get; set; }

    public virtual DbSet<AssnCourseTrainer> AssnCourseTrainers { get; set; }

    public virtual DbSet<AssnDocument> AssnDocuments { get; set; }

    public virtual DbSet<AssnDocumentSubCategoryStatus> AssnDocumentSubCategoryStatuses { get; set; }

    public virtual DbSet<AssnFHACFiledDate> AssnFHACFiledDates { get; set; }

    public virtual DbSet<AssnFairHousingCertifyTerm> AssnFairHousingCertifyTerms { get; set; }

    public virtual DbSet<AssnGrievanceMilestonesDate> AssnGrievanceMilestonesDates { get; set; }

    public virtual DbSet<AssnGrievanceTypeMultiSelectOption> AssnGrievanceTypeMultiSelectOptions { get; set; }

    public virtual DbSet<AssnGrievanceTypeQuestion> AssnGrievanceTypeQuestions { get; set; }

    public virtual DbSet<AssnGrievanceTypeSubQuestion> AssnGrievanceTypeSubQuestions { get; set; }

    public virtual DbSet<AssnHRMApplicationPropQuestion> AssnHRMApplicationPropQuestions { get; set; }

    public virtual DbSet<AssnInspectionViolation> AssnInspectionViolations { get; set; }

    public virtual DbSet<AssnLocationCategoryLocation> AssnLocationCategoryLocations { get; set; }

    public virtual DbSet<AssnLutDistanceTypeSnap> AssnLutDistanceTypeSnaps { get; set; }

    public virtual DbSet<AssnOrganizationContact> AssnOrganizationContacts { get; set; }

    public virtual DbSet<AssnOutreachTargetAudience> AssnOutreachTargetAudiences { get; set; }

    public virtual DbSet<AssnPMPAgency> AssnPMPAgencies { get; set; }

    public virtual DbSet<AssnPMPAgencySnap> AssnPMPAgencySnaps { get; set; }

    public virtual DbSet<AssnPMPLotteryApplnAvailMethod> AssnPMPLotteryApplnAvailMethods { get; set; }

    public virtual DbSet<AssnPMPLotteryApplnAvailMethodSnap> AssnPMPLotteryApplnAvailMethodSnaps { get; set; }

    public virtual DbSet<AssnPMPLotterySubmitMethod> AssnPMPLotterySubmitMethods { get; set; }

    public virtual DbSet<AssnPMPLotterySubmitMethodSnap> AssnPMPLotterySubmitMethodSnaps { get; set; }

    public virtual DbSet<AssnPMPOutreachTargetAudienceSnap> AssnPMPOutreachTargetAudienceSnaps { get; set; }

    public virtual DbSet<AssnPMPProjSiteAccessibleUnitFeatureSnap> AssnPMPProjSiteAccessibleUnitFeatureSnaps { get; set; }

    public virtual DbSet<AssnPMPProjTypeSiteAttr> AssnPMPProjTypeSiteAttrs { get; set; }

    public virtual DbSet<AssnPMPProjTypeSiteAttrSnap> AssnPMPProjTypeSiteAttrSnaps { get; set; }

    public virtual DbSet<AssnPMPScatteredSite> AssnPMPScatteredSites { get; set; }

    public virtual DbSet<AssnPMPScatteredSiteSnap> AssnPMPScatteredSiteSnaps { get; set; }

    public virtual DbSet<AssnPMPSitesOutreach> AssnPMPSitesOutreaches { get; set; }

    public virtual DbSet<AssnPMPSitesOutreachSnap> AssnPMPSitesOutreachSnaps { get; set; }

    public virtual DbSet<AssnPMPUnitFeatureSnap> AssnPMPUnitFeatureSnaps { get; set; }

    public virtual DbSet<AssnProblemCase> AssnProblemCases { get; set; }

    public virtual DbSet<AssnProjSiteAccessibleUnitFeature> AssnProjSiteAccessibleUnitFeatures { get; set; }

    public virtual DbSet<AssnProjectSiteAPN> AssnProjectSiteAPNs { get; set; }

    public virtual DbSet<AssnProjectSiteFeatureSnap> AssnProjectSiteFeatureSnaps { get; set; }

    public virtual DbSet<AssnProjectSiteQuestion> AssnProjectSiteQuestions { get; set; }

    public virtual DbSet<AssnProjectSiteReference> AssnProjectSiteReferences { get; set; }

    public virtual DbSet<AssnPropContact> AssnPropContacts { get; set; }

    public virtual DbSet<AssnPropContactLog> AssnPropContactLogs { get; set; }

    public virtual DbSet<AssnPropUser> AssnPropUsers { get; set; }

    public virtual DbSet<AssnPropertyAccountContactSnapShot> AssnPropertyAccountContactSnapShots { get; set; }

    public virtual DbSet<AssnPropertyAccountContactSnapShot1> AssnPropertyAccountContactSnapShots1 { get; set; }

    public virtual DbSet<AssnPropertyDistance> AssnPropertyDistances { get; set; }

    public virtual DbSet<AssnPropertyDistrict> AssnPropertyDistricts { get; set; }

    public virtual DbSet<AssnPropertyFeature> AssnPropertyFeatures { get; set; }

    public virtual DbSet<AssnPropertyUser> AssnPropertyUsers { get; set; }

    public virtual DbSet<AssnPropertyUser1> AssnPropertyUsers1 { get; set; }

    public virtual DbSet<AssnQRFHACFiledDate> AssnQRFHACFiledDates { get; set; }

    public virtual DbSet<AssnQRFairHousingCertifyTerm> AssnQRFairHousingCertifyTerms { get; set; }

    public virtual DbSet<AssnQRRentalSubsidy> AssnQRRentalSubsidies { get; set; }

    public virtual DbSet<AssnRentalSubsidy> AssnRentalSubsidies { get; set; }

    public virtual DbSet<AssnRentalSubsidySnap> AssnRentalSubsidySnaps { get; set; }

    public virtual DbSet<AssnSRCAPChecklistItemStatus> AssnSRCAPChecklistItemStatuses { get; set; }

    public virtual DbSet<AssnSRReviewReportItemStatus> AssnSRReviewReportItemStatuses { get; set; }

    public virtual DbSet<AssnScopeViolation> AssnScopeViolations { get; set; }

    public virtual DbSet<AssnServiceRequestPropSnapshot_temp> AssnServiceRequestPropSnapshot_temps { get; set; }

    public virtual DbSet<AssnServiceRequestPropSnapshot_tempAfter> AssnServiceRequestPropSnapshot_tempAfters { get; set; }

    public virtual DbSet<AssnServiceRequestTypeViolation> AssnServiceRequestTypeViolations { get; set; }

    public virtual DbSet<AssnTeamManagementUser> AssnTeamManagementUsers { get; set; }

    public virtual DbSet<AssnTeamManagementUser1> AssnTeamManagementUsers1 { get; set; }

    public virtual DbSet<AssnTrainingRegistryProjectSite> AssnTrainingRegistryProjectSites { get; set; }

    public virtual DbSet<AssnUnitFeature> AssnUnitFeatures { get; set; }

    public virtual DbSet<AssnUnitFeatureSnap> AssnUnitFeatureSnaps { get; set; }

    public virtual DbSet<AssnUserContractor> AssnUserContractors { get; set; }

    public virtual DbSet<AssnUserFavouriteCase> AssnUserFavouriteCases { get; set; }

    public virtual DbSet<AssnUserPropertyFavouriteCase> AssnUserPropertyFavouriteCases { get; set; }

    public virtual DbSet<AssnViolationProgram> AssnViolationPrograms { get; set; }

    public virtual DbSet<AssnWalkInApplicationDeclineReason> AssnWalkInApplicationDeclineReasons { get; set; }

    public virtual DbSet<AuditVisitDetail> AuditVisitDetails { get; set; }

    public virtual DbSet<AwardBidPackage> AwardBidPackages { get; set; }

    public virtual DbSet<BackgroundCheck> BackgroundChecks { get; set; }

    public virtual DbSet<BackgroundCheckReport> BackgroundCheckReports { get; set; }

    public virtual DbSet<BatchJob> BatchJobs { get; set; }

    public virtual DbSet<BatchJobDetail> BatchJobDetails { get; set; }

    public virtual DbSet<BatchJobDetailLog> BatchJobDetailLogs { get; set; }

    public virtual DbSet<BidPackage> BidPackages { get; set; }

    public virtual DbSet<CAPDetail> CAPDetails { get; set; }

    public virtual DbSet<CAPExtension> CAPExtensions { get; set; }

    public virtual DbSet<CAPItemDetail> CAPItemDetails { get; set; }

    public virtual DbSet<CCDetail> CCDetails { get; set; }

    public virtual DbSet<CCRISdiagram> CCRISdiagrams { get; set; }

    public virtual DbSet<CannedNote> CannedNotes { get; set; }

    public virtual DbSet<Case> Cases { get; set; }

    public virtual DbSet<CaseComment> CaseComments { get; set; }

    public virtual DbSet<CaseLog> CaseLogs { get; set; }

    public virtual DbSet<CaseType> CaseTypes { get; set; }

    public virtual DbSet<CaseWatcher> CaseWatchers { get; set; }

    public virtual DbSet<Certificate> Certificates { get; set; }

    public virtual DbSet<CfgDocument> CfgDocuments { get; set; }

    public virtual DbSet<CfgNextRun> CfgNextRuns { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<ContactIdentifier> ContactIdentifiers { get; set; }

    public virtual DbSet<ContactIdentifierLog> ContactIdentifierLogs { get; set; }

    public virtual DbSet<ContactNameChangeLog> ContactNameChangeLogs { get; set; }

    public virtual DbSet<ControlMaster> ControlMasters { get; set; }

    public virtual DbSet<ControlViewMaster> ControlViewMasters { get; set; }

    public virtual DbSet<CorrectionNote> CorrectionNotes { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Custom_DisplayConfig> Custom_DisplayConfigs { get; set; }

    public virtual DbSet<DocTemplate> DocTemplates { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentEntity> DocumentEntities { get; set; }

    public virtual DbSet<DocumentTemplate> DocumentTemplates { get; set; }

    public virtual DbSet<DocumentsConfig> DocumentsConfigs { get; set; }

    public virtual DbSet<DrawRequest> DrawRequests { get; set; }

    public virtual DbSet<EffectiveCommunication> EffectiveCommunications { get; set; }

    public virtual DbSet<EmailLog> EmailLogs { get; set; }

    public virtual DbSet<EmailNotification> EmailNotifications { get; set; }

    public virtual DbSet<EmailSyncLog> EmailSyncLogs { get; set; }

    public virtual DbSet<EnforcementMilestone> EnforcementMilestones { get; set; }

    public virtual DbSet<EnforcementOrderReviewDetail> EnforcementOrderReviewDetails { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventAssignee> EventAssignees { get; set; }

    public virtual DbSet<EventAssigneeHistory> EventAssigneeHistories { get; set; }

    public virtual DbSet<EventAttendee> EventAttendees { get; set; }

    public virtual DbSet<EventConfiguration> EventConfigurations { get; set; }

    public virtual DbSet<EventHistory> EventHistories { get; set; }

    public virtual DbSet<EventNote> EventNotes { get; set; }

    public virtual DbSet<EventReminder> EventReminders { get; set; }

    public virtual DbSet<ExistingRetrofitImportantDateMapping> ExistingRetrofitImportantDateMappings { get; set; }

    public virtual DbSet<Extension> Extensions { get; set; }

    public virtual DbSet<FairHousing> FairHousings { get; set; }

    public virtual DbSet<Field> Fields { get; set; }

    public virtual DbSet<FloorPlanBathroomType> FloorPlanBathroomTypes { get; set; }

    public virtual DbSet<FloorPlanType> FloorPlanTypes { get; set; }

    public virtual DbSet<Form> Forms { get; set; }

    public virtual DbSet<Grievance> Grievances { get; set; }

    public virtual DbSet<GrievanceAppeal> GrievanceAppeals { get; set; }

    public virtual DbSet<GrievanceLog> GrievanceLogs { get; set; }

    public virtual DbSet<GrievanceLog1> GrievanceLogs1 { get; set; }

    public virtual DbSet<GrievanceType> GrievanceTypes { get; set; }

    public virtual DbSet<HRMApplication> HRMApplications { get; set; }

    public virtual DbSet<HRMApplicationAdditionalQuestion> HRMApplicationAdditionalQuestions { get; set; }

    public virtual DbSet<HRMApplicationLog> HRMApplicationLogs { get; set; }

    public virtual DbSet<HotlineCount> HotlineCounts { get; set; }

    public virtual DbSet<ImpersonatedUserActivityDetail> ImpersonatedUserActivityDetails { get; set; }

    public virtual DbSet<ImpersonatedUserLoginDetail> ImpersonatedUserLoginDetails { get; set; }

    public virtual DbSet<ImportProject> ImportProjects { get; set; }

    public virtual DbSet<ImportantDate> ImportantDates { get; set; }

    public virtual DbSet<Inspection> Inspections { get; set; }

    public virtual DbSet<InspectionDetail> InspectionDetails { get; set; }

    public virtual DbSet<InspectionHistory> InspectionHistories { get; set; }

    public virtual DbSet<InspectionNotification> InspectionNotifications { get; set; }

    public virtual DbSet<InspectionScheduled> InspectionScheduleds { get; set; }

    public virtual DbSet<LACountyServicePlanningArea> LACountyServicePlanningAreas { get; set; }

    public virtual DbSet<LAServiceArea2012> LAServiceArea2012s { get; set; }

    public virtual DbSet<LUTCAPLanguage> LUTCAPLanguages { get; set; }

    public virtual DbSet<Level> Levels { get; set; }

    public virtual DbSet<Links_DisplayConfig> Links_DisplayConfigs { get; set; }

    public virtual DbSet<Links_Image> Links_Images { get; set; }

    public virtual DbSet<Links_LinkDetail> Links_LinkDetails { get; set; }

    public virtual DbSet<Links_Log> Links_Logs { get; set; }

    public virtual DbSet<Links_Tracking> Links_Trackings { get; set; }

    public virtual DbSet<Listing> Listings { get; set; }

    public virtual DbSet<ListingSnap> ListingSnaps { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<LookupMaster> LookupMasters { get; set; }

    public virtual DbSet<LutAHUPScore> LutAHUPScores { get; set; }

    public virtual DbSet<LutAMI> LutAMIs { get; set; }

    public virtual DbSet<LutAccessibilityComplianceStatus> LutAccessibilityComplianceStatuses { get; set; }

    public virtual DbSet<LutAccessibleUnitFeature> LutAccessibleUnitFeatures { get; set; }

    public virtual DbSet<LutAccountTypeCategory> LutAccountTypeCategories { get; set; }

    public virtual DbSet<LutAltContactType> LutAltContactTypes { get; set; }

    public virtual DbSet<LutApplicableAccessibilityStandard> LutApplicableAccessibilityStandards { get; set; }

    public virtual DbSet<LutApplicationDeclineReason> LutApplicationDeclineReasons { get; set; }

    public virtual DbSet<LutApplicationType> LutApplicationTypes { get; set; }

    public virtual DbSet<LutBatchStatus> LutBatchStatuses { get; set; }

    public virtual DbSet<LutBatchType> LutBatchTypes { get; set; }

    public virtual DbSet<LutBathroomType> LutBathroomTypes { get; set; }

    public virtual DbSet<LutBathroomTypeOption> LutBathroomTypeOptions { get; set; }

    public virtual DbSet<LutBuildingType> LutBuildingTypes { get; set; }

    public virtual DbSet<LutCAPChecklistItem> LutCAPChecklistItems { get; set; }

    public virtual DbSet<LutCAPChecklistSubItem> LutCAPChecklistSubItems { get; set; }

    public virtual DbSet<LutCAPCloseReason> LutCAPCloseReasons { get; set; }

    public virtual DbSet<LutCESType> LutCESTypes { get; set; }

    public virtual DbSet<LutCallType> LutCallTypes { get; set; }

    public virtual DbSet<LutCaseReferralType> LutCaseReferralTypes { get; set; }

    public virtual DbSet<LutCertificateType> LutCertificateTypes { get; set; }

    public virtual DbSet<LutCloseReason> LutCloseReasons { get; set; }

    public virtual DbSet<LutComplianceStatus> LutComplianceStatuses { get; set; }

    public virtual DbSet<LutConstructionType> LutConstructionTypes { get; set; }

    public virtual DbSet<LutContactType> LutContactTypes { get; set; }

    public virtual DbSet<LutContractorType> LutContractorTypes { get; set; }

    public virtual DbSet<LutCourseType> LutCourseTypes { get; set; }

    public virtual DbSet<LutDeniedConsentUserType> LutDeniedConsentUserTypes { get; set; }

    public virtual DbSet<LutDepartment> LutDepartments { get; set; }

    public virtual DbSet<LutDeterminationStatus> LutDeterminationStatuses { get; set; }

    public virtual DbSet<LutDevelopmentCategory> LutDevelopmentCategories { get; set; }

    public virtual DbSet<LutDistance> LutDistances { get; set; }

    public virtual DbSet<LutDistanceType> LutDistanceTypes { get; set; }

    public virtual DbSet<LutDocumentAttribute> LutDocumentAttributes { get; set; }

    public virtual DbSet<LutDocumentCategory> LutDocumentCategories { get; set; }

    public virtual DbSet<LutDocumentTag> LutDocumentTags { get; set; }

    public virtual DbSet<LutEAPFeature> LutEAPFeatures { get; set; }

    public virtual DbSet<LutECRequestType> LutECRequestTypes { get; set; }

    public virtual DbSet<LutECType> LutECTypes { get; set; }

    public virtual DbSet<LutEventReminderType> LutEventReminderTypes { get; set; }

    public virtual DbSet<LutExternalGroup> LutExternalGroups { get; set; }

    public virtual DbSet<LutFHACFiledSource> LutFHACFiledSources { get; set; }

    public virtual DbSet<LutFHAStandard> LutFHAStandards { get; set; }

    public virtual DbSet<LutFHAType> LutFHATypes { get; set; }

    public virtual DbSet<LutFeature> LutFeatures { get; set; }

    public virtual DbSet<LutFixedFloatingUnit> LutFixedFloatingUnits { get; set; }

    public virtual DbSet<LutFollowUpType> LutFollowUpTypes { get; set; }

    public virtual DbSet<LutGMCheckList> LutGMCheckLists { get; set; }

    public virtual DbSet<LutGrievanceDetermination> LutGrievanceDeterminations { get; set; }

    public virtual DbSet<LutGrievanceDeterminationStatus> LutGrievanceDeterminationStatuses { get; set; }

    public virtual DbSet<LutGrievanceDeterminationTitle> LutGrievanceDeterminationTitles { get; set; }

    public virtual DbSet<LutGrievanceLogType> LutGrievanceLogTypes { get; set; }

    public virtual DbSet<LutGrievanceMilestone> LutGrievanceMilestones { get; set; }

    public virtual DbSet<LutGrievanceQuestion> LutGrievanceQuestions { get; set; }

    public virtual DbSet<LutGrievanceReferralAgency> LutGrievanceReferralAgencies { get; set; }

    public virtual DbSet<LutGrievanceSource> LutGrievanceSources { get; set; }

    public virtual DbSet<LutGrievanceStatus> LutGrievanceStatuses { get; set; }

    public virtual DbSet<LutGrievanceSubQuestion> LutGrievanceSubQuestions { get; set; }

    public virtual DbSet<LutGrievanceSubmitType> LutGrievanceSubmitTypes { get; set; }

    public virtual DbSet<LutGrievanceType> LutGrievanceTypes { get; set; }

    public virtual DbSet<LutGrievantType> LutGrievantTypes { get; set; }

    public virtual DbSet<LutHUDFairHousingActDesignManual> LutHUDFairHousingActDesignManuals { get; set; }

    public virtual DbSet<LutHousingType> LutHousingTypes { get; set; }

    public virtual DbSet<LutImportantDate> LutImportantDates { get; set; }

    public virtual DbSet<LutInspectionStatus> LutInspectionStatuses { get; set; }

    public virtual DbSet<LutInspectionType> LutInspectionTypes { get; set; }

    public virtual DbSet<LutLanguage> LutLanguages { get; set; }

    public virtual DbSet<LutLanguageLine> LutLanguageLines { get; set; }

    public virtual DbSet<LutLanguageTranslation> LutLanguageTranslations { get; set; }

    public virtual DbSet<LutLeaseAddendumNotExecuteReason> LutLeaseAddendumNotExecuteReasons { get; set; }

    public virtual DbSet<LutLegalEntityType> LutLegalEntityTypes { get; set; }

    public virtual DbSet<LutListingType> LutListingTypes { get; set; }

    public virtual DbSet<LutLocationCategory> LutLocationCategories { get; set; }

    public virtual DbSet<LutLocationType> LutLocationTypes { get; set; }

    public virtual DbSet<LutLotteryApplnAvailMethod> LutLotteryApplnAvailMethods { get; set; }

    public virtual DbSet<LutLotterySubmitMethod> LutLotterySubmitMethods { get; set; }

    public virtual DbSet<LutMailType> LutMailTypes { get; set; }

    public virtual DbSet<LutMileageEntryType> LutMileageEntryTypes { get; set; }

    public virtual DbSet<LutMultiSelectOption> LutMultiSelectOptions { get; set; }

    public virtual DbSet<LutMultiSelectOptionsGroup> LutMultiSelectOptionsGroups { get; set; }

    public virtual DbSet<LutNACRecommendation> LutNACRecommendations { get; set; }

    public virtual DbSet<LutNeighborhood> LutNeighborhoods { get; set; }

    public virtual DbSet<LutNeighborhoodCouncil> LutNeighborhoodCouncils { get; set; }

    public virtual DbSet<LutNoticeType> LutNoticeTypes { get; set; }

    public virtual DbSet<LutOccupancyReason> LutOccupancyReasons { get; set; }

    public virtual DbSet<LutOccupancyStatus> LutOccupancyStatuses { get; set; }

    public virtual DbSet<LutOutOfScopeType> LutOutOfScopeTypes { get; set; }

    public virtual DbSet<LutOutcome> LutOutcomes { get; set; }

    public virtual DbSet<LutOutreachType> LutOutreachTypes { get; set; }

    public virtual DbSet<LutPMPProjType> LutPMPProjTypes { get; set; }

    public virtual DbSet<LutParkingType> LutParkingTypes { get; set; }

    public virtual DbSet<LutPhoneType> LutPhoneTypes { get; set; }

    public virtual DbSet<LutPhoneType1> LutPhoneTypes1 { get; set; }

    public virtual DbSet<LutPolicyReviewReportLanguage> LutPolicyReviewReportLanguages { get; set; }

    public virtual DbSet<LutPreDir> LutPreDirs { get; set; }

    public virtual DbSet<LutProgram> LutPrograms { get; set; }

    public virtual DbSet<LutProgramCycle> LutProgramCycles { get; set; }

    public virtual DbSet<LutProjSource> LutProjSources { get; set; }

    public virtual DbSet<LutProjectFund> LutProjectFunds { get; set; }

    public virtual DbSet<LutProjectSiteQuestion> LutProjectSiteQuestions { get; set; }

    public virtual DbSet<LutProjectSiteStatus> LutProjectSiteStatuses { get; set; }

    public virtual DbSet<LutProjectSiteStatusDisplayName> LutProjectSiteStatusDisplayNames { get; set; }

    public virtual DbSet<LutPropAttribute> LutPropAttributes { get; set; }

    public virtual DbSet<LutQRCertifyTerm> LutQRCertifyTerms { get; set; }

    public virtual DbSet<LutRACategory> LutRACategories { get; set; }

    public virtual DbSet<LutRARequestType> LutRARequestTypes { get; set; }

    public virtual DbSet<LutRASubCategory> LutRASubCategories { get; set; }

    public virtual DbSet<LutReferenceType> LutReferenceTypes { get; set; }

    public virtual DbSet<LutRelatedEntity> LutRelatedEntities { get; set; }

    public virtual DbSet<LutRenderType> LutRenderTypes { get; set; }

    public virtual DbSet<LutRentalSubsidy> LutRentalSubsidies { get; set; }

    public virtual DbSet<LutReviewReportItem> LutReviewReportItems { get; set; }

    public virtual DbSet<LutReviewReportSubItem> LutReviewReportSubItems { get; set; }

    public virtual DbSet<LutScopeItem> LutScopeItems { get; set; }

    public virtual DbSet<LutServiceRequestType> LutServiceRequestTypes { get; set; }

    public virtual DbSet<LutSignatureTitle> LutSignatureTitles { get; set; }

    public virtual DbSet<LutSiteSurveyGroup> LutSiteSurveyGroups { get; set; }

    public virtual DbSet<LutState> LutStates { get; set; }

    public virtual DbSet<LutState1> LutStates1 { get; set; }

    public virtual DbSet<LutStopWorkOrderReasonType> LutStopWorkOrderReasonTypes { get; set; }

    public virtual DbSet<LutStreetPrefix> LutStreetPrefixes { get; set; }

    public virtual DbSet<LutStreetPrefix1> LutStreetPrefixes1 { get; set; }

    public virtual DbSet<LutStreetSuffix> LutStreetSuffixes { get; set; }

    public virtual DbSet<LutStreetSuffix1> LutStreetSuffixes1 { get; set; }

    public virtual DbSet<LutStreetType> LutStreetTypes { get; set; }

    public virtual DbSet<LutStructureType> LutStructureTypes { get; set; }

    public virtual DbSet<LutStructureType1> LutStructureTypes1 { get; set; }

    public virtual DbSet<LutTargetAudience> LutTargetAudiences { get; set; }

    public virtual DbSet<LutTemplate> LutTemplates { get; set; }

    public virtual DbSet<LutTemplate1> LutTemplates1 { get; set; }

    public virtual DbSet<LutTenantSelectedFrom> LutTenantSelectedFroms { get; set; }

    public virtual DbSet<LutTotalBathroom> LutTotalBathrooms { get; set; }

    public virtual DbSet<LutTotalBedroom> LutTotalBedrooms { get; set; }

    public virtual DbSet<LutTrainingSessionStatus> LutTrainingSessionStatuses { get; set; }

    public virtual DbSet<LutTransferWaitListReason> LutTransferWaitListReasons { get; set; }

    public virtual DbSet<LutTypeofProject> LutTypeofProjects { get; set; }

    public virtual DbSet<LutUnitAccessibiltyType> LutUnitAccessibiltyTypes { get; set; }

    public virtual DbSet<LutUnitType> LutUnitTypes { get; set; }

    public virtual DbSet<LutUpcomingUnitVacancy> LutUpcomingUnitVacancies { get; set; }

    public virtual DbSet<LutUserType> LutUserTypes { get; set; }

    public virtual DbSet<LutViolation> LutViolations { get; set; }

    public virtual DbSet<LutViolationCategory> LutViolationCategories { get; set; }

    public virtual DbSet<LutViolationChecklist> LutViolationChecklists { get; set; }

    public virtual DbSet<LutViolationCode> LutViolationCodes { get; set; }

    public virtual DbSet<LutViolationCodeType> LutViolationCodeTypes { get; set; }

    public virtual DbSet<LutViolationLocation> LutViolationLocations { get; set; }

    public virtual DbSet<LutWithdrawReason> LutWithdrawReasons { get; set; }

    public virtual DbSet<LutWorkLogType> LutWorkLogTypes { get; set; }

    public virtual DbSet<LutWorkLogType1> LutWorkLogTypes1 { get; set; }

    public virtual DbSet<Neighborhood> Neighborhoods { get; set; }

    public virtual DbSet<NeighborhoodCouncil> NeighborhoodCouncils { get; set; }

    public virtual DbSet<News_DisplayConfig> News_DisplayConfigs { get; set; }

    public virtual DbSet<News_NewsDetail> News_NewsDetails { get; set; }

    public virtual DbSet<NonCoveredProjectSite> NonCoveredProjectSites { get; set; }

    public virtual DbSet<Notice> Notices { get; set; }

    public virtual DbSet<NoticeOfObligation> NoticeOfObligations { get; set; }

    public virtual DbSet<NotificationLog> NotificationLogs { get; set; }

    public virtual DbSet<NotificationSchema> NotificationSchemas { get; set; }

    public virtual DbSet<NotificationSource> NotificationSources { get; set; }

    public virtual DbSet<NotificationTemplate> NotificationTemplates { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<OrganizationAddress> OrganizationAddresses { get; set; }

    public virtual DbSet<OutreachAndAffimativeMarketing> OutreachAndAffimativeMarketings { get; set; }

    public virtual DbSet<PCMStoPncSyncLog> PCMStoPncSyncLogs { get; set; }

    public virtual DbSet<PMP> PMPs { get; set; }

    public virtual DbSet<PMPAddnlMarketingEffort> PMPAddnlMarketingEfforts { get; set; }

    public virtual DbSet<PMPAddnlMarketingEffortSnap> PMPAddnlMarketingEffortSnaps { get; set; }

    public virtual DbSet<PMPAgency> PMPAgencies { get; set; }

    public virtual DbSet<PMPAgencySnap> PMPAgencySnaps { get; set; }

    public virtual DbSet<PMPLog> PMPLogs { get; set; }

    public virtual DbSet<PMPOutreachAndAffimativeMarketingSnap> PMPOutreachAndAffimativeMarketingSnaps { get; set; }

    public virtual DbSet<PMPOutreachOrganisation> PMPOutreachOrganisations { get; set; }

    public virtual DbSet<PMPOutreachOrganisationSnap> PMPOutreachOrganisationSnaps { get; set; }

    public virtual DbSet<PMPPSHClientServingOrganization> PMPPSHClientServingOrganizations { get; set; }

    public virtual DbSet<PMPPSHClientServingOrganizationSnap> PMPPSHClientServingOrganizationSnaps { get; set; }

    public virtual DbSet<PMPProjectSiteSnap> PMPProjectSiteSnaps { get; set; }

    public virtual DbSet<PMPSiteAddressSnap> PMPSiteAddressSnaps { get; set; }

    public virtual DbSet<PMPSnap> PMPSnaps { get; set; }

    public virtual DbSet<PMPUnitAttributeSnap> PMPUnitAttributeSnaps { get; set; }

    public virtual DbSet<PMPUnitInfoSummarySnap> PMPUnitInfoSummarySnaps { get; set; }

    public virtual DbSet<PMPUnitSnap> PMPUnitSnaps { get; set; }

    public virtual DbSet<PhoneLog> PhoneLogs { get; set; }

    public virtual DbSet<PolicyComplianceDetail> PolicyComplianceDetails { get; set; }

    public virtual DbSet<PolicyComplianceReminder> PolicyComplianceReminders { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<ProjectAttribute> ProjectAttributes { get; set; }

    public virtual DbSet<ProjectAttributeLog> ProjectAttributeLogs { get; set; }

    public virtual DbSet<ProjectLog> ProjectLogs { get; set; }

    public virtual DbSet<ProjectSite> ProjectSites { get; set; }

    public virtual DbSet<ProjectSiteAdditionalQuestion> ProjectSiteAdditionalQuestions { get; set; }

    public virtual DbSet<ProjectSiteAdditionalQuestionsSnap> ProjectSiteAdditionalQuestionsSnaps { get; set; }

    public virtual DbSet<ProjectSiteAttribute> ProjectSiteAttributes { get; set; }

    public virtual DbSet<ProjectSiteAttributeLog> ProjectSiteAttributeLogs { get; set; }

    public virtual DbSet<ProjectSiteAttributeSnap> ProjectSiteAttributeSnaps { get; set; }

    public virtual DbSet<ProjectSiteFutureWaitList> ProjectSiteFutureWaitLists { get; set; }

    public virtual DbSet<ProjectSiteLog> ProjectSiteLogs { get; set; }

    public virtual DbSet<ProjectSiteMarketingFlyer> ProjectSiteMarketingFlyers { get; set; }

    public virtual DbSet<ProjectSiteMarketingFlyerSnap> ProjectSiteMarketingFlyerSnaps { get; set; }

    public virtual DbSet<ProjectSiteNoChangeReport> ProjectSiteNoChangeReports { get; set; }

    public virtual DbSet<ProjectSiteSnap> ProjectSiteSnaps { get; set; }

    public virtual DbSet<ProjectSiteSnapLog> ProjectSiteSnapLogs { get; set; }

    public virtual DbSet<ProjectSiteUpcomingUnitVacancy> ProjectSiteUpcomingUnitVacancies { get; set; }

    public virtual DbSet<ProjectSite_10252023> ProjectSite_10252023s { get; set; }

    public virtual DbSet<ProjectWorkLog> ProjectWorkLogs { get; set; }

    public virtual DbSet<PropAttribute> PropAttributes { get; set; }

    public virtual DbSet<PropSnapshot> PropSnapshots { get; set; }

    public virtual DbSet<PropSnapshot_temp> PropSnapshot_temps { get; set; }

    public virtual DbSet<PropSnapshot_tempAfter> PropSnapshot_tempAfters { get; set; }

    public virtual DbSet<PropertyAccountContactSnapShot> PropertyAccountContactSnapShots { get; set; }

    public virtual DbSet<PropertyAccountContactSnapShot1> PropertyAccountContactSnapShots1 { get; set; }

    public virtual DbSet<QRAUTransferWaitList> QRAUTransferWaitLists { get; set; }

    public virtual DbSet<QRAUWaitList> QRAUWaitLists { get; set; }

    public virtual DbSet<QRAssnGrievanceTypeQuestion> QRAssnGrievanceTypeQuestions { get; set; }

    public virtual DbSet<QRAssnGrievanceTypeSubQuestion> QRAssnGrievanceTypeSubQuestions { get; set; }

    public virtual DbSet<QRConfiguration> QRConfigurations { get; set; }

    public virtual DbSet<QREffectiveCommunication> QREffectiveCommunications { get; set; }

    public virtual DbSet<QRFairHousing> QRFairHousings { get; set; }

    public virtual DbSet<QRGrievanceLog> QRGrievanceLogs { get; set; }

    public virtual DbSet<QROccupancyUnit> QROccupancyUnits { get; set; }

    public virtual DbSet<QRProjectSiteFutureWaitList> QRProjectSiteFutureWaitLists { get; set; }

    public virtual DbSet<QRProjectSiteNoChangeReport> QRProjectSiteNoChangeReports { get; set; }

    public virtual DbSet<QRProjectSiteUpcomingUnitVacancy> QRProjectSiteUpcomingUnitVacancies { get; set; }

    public virtual DbSet<QRReasonableAccommodation> QRReasonableAccommodations { get; set; }

    public virtual DbSet<QRUpcomingUnitVacancy> QRUpcomingUnitVacancies { get; set; }

    public virtual DbSet<QRUtilizationSurvey> QRUtilizationSurveys { get; set; }

    public virtual DbSet<QuarterlyReport> QuarterlyReports { get; set; }

    public virtual DbSet<ReasonableAccommodation> ReasonableAccommodations { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<ReviewListingLog> ReviewListingLogs { get; set; }

    public virtual DbSet<ReviewPMPLog> ReviewPMPLogs { get; set; }

    public virtual DbSet<ReviewPMPLogSnap> ReviewPMPLogSnaps { get; set; }

    public virtual DbSet<ReviewReportDetail> ReviewReportDetails { get; set; }

    public virtual DbSet<ReviewReportItem> ReviewReportItems { get; set; }

    public virtual DbSet<RoleMaster> RoleMasters { get; set; }

    public virtual DbSet<SPDetailView_ColumnConfig> SPDetailView_ColumnConfigs { get; set; }

    public virtual DbSet<SPDetailView_DisplayConfig> SPDetailView_DisplayConfigs { get; set; }

    public virtual DbSet<SPGridView_ColumnConfig> SPGridView_ColumnConfigs { get; set; }

    public virtual DbSet<SPGridView_DisplayConfig> SPGridView_DisplayConfigs { get; set; }

    public virtual DbSet<SPGroupView_ColumnConfig> SPGroupView_ColumnConfigs { get; set; }

    public virtual DbSet<SPGroupView_DisplayConfig> SPGroupView_DisplayConfigs { get; set; }

    public virtual DbSet<SPMatrixView_DisplayConfig> SPMatrixView_DisplayConfigs { get; set; }

    public virtual DbSet<SPView_DBConfig> SPView_DBConfigs { get; set; }

    public virtual DbSet<SPView_SPConfig> SPView_SPConfigs { get; set; }

    public virtual DbSet<SVCAREA2012> SVCAREA2012s { get; set; }

    public virtual DbSet<ServiceRequest> ServiceRequests { get; set; }

    public virtual DbSet<ServiceRequestContact> ServiceRequestContacts { get; set; }

    public virtual DbSet<ServiceRequestGMCheckList> ServiceRequestGMCheckLists { get; set; }

    public virtual DbSet<SiteAddress> SiteAddresses { get; set; }

    public virtual DbSet<SiteAddressLog> SiteAddressLogs { get; set; }

    public virtual DbSet<SiteAssociatedAssessorsParcelNumber> SiteAssociatedAssessorsParcelNumbers { get; set; }

    public virtual DbSet<Structure> Structures { get; set; }

    public virtual DbSet<StructureAssociatedAssessorsParcelNumber> StructureAssociatedAssessorsParcelNumbers { get; set; }

    public virtual DbSet<StructureAttribute> StructureAttributes { get; set; }

    public virtual DbSet<StructureAttributeLog> StructureAttributeLogs { get; set; }

    public virtual DbSet<StructureAttribute_temp> StructureAttribute_temps { get; set; }

    public virtual DbSet<StructureAttribute_tempAfter> StructureAttribute_tempAfters { get; set; }

    public virtual DbSet<StructureLog> StructureLogs { get; set; }

    public virtual DbSet<StructureUnitInformation> StructureUnitInformations { get; set; }

    public virtual DbSet<Structure_temp> Structure_temps { get; set; }

    public virtual DbSet<Structure_tempAfter> Structure_tempAfters { get; set; }

    public virtual DbSet<SubmissionErrorLog> SubmissionErrorLogs { get; set; }

    public virtual DbSet<Subscription> Subscriptions { get; set; }

    public virtual DbSet<SurveyReport> SurveyReports { get; set; }

    public virtual DbSet<TAssnPropContact> TAssnPropContacts { get; set; }

    public virtual DbSet<TQR2FairHousingBatch1> TQR2FairHousingBatch1s { get; set; }

    public virtual DbSet<TQR2ServiceRequestBatch1> TQR2ServiceRequestBatch1s { get; set; }

    public virtual DbSet<TabControlViewMap> TabControlViewMaps { get; set; }

    public virtual DbSet<TabMaster> TabMasters { get; set; }

    public virtual DbSet<TeamManagement> TeamManagements { get; set; }

    public virtual DbSet<TempPrefHouseId> TempPrefHouseIds { get; set; }

    public virtual DbSet<TemplateDetail> TemplateDetails { get; set; }

    public virtual DbSet<TemplateMaster> TemplateMasters { get; set; }

    public virtual DbSet<Trainer> Trainers { get; set; }

    public virtual DbSet<TrainingHistory> TrainingHistories { get; set; }

    public virtual DbSet<TrainingHistory_20211122> TrainingHistory_20211122s { get; set; }

    public virtual DbSet<TrainingRegistry> TrainingRegistries { get; set; }

    public virtual DbSet<TrainingSession> TrainingSessions { get; set; }

    public virtual DbSet<TrainingSessionTrainer> TrainingSessionTrainers { get; set; }

    public virtual DbSet<Unit> Units { get; set; }

    public virtual DbSet<UnitAttribute> UnitAttributes { get; set; }

    public virtual DbSet<UnitAttributeLog> UnitAttributeLogs { get; set; }

    public virtual DbSet<UnitBathroomType> UnitBathroomTypes { get; set; }

    public virtual DbSet<UnitLog> UnitLogs { get; set; }

    public virtual DbSet<UnitSnap> UnitSnaps { get; set; }

    public virtual DbSet<UpcomingUnitVacancy> UpcomingUnitVacancies { get; set; }

    public virtual DbSet<UserSearchCriterion> UserSearchCriteria { get; set; }

    public virtual DbSet<ViewConfig> ViewConfigs { get; set; }

    public virtual DbSet<Violation> Violations { get; set; }

    public virtual DbSet<VwProjectSitePrimaryContact> VwProjectSitePrimaryContacts { get; set; }

    public virtual DbSet<WFLog_DisplayConfig> WFLog_DisplayConfigs { get; set; }

    public virtual DbSet<WFNavigation_DisplayConfig> WFNavigation_DisplayConfigs { get; set; }

    public virtual DbSet<WFStateFlag> WFStateFlags { get; set; }

    public virtual DbSet<WF_Action> WF_Actions { get; set; }

    public virtual DbSet<WF_ActionView> WF_ActionViews { get; set; }

    public virtual DbSet<WF_ActionViewPermission> WF_ActionViewPermissions { get; set; }

    public virtual DbSet<WF_CaseCondition> WF_CaseConditions { get; set; }

    public virtual DbSet<WF_Definition> WF_Definitions { get; set; }

    public virtual DbSet<WF_State> WF_States { get; set; }

    public virtual DbSet<WSDetailView_ColumnConfig> WSDetailView_ColumnConfigs { get; set; }

    public virtual DbSet<WSDetailView_DisplayConfig> WSDetailView_DisplayConfigs { get; set; }

    public virtual DbSet<WSGridView_ColumnConfig> WSGridView_ColumnConfigs { get; set; }

    public virtual DbSet<WSGridView_DisplayConfig> WSGridView_DisplayConfigs { get; set; }

    public virtual DbSet<WSView_WSConfig> WSView_WSConfigs { get; set; }

    public virtual DbSet<WSView_WSType> WSView_WSTypes { get; set; }

    public virtual DbSet<WarrantDetail> WarrantDetails { get; set; }

    public virtual DbSet<WorkExtension> WorkExtensions { get; set; }

    public virtual DbSet<WorkLog> WorkLogs { get; set; }

    public virtual DbSet<WorkOrder> WorkOrders { get; set; }

    public virtual DbSet<allapn> allapns { get; set; }

    public virtual DbSet<lupbldg> lupbldgs { get; set; }

    public virtual DbSet<replacementapn> replacementapns { get; set; }

    public virtual DbSet<tContactIdentifier> tContactIdentifiers { get; set; }

    public virtual DbSet<tcaselog> tcaselogs { get; set; }

    public virtual DbSet<tempdocstatus> tempdocstatuses { get; set; }

    public virtual DbSet<tqrCorrectionNote> tqrCorrectionNotes { get; set; }

    public virtual DbSet<vwAAHRDefaultContact> vwAAHRDefaultContacts { get; set; }

    public virtual DbSet<vwAAHRGISFeature> vwAAHRGISFeatures { get; set; }

    public virtual DbSet<vwAAHRPropertiesToGetLADBSPermit> vwAAHRPropertiesToGetLADBSPermits { get; set; }

    public virtual DbSet<vwAAHRPublicContact> vwAAHRPublicContacts { get; set; }

    public virtual DbSet<vwAcHPDataForHHH> vwAcHPDataForHHHs { get; set; }

    public virtual DbSet<vwAccessLog> vwAccessLogs { get; set; }

    public virtual DbSet<vwAffordableApplicationCloseDateNotification> vwAffordableApplicationCloseDateNotifications { get; set; }

    public virtual DbSet<vwAllPropertyList> vwAllPropertyLists { get; set; }

    public virtual DbSet<vwAllPropertyPolicyAnalyst> vwAllPropertyPolicyAnalysts { get; set; }

    public virtual DbSet<vwAllPurportedUnitsDetail> vwAllPurportedUnitsDetails { get; set; }

    public virtual DbSet<vwApplication> vwApplications { get; set; }

    public virtual DbSet<vwApplicationUser> vwApplicationUsers { get; set; }

    public virtual DbSet<vwAspNetRole> vwAspNetRoles { get; set; }

    public virtual DbSet<vwAspNetUser> vwAspNetUsers { get; set; }

    public virtual DbSet<vwAspNetUserRole> vwAspNetUserRoles { get; set; }

    public virtual DbSet<vwCCAllPropertyList> vwCCAllPropertyLists { get; set; }

    public virtual DbSet<vwCCProjectSiteUnitSummaryAll> vwCCProjectSiteUnitSummaryAlls { get; set; }

    public virtual DbSet<vwCaseLog> vwCaseLogs { get; set; }

    public virtual DbSet<vwComment> vwComments { get; set; }

    public virtual DbSet<vwCoveredPropertyList> vwCoveredPropertyLists { get; set; }

    public virtual DbSet<vwCoveredPropertyList1> vwCoveredPropertyLists1 { get; set; }

    public virtual DbSet<vwDMSDocument> vwDMSDocuments { get; set; }

    public virtual DbSet<vwGeo_CounilDistrict> vwGeo_CounilDistricts { get; set; }

    public virtual DbSet<vwHCIDAAHPApplicationUser> vwHCIDAAHPApplicationUsers { get; set; }

    public virtual DbSet<vwHousingApplication> vwHousingApplications { get; set; }

    public virtual DbSet<vwOLAP_AllProperty> vwOLAP_AllProperties { get; set; }

    public virtual DbSet<vwOLAP_CertifiedUnitDetail> vwOLAP_CertifiedUnitDetails { get; set; }

    public virtual DbSet<vwOLAP_ConstructionDetail> vwOLAP_ConstructionDetails { get; set; }

    public virtual DbSet<vwOLAP_ContactDetail> vwOLAP_ContactDetails { get; set; }

    public virtual DbSet<vwOLAP_DocumentDetail> vwOLAP_DocumentDetails { get; set; }

    public virtual DbSet<vwOLAP_Grievance> vwOLAP_Grievances { get; set; }

    public virtual DbSet<vwOLAP_HIMSContactInfo> vwOLAP_HIMSContactInfos { get; set; }

    public virtual DbSet<vwOLAP_HIMSCovenant> vwOLAP_HIMSCovenants { get; set; }

    public virtual DbSet<vwOLAP_HIMSMilestone> vwOLAP_HIMSMilestones { get; set; }

    public virtual DbSet<vwOLAP_HIMSParticipantInfo> vwOLAP_HIMSParticipantInfos { get; set; }

    public virtual DbSet<vwOLAP_HIMSUnitInfo> vwOLAP_HIMSUnitInfos { get; set; }

    public virtual DbSet<vwOLAP_PMPDetail> vwOLAP_PMPDetails { get; set; }

    public virtual DbSet<vwOLAP_PMPDetails_Updated> vwOLAP_PMPDetails_Updateds { get; set; }

    public virtual DbSet<vwOLAP_PolicyCaseDetail> vwOLAP_PolicyCaseDetails { get; set; }

    public virtual DbSet<vwOLAP_ProjectDetail> vwOLAP_ProjectDetails { get; set; }

    public virtual DbSet<vwOLAP_ProjectDetails_Updated> vwOLAP_ProjectDetails_Updateds { get; set; }

    public virtual DbSet<vwOLAP_PurportedUnitDetail> vwOLAP_PurportedUnitDetails { get; set; }

    public virtual DbSet<vwOLAP_QRAUTransferWaitList> vwOLAP_QRAUTransferWaitLists { get; set; }

    public virtual DbSet<vwOLAP_QRAUWaitList> vwOLAP_QRAUWaitLists { get; set; }

    public virtual DbSet<vwOLAP_QRAUWaitListAggProjSiteCount> vwOLAP_QRAUWaitListAggProjSiteCounts { get; set; }

    public virtual DbSet<vwOLAP_QREffectiveCommunication> vwOLAP_QREffectiveCommunications { get; set; }

    public virtual DbSet<vwOLAP_QRGrievanceLog> vwOLAP_QRGrievanceLogs { get; set; }

    public virtual DbSet<vwOLAP_QROccupancyUnit> vwOLAP_QROccupancyUnits { get; set; }

    public virtual DbSet<vwOLAP_QRReasonableAccommodation> vwOLAP_QRReasonableAccommodations { get; set; }

    public virtual DbSet<vwOLAP_QRUpcomingUnitVacancy> vwOLAP_QRUpcomingUnitVacancies { get; set; }

    public virtual DbSet<vwOLAP_QuarterlyReport> vwOLAP_QuarterlyReports { get; set; }

    public virtual DbSet<vwOLAP_QuarterlyReportMaster> vwOLAP_QuarterlyReportMasters { get; set; }

    public virtual DbSet<vwOLAP_StructureDetail> vwOLAP_StructureDetails { get; set; }

    public virtual DbSet<vwOLAP_TrainingDetail> vwOLAP_TrainingDetails { get; set; }

    public virtual DbSet<vwOLAP_UnitDetail> vwOLAP_UnitDetails { get; set; }

    public virtual DbSet<vwProjectAttributeLog> vwProjectAttributeLogs { get; set; }

    public virtual DbSet<vwProjectLog> vwProjectLogs { get; set; }

    public virtual DbSet<vwProjectSiteAttributeLog> vwProjectSiteAttributeLogs { get; set; }

    public virtual DbSet<vwProjectSiteLog> vwProjectSiteLogs { get; set; }

    public virtual DbSet<vwProjectSiteUnitActualCNT> vwProjectSiteUnitActualCNTs { get; set; }

    public virtual DbSet<vwProjectSiteUnitActualCNT1> vwProjectSiteUnitActualCNTs1 { get; set; }

    public virtual DbSet<vwProjectSiteUnitSummary> vwProjectSiteUnitSummaries { get; set; }

    public virtual DbSet<vwProjectSiteUnitSummary1> vwProjectSiteUnitSummaries1 { get; set; }

    public virtual DbSet<vwProjectSiteUnitSummaryAll> vwProjectSiteUnitSummaryAlls { get; set; }

    public virtual DbSet<vwPropertySearch> vwPropertySearches { get; set; }

    public virtual DbSet<vwSRSummary> vwSRSummaries { get; set; }

    public virtual DbSet<vwStructureAttributeLog> vwStructureAttributeLogs { get; set; }

    public virtual DbSet<vwStructureLog> vwStructureLogs { get; set; }

    public virtual DbSet<vwTrainingCertificate> vwTrainingCertificates { get; set; }

    public virtual DbSet<vwUnitAttributeLog> vwUnitAttributeLogs { get; set; }

    public virtual DbSet<vwUnitLog> vwUnitLogs { get; set; }

    public virtual DbSet<vwWaitListCloseDateNotification> vwWaitListCloseDateNotifications { get; set; }

    public virtual DbSet<vw_PCMSGroupMember> vw_PCMSGroupMembers { get; set; }

    public virtual DbSet<vw_propertyContactdetail> vw_propertyContactdetails { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=43devdb10;Initial Catalog=AAHRDev;Integrated Security=true;user id=appACHP;password=BDpwD7@cHP;TrustServerCertificate=true");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AI");

        modelBuilder.Entity<AKASiteAddressSnap>(entity =>
        {
            entity.HasKey(e => e.AKASiteAddressSnapID).HasName("PK__AKASiteA__0F886B10B62EC417");

            entity.ToTable("AKASiteAddressSnap", "Listing");

            entity.Property(e => e.AddressLine1).HasMaxLength(100);
            entity.Property(e => e.AddressLine2).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.PostDirCd).HasMaxLength(50);
            entity.Property(e => e.PreDirCd).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetName).HasMaxLength(100);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Zip).HasMaxLength(5);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.AKASiteAddressSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AKASiteAd__Proje__5B9D5239");
        });

        modelBuilder.Entity<APN>(entity =>
        {
            entity.ToTable("APN", "PnC");

            entity.Property(e => e.APN1)
                .HasMaxLength(40)
                .HasColumnName("APN");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasMany(d => d.SiteAddresses).WithMany(p => p.APNs)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnAPNSiteAddress",
                    r => r.HasOne<SiteAddress>().WithMany()
                        .HasForeignKey("SiteAddressID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnAPNSiteAddress_SiteAddress"),
                    l => l.HasOne<APN>().WithMany()
                        .HasForeignKey("APNID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnAPNSiteAddress_APN"),
                    j =>
                    {
                        j.HasKey("APNID", "SiteAddressID");
                        j.ToTable("AssnAPNSiteAddress", "PnC", tb => tb.HasTrigger("tr_Upd_AssnAPNSiteAddress"));
                    });
        });

        modelBuilder.Entity<APNPIN>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("APNPIN");

            entity.Property(e => e.APN).HasMaxLength(12);
            entity.Property(e => e.PIN).HasMaxLength(50);
        });

        modelBuilder.Entity<AUTransferWaitList>(entity =>
        {
            entity.ToTable("AUTransferWaitList", "AAHR");

            entity.Property(e => e.AUTWLNumber).HasMaxLength(20);
            entity.Property(e => e.AccessibilieWaitListDate).HasColumnType("datetime");
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDate).HasColumnType("datetime");
            entity.Property(e => e.TransferRequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.CurrentUnitProjectSite).WithMany(p => p.AUTransferWaitListCurrentUnitProjectSites)
                .HasForeignKey(d => d.CurrentUnitProjectSiteID)
                .HasConstraintName("FK_AUTransferWaitList_ProjectSite1");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.AUTransferWaitListCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotID)
                .HasConstraintName("FK_AUTransferWaitList_PropSnapshot");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.AUTransferWaitLists)
                .HasForeignKey(d => d.LutTotalBathroomID)
                .HasConstraintName("FK_AUTransferWaitList_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.AUTransferWaitLists)
                .HasForeignKey(d => d.LutTotalBedroomID)
                .HasConstraintName("FK_AUTransferWaitList_LutTotalBedrooms");

            entity.HasOne(d => d.LutTransferWaitListReason).WithMany(p => p.AUTransferWaitLists)
                .HasForeignKey(d => d.LutTransferWaitListReasonID)
                .HasConstraintName("FK_AUTransferWaitList_LutTransferWaitListReason");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.AUTransferWaitLists)
                .HasForeignKey(d => d.LutUnitTypeID)
                .HasConstraintName("FK_AUTransferWaitList_QRLutUnitType");

            entity.HasOne(d => d.MoveInProjectSite).WithMany(p => p.AUTransferWaitListMoveInProjectSites)
                .HasForeignKey(d => d.MoveInProjectSiteID)
                .HasConstraintName("FK_AUTransferWaitList_ProjectSite");

            entity.HasOne(d => d.MoveInUnitPropSnapShot).WithMany(p => p.AUTransferWaitListMoveInUnitPropSnapShots)
                .HasForeignKey(d => d.MoveInUnitPropSnapShotID)
                .HasConstraintName("FK_AUTransferWaitList_MoveInPropSnapshot");
        });

        modelBuilder.Entity<AUWaitList>(entity =>
        {
            entity.ToTable("AUWaitList", "AAHR", tb => tb.HasTrigger("trgAUWaitList"));

            entity.Property(e => e.AUWaitListNumber).HasMaxLength(50);
            entity.Property(e => e.AUWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.ApplicantMovedUnit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeclinedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeclinedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.NatureOfRARequests).IsUnicode(false);
            entity.Property(e => e.TenantAUTransferDate).HasColumnType("datetime");
            entity.Property(e => e.TenantMadeRADate).HasColumnType("datetime");
            entity.Property(e => e.WaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.HRMApplication).WithMany(p => p.AUWaitLists)
                .HasForeignKey(d => d.HRMApplicationID)
                .HasConstraintName("FK_AUWaitList_HRMApplication");

            entity.HasOne(d => d.LutApplicationType).WithMany(p => p.AUWaitLists)
                .HasForeignKey(d => d.LutApplicationTypeID)
                .HasConstraintName("FK_AUWaitList_LutApplicationType");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.AUWaitLists)
                .HasForeignKey(d => d.LutTotalBathroomID)
                .HasConstraintName("FK_AUWaitList_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.AUWaitLists)
                .HasForeignKey(d => d.LutTotalBedroomID)
                .HasConstraintName("FK_AUWaitList_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.AUWaitLists)
                .HasForeignKey(d => d.LutUnitTypeID)
                .HasConstraintName("FK_AUWaitList_QRLutUnitType");

            entity.HasOne(d => d.MoveInUnitProjectSite).WithMany(p => p.AUWaitLists)
                .HasForeignKey(d => d.MoveInUnitProjectSiteID)
                .HasConstraintName("FK_AUWaitList_ProjectSite");

            entity.HasOne(d => d.MoveInUnitPropSnapShot).WithMany(p => p.AUWaitListMoveInUnitPropSnapShots)
                .HasForeignKey(d => d.MoveInUnitPropSnapShotID)
                .HasConstraintName("FK_AUWaitList_MoveInPropSnapshot");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.AUWaitListProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .HasConstraintName("FK_AUWaitList_PropSnapshot");
        });

        modelBuilder.Entity<AcHPAPN>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AcHPAPN");

            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AcHPPropertyManagementPlan>(entity =>
        {
            entity.HasKey(e => e.PropertyManagementPlanID).HasName("PkPropertyManagementPlanSession");

            entity.ToTable("AcHPPropertyManagementPlan", "AAHR");

            entity.HasIndex(e => e.RowID, "UcPropertyManagementPlanSession_RowID").IsUnique();

            entity.Property(e => e.ACHPAffirmativeMarketingDate).HasColumnType("datetime");
            entity.Property(e => e.ACHPCertification)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ACHPCertificationDate).HasColumnType("datetime");
            entity.Property(e => e.ACHPMarketingDocumentsDueDate).HasColumnType("datetime");
            entity.Property(e => e.ACHPMarketingDocumentsReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.ACHPPreliminaryCertification)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ACHPPreliminaryCertificationDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.OMAffirmativeMarketingDate).HasColumnType("datetime");
            entity.Property(e => e.OMCertification)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.OMCertificationDate).HasColumnType("datetime");
            entity.Property(e => e.OMPreliminaryCertification)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OMPreliminaryCertificationDate).HasColumnType("datetime");
            entity.Property(e => e.OccupancyDate).HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Case).WithMany(p => p.AcHPPropertyManagementPlans)
                .HasForeignKey(d => d.CaseID)
                .HasConstraintName("FkPropertyManagementPlan_Case");

            entity.HasOne(d => d.Project).WithMany(p => p.AcHPPropertyManagementPlans)
                .HasForeignKey(d => d.ProjectID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkPropertyManagementPlan_PncProject");
        });

        modelBuilder.Entity<AccessLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AccessLog", "IDM");

            entity.Property(e => e.AccessLogID).ValueGeneratedOnAdd();
            entity.Property(e => e.AppKey)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LastLogOn).HasColumnType("datetime");
            entity.Property(e => e.LogonData).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LogonStatus)
                .HasMaxLength(10)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<AccountDeactivation>(entity =>
        {
            entity.HasKey(e => e.AccountDeactivationId).HasName("PK_AAHR.AccountDeactivation");

            entity.ToTable("AccountDeactivation", "AAHR", tb => tb.HasTrigger("trg_AccountDeactivationLog"));

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateRequestedForDeactive).HasColumnType("datetime");
            entity.Property(e => e.DateRequestedForReactivate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<AccountDeactivationLog>(entity =>
        {
            entity.HasKey(e => e.AccountDeactivationLogId).HasName("PK_AAHR.AccountDeactivationLog");

            entity.ToTable("AccountDeactivationLog", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateRequestedForDeactive).HasColumnType("datetime");
            entity.Property(e => e.DateRequestedForReactivate).HasColumnType("datetime");
            entity.Property(e => e.LogCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<AdvanceSearchQuery>(entity =>
        {
            entity.HasKey(e => e.SearchQueryID);

            entity.ToTable("AdvanceSearchQuery", "IMS");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SearchQueryName).HasMaxLength(100);
        });

        modelBuilder.Entity<AffordableOnlyOwner>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AffordableOnlyOwner");

            entity.Property(e => e.ADU_LIST)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ADU LIST");
            entity.Property(e => e.APN_Status)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("APN Status");
            entity.Property(e => e.Adaptive_re_use)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Adaptive re-use");
            entity.Property(e => e.BIMS_Billing_Contact_City_State_Zip)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BIMS Billing Contact City State Zip");
            entity.Property(e => e.BIMS_Billing_Contact_Date).HasColumnName("BIMS Billing Contact Date");
            entity.Property(e => e.BIMS_Billing_Contact_Name)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BIMS Billing Contact Name");
            entity.Property(e => e.BIMS_Billing_Contact_Street_Address)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BIMS Billing Contact Street Address");
            entity.Property(e => e.Bill_To_City_State_Zip)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Bill To City State Zip");
            entity.Property(e => e.Bill_To_Last_Updated_On).HasColumnName("Bill To Last Updated On");
            entity.Property(e => e.Bill_To_Name)
                .HasMaxLength(125)
                .IsUnicode(false)
                .HasColumnName("Bill To Name");
            entity.Property(e => e.Bill_To_Street_Address)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Bill To Street Address");
            entity.Property(e => e.Billing_Address_Source)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Billing Address Source");
            entity.Property(e => e.Changes_Since_Previous_Job)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Changes Since Previous Job");
            entity.Property(e => e.Ellis_Units).HasColumnName("Ellis Units");
            entity.Property(e => e.Exemptions_Commercial_RSO).HasColumnName("Exemptions Commercial RSO");
            entity.Property(e => e.Exemptions_Commercial_SCEP).HasColumnName("Exemptions Commercial SCEP");
            entity.Property(e => e.Exemptions_Conditional_RSO).HasColumnName("Exemptions Conditional RSO");
            entity.Property(e => e.Exemptions_Conditional_SCEP).HasColumnName("Exemptions Conditional SCEP");
            entity.Property(e => e.Exemptions_Permanent_RSO).HasColumnName("Exemptions Permanent RSO");
            entity.Property(e => e.Exemptions_Permanent_SCEP).HasColumnName("Exemptions Permanent SCEP");
            entity.Property(e => e.Exemptions_Recognized_RSO).HasColumnName("Exemptions Recognized RSO");
            entity.Property(e => e.Exemptions_Recognized_SCEP).HasColumnName("Exemptions Recognized SCEP");
            entity.Property(e => e.Government_Ownership)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Government Ownership");
            entity.Property(e => e.Homeowner_Exemption).HasColumnName("Homeowner Exemption");
            entity.Property(e => e.Job_Date_And_Time)
                .HasColumnType("smalldatetime")
                .HasColumnName("Job Date And Time");
            entity.Property(e => e.LUPAMS_Owner_City_State_Zip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LUPAMS Owner City State Zip");
            entity.Property(e => e.LUPAMS_Owner_Name)
                .HasMaxLength(130)
                .IsUnicode(false)
                .HasColumnName("LUPAMS Owner Name");
            entity.Property(e => e.LUPAMS_Owner_Street_Address)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LUPAMS Owner Street Address");
            entity.Property(e => e.LUPAMS_Recording_Sale_Date).HasColumnName("LUPAMS Recording/Sale Date");
            entity.Property(e => e.Land_Use_Code_Best_Source)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Land Use Code Best Source");
            entity.Property(e => e.Land_Use_Code_Best_Value)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Land Use Code Best Value");
            entity.Property(e => e.Land_Use_Code_LAHD_Value)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Land Use Code LAHD Value");
            entity.Property(e => e.Land_Use_Code_LUPAMS_Value)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Land Use Code LUPAMS Value");
            entity.Property(e => e.Legal_Description)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Legal Description");
            entity.Property(e => e.LutSrcSysCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Owner_Name_Best)
                .HasMaxLength(130)
                .IsUnicode(false)
                .HasColumnName("Owner Name Best");
            entity.Property(e => e.Owner_Occupied)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("Owner Occupied");
            entity.Property(e => e.Property_City_State_Zip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Property City State Zip");
            entity.Property(e => e.Property_Description)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("Property Description");
            entity.Property(e => e.Property_Eligibility_Category_Curr_Year)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Property Eligibility Category Curr Year");
            entity.Property(e => e.Property_Eligibility_Category_Next_Year)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Property Eligibility Category Next Year");
            entity.Property(e => e.Property_Street_Address)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Property Street Address");
            entity.Property(e => e.RSO_Units_Eligible).HasColumnName("RSO Units Eligible");
            entity.Property(e => e.Residential_Hotel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Residential Hotel");
            entity.Property(e => e.SCEP_Units_Eligible).HasColumnName("SCEP Units Eligible");
            entity.Property(e => e.ServiceDate).HasColumnType("datetime");
            entity.Property(e => e.Truncated_Owner_Name)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("Truncated Owner Name");
            entity.Property(e => e.Units_Total_Best_Source)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Units Total Best Source");
            entity.Property(e => e.Units_Total_Best_Value).HasColumnName("Units Total Best Value");
            entity.Property(e => e.Units_Total_LAHD_Value).HasColumnName("Units Total LAHD Value");
            entity.Property(e => e.Units_Total_LUPAMS_Value).HasColumnName("Units Total LUPAMS Value");
            entity.Property(e => e.Vendor_Owner_City_State_Zip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vendor Owner City State Zip");
            entity.Property(e => e.Vendor_Owner_Name)
                .HasMaxLength(125)
                .IsUnicode(false)
                .HasColumnName("Vendor Owner Name");
            entity.Property(e => e.Vendor_Owner_Street_Address)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vendor Owner Street Address");
            entity.Property(e => e.Vendor_Record_Type)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vendor Record Type");
            entity.Property(e => e.Vendor_Recording_Date).HasColumnName("Vendor Recording Date");
            entity.Property(e => e.Vendor_Sale_Date).HasColumnName("Vendor Sale Date");
            entity.Property(e => e.Year_Built_Best_Source)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Year Built Best Source");
            entity.Property(e => e.Year_Built_Best_Value).HasColumnName("Year Built Best Value");
            entity.Property(e => e.Year_Built_LAHD_Value).HasColumnName("Year Built LAHD Value");
            entity.Property(e => e.Year_Built_LUPAMS_Value).HasColumnName("Year Built LUPAMS Value");
            entity.Property(e => e.eStatement)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppConfig>(entity =>
        {
            entity.ToTable("AppConfig", "CC");

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasOne(d => d.Application).WithMany(p => p.AppConfigs)
                .HasForeignKey(d => d.ApplicationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AppConfig_ApplicationMaster");
        });

        modelBuilder.Entity<ApplicationMaster>(entity =>
        {
            entity.ToTable("ApplicationMaster", "CC", tb => tb.HasComment("This table holds information about various application that intends to use Common Controls."));

            entity.HasIndex(e => e.Name, "IX_ApplicationMasters_Name");

            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasMany(d => d.Applications).WithMany(p => p.ModuleApplicatinos)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnApplicationModule",
                    r => r.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnApplicationModule_ApplicationMaster_Parent"),
                    l => l.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ModuleApplicatinoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnApplicationModule_ApplicationMaster_Module"),
                    j =>
                    {
                        j.HasKey("ApplicationId", "ModuleApplicatinoId");
                        j.ToTable("AssnApplicationModule", "CC");
                    });

            entity.HasMany(d => d.CaseTypes).WithMany(p => p.ApplicationMasters)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnCaseTypeApplication",
                    r => r.HasOne<CaseType>().WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCaseTypeApplication_CaseType"),
                    l => l.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ApplicationMasterId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCaseTypeApplication_ApplicationMaster"),
                    j =>
                    {
                        j.HasKey("ApplicationMasterId", "CaseTypeId");
                        j.ToTable("AssnCaseTypeApplication", "CMS");
                    });

            entity.HasMany(d => d.ModuleApplicatinos).WithMany(p => p.Applications)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnApplicationModule",
                    r => r.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ModuleApplicatinoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnApplicationModule_ApplicationMaster_Module"),
                    l => l.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnApplicationModule_ApplicationMaster_Parent"),
                    j =>
                    {
                        j.HasKey("ApplicationId", "ModuleApplicatinoId");
                        j.ToTable("AssnApplicationModule", "CC");
                    });
        });

        modelBuilder.Entity<AssnActionSchemaTemplate>(entity =>
        {
            entity.HasKey(e => new { e.ActionId, e.SchemaId, e.TemplateId });

            entity.ToTable("AssnActionSchemaTemplate", "CC");

            entity.HasOne(d => d.Action).WithMany(p => p.AssnActionSchemaTemplates)
                .HasForeignKey(d => d.ActionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnActionSchemaTemp_WA");

            entity.HasOne(d => d.Schema).WithMany(p => p.AssnActionSchemaTemplates)
                .HasForeignKey(d => d.SchemaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnActionSchemaTemp_NS");

            entity.HasOne(d => d.Template).WithMany(p => p.AssnActionSchemaTemplates)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnActionSchemaTempNT");
        });

        modelBuilder.Entity<AssnApplicationDeclineReason>(entity =>
        {
            entity.ToTable("AssnApplicationDeclineReason", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Text).HasMaxLength(1000);

            entity.HasOne(d => d.LutApplicationDeclineReason).WithMany(p => p.AssnApplicationDeclineReasons)
                .HasForeignKey(d => d.LutApplicationDeclineReasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnApplicationDeclineReason_LutApplicationDeclineReason");
        });

        modelBuilder.Entity<AssnBGCNonCoveredProperty>(entity =>
        {
            entity.HasKey(e => e.AssnBGCNonCoveredPropertyID).HasName("PK_AssnBGNonCoveredProperty");

            entity.ToTable("AssnBGCNonCoveredProperty", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");

            entity.HasOne(d => d.BackgroundCheck).WithMany(p => p.AssnBGCNonCoveredProperties)
                .HasForeignKey(d => d.BackgroundCheckID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnBGNonCoveredProperty_BackgroundCheck");

            entity.HasOne(d => d.NonCoveredProjectSite).WithMany(p => p.AssnBGCNonCoveredProperties)
                .HasForeignKey(d => d.NonCoveredProjectSiteID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnBGNonCoveredProperty_NonCoveredProjectSite");
        });

        modelBuilder.Entity<AssnBackgroundCheck>(entity =>
        {
            entity.ToTable("AssnBackgroundCheck", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");

            entity.HasOne(d => d.BackgroundCheck).WithMany(p => p.AssnBackgroundChecks)
                .HasForeignKey(d => d.BackgroundCheckID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnBackgroundCheck_BackgroundCheck");

            entity.HasOne(d => d.PropSnapShot).WithMany(p => p.AssnBackgroundChecks)
                .HasForeignKey(d => d.PropSnapShotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnBackgroundCheck_PropSnapshot");
        });

        modelBuilder.Entity<AssnBidScopeOfWork>(entity =>
        {
            entity.HasKey(e => e.AssnBidScopeOfWorkID).HasName("PK_ScopeOfWork");

            entity.ToTable("AssnBidScopeOfWork", "AAHPCC");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Location).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.BidPackage).WithMany(p => p.AssnBidScopeOfWorks)
                .HasForeignKey(d => d.BidPackageID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScopeOfWork_BidPackage");

            entity.HasOne(d => d.LutScopeItem).WithMany(p => p.AssnBidScopeOfWorks)
                .HasForeignKey(d => d.LutScopeItemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScopeOfWork_LutScopeOfWork");
        });

        modelBuilder.Entity<AssnCaseProjectSiteFolder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnCaseProjectSiteFolder", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FolderID).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Case).WithMany()
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnCaseProjectSiteFolder_Case");

            entity.HasOne(d => d.Project).WithMany()
                .HasForeignKey(d => d.ProjectID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnCaseProjectSiteFolder_Project");

            entity.HasOne(d => d.ProjectSite).WithMany()
                .HasForeignKey(d => d.ProjectSiteID)
                .HasConstraintName("FK_AssnCaseProjectSiteFolder_ProjectSite");
        });

        modelBuilder.Entity<AssnComment>(entity =>
        {
            entity.HasKey(e => new { e.CommentID, e.ReferenceID, e.ReferenceType });

            entity.ToTable("AssnComment", "CC");

            entity.Property(e => e.ReferenceID).HasMaxLength(64);
            entity.Property(e => e.ReferenceType).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Comment).WithMany(p => p.AssnComments)
                .HasForeignKey(d => d.CommentID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnComment_Comment");
        });

        modelBuilder.Entity<AssnContactContact>(entity =>
        {
            entity.ToTable("AssnContactContact", "PnC");

            entity.Property(e => e.AssociationType).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.PrimaryContact).WithMany(p => p.AssnContactContactPrimaryContacts)
                .HasForeignKey(d => d.PrimaryContactID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnContactContact_ContactIdentifier");

            entity.HasOne(d => d.SecondaryContact).WithMany(p => p.AssnContactContactSecondaryContacts)
                .HasForeignKey(d => d.SecondaryContactID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnContactContact_ContactIdentifier1");
        });

        modelBuilder.Entity<AssnCoursePrerequisiteCourse>(entity =>
        {
            entity.HasKey(e => e.AssnCourseCourseID).HasName("PkAssnCoursePrerequisiteCourse");

            entity.ToTable("AssnCoursePrerequisiteCourse", "TRN");

            entity.HasOne(d => d.Course).WithMany(p => p.AssnCoursePrerequisiteCourseCourses)
                .HasForeignKey(d => d.CourseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Course_Course");

            entity.HasOne(d => d.PrerequisiteCourse).WithMany(p => p.AssnCoursePrerequisiteCoursePrerequisiteCourses)
                .HasForeignKey(d => d.PrerequisiteCourseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrerequisiteCourse_Course");
        });

        modelBuilder.Entity<AssnCourseTrainer>(entity =>
        {
            entity.HasKey(e => e.AssnCourseTrainerID).HasName("PkAssnCourseTrainer");

            entity.ToTable("AssnCourseTrainer", "TRN", tb => tb.HasComment("Association table between Course and Trainer\r\nwho is eligible to provide training for the course"));

            entity.HasIndex(e => new { e.CourseID, e.TrainerID }, "UC_AssnCourseTrainer_CourseID_TrainerID").IsUnique();

            entity.HasIndex(e => e.RowID, "UcAssnCourseTrainer_RowID").IsUnique();

            entity.Property(e => e.AssnCourseTrainerID).HasComment("Primary Key Identity column for Associate table.");
            entity.Property(e => e.AccountID).HasComment("Obsolete field.  Initial design system will keep trainer under Account Profile table.");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasComment("Internal comment");
            entity.Property(e => e.CourseID).HasComment("FK of Course table");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Who created associate record");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("when was the associate record created")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasComment("1 = Deleted relationship between trainer and course.  Default = 0");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last person modified for the record");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last update date for the record")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique row ID in system");
            entity.Property(e => e.TrainerCourseBackground)
                .IsUnicode(false)
                .HasComment("Notes for about Trainer backgroup related the particular course");
            entity.Property(e => e.TrainerID).HasComment("FK for the Trainer table");

            entity.HasOne(d => d.Trainer).WithMany(p => p.AssnCourseTrainers)
                .HasForeignKey(d => d.TrainerID)
                .HasConstraintName("FK_AssnCourseTrainer_Trainer");
        });

        modelBuilder.Entity<AssnDocument>(entity =>
        {
            entity.HasKey(e => e.AssnDocumentID).HasName("PK_AssnDocument_1");

            entity.ToTable("AssnDocument", "DMS");

            entity.Property(e => e.AssociationType).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.ReferenceID).HasMaxLength(64);
            entity.Property(e => e.ReferenceType).HasMaxLength(20);

            entity.HasOne(d => d.Document).WithMany(p => p.AssnDocuments)
                .HasForeignKey(d => d.DocumentID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnDocument_Document");
        });

        modelBuilder.Entity<AssnDocumentSubCategoryStatus>(entity =>
        {
            entity.ToTable("AssnDocumentSubCategoryStatus", "AAHPCC");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);

            entity.HasOne(d => d.DocumentStatus).WithMany(p => p.AssnDocumentSubCategoryStatusDocumentStatuses)
                .HasForeignKey(d => d.DocumentStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnDocumentSubCategoryStatus_LutDocumentCategory1");

            entity.HasOne(d => d.SubCategory).WithMany(p => p.AssnDocumentSubCategoryStatusSubCategories)
                .HasForeignKey(d => d.SubCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnDocumentSubCategoryStatus_LutDocumentCategory");
        });

        modelBuilder.Entity<AssnFHACFiledDate>(entity =>
        {
            entity.ToTable("AssnFHACFiledDate", "AAHR");

            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");

            entity.HasOne(d => d.FairHousing).WithMany(p => p.AssnFHACFiledDates)
                .HasForeignKey(d => d.FairHousingID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFHACFiledDate_FairHousing");

            entity.HasOne(d => d.LutFHACFiledSource).WithMany(p => p.AssnFHACFiledDates)
                .HasForeignKey(d => d.LutFHACFiledSourceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFHACFiledDate_LutFHACFiledSource");
        });

        modelBuilder.Entity<AssnFairHousingCertifyTerm>(entity =>
        {
            entity.HasKey(e => e.AssnFairHousingCertifyTermsID);

            entity.ToTable("AssnFairHousingCertifyTerms", "AAHR");

            entity.HasOne(d => d.FairHousing).WithMany(p => p.AssnFairHousingCertifyTerms)
                .HasForeignKey(d => d.FairHousingID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFairHousingCertifyTerms_FairHousing");

            entity.HasOne(d => d.LutQRCertifyTerms).WithMany(p => p.AssnFairHousingCertifyTerms)
                .HasForeignKey(d => d.LutQRCertifyTermsID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFairHousingCertifyTerms_LutQRCertifyTerms");
        });

        modelBuilder.Entity<AssnGrievanceMilestonesDate>(entity =>
        {
            entity.HasKey(e => new { e.GrievanceID, e.LutGrievanceMilestonesID, e.MilestoneDate }).HasName("PK_GrievanceMilestonesDate");

            entity.ToTable("AssnGrievanceMilestonesDate", "GRV");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Grievance).WithMany(p => p.AssnGrievanceMilestonesDates)
                .HasForeignKey(d => d.GrievanceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnGrievMiles__Grievance");

            entity.HasOne(d => d.LutGrievanceMilestones).WithMany(p => p.AssnGrievanceMilestonesDates)
                .HasForeignKey(d => d.LutGrievanceMilestonesID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnGrievMiles__LutGrievMiles");
        });

        modelBuilder.Entity<AssnGrievanceTypeMultiSelectOption>(entity =>
        {
            entity.HasKey(e => new { e.GrievanceTypeID, e.LutMultiSelectOptionsID });

            entity.ToTable("AssnGrievanceTypeMultiSelectOptions", "GRT");

            entity.Property(e => e.MoreDetails).IsUnicode(false);

            entity.HasOne(d => d.GrievanceType).WithMany(p => p.AssnGrievanceTypeMultiSelectOptions)
                .HasForeignKey(d => d.GrievanceTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnGrievanceTypeMultiSelectOptions__GrievanceType");

            entity.HasOne(d => d.LutMultiSelectOptions).WithMany(p => p.AssnGrievanceTypeMultiSelectOptions)
                .HasForeignKey(d => d.LutMultiSelectOptionsID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnGrievanceTypeMultiSelectOptions__LutMultiSelectOptionsID");
        });

        modelBuilder.Entity<AssnGrievanceTypeQuestion>(entity =>
        {
            entity.HasKey(e => e.AssnGrievanceTypeQuestionId).HasName("PK__AssnGrie__96911A349586D136");

            entity.ToTable("AssnGrievanceTypeQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.GrievanceLog).WithMany(p => p.AssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.GrievanceLogId)
                .HasConstraintName("FK__AssnGriev__Griev__564E8D37");

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.AssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__AssnGriev__LutGr__546644C5");

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.AssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__AssnGriev__LutGr__555A68FE");
        });

        modelBuilder.Entity<AssnGrievanceTypeSubQuestion>(entity =>
        {
            entity.HasKey(e => e.AssnGrievanceTypeSubQuestionId).HasName("PK__AssnGrie__DF0ABDF6A0E4E5E8");

            entity.ToTable("AssnGrievanceTypeSubQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmployeOrTenantName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeOrTenantDescription)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeTitleOrUnitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.GrievanceLog).WithMany(p => p.AssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.GrievanceLogId)
                .HasConstraintName("FK__AssnGriev__Griev__5A1F1E1B");

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.AssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__AssnGriev__LutGr__5742B170");

            entity.HasOne(d => d.LutGrievanceSubQuestion).WithMany(p => p.AssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceSubQuestionId)
                .HasConstraintName("FK__AssnGriev__LutGr__5836D5A9");

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.AssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__AssnGriev__LutGr__592AF9E2");
        });

        modelBuilder.Entity<AssnHRMApplicationPropQuestion>(entity =>
        {
            entity.HasKey(e => e.AssnHRMApplicationPropQuestion1);

            entity.ToTable("AssnHRMApplicationPropQuestion", "AAHR");

            entity.Property(e => e.AssnHRMApplicationPropQuestion1).HasColumnName("AssnHRMApplicationPropQuestion");
            entity.Property(e => e.Answer).HasMaxLength(1000);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.HRMApplication).WithMany(p => p.AssnHRMApplicationPropQuestions)
                .HasForeignKey(d => d.HRMApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnHRMApplicationPropQuestion_HRMApplication");

            entity.HasOne(d => d.LutProjectSiteQuestion).WithMany(p => p.AssnHRMApplicationPropQuestions)
                .HasForeignKey(d => d.LutProjectSiteQuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnHRMApplicationPropQuestion_LutProjectSiteQuestion");
        });

        modelBuilder.Entity<AssnInspectionViolation>(entity =>
        {
            entity.HasKey(e => new { e.InspectionID, e.ViolationID });

            entity.ToTable("AssnInspectionViolation", "IMS");

            entity.Property(e => e.Operation).HasMaxLength(20);

            entity.HasOne(d => d.Inspection).WithMany(p => p.AssnInspectionViolations)
                .HasForeignKey(d => d.InspectionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnInspectionViolation_Inspection");

            entity.HasOne(d => d.Violation).WithMany(p => p.AssnInspectionViolations)
                .HasForeignKey(d => d.ViolationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnInspectionViolation_Violation1");
        });

        modelBuilder.Entity<AssnLocationCategoryLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnLocationCategoryLocation", "IMS");

            entity.HasOne(d => d.LutLocationCategory).WithMany()
                .HasForeignKey(d => d.LutLocationCategoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMS.AssnLocationViolationCategory_LutLocationViolationCategory");

            entity.HasOne(d => d.LutViolationLocation).WithMany()
                .HasForeignKey(d => d.LutViolationLocationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMS.AssnLocationViolationCategory_LutViolationLocation");
        });

        modelBuilder.Entity<AssnLutDistanceTypeSnap>(entity =>
        {
            entity.HasKey(e => e.AssnDistanceTypeSnapID).HasName("PK__AssnLutD__7F26C60D3C568A2B");

            entity.ToTable("AssnLutDistanceTypeSnap", "Listing");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.AssnLutDistanceTypeSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnLutDi__Proje__5E79BEE4");
        });

        modelBuilder.Entity<AssnOrganizationContact>(entity =>
        {
            entity.ToTable("AssnOrganizationContact", "PnC");

            entity.Property(e => e.AssociationType).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.AssnOrganizationContacts)
                .HasForeignKey(d => d.ContactIdentifierID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnOrganizationContact_ContactIdentifier");

            entity.HasOne(d => d.Organization).WithMany(p => p.AssnOrganizationContacts)
                .HasForeignKey(d => d.OrganizationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnOrganizationContact_Organization");
        });

        modelBuilder.Entity<AssnOutreachTargetAudience>(entity =>
        {
            entity.HasKey(e => e.AssnTargetAudienceID).HasName("PK_Table_1");

            entity.ToTable("AssnOutreachTargetAudience", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutTargetAudience).WithMany(p => p.AssnOutreachTargetAudiences)
                .HasForeignKey(d => d.LutTargetAudienceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnOutreachTargetAudience_LutTargetAudience");

            entity.HasOne(d => d.Outreach).WithMany(p => p.AssnOutreachTargetAudiences)
                .HasForeignKey(d => d.OutreachID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnOutreachTargetAudience_OutreachAndAffimativeMarketing");
        });

        modelBuilder.Entity<AssnPMPAgency>(entity =>
        {
            entity.ToTable("AssnPMPAgency", "AAHR");

            entity.HasOne(d => d.PMPAgency).WithMany(p => p.AssnPMPAgencies)
                .HasForeignKey(d => d.PMPAgencyID)
                .HasConstraintName("FK_AssnPMPAgency_PMPAgency");

            entity.HasOne(d => d.PMP).WithMany(p => p.AssnPMPAgencies)
                .HasForeignKey(d => d.PMPID)
                .HasConstraintName("FK_AssnPMPAgency_PMP");
        });

        modelBuilder.Entity<AssnPMPAgencySnap>(entity =>
        {
            entity.ToTable("AssnPMPAgencySnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPAgencySnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPAgencySnap_PMPSnap");
        });

        modelBuilder.Entity<AssnPMPLotteryApplnAvailMethod>(entity =>
        {
            entity.ToTable("AssnPMPLotteryApplnAvailMethod", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutLotteryApplnAvailMethod).WithMany(p => p.AssnPMPLotteryApplnAvailMethods)
                .HasForeignKey(d => d.LutLotteryApplnAvailMethodID)
                .HasConstraintName("FK_AssnPMPLotteryApplnAvailMethod_LutLotteryApplnAvailMethod");

            entity.HasOne(d => d.PMP).WithMany(p => p.AssnPMPLotteryApplnAvailMethods)
                .HasForeignKey(d => d.PMPID)
                .HasConstraintName("FK_AssnPMPLotteryApplnAvailMethod_PMP");
        });

        modelBuilder.Entity<AssnPMPLotteryApplnAvailMethodSnap>(entity =>
        {
            entity.ToTable("AssnPMPLotteryApplnAvailMethodSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutLotteryApplnAvailMethod).WithMany(p => p.AssnPMPLotteryApplnAvailMethodSnaps)
                .HasForeignKey(d => d.LutLotteryApplnAvailMethodID)
                .HasConstraintName("FK_AssnPMPLotteryApplnAvailMethodSnap_LutLotteryApplnAvailMethod");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPLotteryApplnAvailMethodSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .HasConstraintName("FK_AssnPMPLotteryApplnAvailMethodSnap_PMPSnap");
        });

        modelBuilder.Entity<AssnPMPLotterySubmitMethod>(entity =>
        {
            entity.ToTable("AssnPMPLotterySubmitMethod", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutLotterySubmitMethod).WithMany(p => p.AssnPMPLotterySubmitMethods)
                .HasForeignKey(d => d.LutLotterySubmitMethodID)
                .HasConstraintName("FK_AssnPMPLotterySubmitMethod_LutLotterySubmitMethod");

            entity.HasOne(d => d.PMP).WithMany(p => p.AssnPMPLotterySubmitMethods)
                .HasForeignKey(d => d.PMPID)
                .HasConstraintName("FK_AssnPMPLotterySubmitMethod_PMP");
        });

        modelBuilder.Entity<AssnPMPLotterySubmitMethodSnap>(entity =>
        {
            entity.ToTable("AssnPMPLotterySubmitMethodSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutLotterySubmitMethod).WithMany(p => p.AssnPMPLotterySubmitMethodSnaps)
                .HasForeignKey(d => d.LutLotterySubmitMethodID)
                .HasConstraintName("FK_AssnPMPLotterySubmitMethodSnap_LutLotterySubmitMethod");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPLotterySubmitMethodSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .HasConstraintName("FK_AssnPMPLotterySubmitMethodSnap_PMPSnap");
        });

        modelBuilder.Entity<AssnPMPOutreachTargetAudienceSnap>(entity =>
        {
            entity.HasKey(e => e.AssnPMPTargetAudienceSnapID).HasName("PK_AssnPMPTargetAudienceSnap");

            entity.ToTable("AssnPMPOutreachTargetAudienceSnap", "PMP");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutTargetAudience).WithMany(p => p.AssnPMPOutreachTargetAudienceSnaps)
                .HasForeignKey(d => d.LutTargetAudienceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPTargetAudienceSnap_LutTargetAudience");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPOutreachTargetAudienceSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPTargetAudienceSnap_PMPSnap");
        });

        modelBuilder.Entity<AssnPMPProjSiteAccessibleUnitFeatureSnap>(entity =>
        {
            entity.ToTable("AssnPMPProjSiteAccessibleUnitFeatureSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");

            entity.HasOne(d => d.LutAccessibleUnitFeature).WithMany(p => p.AssnPMPProjSiteAccessibleUnitFeatureSnaps)
                .HasForeignKey(d => d.LutAccessibleUnitFeatureID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjSiteAccessibleUnitFeatureSnap_LutAccessibleUnitFeature");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPProjSiteAccessibleUnitFeatureSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjSiteAccessibleUnitFeatureSnap_PMPSnap");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPMPProjSiteAccessibleUnitFeatureSnaps)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjSiteAccessibleUnitFeatureSnap_ProjectSiteAttribute");
        });

        modelBuilder.Entity<AssnPMPProjTypeSiteAttr>(entity =>
        {
            entity.ToTable("AssnPMPProjTypeSiteAttr", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutPMPProjType).WithMany(p => p.AssnPMPProjTypeSiteAttrs)
                .HasForeignKey(d => d.LutPMPProjTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttr_LutPMPProjType");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPMPProjTypeSiteAttrs)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttr_AssnPMPProjTypeSiteAttr");
        });

        modelBuilder.Entity<AssnPMPProjTypeSiteAttrSnap>(entity =>
        {
            entity.ToTable("AssnPMPProjTypeSiteAttrSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutPMPProjType).WithMany(p => p.AssnPMPProjTypeSiteAttrSnaps)
                .HasForeignKey(d => d.LutPMPProjTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttrSnap_LutPMPProjType");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPProjTypeSiteAttrSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttrSnap_PMPSnap");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPMPProjTypeSiteAttrSnaps)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttrSnap_ProjectSiteAttribute");
        });

        modelBuilder.Entity<AssnPMPScatteredSite>(entity =>
        {
            entity.ToTable("AssnPMPScatteredSite", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.PMP).WithMany(p => p.AssnPMPScatteredSites)
                .HasForeignKey(d => d.PMPID)
                .HasConstraintName("FK_AssnPMPScatteredSite_PMP");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.AssnPMPScatteredSites)
                .HasForeignKey(d => d.PropSnapshotID)
                .HasConstraintName("FK_AssnPMPScatteredSite_PropSnapshot");
        });

        modelBuilder.Entity<AssnPMPScatteredSiteSnap>(entity =>
        {
            entity.ToTable("AssnPMPScatteredSiteSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPScatteredSiteSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .HasConstraintName("FK_AssnPMPScatteredSiteSnap_PMPSnap");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.AssnPMPScatteredSiteSnaps)
                .HasForeignKey(d => d.PropSnapshotID)
                .HasConstraintName("FK_AssnPMPScatteredSiteSnap_PropSnapshot");
        });

        modelBuilder.Entity<AssnPMPSitesOutreach>(entity =>
        {
            entity.ToTable("AssnPMPSitesOutreach", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Outreach).WithMany(p => p.AssnPMPSitesOutreaches)
                .HasForeignKey(d => d.OutreachID)
                .HasConstraintName("FK_AssnPMPSitesOutreach_OutreachAndAffimativeMarketing");

            entity.HasOne(d => d.PMP).WithMany(p => p.AssnPMPSitesOutreaches)
                .HasForeignKey(d => d.PMPID)
                .HasConstraintName("FK_AssnPMPSitesOutreach_PMP");

            entity.HasOne(d => d.Propsnapshot).WithMany(p => p.AssnPMPSitesOutreaches)
                .HasForeignKey(d => d.PropsnapshotID)
                .HasConstraintName("FK_AssnPMPSitesOutreach_PropSnapshot");
        });

        modelBuilder.Entity<AssnPMPSitesOutreachSnap>(entity =>
        {
            entity.ToTable("AssnPMPSitesOutreachSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPSitesOutreachSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPSitesOutreachSnap_PMPSnap");

            entity.HasOne(d => d.Propsnapshot).WithMany(p => p.AssnPMPSitesOutreachSnaps)
                .HasForeignKey(d => d.PropsnapshotID)
                .HasConstraintName("FK_AssnPMPSitesOutreachSnap_PropSnapshot");
        });

        modelBuilder.Entity<AssnPMPUnitFeatureSnap>(entity =>
        {
            entity.HasKey(e => e.AssnPMPUnitFeatureSnapID).HasName("PK_AssnUnitFeatureSnap");

            entity.ToTable("AssnPMPUnitFeatureSnap", "PMP");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutFeature).WithMany(p => p.AssnPMPUnitFeatureSnaps)
                .HasForeignKey(d => d.LutFeatureID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPUnitFeatureSnap_LutFeature");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.AssnPMPUnitFeatureSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPUnitFeatureSnap_PMPSnap");
        });

        modelBuilder.Entity<AssnProblemCase>(entity =>
        {
            entity.ToTable("AssnProblemCase", "CMS");

            entity.Property(e => e.CommentCategory)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Case).WithMany(p => p.AssnProblemCases)
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnUserProblemCase_Case");
        });

        modelBuilder.Entity<AssnProjSiteAccessibleUnitFeature>(entity =>
        {
            entity.ToTable("AssnProjSiteAccessibleUnitFeature", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutAccessibleUnitFeature).WithMany(p => p.AssnProjSiteAccessibleUnitFeatures)
                .HasForeignKey(d => d.LutAccessibleUnitFeatureID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnProjSiteAccessibleUnitFeature_LutAccessibleUnitFeature");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnProjSiteAccessibleUnitFeatures)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnProjSiteAccessibleUnitFeature_ProjectSiteAttribute");
        });

        modelBuilder.Entity<AssnProjectSiteAPN>(entity =>
        {
            entity.HasKey(e => e.AssnProjectSiteAPNID).HasName("PK__AssnProj__ACA8E470D8D17F7D");

            entity.ToTable("AssnProjectSiteAPN", "PnC");

            entity.Property(e => e.APNNo)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssnProjectSiteFeatureSnap>(entity =>
        {
            entity.HasKey(e => e.AssnProjectSitefeatureSnapID).HasName("PK__AssnProj__9848F9163C28053E");

            entity.ToTable("AssnProjectSiteFeatureSnap", "Listing");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.AssnProjectSiteFeatureSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnProje__Proje__61562B8F");
        });

        modelBuilder.Entity<AssnProjectSiteQuestion>(entity =>
        {
            entity.HasKey(e => e.AssnProjectSiteQuestionID).HasName("PK_AssnListingQuestion");

            entity.ToTable("AssnProjectSiteQuestion", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutProjectSiteQuestion).WithMany(p => p.AssnProjectSiteQuestions)
                .HasForeignKey(d => d.LutProjectSiteQuestionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingQuestion_LutListingQuestion");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnProjectSiteQuestions)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingQuestion_Listing");
        });

        modelBuilder.Entity<AssnProjectSiteReference>(entity =>
        {
            entity.ToTable("AssnProjectSiteReference", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefNumber)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectSIte).WithMany(p => p.AssnProjectSiteReferences)
                .HasForeignKey(d => d.ProjectSIteID)
                .HasConstraintName("FK_AssnProjectSiteReference_ProjectSite");

            entity.HasOne(d => d.ReferenceTypeNavigation).WithMany(p => p.AssnProjectSiteReferences)
                .HasForeignKey(d => d.ReferenceType)
                .HasConstraintName("FK_AssnProjectSiteReference_LutReferenceType");
        });

        modelBuilder.Entity<AssnPropContact>(entity =>
        {
            entity.HasKey(e => e.AssnPropContactID).HasName("PK__AssnProp__762C52D97421C856");

            entity.ToTable("AssnPropContact", "PnC", tb => tb.HasTrigger("trg_AssnPropContactLog"));

            entity.HasIndex(e => new { e.ProjectSiteID, e.IsPrimaryAssnType }, "NCI_AssnPropContact");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierType).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.AssnPropContacts)
                .HasForeignKey(d => d.ContactIdentifierID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPropContact_ContactIdentifier");

            entity.HasOne(d => d.LutContactType).WithMany(p => p.AssnPropContacts)
                .HasForeignKey(d => d.LutContactTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPropContact_LutContactType");
        });

        modelBuilder.Entity<AssnPropContactLog>(entity =>
        {
            entity.HasKey(e => e.AssnPropContactLogID).HasName("PK__AssnProp__E01856C0ED590910");

            entity.ToTable("AssnPropContactLog", "AAHR");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierType).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<AssnPropUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnPropUser");

            entity.Property(e => e.AssociatedFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AssociatedTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AssociationType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IDMUser)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutPropDistrictID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReviewRequired)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssnPropertyAccountContactSnapShot>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnPropertyAccountContactSnapShot");

            entity.HasIndex(e => e.CaptureDate, "IDX_AssnPropertyAccountContactSnapShot_CaptureDate").IsDescending();

            entity.HasIndex(e => e.ProjectSiteID, "IDX_AssnPropertyAccountContactSnapShot_ProjectSiteID");

            entity.HasIndex(e => new { e.CaptureDate, e.ContactID }, "IX_AssnPropertyAccountContactSnapShot_CaptureDate_ContactID").IsDescending(true, false);

            entity.HasIndex(e => e.ContactID, "IX_AssnPropertyAccountContactSnapShot_ContactID");

            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LinkType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssnPropertyAccountContactSnapShot1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnPropertyAccountContactSnapShot", "DPT");

            entity.Property(e => e.Attribute).IsUnicode(false);
            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.LinkType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssnPropertyDistance>(entity =>
        {
            entity.HasKey(e => new { e.ProjectSiteAttributeID, e.LutDistanceTypeID, e.LutDistanceID }).HasName("PK_AssnListingDistance");

            entity.ToTable("AssnPropertyDistance", "AAHR");

            entity.HasOne(d => d.LutDistance).WithMany(p => p.AssnPropertyDistances)
                .HasForeignKey(d => d.LutDistanceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingDistance_LutDistance");

            entity.HasOne(d => d.LutDistanceType).WithMany(p => p.AssnPropertyDistances)
                .HasForeignKey(d => d.LutDistanceTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingDistance_LutDistanceType");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPropertyDistances)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingDistance_Listing");
        });

        modelBuilder.Entity<AssnPropertyDistrict>(entity =>
        {
            entity.HasKey(e => new { e.PropSnapshotID, e.LutPropertyDistrictID });

            entity.ToTable("AssnPropertyDistrict", "PnC");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.AssnPropertyDistricts)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPropertyDistrict_PropSnapshot");
        });

        modelBuilder.Entity<AssnPropertyFeature>(entity =>
        {
            entity.HasKey(e => e.AssnPropertyFeatureID).HasName("PK_AssnListingFeature");

            entity.ToTable("AssnPropertyFeature", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutFeature).WithMany(p => p.AssnPropertyFeatures)
                .HasForeignKey(d => d.LutFeatureID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingFeature_LutListingFeature");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPropertyFeatures)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingFeature_Listing");
        });

        modelBuilder.Entity<AssnPropertyUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnPropertyUser");

            entity.Property(e => e.AssociatedFrom)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AssociatedTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AssociationType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IDMUser)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssnPropertyUser1>(entity =>
        {
            entity.HasKey(e => new { e.PropertyIdentifierID, e.IDMUser });

            entity.ToTable("AssnPropertyUser", "PnC");

            entity.Property(e => e.IDMUser).HasMaxLength(150);
        });

        modelBuilder.Entity<AssnQRFHACFiledDate>(entity =>
        {
            entity.ToTable("AssnQRFHACFiledDate", "AAHR");

            entity.HasOne(d => d.LutFHACFiledSource).WithMany(p => p.AssnQRFHACFiledDates)
                .HasForeignKey(d => d.LutFHACFiledSourceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRFHACFiledDate_LutFHACFiledSource");

            entity.HasOne(d => d.QRFairHousing).WithMany(p => p.AssnQRFHACFiledDates)
                .HasForeignKey(d => d.QRFairHousingID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRFHACFiledDate_QRFairHousing");
        });

        modelBuilder.Entity<AssnQRFairHousingCertifyTerm>(entity =>
        {
            entity.HasKey(e => e.AssnQRFairHousingCertifyTermsID);

            entity.ToTable("AssnQRFairHousingCertifyTerms", "AAHR");

            entity.HasOne(d => d.LutQRCertifyTerms).WithMany(p => p.AssnQRFairHousingCertifyTerms)
                .HasForeignKey(d => d.LutQRCertifyTermsID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRFairHousingCertifyTerms_LutQRCertifyTerms");

            entity.HasOne(d => d.QRFairHousing).WithMany(p => p.AssnQRFairHousingCertifyTerms)
                .HasForeignKey(d => d.QRFairHousingID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRFairHousingCertifyTerms_QRFairHousing");
        });

        modelBuilder.Entity<AssnQRRentalSubsidy>(entity =>
        {
            entity.ToTable("AssnQRRentalSubsidy", "AAHR");

            entity.HasOne(d => d.LutRentalSubsidy).WithMany(p => p.AssnQRRentalSubsidies)
                .HasForeignKey(d => d.LutRentalSubsidyID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRRentalSubsidy_LutRentalSubsidy");

            entity.HasOne(d => d.QROccupancyUnit).WithMany(p => p.AssnQRRentalSubsidies)
                .HasForeignKey(d => d.QROccupancyUnitID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRRentalSubsidy_QROccupancyUnit");
        });

        modelBuilder.Entity<AssnRentalSubsidy>(entity =>
        {
            entity.ToTable("AssnRentalSubsidy", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<AssnRentalSubsidySnap>(entity =>
        {
            entity.HasKey(e => e.AssnRentalSubsidySnapID).HasName("PK__AssnRent__1F378C54A8677C5F");

            entity.ToTable("AssnRentalSubsidySnap", "Listing");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.UnitSnap).WithMany(p => p.AssnRentalSubsidySnaps)
                .HasForeignKey(d => d.UnitSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnRenta__UnitS__670F04E5");
        });

        modelBuilder.Entity<AssnSRCAPChecklistItemStatus>(entity =>
        {
            entity.ToTable("AssnSRCAPChecklistItemStatus", "CAP");

            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.ComplianceDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.LutCAPChecklistItem).WithMany(p => p.AssnSRCAPChecklistItemStatuses)
                .HasForeignKey(d => d.LutCAPChecklistItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnSRCAPChecklistItemStatus_LutCAPChecklistItem");

            entity.HasOne(d => d.LutCAPChecklistSubItem).WithMany(p => p.AssnSRCAPChecklistItemStatuses)
                .HasForeignKey(d => d.LutCAPChecklistSubItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnSRCAPChecklistItemStatus_LutCAPChecklistSubItem");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.AssnSRCAPChecklistItemStatuses)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnSRCAPChecklistItemStatus_ServiceRequest");
        });

        modelBuilder.Entity<AssnSRReviewReportItemStatus>(entity =>
        {
            entity.HasKey(e => e.AssnServiceRequestReviewReportID).HasName("PK_AssnServiceRequestReviewReport");

            entity.ToTable("AssnSRReviewReportItemStatus", "AAHPPC");

            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.LutReviewReportItem).WithMany(p => p.AssnSRReviewReportItemStatuses)
                .HasForeignKey(d => d.LutReviewReportItemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestReviewReport_LutReviewReportItem");

            entity.HasOne(d => d.LutReviewReportSubItem).WithMany(p => p.AssnSRReviewReportItemStatuses)
                .HasForeignKey(d => d.LutReviewReportSubItemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestReviewReport_LutReviewReportSubItem");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.AssnSRReviewReportItemStatuses)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestReviewReport_ServiceRequest");
        });

        modelBuilder.Entity<AssnScopeViolation>(entity =>
        {
            entity.HasKey(e => e.AssnScopeViolationID).HasName("PK_ViolationInformation");

            entity.ToTable("AssnScopeViolation", "AAHPCC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.AssnBidScopeOfWork).WithMany(p => p.AssnScopeViolations)
                .HasForeignKey(d => d.AssnBidScopeOfWorkID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnScopeViolation_AssnBidScopeOfWork");

            entity.HasOne(d => d.Violation).WithMany(p => p.AssnScopeViolations)
                .HasForeignKey(d => d.ViolationID)
                .HasConstraintName("FK_AssnScopeViolation_Violation");
        });

        modelBuilder.Entity<AssnServiceRequestPropSnapshot_temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnServiceRequestPropSnapshot_temp");
        });

        modelBuilder.Entity<AssnServiceRequestPropSnapshot_tempAfter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnServiceRequestPropSnapshot_tempAfter");
        });

        modelBuilder.Entity<AssnServiceRequestTypeViolation>(entity =>
        {
            entity.HasKey(e => new { e.LutServiceRequestTypeID, e.LutViolationCategoryID, e.LutViolationID });

            entity.ToTable("AssnServiceRequestTypeViolation", "IMS");

            entity.HasOne(d => d.LutServiceRequestType).WithMany(p => p.AssnServiceRequestTypeViolations)
                .HasForeignKey(d => d.LutServiceRequestTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestTypeViolation_LutServiceRequestType");

            entity.HasOne(d => d.LutViolationCategory).WithMany(p => p.AssnServiceRequestTypeViolations)
                .HasForeignKey(d => d.LutViolationCategoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestTypeViolation_LutViolationCategory");

            entity.HasOne(d => d.LutViolation).WithMany(p => p.AssnServiceRequestTypeViolations)
                .HasForeignKey(d => d.LutViolationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestTypeViolation_LutViolation");
        });

        modelBuilder.Entity<AssnTeamManagementUser>(entity =>
        {
            entity.HasKey(e => new { e.TeamManagementId, e.UserId });

            entity.ToTable("AssnTeamManagementUser", "AAHR");

            entity.HasOne(d => d.TeamManagement).WithMany(p => p.AssnTeamManagementUsers)
                .HasForeignKey(d => d.TeamManagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnTeamManagementUser_TeamManagement");
        });

        modelBuilder.Entity<AssnTeamManagementUser1>(entity =>
        {
            entity.HasKey(e => new { e.TeamManagementId, e.UserId });

            entity.ToTable("AssnTeamManagementUser", "CC");
        });

        modelBuilder.Entity<AssnTrainingRegistryProjectSite>(entity =>
        {
            entity.HasKey(e => e.AssnTrainingRegistryProjectSiteID).HasName("PK__AssnTrai__2F3DBC4082320C03");

            entity.ToTable("AssnTrainingRegistryProjectSite", "TRN");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.AssnTrainingRegistryProjectSites)
                .HasForeignKey(d => d.ProjectSiteID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnTrainingRegistryProjectSite_ProjectSite");

            entity.HasOne(d => d.TrainingRegistry).WithMany(p => p.AssnTrainingRegistryProjectSites)
                .HasForeignKey(d => d.TrainingRegistryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnTrainingRegistryProjectSite_TrainingRegistry");
        });

        modelBuilder.Entity<AssnUnitFeature>(entity =>
        {
            entity.HasKey(e => e.AssnUnitFeatureID).HasName("PK_AssnListingUnitFeature");

            entity.ToTable("AssnUnitFeature", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutFeature).WithMany(p => p.AssnUnitFeatures)
                .HasForeignKey(d => d.LutFeatureID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingUnitFeature_LutListingFeature");

            entity.HasOne(d => d.UnitAttribute).WithMany(p => p.AssnUnitFeatures)
                .HasForeignKey(d => d.UnitAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingUnitFeature_ListingUnit");
        });

        modelBuilder.Entity<AssnUnitFeatureSnap>(entity =>
        {
            entity.HasKey(e => e.AssnUnitFeatureSnapID).HasName("PK__AssnUnit__A449A97635EA5033");

            entity.ToTable("AssnUnitFeatureSnap", "Listing");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.UnitSnap).WithMany(p => p.AssnUnitFeatureSnaps)
                .HasForeignKey(d => d.UnitSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnUnitf__UnitS__69EB7190");
        });

        modelBuilder.Entity<AssnUserContractor>(entity =>
        {
            entity.HasKey(e => e.UserID).HasName("PK_AssnUserIDContractor");

            entity.ToTable("AssnUserContractor", "IMS");

            entity.Property(e => e.UserID).ValueGeneratedNever();
            entity.Property(e => e.AddressLine1).HasMaxLength(500);
            entity.Property(e => e.AddressLine2).HasMaxLength(500);
            entity.Property(e => e.ContractorName).HasMaxLength(100);
            entity.Property(e => e.DateAffectCert).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.License).HasMaxLength(50);
            entity.Property(e => e.PhoneNo).HasMaxLength(50);
        });

        modelBuilder.Entity<AssnUserFavouriteCase>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.CaseID });

            entity.ToTable("AssnUserFavouriteCase", "CMS");

            entity.Property(e => e.UserName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.AssnUserFavouriteCases)
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnUserFavouriteCase_Case");
        });

        modelBuilder.Entity<AssnUserPropertyFavouriteCase>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.PropSnapshotID });

            entity.ToTable("AssnUserPropertyFavouriteCase", "PnC");

            entity.Property(e => e.UserName).HasMaxLength(100);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.AssnUserPropertyFavouriteCases)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnUserPropertyFavouriteCase_PropSnapshot");
        });

        modelBuilder.Entity<AssnViolationProgram>(entity =>
        {
            entity.HasKey(e => new { e.LutViolationID, e.ApplicationGUID });

            entity.ToTable("AssnViolationProgram", "IMS");

            entity.HasOne(d => d.LutViolation).WithMany(p => p.AssnViolationPrograms)
                .HasForeignKey(d => d.LutViolationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnViolationProgram_LutViolation");
        });

        modelBuilder.Entity<AssnWalkInApplicationDeclineReason>(entity =>
        {
            entity.ToTable("AssnWalkInApplicationDeclineReason", "AAHR");

            entity.HasIndex(e => e.AUWaitListID, "IDX_AUWID");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Text).HasMaxLength(1000);

            entity.HasOne(d => d.AUWaitList).WithMany(p => p.AssnWalkInApplicationDeclineReasons)
                .HasForeignKey(d => d.AUWaitListID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnWalkInApplicationDeclineReason_AUWaitList");

            entity.HasOne(d => d.LutApplicationDeclineReason).WithMany(p => p.AssnWalkInApplicationDeclineReasons)
                .HasForeignKey(d => d.LutApplicationDeclineReasonID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnWalkInApplicationDeclineReason_LutApplicationDeclineReason");
        });

        modelBuilder.Entity<AuditVisitDetail>(entity =>
        {
            entity.ToTable("AuditVisitDetail", "AAHPPC", tb => tb.HasComment("Policy compliance schedule meeting location and type"));

            entity.Property(e => e.Comments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ContactHistoryID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LocationAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.VisitLocation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VisitType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.AuditVisitDetails)
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuditVisitDetail_Case");

            entity.HasOne(d => d.CaseLog).WithMany(p => p.AuditVisitDetails)
                .HasForeignKey(d => d.CaseLogID)
                .HasConstraintName("FK_AuditVisitDetail_CaseLog");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.AuditVisitDetails)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_AuditVisitDetail_ServiceRequest");
        });

        modelBuilder.Entity<AwardBidPackage>(entity =>
        {
            entity.ToTable("AwardBidPackage", "AAHPCC");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Comments)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContractorUsername)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAward).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectCommencementDate).HasColumnType("datetime");

            entity.HasOne(d => d.BidPackage).WithMany(p => p.AwardBidPackages)
                .HasForeignKey(d => d.BidPackageID)
                .HasConstraintName("FK_AwardBidPackage_BidPackage");
        });

        modelBuilder.Entity<BackgroundCheck>(entity =>
        {
            entity.ToTable("BackgroundCheck", "AAHR");

            entity.Property(e => e.BGCComment).HasMaxLength(500);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DeveloperPropMgmt).HasMaxLength(500);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RequestorName).HasMaxLength(50);

            entity.HasOne(d => d.LutFollowUpType).WithMany(p => p.BackgroundChecks)
                .HasForeignKey(d => d.LutFollowUpTypeID)
                .HasConstraintName("FK_BackgroundCheck_LutFollowUpType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.BackgroundChecks)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BackgroundCheck_ServiceRequest");
        });

        modelBuilder.Entity<BackgroundCheckReport>(entity =>
        {
            entity.ToTable("BackgroundCheckReport", "AAHR");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AdoptionNComplianceSelfCertification).HasMaxLength(100);
            entity.Property(e => e.AssignedAnalyst).HasMaxLength(100);
            entity.Property(e => e.AssignedAnalystEmail).HasMaxLength(100);
            entity.Property(e => e.AssignedAnalystFullName).HasMaxLength(100);
            entity.Property(e => e.AssistanceAnimalRefundLog).HasMaxLength(100);
            entity.Property(e => e.ConventionalUnitWaitingList).HasMaxLength(100);
            entity.Property(e => e.DeveloperPortfolio).HasMaxLength(500);
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsOccupied).HasMaxLength(50);
            entity.Property(e => e.LFHTAADACoordinator).HasMaxLength(100);
            entity.Property(e => e.LFHTAGrievanceCoordinator).HasMaxLength(100);
            entity.Property(e => e.LFHTAOwner).HasMaxLength(100);
            entity.Property(e => e.LFHTAPropertyManager).HasMaxLength(100);
            entity.Property(e => e.LFHTARegionalManager).HasMaxLength(100);
            entity.Property(e => e.LastQuarterlyReport).HasMaxLength(100);
            entity.Property(e => e.PolicyComplianceReviewDate).HasMaxLength(100);
            entity.Property(e => e.PostingRequirements).HasMaxLength(100);
            entity.Property(e => e.PropMgmtCompany).HasMaxLength(500);
            entity.Property(e => e.PropertyManagementPlan).HasMaxLength(100);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.RegistryPropertyListing).HasMaxLength(100);
            entity.Property(e => e.RevisedPoliciesDistribution).HasMaxLength(100);
            entity.Property(e => e.VCAReceipt).HasMaxLength(100);
            entity.Property(e => e.VCAUtilizationSurvey).HasMaxLength(100);

            entity.HasOne(d => d.BackgroundCheck).WithMany(p => p.BackgroundCheckReports)
                .HasForeignKey(d => d.BackgroundCheckID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BackgroundCheckReport_BackgroundCheck");
        });

        modelBuilder.Entity<BatchJob>(entity =>
        {
            entity.HasKey(e => e.BatchJobID).HasName("PkBatchJob");

            entity.ToTable("BatchJob", "AAHR");

            entity.HasIndex(e => e.RowID, "UcBatchJob_RowID").IsUnique();

            entity.Property(e => e.BatchNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComputedColumnSql("(right(concat('0000000000',CONVERT([varchar](10),[BatchJobID])),(10)))", false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.OutputName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.LutBatchStatus).WithMany(p => p.BatchJobs)
                .HasForeignKey(d => d.LutBatchStatusID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkBatchJob_LutBatchStatus");

            entity.HasOne(d => d.LutBatchType).WithMany(p => p.BatchJobs)
                .HasForeignKey(d => d.LutBatchTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkBatchJob_LutBatchType");
        });

        modelBuilder.Entity<BatchJobDetail>(entity =>
        {
            entity.HasKey(e => e.BatchJobDetailID).HasName("PkBatchJobDetail");

            entity.ToTable("BatchJobDetail", "AAHR", tb => tb.HasTrigger("trBatchJobDetailLog"));

            entity.HasIndex(e => e.RowID, "UcBatchJobDetail_RowID").IsUnique();

            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MailToAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.MailToEmail).IsUnicode(false);
            entity.Property(e => e.MailToFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MailToLastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.OutputName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyName1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyName2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyName3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue3)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.BatchJob).WithMany(p => p.BatchJobDetails)
                .HasForeignKey(d => d.BatchJobID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkBatchJobDetail_BatchJob");

            entity.HasOne(d => d.LutBatchStatus).WithMany(p => p.BatchJobDetails)
                .HasForeignKey(d => d.LutBatchStatusID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkBatchJobDetail_LutBatchStatus");

            entity.HasOne(d => d.NotificationLogs).WithMany(p => p.BatchJobDetails)
                .HasForeignKey(d => d.NotificationLogsID)
                .HasConstraintName("FkBatchJobDetail_NotificationLogs");

            entity.HasOne(d => d.NotificationTemplate).WithMany(p => p.BatchJobDetails)
                .HasForeignKey(d => d.NotificationTemplateID)
                .HasConstraintName("FkBatchJobDetail_NotificationTemplate");
        });

        modelBuilder.Entity<BatchJobDetailLog>(entity =>
        {
            entity.HasKey(e => e.BatchJobDetailLogID).HasName("PkBatchJobDetailLog");

            entity.ToTable("BatchJobDetailLog", "AAHR");

            entity.HasIndex(e => e.RowID, "UcBatchJobDetailLog_RowID").IsUnique();

            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LogApp)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValueSql("(app_name())");
            entity.Property(e => e.LogBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.LogHost)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.LogOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MailToAddress)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.MailToEmail).IsUnicode(false);
            entity.Property(e => e.MailToFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MailToLastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.OutputName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyName1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyName2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<BidPackage>(entity =>
        {
            entity.ToTable("BidPackage", "AAHPCC");

            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.ContactIdentifierID).HasComment("Contact associated with Site Service Request");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EstimatedBond).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EstimatedContractTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EstimatedPermit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Overhead).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RCSPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RCSUsername)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RetrofitScopeCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TypeOfBuildingConstruction)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.BidPackageServiceRequest).WithMany(p => p.BidPackageBidPackageServiceRequests)
                .HasForeignKey(d => d.BidPackageServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BidPackage_ServiceRequest");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.BidPackages)
                .HasForeignKey(d => d.ContactIdentifierID)
                .HasConstraintName("FK_BidPackage_ContactIdentifier");

            entity.HasOne(d => d.LutContractorType).WithMany(p => p.BidPackages)
                .HasForeignKey(d => d.LutContractorTypeID)
                .HasConstraintName("FK_BidPackage_LutContractorType");

            entity.HasOne(d => d.SiteCaseServiceRequest).WithMany(p => p.BidPackageSiteCaseServiceRequests)
                .HasForeignKey(d => d.SiteCaseServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BidPackage_ServiceRequest1");
        });

        modelBuilder.Entity<CAPDetail>(entity =>
        {
            entity.HasKey(e => e.CAPDetailsID);

            entity.ToTable("CAPDetails", "CAP");

            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.CAPClosureDate).HasColumnType("datetime");
            entity.Property(e => e.CAPCompliedDate).HasColumnType("datetime");
            entity.Property(e => e.CAPCurrentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CAPDueDate).HasColumnType("datetime");
            entity.Property(e => e.CAPIssueDate).HasColumnType("datetime");
            entity.Property(e => e.CAPReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.CAPSentDate).HasColumnType("datetime");
            entity.Property(e => e.CAPSummary).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IEPAnalyst)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OtherReason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Owner)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PM)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PolicyAnalyst)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReportDate).HasColumnType("datetime");

            entity.HasOne(d => d.LutCAPCloseReason).WithMany(p => p.CAPDetails)
                .HasForeignKey(d => d.LutCAPCloseReasonId)
                .HasConstraintName("FK_CAPDetails_LutCAPCloseReason");

            entity.HasOne(d => d.LutWithdrawReason).WithMany(p => p.CAPDetails)
                .HasForeignKey(d => d.LutWithdrawReasonId)
                .HasConstraintName("FK_CAPDetails_LutWithdrawReason");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.CAPDetails)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPDetails_ServiceRequest");
        });

        modelBuilder.Entity<CAPExtension>(entity =>
        {
            entity.ToTable("CAPExtension", "CAP");

            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CAPStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExtnEndDate).HasColumnType("datetime");
            entity.Property(e => e.ExtnStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrantDenyDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Reason).IsUnicode(false);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.CAPExtensions)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPExtension_ServiceRequest");
        });

        modelBuilder.Entity<CAPItemDetail>(entity =>
        {
            entity.HasKey(e => e.CAPItemDetailsID);

            entity.ToTable("CAPItemDetails", "CAP");

            entity.Property(e => e.CheckListStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ComplianceRequirement).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RequiredCorrectiveAction).IsUnicode(false);

            entity.HasOne(d => d.CAPDetails).WithMany(p => p.CAPItemDetails)
                .HasForeignKey(d => d.CAPDetailsID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPItemDetails_CAPDetails");

            entity.HasOne(d => d.LUTCAPLanguage).WithMany(p => p.CAPItemDetails)
                .HasForeignKey(d => d.LUTCAPLanguageID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPItemDetails_LUTCAPLanguage");
        });

        modelBuilder.Entity<CCDetail>(entity =>
        {
            entity.HasKey(e => e.CCDetailsID);

            entity.ToTable("CCDetails", "AAHPCC");

            entity.Property(e => e.CloseReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NacInspectionReason)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.CCDetails)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_CCDetails_ServiceRequest");
        });

        modelBuilder.Entity<CCRISdiagram>(entity =>
        {
            entity.HasKey(e => e.diagram_id).HasName("PK__CCRISdia__C2B05B616636CBAC");

            entity.Property(e => e.name).HasMaxLength(128);
        });

        modelBuilder.Entity<CannedNote>(entity =>
        {
            entity.HasKey(e => e.CannedNoteID).HasName("PK_LutCannedNote");

            entity.ToTable("CannedNote", "IMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Note).IsUnicode(false);

            entity.HasOne(d => d.LutViolation).WithMany(p => p.CannedNotes)
                .HasForeignKey(d => d.LutViolationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CannedNote_LutViolation");

            entity.HasOne(d => d.LutViolationLocation).WithMany(p => p.CannedNotes)
                .HasForeignKey(d => d.LutViolationLocationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CannedNote_LutViolationLocation");
        });

        modelBuilder.Entity<Case>(entity =>
        {
            entity.ToTable("Case", "CMS", tb => tb.HasComment("Table holds cases."));

            entity.HasIndex(e => e.AssigneeID, "IDX_AssigneeId");

            entity.HasIndex(e => e.CaseTypeID, "NI_Case");

            entity.HasIndex(e => e.Status, "idx_Status");

            entity.Property(e => e.CaseID).HasComment("Primary key of the table");
            entity.Property(e => e.AssigneeID)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("User ID from IDM.");
            entity.Property(e => e.AssigneeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("User ID from IDM.");
            entity.Property(e => e.AutoNextAction)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AutoRemainingDays).HasComputedColumnSql("([AutoMaxStatusDays]-datediff(day,[AutoStautsModifiedOn],getdate()))", false);
            entity.Property(e => e.AutoStautsModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.CaseTypeID).HasComment("Case Type Id");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("WorkLog Description");
            entity.Property(e => e.DueDays).HasComputedColumnSql("([MaxStatusDays]-datediff(day,[StatusModifiedOn],getdate()))", false);
            entity.Property(e => e.IsTask).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasComment("Status");
            entity.Property(e => e.Summary)
                .HasMaxLength(500)
                .HasComment("WorkLog Summary");

            entity.HasOne(d => d.CaseType).WithMany(p => p.Cases)
                .HasForeignKey(d => d.CaseTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Case_CaseType");

            entity.HasMany(d => d.Comments).WithMany(p => p.Cases)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnCaseComment",
                    r => r.HasOne<CaseComment>().WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCaseComment_CaseComment"),
                    l => l.HasOne<Case>().WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCaseComment_Case"),
                    j =>
                    {
                        j.HasKey("CaseId", "CommentId");
                        j.ToTable("AssnCaseComment", "CMS");
                    });
        });

        modelBuilder.Entity<CaseComment>(entity =>
        {
            entity.HasKey(e => e.CommentID);

            entity.ToTable("CaseComment", "CMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");

            entity.HasMany(d => d.CaseLogs).WithMany(p => p.Comments)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnCommentCaseLog",
                    r => r.HasOne<CaseLog>().WithMany()
                        .HasForeignKey("CaseLogID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCommentCaseLog_CaseLog"),
                    l => l.HasOne<CaseComment>().WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCommentCaseLog_CaseComment"),
                    j =>
                    {
                        j.HasKey("CommentID", "CaseLogID");
                        j.ToTable("AssnCommentCaseLog", "CMS");
                        j.IndexerProperty<int>("CaseLogID").HasComment("Primary key of the table");
                    });
        });

        modelBuilder.Entity<CaseLog>(entity =>
        {
            entity.ToTable("CaseLog", "CMS", tb =>
                {
                    tb.HasTrigger("trg_AutoLock");
                    tb.HasTrigger("trg_WorkFlowAction");
                });

            entity.Property(e => e.CaseLogID).HasComment("Primary key of the table");
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Action taken");
            entity.Property(e => e.CaseComment).HasComment("Comment by user");
            entity.Property(e => e.CaseID).HasComment("Case Id");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.FromState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Previous State");
            entity.Property(e => e.LastAssigneeID)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("Last Assignee Id");
            entity.Property(e => e.LastAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Last Assignee Id");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.NewAssigneeID)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("New Assignee Id");
            entity.Property(e => e.NewAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("New Assignee Id");
            entity.Property(e => e.ToState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("New State");
            entity.Property(e => e.WorkLog).HasComment("WorkLog Created By");

            entity.HasOne(d => d.Case).WithMany(p => p.CaseLogs)
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseLog_Case");
        });

        modelBuilder.Entity<CaseType>(entity =>
        {
            entity.ToTable("CaseType", "CMS");

            entity.HasIndex(e => e.Type, "IX_CaseType_Type");

            entity.Property(e => e.CaseTypeID).HasComment("Primary key of the table");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Description");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete flag");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .HasComment("Type");
            entity.Property(e => e.WfDefinitionID).HasComment("Work flow Definition");

            entity.HasOne(d => d.WfDefinition).WithMany(p => p.CaseTypes)
                .HasForeignKey(d => d.WfDefinitionID)
                .HasConstraintName("FK_CaseType_WF_Definition");
        });

        modelBuilder.Entity<CaseWatcher>(entity =>
        {
            entity.HasKey(e => new { e.CaseID, e.WatcherID }).HasName("PK_CaseAssignee");

            entity.ToTable("CaseWatcher", "CMS");

            entity.Property(e => e.CaseID).HasComment("Primary key of the table");
            entity.Property(e => e.WatcherID)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("User ID from IDM.");

            entity.HasOne(d => d.Case).WithMany(p => p.CaseWatchers)
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseWatcher_Case");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.CertificateID).HasName("PkCertificate");

            entity.ToTable("Certificate", "AAHR", tb => tb.HasComment("Keep policy certification issue and expiration information.  More certification will be add to this table when further development"));

            entity.HasIndex(e => e.RowID, "UcCertificate_RowID").IsUnique();

            entity.Property(e => e.CertificationNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.FirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Title).HasMaxLength(50);

            entity.HasOne(d => d.Case).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.CaseID)
                .HasConstraintName("FkCertificate_CaseID");

            entity.HasOne(d => d.LutCertificateType).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.LutCertificateTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkCertificate_LutCertificateType");

            entity.HasOne(d => d.Organization).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.OrganizationID)
                .HasConstraintName("FkCertificate_OrganizationID");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_Certificate_ServiceRequestID");
        });

        modelBuilder.Entity<CfgDocument>(entity =>
        {
            entity.ToTable("CfgDocument", "TMS", tb => tb.HasComment("TMS Document Config table"));

            entity.HasIndex(e => e.RowID, "UcCfgDocument_RowID").IsUnique();

            entity.Property(e => e.CfgDocumentID).HasComment("Primary Key Identity column for the CfgDocument table");
            entity.Property(e => e.CfgNextRunID).HasComment("Running number configuration");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("TMS Document Name");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
        });

        modelBuilder.Entity<CfgNextRun>(entity =>
        {
            entity.HasKey(e => e.CfgNextRunID).HasName("PkCfgNextRun");

            entity.ToTable("CfgNextRun", tb => tb.HasComment("Config table to control number generation in system."));

            entity.HasIndex(e => e.RowID, "UcCfgNextRun_RowID").IsUnique();

            entity.Property(e => e.CfgNextRunID).HasComment("Primary Key Identity column for the CfgNextRun table");
            entity.Property(e => e.ConcatString)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("formula for the generate result");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Description for this record");
            entity.Property(e => e.EndNum).HasComment("End range for the seq number end");
            entity.Property(e => e.LastNum).HasComment("last generate number the sequence");
            entity.Property(e => e.LastNumBeforeReset).HasComment("the number before resent the sequence");
            entity.Property(e => e.LastResetYYMMDD)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The date that the sequence reset");
            entity.Property(e => e.MatchSubString)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("formula use for computer logic");
            entity.Property(e => e.NumLen).HasComment("len for the number, use for put leading Zero");
            entity.Property(e => e.Prefix)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Generate Number prefix");
            entity.Property(e => e.PrefixSubString)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("use for program logic the length for the pass in paramater");
            entity.Property(e => e.ResetCycle)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ResetSeq)
                .HasDefaultValue(false)
                .HasComment("if reset sequence, what will be the starting number");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in system");
            entity.Property(e => e.SeqField)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SeqName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("The name of the sequence number set being use");
            entity.Property(e => e.SeqTable)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SeqType).HasComment("Type of how generate seq number");
            entity.Property(e => e.SeqUID)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.StartNum).HasComment("Start range for the seq number start");
            entity.Property(e => e.Suffix)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Generate Number suffix");
            entity.Property(e => e.TargetField)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.ToTable("Comment", "CC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Role).HasMaxLength(50);
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
        });

        modelBuilder.Entity<ContactIdentifier>(entity =>
        {
            entity.ToTable("ContactIdentifier", "PnC", tb =>
                {
                    tb.HasTrigger("trgContactNameChangeLog");
                    tb.HasTrigger("trg_ContactIdentifierLog");
                });

            entity.Property(e => e.BusinessLicense).HasMaxLength(100);
            entity.Property(e => e.CensoredName).HasMaxLength(150);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email2).HasMaxLength(200);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(401)
                .HasComputedColumnSql("(((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([UnitNo]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([State]+' ',''))+isnull([City]+' ',''))+[Zip])", false);
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IDMUserName).HasMaxLength(50);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseValidFrom).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidTo).HasColumnType("datetime");
            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneFax).HasMaxLength(50);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.Phone_Ext)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PictureMain).HasMaxLength(200);
            entity.Property(e => e.PictureThumbnail).HasMaxLength(200);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferredContactMethod).HasMaxLength(20);
            entity.Property(e => e.Salutation).HasMaxLength(20);
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
            entity.Property(e => e.apn).HasMaxLength(50);

            entity.HasOne(d => d.LutPhoneTypeCdNavigation).WithMany(p => p.ContactIdentifiers)
                .HasForeignKey(d => d.LutPhoneTypeCd)
                .HasConstraintName("FK_ContactIdentifier_LutPhoneType");

            entity.HasOne(d => d.PostDirCdNavigation).WithMany(p => p.ContactIdentifiers)
                .HasForeignKey(d => d.PostDirCd)
                .HasConstraintName("FK_ContactIdentifier_LutStreetSuffix");

            entity.HasOne(d => d.PreDirCdNavigation).WithMany(p => p.ContactIdentifiers)
                .HasForeignKey(d => d.PreDirCd)
                .HasConstraintName("FK_ContactIdentifier_LutStreetPrefix");
        });

        modelBuilder.Entity<ContactIdentifierLog>(entity =>
        {
            entity.ToTable("ContactIdentifierLog", "PnC");

            entity.Property(e => e.BusinessLicense).HasMaxLength(100);
            entity.Property(e => e.CensoredName).HasMaxLength(150);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email2).HasMaxLength(200);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IDMUserName).HasMaxLength(50);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseValidFrom).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidTo).HasColumnType("datetime");
            entity.Property(e => e.LogCreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneFax).HasMaxLength(50);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.Phone_Ext)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PictureMain).HasMaxLength(200);
            entity.Property(e => e.PictureThumbnail).HasMaxLength(200);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferredContactMethod).HasMaxLength(20);
            entity.Property(e => e.Salutation).HasMaxLength(20);
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
            entity.Property(e => e.apn).HasMaxLength(50);
        });

        modelBuilder.Entity<ContactNameChangeLog>(entity =>
        {
            entity.ToTable("ContactNameChangeLog", "PnC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.NewFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewLastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewMiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OldFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OldLastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OldMiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.ContactNameChangeLogs)
                .HasForeignKey(d => d.ContactIdentifierID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContactNameChangeLog_ContactIdentifier");
        });

        modelBuilder.Entity<ControlMaster>(entity =>
        {
            entity.ToTable("ControlMaster", "CC", tb => tb.HasComment("This table holds list of all the controls available in Common Control library. Any new control must be added to this table."));

            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Controller)
                .HasMaxLength(50)
                .HasComment("Name of MVC controller for this control. The name should match exactly as in code. This property will be used to call controller of this Control whereever needed.");
            entity.Property(e => e.Description).HasComment("Description of control");
            entity.Property(e => e.ManageAction)
                .HasMaxLength(50)
                .HasComment("Name of Action registered with controller which will return the top level manage/configuration view for this control.  The name should match exactly as in code.");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasComment("Name of control");
            entity.Property(e => e.NoConfigText)
                .HasMaxLength(500)
                .HasComment("Text message to be displayed if no display configuration is done.");
            entity.Property(e => e.RenderAction)
                .HasMaxLength(50)
                .HasComment("Name of Action registered with controller which will return the render view.  The name should match exactly as in code.");
        });

        modelBuilder.Entity<ControlViewMaster>(entity =>
        {
            entity.ToTable("ControlViewMaster", "CC", tb => tb.HasComment("This table holds information about different view configuration for all the controls. Every entry is an unique view which can be rendered on any tab."));

            entity.Property(e => e.Id).HasComment("Primary Key of the table.");
            entity.Property(e => e.Comments).HasMaxLength(500);
            entity.Property(e => e.ControlId).HasComment("Control ID connects to Control Master. ");
            entity.Property(e => e.DisplayName)
                .HasMaxLength(50)
                .HasComment("Name or title to be displayed during rendering of this control. If not specified, blank title will be displayed.");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasComment("This Name will be in sync with specific control's View Config Name. This is a redundnat field copied explicitly to make Tab & View Config assignment easy.");

            entity.HasOne(d => d.Control).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.ControlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ControlViewMaster_ControlMaster");

            entity.HasOne(d => d.CustomDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.CustomDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_C_D");

            entity.HasOne(d => d.LinkDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.LinkDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_Links_DC");

            entity.HasOne(d => d.NewsDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.NewsDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_News_DC");

            entity.HasOne(d => d.SPDetailDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.SPDetailDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_SPDV_DC");

            entity.HasOne(d => d.SPGridDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.SPGridDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_SPGV_DC");

            entity.HasOne(d => d.SPGroupDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.SPGroupDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_SPGroupView_DisplayConfig");

            entity.HasOne(d => d.SPMatrixDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.SPMatrixDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_SPMV_DC");

            entity.HasOne(d => d.WFLogDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.WFLogDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_WFLog_DC");

            entity.HasOne(d => d.WFNavigationDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.WFNavigationDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_WFN_DC");

            entity.HasOne(d => d.WSDetailDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.WSDetailDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_WSDetailView_DisplayConfig");

            entity.HasOne(d => d.WSGridViewDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.WSGridViewDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_WSGridView_DisplayConfig");
        });

        modelBuilder.Entity<CorrectionNote>(entity =>
        {
            entity.HasKey(e => e.CorrectionNotesID);

            entity.ToTable("CorrectionNotes", "AAHR");

            entity.Property(e => e.CorrectionNote1).HasColumnName("CorrectionNote");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Section)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.CorrectionNotes)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CorrectionNotes_PropSnapshot");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.CorrectionNotes)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_CorrectionNotes_ServiceRequest");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CourseID).HasName("PkCourse");

            entity.ToTable("Course", "TRN", tb => tb.HasComment("AcHP course for training"));

            entity.HasIndex(e => e.CourseCode, "UC_Course_CourseCode").IsUnique();

            entity.HasIndex(e => e.RowID, "UcCourse_RowID").IsUnique();

            entity.Property(e => e.CourseID).HasComment("Primary Key Identity column for the Course table");
            entity.Property(e => e.CourseCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("an unquie code for the course");
            entity.Property(e => e.CourseDetail)
                .IsUnicode(false)
                .HasComment("The detail about the course");
            entity.Property(e => e.CourseName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Course Name");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.EndActiveDate)
                .HasComment("the date retire the course")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.LutAudienceCD).HasComment("From inital design , do not use.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
            entity.Property(e => e.StartActiveDate)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Course start provide since")
                .HasColumnType("datetime");

            entity.HasOne(d => d.LutCourseType).WithMany(p => p.Courses)
                .HasForeignKey(d => d.LutCourseTypeID)
                .HasConstraintName("FK_Course_LutCourseType");
        });

        modelBuilder.Entity<Custom_DisplayConfig>(entity =>
        {
            entity.ToTable("Custom_DisplayConfig", "CC");

            entity.Property(e => e.Action).HasMaxLength(50);
            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Controller).HasMaxLength(50);
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.Parameters).HasMaxLength(500);
        });

        modelBuilder.Entity<DocTemplate>(entity =>
        {
            entity.HasKey(e => e.DocTemplateID).HasName("PkDocTemplate");

            entity.ToTable("DocTemplate", "TMS", tb => tb.HasComment("TMS document word Template table"));

            entity.HasIndex(e => e.RowID, "UcDocTemplate_RowID").IsUnique();

            entity.Property(e => e.DocTemplateID).HasComment("Primary Key Identity column for the DocTemplate table");
            entity.Property(e => e.CfgDocumentID).HasComment("Type of TMS document");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.EffectiveDate)
                .HasDefaultValueSql("(getdate())")
                .HasComment("form effective date")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpireDate)
                .HasComment("form expire date")
                .HasColumnType("datetime");
            entity.Property(e => e.FlgDeleted).HasComment("delete flag");
            entity.Property(e => e.FormTemplate)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Uploaded MS Word template");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.ToTable("Document", "DMS");

            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.FileSize).HasMaxLength(20);
            entity.Property(e => e.Link).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OtherDocumentType).HasMaxLength(200);
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);

            entity.HasOne(d => d.DocumentTemplate).WithMany(p => p.Documents)
                .HasForeignKey(d => d.DocumentTemplateID)
                .HasConstraintName("FK_Document_DocumentTemplate");
        });

        modelBuilder.Entity<DocumentEntity>(entity =>
        {
            entity.HasKey(e => e.DocumentEntityID).HasName("PkDocumentEntity");

            entity.ToTable("DocumentEntity", "TMS", tb => tb.HasComment("Generate document value (xml)"));

            entity.HasIndex(e => e.RowID, "UcDocumentEntity_RowID").IsUnique();

            entity.Property(e => e.DocumentEntityID).HasComment("Primary Key Identity column for the DocumentEntity table");
            entity.Property(e => e.CaseID).HasComment("CMS Case ID if workflow applied");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.DocTemplateID).HasComment("Template being use when generate the record");
            entity.Property(e => e.DocumentEntity1)
                .HasComment("add data for the docuemnt stored in xml")
                .HasColumnType("xml")
                .HasColumnName("DocumentEntity");
            entity.Property(e => e.DocumentNum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Document Number for the document");
            entity.Property(e => e.IsCurrent)
                .HasDefaultValue(true)
                .HasComment("1 = the latest version of document.  0 = old version");
            entity.Property(e => e.IsDeleted).HasComment("1 = the record mark as deleted");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");

            entity.HasOne(d => d.Case).WithMany(p => p.DocumentEntities)
                .HasForeignKey(d => d.CaseID)
                .HasConstraintName("FkDocumentEntity_Case");

            entity.HasOne(d => d.DocTemplate).WithMany(p => p.DocumentEntities)
                .HasForeignKey(d => d.DocTemplateID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkDocTemplate_DocumentEntity");
        });

        modelBuilder.Entity<DocumentTemplate>(entity =>
        {
            entity.ToTable("DocumentTemplate", "DMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.ExpireDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.TMSName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.LutTemplate).WithMany(p => p.DocumentTemplates)
                .HasForeignKey(d => d.LutTemplateID)
                .HasConstraintName("FK_DocumentTemplate_LutTemplate");
        });

        modelBuilder.Entity<DocumentsConfig>(entity =>
        {
            entity.ToTable("DocumentsConfig", "AAHR", tb => tb.HasComment("Documents config table"));

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DisplayName).IsUnicode(false);
            entity.Property(e => e.DivToRefresh).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsEditable).HasDefaultValue(true);
            entity.Property(e => e.IsObsolate).HasDefaultValue(false);
            entity.Property(e => e.IsUploadMultiple).HasDefaultValue(true);
            entity.Property(e => e.Name).IsUnicode(false);
        });

        modelBuilder.Entity<DrawRequest>(entity =>
        {
            entity.ToTable("DrawRequest", "AAHPCC");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.BidPackage).WithMany(p => p.DrawRequests)
                .HasForeignKey(d => d.BidPackageID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DrawRequest_BidPackage1");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.DrawRequests)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DrawRequest_ServiceRequest");

            entity.HasMany(d => d.AssnScopeViolations).WithMany(p => p.DrawRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnDrawRequestScopeViolation",
                    r => r.HasOne<AssnScopeViolation>().WithMany()
                        .HasForeignKey("AssnScopeViolationID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnDrawRequestAssnScopeViolation_AssnScopeViolation"),
                    l => l.HasOne<DrawRequest>().WithMany()
                        .HasForeignKey("DrawRequestID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnDrawRequestAssnScopeViolation_DrawRequest"),
                    j =>
                    {
                        j.HasKey("DrawRequestID", "AssnScopeViolationID");
                        j.ToTable("AssnDrawRequestScopeViolation", "AAHPCC");
                    });
        });

        modelBuilder.Entity<EffectiveCommunication>(entity =>
        {
            entity.HasKey(e => e.EffectiveCommunicationID).HasName("PK_EffectiveCommunication_1");

            entity.ToTable("EffectiveCommunication", "AAHR", tb => tb.HasTrigger("trgEffectiveCommunicationNumber"));

            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfWithdrawal).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.EffectiveCommunicationNumber).HasMaxLength(50);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate1).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate2).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate3).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate4).HasColumnType("datetime");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutDeterminationStatusID)
                .HasConstraintName("FK_EffectiveCommunication_LutDeterminationStatus");

            entity.HasOne(d => d.LutECRequestType).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutECRequestTypeID)
                .HasConstraintName("FK_EffectiveCommunication_LutECRequestType");

            entity.HasOne(d => d.LutECType).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutECTypeID)
                .HasConstraintName("FK_EffectiveCommunication_LutECType");

            entity.HasOne(d => d.LutLanguage).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutLanguageID)
                .HasConstraintName("FK_EffectiveCommunication_LutLanguage");

            entity.HasOne(d => d.LutLanguageTranslation).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutLanguageTranslationID)
                .HasConstraintName("FK_EffectiveCommunication_LutLanguageTranslation");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutUserTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EffectiveCommunication_LutUserType");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.UnitProjectSiteID)
                .HasConstraintName("FK_EffectiveCommunication_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_EffectiveCommunication_PropSnapshot");
        });

        modelBuilder.Entity<EmailLog>(entity =>
        {
            entity.ToTable("EmailLog", "AAHR");

            entity.Property(e => e.AdditionalPhoneNo).HasMaxLength(50);
            entity.Property(e => e.CallerType).HasMaxLength(500);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.EmailerName).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherMailType).HasMaxLength(500);
            entity.Property(e => e.PhoneNo).HasMaxLength(50);

            entity.HasOne(d => d.LutMailType).WithMany(p => p.EmailLogs)
                .HasForeignKey(d => d.LutMailTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailLog_LutMailType");

            entity.HasOne(d => d.LutOutcome).WithMany(p => p.EmailLogs)
                .HasForeignKey(d => d.LutOutcomeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailLog_LutOutcome");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.EmailLogs)
                .HasForeignKey(d => d.ProjectSiteID)
                .HasConstraintName("FK_EmailLog_ProjectSite");
        });

        modelBuilder.Entity<EmailNotification>(entity =>
        {
            entity.ToTable("EmailNotification", "CC");

            entity.Property(e => e.Action).HasMaxLength(1000);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsSendInstantly).HasDefaultValue(false);
            entity.Property(e => e.SentOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmailSyncLog>(entity =>
        {
            entity.ToTable("EmailSyncLog", "CC");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierType).HasMaxLength(50);
            entity.Property(e => e.MailType).HasMaxLength(100);
        });

        modelBuilder.Entity<EnforcementMilestone>(entity =>
        {
            entity.HasKey(e => e.EnforcementMilestoneID).HasName("PK__Enforcem__50879D9A3F5B3B88");

            entity.ToTable("EnforcementMilestones", "ENF");

            entity.Property(e => e.CommentsConcerningEnforcement).HasMaxLength(200);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DatePolicyCertificationRe_Issued).HasColumnName("DatePolicyCertificationRe-Issued");
            entity.Property(e => e.DeliveryConfirmationInformation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherCloseReason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RCAPCorrections)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ResponsibleCityStaff)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubsequentActions)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.EnforcementMilestones)
                .HasForeignKey(d => d.CaseID)
                .HasConstraintName("FK__EnfMilestone__Case");

            entity.HasOne(d => d.LutCloseReason).WithMany(p => p.EnforcementMilestones)
                .HasForeignKey(d => d.LutCloseReasonId)
                .HasConstraintName("FK_EnforcementMilestones_LutCloseReason");
        });

        modelBuilder.Entity<EnforcementOrderReviewDetail>(entity =>
        {
            entity.HasKey(e => e.EnforcementOrderReviewDetailID).HasName("PK__Enforcem__053004A6FEB54B6C");

            entity.ToTable("EnforcementOrderReviewDetail", "ENF");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrderToComplyObligation).IsUnicode(false);
            entity.Property(e => e.RecorderNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.LutTemplate).WithMany(p => p.EnforcementOrderReviewDetails)
                .HasForeignKey(d => d.LutTemplateID)
                .HasConstraintName("FK_EnforcementComplyOrderDetail_LutTemplate");

            entity.HasOne(d => d.LutWithdrawReason).WithMany(p => p.EnforcementOrderReviewDetails)
                .HasForeignKey(d => d.LutWithdrawReasonID)
                .HasConstraintName("FK__Enforceme__LutWi__5FC2E8D8");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.EnforcementOrderReviewDetails)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_EnforcementComplyOrderDetail_ServiceRequest");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.EventID).HasName("PK_Schedular");

            entity.ToTable("Event", "EMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EndOn).HasColumnType("datetime");
            entity.Property(e => e.EventLocation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ReferenceAPN)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceID)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StartOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Summary)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EventAssignee>(entity =>
        {
            entity.HasKey(e => new { e.EventID, e.AssigneeName });

            entity.ToTable("EventAssignee", "EMS");

            entity.Property(e => e.AssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Event).WithMany(p => p.EventAssignees)
                .HasForeignKey(d => d.EventID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventAssignee_Event1");
        });

        modelBuilder.Entity<EventAssigneeHistory>(entity =>
        {
            entity.HasKey(e => new { e.EventHistoryID, e.AssigneeName });

            entity.ToTable("EventAssigneeHistory", "EMS");

            entity.Property(e => e.AssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.EventHistory).WithMany(p => p.EventAssigneeHistories)
                .HasForeignKey(d => d.EventHistoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventAssigneeHistory_EventHistory");
        });

        modelBuilder.Entity<EventAttendee>(entity =>
        {
            entity.HasKey(e => new { e.EventID, e.AttendeeName }).HasName("PK_ScheduleAttendee");

            entity.ToTable("EventAttendee", "EMS");

            entity.Property(e => e.AttendeeName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Event).WithMany(p => p.EventAttendees)
                .HasForeignKey(d => d.EventID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventAttendee_Event");
        });

        modelBuilder.Entity<EventConfiguration>(entity =>
        {
            entity.ToTable("EventConfiguration", "EMS");

            entity.Property(e => e.ConfigType).HasMaxLength(200);
        });

        modelBuilder.Entity<EventHistory>(entity =>
        {
            entity.HasKey(e => e.EventHistoryID).HasName("PK_SchedularHistory");

            entity.ToTable("EventHistory", "EMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.EventEndOn).HasColumnType("datetime");
            entity.Property(e => e.EventStartOn).HasColumnType("datetime");
            entity.Property(e => e.EventStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Event).WithMany(p => p.EventHistories)
                .HasForeignKey(d => d.EventID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventHistory_Event");
        });

        modelBuilder.Entity<EventNote>(entity =>
        {
            entity.HasKey(e => e.EventNoteID).HasName("PK_ScheduleNote");

            entity.ToTable("EventNote", "EMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.NoteDescription).IsUnicode(false);

            entity.HasOne(d => d.Event).WithMany(p => p.EventNotes)
                .HasForeignKey(d => d.EventID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventNote_Event");
        });

        modelBuilder.Entity<EventReminder>(entity =>
        {
            entity.HasKey(e => e.EventReminderID).HasName("PK_ScheduleReminder");

            entity.ToTable("EventReminder", "EMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ReminderTime).HasColumnType("datetime");

            entity.HasOne(d => d.Event).WithMany(p => p.EventReminders)
                .HasForeignKey(d => d.EventID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventReminder_Event");

            entity.HasOne(d => d.LutEventReminderType).WithMany(p => p.EventReminders)
                .HasForeignKey(d => d.LutEventReminderTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventReminder_LutEventReminderType");
        });

        modelBuilder.Entity<ExistingRetrofitImportantDateMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ExistingRetrofitImportantDateMapping", "AAHPCC");
        });

        modelBuilder.Entity<Extension>(entity =>
        {
            entity.HasKey(e => e.ExtensionID).HasName("PK_Extension_1");

            entity.ToTable("Extension");

            entity.Property(e => e.ApprovedDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PreferredDay)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Inspection).WithMany(p => p.Extensions)
                .HasForeignKey(d => d.InspectionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Extension_Inspection");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Extensions)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Extension_ServiceRequest");
        });

        modelBuilder.Entity<FairHousing>(entity =>
        {
            entity.ToTable("FairHousing", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LegalOwnerName).HasMaxLength(300);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OwnerEmail).HasMaxLength(100);
            entity.Property(e => e.OwnerPhone).HasMaxLength(30);
            entity.Property(e => e.PMEmail).HasMaxLength(100);
            entity.Property(e => e.PMName).HasMaxLength(300);
            entity.Property(e => e.PMPhone).HasMaxLength(30);
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SignerName).HasMaxLength(300);

            entity.HasOne(d => d.LutSignatureTitle).WithMany(p => p.FairHousings)
                .HasForeignKey(d => d.LutSignatureTitleID)
                .HasConstraintName("FK_FairHousing_LutSignatureTitle");

            entity.HasOne(d => d.ProjectSitePropSnapShot).WithMany(p => p.FairHousings)
                .HasForeignKey(d => d.ProjectSitePropSnapShotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FairHousing_PropSnapshot");
        });

        modelBuilder.Entity<Field>(entity =>
        {
            entity.HasKey(e => e.FieldId).HasName("PK_DF_FieldMaster");

            entity.ToTable("Field", "DF");

            entity.Property(e => e.Calculation).IsUnicode(false);
            entity.Property(e => e.ConditionOnField).IsUnicode(false);
            entity.Property(e => e.ConditionalHideShowField).HasMaxLength(250);
            entity.Property(e => e.ConditionalHideShowOperator).HasMaxLength(100);
            entity.Property(e => e.ConditionalHideShowValue).HasMaxLength(100);
            entity.Property(e => e.ConditionalOperator)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConditionalValue).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DataTextField)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DataValueField)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.DependentOn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DependentSource)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FieldHtml).IsUnicode(false);
            entity.Property(e => e.FieldLabel)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FooterType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormSectionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HelpText).IsUnicode(false);
            entity.Property(e => e.InputDirection)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LookupColumn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LookupTable)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MappingColumn)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MappingTable)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MatchColumn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParentStyle).IsUnicode(false);
            entity.Property(e => e.Pattern)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PatternType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Placeholder)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RowId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ShowSessionValue).HasDefaultValue(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UniqueId).IsUnicode(false);

            entity.HasOne(d => d.Form).WithMany(p => p.Fields)
                .HasForeignKey(d => d.FormId)
                .HasConstraintName("FK_Field_Form");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentID)
                .HasConstraintName("FK_DF_Field_DF_Field");

            entity.HasOne(d => d.Reference).WithMany(p => p.InverseReference)
                .HasForeignKey(d => d.ReferenceID)
                .HasConstraintName("FK_DF_Field_DF_Field1");
        });

        modelBuilder.Entity<FloorPlanBathroomType>(entity =>
        {
            entity.HasKey(e => e.FloorPlanBathroomTypeID).HasName("PK__FloorPla__D1FE6BF6ADAC1FBD");

            entity.ToTable("FloorPlanBathroomType", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<FloorPlanType>(entity =>
        {
            entity.HasKey(e => e.FloorPlanTypeID).HasName("PK__FloorPla__30B449D2E44A4845");

            entity.ToTable("FloorPlanTypes", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Form>(entity =>
        {
            entity.HasKey(e => e.FormId).HasName("PK_DF_FormMaster");

            entity.ToTable("Form", "DF");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FormName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FormType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GetApiUrl)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostApiUrl)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PredefinedPostColumn).IsUnicode(false);
            entity.Property(e => e.RedirectPage)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RowId).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.ApplicationMaster).WithMany(p => p.Forms)
                .HasForeignKey(d => d.ApplicationMasterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Form_ApplicationMaster");

            entity.HasOne(d => d.LutRelatedEntity).WithMany(p => p.Forms)
                .HasForeignKey(d => d.LutRelatedEntityId)
                .HasConstraintName("FK_Form_LutRelatedEntity");

            entity.HasMany(d => d.CaseTypes).WithMany(p => p.Forms)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnFormCaseType",
                    r => r.HasOne<CaseType>().WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnFormTypeCaseType_CaseType"),
                    l => l.HasOne<Form>().WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnFormCaseType_Form"),
                    j =>
                    {
                        j.HasKey("FormId", "CaseTypeId").HasName("PK_AssnFormTypeCaseType");
                        j.ToTable("AssnFormCaseType", "DF");
                    });
        });

        modelBuilder.Entity<Grievance>(entity =>
        {
            entity.HasKey(e => e.GrievanceID).HasName("PkGrievance");

            entity.ToTable("Grievance", "GRV");

            entity.HasIndex(e => e.RowID, "UcGrievance_RowID").IsUnique();

            entity.Property(e => e.AcHPEmployeeName).HasMaxLength(200);
            entity.Property(e => e.AcHPEmployeeUserName).HasMaxLength(200);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateOfDetermination).HasColumnType("datetime");
            entity.Property(e => e.FiledDatesCACivilRightsDept).IsUnicode(false);
            entity.Property(e => e.FiledDatesCourt).IsUnicode(false);
            entity.Property(e => e.FiledDatesDeptOfFairEmplAndHousing).IsUnicode(false);
            entity.Property(e => e.FiledDatesFairHousingOrg).IsUnicode(false);
            entity.Property(e => e.FiledDatesHUD).IsUnicode(false);
            entity.Property(e => e.FiledDatesOther).IsUnicode(false);
            entity.Property(e => e.FiledDescOfOther).IsUnicode(false);
            entity.Property(e => e.FiledNameOfCourt).IsUnicode(false);
            entity.Property(e => e.FiledNameOfOrg).IsUnicode(false);
            entity.Property(e => e.GrievantAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressLutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressLutStateCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressLutStreetTypeCD)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAltLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GrievantAltPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantLanguage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantPreferredContactMethodOther)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantPrimaryLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GrievantPrimaryPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressLutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressLutStateCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressLutStreetTypeCD)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PreparerAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressLutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressLutStateCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressLutStreetTypeCD)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAltLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PreparerAltPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerPreferredContactMethodOther)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerPrimaryLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PreparerPrimaryPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerRelationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.RelatedGrievanceFiledDate).HasColumnType("datetime");
            entity.Property(e => e.RelatedGrievanceQRGrievanceLogID).IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.LutGrievanceDetermination).WithMany(p => p.Grievances)
                .HasForeignKey(d => d.LutGrievanceDeterminationID)
                .HasConstraintName("FK_Grievance_LutGrievanceDetermination");

            entity.HasOne(d => d.LutGrievanceReferralAgency).WithMany(p => p.GrievancesNavigation)
                .HasForeignKey(d => d.LutGrievanceReferralAgencyID)
                .HasConstraintName("FK_Grievance_LutGrievanceReferralAgency");

            entity.HasOne(d => d.LutGrievanceSource).WithMany(p => p.Grievances)
                .HasForeignKey(d => d.LutGrievanceSourceID)
                .HasConstraintName("FkGrievance_LutGrievanceSource");

            entity.HasMany(d => d.LutGrievanceReferralAgencies).WithMany(p => p.Grievances)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnGrievanceReferralAgency",
                    r => r.HasOne<LutGrievanceReferralAgency>().WithMany()
                        .HasForeignKey("LutGrievanceReferralAgencyID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnGrievanceReferralAgency_LutGrievanceReferralAgency"),
                    l => l.HasOne<Grievance>().WithMany()
                        .HasForeignKey("GrievanceID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnGrievanceReferralAgency_Grievance"),
                    j =>
                    {
                        j.HasKey("GrievanceID", "LutGrievanceReferralAgencyID").HasName("PK_GrievanceReferralAgency");
                        j.ToTable("AssnGrievanceReferralAgency", "GRV");
                    });
        });

        modelBuilder.Entity<GrievanceAppeal>(entity =>
        {
            entity.HasKey(e => e.GrievanceAppealID).HasName("PkGrievanceAppeal");

            entity.ToTable("GrievanceAppeal", "GRA");

            entity.HasIndex(e => e.RowID, "UcGrievanceAppeal_RowID").IsUnique();

            entity.Property(e => e.AcHPEmployeeName).HasMaxLength(200);
            entity.Property(e => e.AcHPEmployeeUserName).HasMaxLength(200);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GrievantAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressLutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressLutStateCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressLutStreetTypeCD)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAltLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GrievantAltPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantLanguage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantPreferredContactMethodOther)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantPrimaryLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GrievantPrimaryPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressLutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressLutStateCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressLutStreetTypeCD)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PreparerAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressLutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressLutStateCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressLutStreetTypeCD)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAltLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PreparerAltPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerPreferredContactMethodOther)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerPrimaryLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PreparerPrimaryPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerRelationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.LutGrievanceAppealSource).WithMany(p => p.GrievanceAppeals)
                .HasForeignKey(d => d.LutGrievanceAppealSourceID)
                .HasConstraintName("FkGrievanceAppeal_LutGrievanceAppealSource");

            entity.HasMany(d => d.LutGrievanceReferralAgencies).WithMany(p => p.GrievanceAppeals)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnGrievanceAppealReferralAgency",
                    r => r.HasOne<LutGrievanceReferralAgency>().WithMany()
                        .HasForeignKey("LutGrievanceReferralAgencyID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnGrievanceAppealReferralAgency_LutGrievanceReferralAgency"),
                    l => l.HasOne<GrievanceAppeal>().WithMany()
                        .HasForeignKey("GrievanceAppealID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnGrievanceAppealReferralAgency_GrievanceAppeal"),
                    j =>
                    {
                        j.HasKey("GrievanceAppealID", "LutGrievanceReferralAgencyID").HasName("PK_GrievanceAppealReferralAgency");
                        j.ToTable("AssnGrievanceAppealReferralAgency", "GRA");
                    });
        });

        modelBuilder.Entity<GrievanceLog>(entity =>
        {
            entity.ToTable("GrievanceLog", "AAHR", tb => tb.HasTrigger("trgGrievanceLogNumber"));

            entity.Property(e => e.AnticipatedDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicantAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DecisionPendingDate).HasColumnType("datetime");
            entity.Property(e => e.DecisionProvidedDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDetail).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationName).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationPhone).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationTitleOther).IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceDetail).IsUnicode(false);
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.ImplementationDelayReason).IsUnicode(false);
            entity.Property(e => e.ImplementationInformation).IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MeetingManagerName).IsUnicode(false);
            entity.Property(e => e.MeetingManagerTitle).IsUnicode(false);
            entity.Property(e => e.MeetingRequestDate).HasColumnType("datetime");
            entity.Property(e => e.MeetingScheduledDate).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PendingStatusDescription).IsUnicode(false);
            entity.Property(e => e.RecordsProvidedDate).HasColumnType("datetime");
            entity.Property(e => e.RecordsRequestDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalReason).IsUnicode(false);

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutDeterminationStatusID)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceDeterminationStatus");

            entity.HasOne(d => d.LutDevelopmentCategory).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutDevelopmentCategoryID)
                .HasConstraintName("FK_GrievanceLog_LutDevelopmentCategory");

            entity.HasOne(d => d.LutFinalDeterminationTitle).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutFinalDeterminationTitleID)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceDeterminationTitle");

            entity.HasOne(d => d.LutGrievanceStatus).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutGrievanceStatusID)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceStatus");

            entity.HasOne(d => d.LutGrievanceSubmitType).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutGrievanceSubmitTypeID)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceSubmitType");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutUserTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrievanceLog_LutUserType");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.GrievanceLogProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .HasConstraintName("FK_GrievanceLog_PropSnapshot");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.UnitProjectSiteID)
                .HasConstraintName("FK_GrievanceLog_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.GrievanceLogUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_GrievanceLog_TenantPropSnapshot");
        });

        modelBuilder.Entity<GrievanceLog1>(entity =>
        {
            entity.HasKey(e => e.GrievanceLogID).HasName("PkGrievanceLog");

            entity.ToTable("GrievanceLog", "GRV");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LogText).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Grievance).WithMany(p => p.GrievanceLog1s)
                .HasForeignKey(d => d.GrievanceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrievanceLog_Grievance");

            entity.HasOne(d => d.LutGrievanceLogType).WithMany(p => p.GrievanceLog1s)
                .HasForeignKey(d => d.LutGrievanceLogTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceLogTypeID");
        });

        modelBuilder.Entity<GrievanceType>(entity =>
        {
            entity.HasKey(e => e.GrievanceTypeID).HasName("PkGrievanceType");

            entity.ToTable("GrievanceType", "GRT");

            entity.HasIndex(e => e.RowID, "UcGrievanceType_RowID").IsUnique();

            entity.Property(e => e.AssistanceAnimalNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EffectiveCommNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.EffectiveCommQRID).IsUnicode(false);
            entity.Property(e => e.EffectiveCommRequestDate).HasColumnType("datetime");
            entity.Property(e => e.EvictionNoticeDate).HasColumnType("datetime");
            entity.Property(e => e.GrievantTypeOther).IsUnicode(false);
            entity.Property(e => e.HarasserAgentEmpDetails).IsUnicode(false);
            entity.Property(e => e.HarasserAgentEmpName).IsUnicode(false);
            entity.Property(e => e.HarasserAgentEmpTitle).IsUnicode(false);
            entity.Property(e => e.HarasserEmployeeDetails).IsUnicode(false);
            entity.Property(e => e.HarasserEmployeeName).IsUnicode(false);
            entity.Property(e => e.HarasserEmployeeTitle).IsUnicode(false);
            entity.Property(e => e.HarasserOtherDetails).IsUnicode(false);
            entity.Property(e => e.HarasserTenantDetails).IsUnicode(false);
            entity.Property(e => e.HarasserTenantName).IsUnicode(false);
            entity.Property(e => e.HarasserUnitNumber).IsUnicode(false);
            entity.Property(e => e.LanguageAccessDetails).IsUnicode(false);
            entity.Property(e => e.MaintenanceRelatedToDisabilityDetails).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NoiseTenantName).IsUnicode(false);
            entity.Property(e => e.NoiseUnitNumberOrCommonArea).IsUnicode(false);
            entity.Property(e => e.OtherBasisDetails).IsUnicode(false);
            entity.Property(e => e.PropertyDecisionDate).HasColumnType("datetime");
            entity.Property(e => e.PropertyFollowedProceduresDetails).IsUnicode(false);
            entity.Property(e => e.PropertyGrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.QRGrievanceLogDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonableAccmNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonableAccmOtherIssues).IsUnicode(false);
            entity.Property(e => e.ReasonableAccmQRID).IsUnicode(false);
            entity.Property(e => e.ReasonableAccmRequestDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonableModfNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonableModfOtherIssues).IsUnicode(false);
            entity.Property(e => e.ReasonableModfQRID).IsUnicode(false);
            entity.Property(e => e.ReasonableModfRequestDate).HasColumnType("datetime");
            entity.Property(e => e.RentalAppNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.RentalAppSubmitDate).HasColumnType("datetime");
            entity.Property(e => e.RetrofitRelocationDetails).IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.WaitingLstNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.WaitingLstRequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.Grievance).WithMany(p => p.GrievanceTypes)
                .HasForeignKey(d => d.GrievanceID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrievanceType_Grievance");

            entity.HasOne(d => d.LutGrievantType).WithMany(p => p.GrievanceTypes)
                .HasForeignKey(d => d.LutGrievantTypeID)
                .HasConstraintName("FK_GrievanceType_LutGrievantType");
        });

        modelBuilder.Entity<HRMApplication>(entity =>
        {
            entity.HasKey(e => e.HRMApplicationID).HasName("PkHRMApplication");

            entity.ToTable("HRMApplication", "AAHR", tb =>
                {
                    tb.HasTrigger("trgInsertAUWaitList");
                    tb.HasTrigger("trgUpdateAUWaitList");
                    tb.HasTrigger("trg_HRMApplicationLog");
                });

            entity.HasIndex(e => e.ApplicationNumber, "IX_HRMApplicationNumber").IsUnique();

            entity.Property(e => e.AUWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AltArea)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPhone)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPrefix)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltTrunk)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(401)
                .HasComputedColumnSql("(((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([UnitNo]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([State]+' ',''))+isnull([City]+' ',''))+[Zip])", false);
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IncomeHousehold).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferContactMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReasonableAccommodations).HasMaxLength(2000);
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.SubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnSubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WaitListDate).HasColumnType("datetime");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.HRMApplicationContactIdentifiers)
                .HasForeignKey(d => d.ContactIdentifierID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMApplication_ContactIdentifier");

            entity.HasOne(d => d.HAContactIndentifier).WithMany(p => p.HRMApplicationHAContactIndentifiers)
                .HasForeignKey(d => d.HAContactIndentifierId)
                .HasConstraintName("FK_HRMApplication_HAContactIdentifier");

            entity.HasOne(d => d.Listing).WithMany(p => p.HRMApplications)
                .HasForeignKey(d => d.ListingID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMApplication_Listing");

            entity.HasOne(d => d.ListingSnap).WithMany(p => p.HRMApplications)
                .HasForeignKey(d => d.ListingSnapId)
                .HasConstraintName("FK_HRMApplication_ListingSnap");

            entity.HasOne(d => d.LutContactType).WithMany(p => p.HRMApplications)
                .HasForeignKey(d => d.LutContactTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMApplication_LutContactType");

            entity.HasOne(d => d.LutTotalBathrooms).WithMany(p => p.HRMApplications)
                .HasForeignKey(d => d.LutTotalBathroomsID)
                .HasConstraintName("FK_HRMApplication_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedrooms).WithMany(p => p.HRMApplications)
                .HasForeignKey(d => d.LutTotalBedroomsID)
                .HasConstraintName("FK_HRMApplication_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.HRMApplications)
                .HasForeignKey(d => d.LutUnitTypeID)
                .HasConstraintName("FK_HRMApplication_LutUnitType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.HRMApplications)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMApplication_ServiceRequest");
        });

        modelBuilder.Entity<HRMApplicationAdditionalQuestion>(entity =>
        {
            entity.HasKey(e => e.HRMApplicationAddQuestionId);

            entity.ToTable("HRMApplicationAdditionalQuestions", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.HRMApplication).WithMany(p => p.HRMApplicationAdditionalQuestions)
                .HasForeignKey(d => d.HRMApplicationId)
                .HasConstraintName("FK_HRMApplicationAdditionalQuestions_HRMApplication");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.HRMApplicationAdditionalQuestions)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .HasConstraintName("FK_HRMApplicationAdditionalQuestions_ProjectSiteSnap");
        });

        modelBuilder.Entity<HRMApplicationLog>(entity =>
        {
            entity.ToTable("HRMApplicationLog", "AAHR");

            entity.Property(e => e.AUWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AltArea)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPhone)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPrefix)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltTrunk)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(300)
                .HasComputedColumnSql("((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([State]+' ',''))+isnull([City]+' ',''))+[Zip])", false);
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IncomeHousehold).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LogCreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferContactMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReasonableAccommodations).HasMaxLength(2000);
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.SubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnSubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WaitListDate).HasColumnType("datetime");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HotlineCount>(entity =>
        {
            entity.HasKey(e => e.HotlineCountID).HasName("PK__HotlineC__513AFD3E1294F1D0");

            entity.ToTable("HotlineCount", "AAHR");

            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImpersonatedUserActivityDetail>(entity =>
        {
            entity.HasKey(e => e.ImpersonatedUserActivityDetailsId).HasName("PK__Imperson__F5B1B59A2F3016BE");

            entity.ToTable("ImpersonatedUserActivityDetails", "IDM");

            entity.Property(e => e.Action).HasMaxLength(255);
            entity.Property(e => e.ActionName).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(255);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ImpersonatedUserName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(255);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProcedureName).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(255);
        });

        modelBuilder.Entity<ImpersonatedUserLoginDetail>(entity =>
        {
            entity.HasKey(e => e.ImpersonatedUserLoginDetailsId).HasName("PK__Imperson__13D9796790404B59");

            entity.ToTable("ImpersonatedUserLoginDetails", "IDM");

            entity.Property(e => e.CreatedBy).HasMaxLength(255);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ImpersonatedFromUserName).HasMaxLength(255);
            entity.Property(e => e.ImpersonatedUserLoginTime).HasColumnType("datetime");
            entity.Property(e => e.ImpersonatedUserLogoutTime).HasColumnType("datetime");
            entity.Property(e => e.ImpersonatedUserName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(255);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImportProject>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__ImportPr__3214EC2793114BCC");

            entity.ToTable("ImportProject");

            entity.Property(e => e.Attributes)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.CESType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupImport)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LutProjSourceCD)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .HasDefaultValue("ACHP");
            entity.Property(e => e.SourceRefID).HasDefaultValue(0);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.prefix)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ImportantDate>(entity =>
        {
            entity.ToTable("ImportantDate", "AAHPCC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutImportantDate).WithMany(p => p.ImportantDates)
                .HasForeignKey(d => d.LutImportantDateID)
                .HasConstraintName("FK_ImportantDate_LutImportantDate");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.ImportantDates)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_ImportantDate_ServiceRequest");
        });

        modelBuilder.Entity<Inspection>(entity =>
        {
            entity.ToTable("Inspection", "IMS", tb => tb.HasComment("Table holds Inspections."));

            entity.HasIndex(e => e.MainInspectionID, "IX_Inspection_MainInspectionID");

            entity.HasIndex(e => e.ServiceRequestID, "IX_Inspection_ServiceRequestID_PropSnapshotID");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedEndOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedStartOn).HasColumnType("datetime");
            entity.Property(e => e.InspectionResult).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);

            entity.HasOne(d => d.Location).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.LocationID)
                .HasConstraintName("FK_Inspection_Location");

            entity.HasOne(d => d.LutInspectionType).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.LutInspectionTypeID)
                .HasConstraintName("FK_Inspection_LutInspectionType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.PropSnapshotID)
                .HasConstraintName("FK_Inspection_PropSnapshot");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Inspection_BrushCase");
        });

        modelBuilder.Entity<InspectionDetail>(entity =>
        {
            entity.ToTable("InspectionDetail");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedEndOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedStartOn).HasColumnType("datetime");
            entity.Property(e => e.InspectionResult).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
        });

        modelBuilder.Entity<InspectionHistory>(entity =>
        {
            entity.ToTable("InspectionHistory", "IMS", tb => tb.HasComment("Table holds Inspection Request History."));

            entity.Property(e => e.CaseLogId).HasComment("Primary key of the table");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.InspectedEndOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedStartOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.ScheduledEndOn).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStartOn).HasColumnType("datetime");

            entity.HasOne(d => d.Inspection).WithMany(p => p.InspectionHistories)
                .HasForeignKey(d => d.InspectionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionHistory_Inspection");

            entity.HasOne(d => d.InspectionNavigation).WithMany(p => p.InspectionHistories)
                .HasForeignKey(d => d.InspectionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionRequestHistory_InspectionRequest");
        });

        modelBuilder.Entity<InspectionNotification>(entity =>
        {
            entity.ToTable("InspectionNotification", "IMS", tb => tb.HasComment("Table holds Inspection Notification."));

            entity.Property(e => e.AssignedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.InspectorUserName).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Inspection).WithMany(p => p.InspectionNotifications)
                .HasForeignKey(d => d.InspectionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionNotification_Inspection");

            entity.HasOne(d => d.InspectionNavigation).WithMany(p => p.InspectionNotifications)
                .HasForeignKey(d => d.InspectionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionNotification_InspectionRequest");
        });

        modelBuilder.Entity<InspectionScheduled>(entity =>
        {
            entity.HasKey(e => e.InspectionRequestID).HasName("PK_InspectionRequest");

            entity.ToTable("InspectionScheduled", "IMS", tb => tb.HasComment("Table holds Inspection Requests."));

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ScheduledEndOn).HasColumnType("datetime");
            entity.Property(e => e.ScheduledOn).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStartOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);

            entity.HasOne(d => d.Case).WithMany(p => p.InspectionScheduleds)
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionRequest_Case");

            entity.HasOne(d => d.LutInspectionType).WithMany(p => p.InspectionScheduleds)
                .HasForeignKey(d => d.LutInspectionTypeID)
                .HasConstraintName("FK_InspectionRequest_LutInspectionType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.InspectionScheduleds)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionRequest_ServiceRequest");
        });

        modelBuilder.Entity<LACountyServicePlanningArea>(entity =>
        {
            entity.ToTable("LACountyServicePlanningArea", "AAHR");

            entity.Property(e => e.Attribute).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GeoJsonCoordinates).IsUnicode(false);
            entity.Property(e => e.GeoJsonGeometryType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.SPAFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SPAName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServiceArea)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WKT).IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LAServiceArea2012>(entity =>
        {
            entity.HasKey(e => e.OBJECTID_1).HasName("PK__LAServic__E458E6E755D2F753");

            entity.ToTable("LAServiceArea2012");

            entity.Property(e => e.ABBV).HasMaxLength(5);
            entity.Property(e => e.LABEL).HasMaxLength(3);
            entity.Property(e => e.SPA_NAME).HasMaxLength(15);
            entity.Property(e => e.ShapeSTAre).HasColumnType("numeric(18, 15)");
            entity.Property(e => e.ShapeSTLen).HasColumnType("numeric(18, 15)");
        });

        modelBuilder.Entity<LUTCAPLanguage>(entity =>
        {
            entity.ToTable("LUTCAPLanguage", "CAP");

            entity.Property(e => e.ComplianceItemHeader).IsUnicode(false);
            entity.Property(e => e.ComplianceRequirement).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObselete).HasDefaultValue(false);
            entity.Property(e => e.LutCAPChecklistItemID).HasDefaultValue(1);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RequiredCorrectiveAction).IsUnicode(false);

            entity.HasOne(d => d.LutCAPChecklistItem).WithMany(p => p.LUTCAPLanguages)
                .HasForeignKey(d => d.LutCAPChecklistItemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LUTCAPLanguage_LutCAPChecklistItem");
        });

        modelBuilder.Entity<Level>(entity =>
        {
            entity.HasKey(e => e.LevelID).HasName("PK_Floor");

            entity.ToTable("Level", "PnC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Floor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FloorType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(1);

            entity.HasOne(d => d.Structure).WithMany(p => p.Levels)
                .HasForeignKey(d => d.StructureID)
                .HasConstraintName("FK_Level_Structure");
        });

        modelBuilder.Entity<Links_DisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DisplayConfiguration");

            entity.ToTable("Links_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.DisplayOption)
                .HasMaxLength(10)
                .HasComment("This filed is used to store how do you display active links.(Horizontal or Verticle)");
            entity.Property(e => e.ImageId).HasComment("This field is reference to Files table ImageID.");
            entity.Property(e => e.IsDisplayFavouriteLinks)
                .HasDefaultValue(false)
                .HasComment("This field is used to store if true then favorite links active. Links which is most clickable in this website.");
            entity.Property(e => e.IsDisplayIcon)
                .HasDefaultValue(false)
                .HasComment("This field is used to store display icon before link.");
            entity.Property(e => e.IsDisplaySameIcon)
                .HasDefaultValue(false)
                .HasComment("This field is used to store if true then icon type active. Use same or different icon for each link.");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.NoOfLinkToDisplay).HasComment("This field is used to store how many links you want to display.");

            entity.HasOne(d => d.Image).WithMany(p => p.Links_DisplayConfigs)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_Links_DisplayConfLImg");
        });

        modelBuilder.Entity<Links_Image>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Images");

            entity.ToTable("Links_Images", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.Height).HasComment("This field is used to store icon Image height.");
            entity.Property(e => e.ImageName)
                .HasMaxLength(50)
                .HasComment("This field is used to store icon Image name.");
            entity.Property(e => e.Width).HasComment("This field is used to store icon Image width.");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_Links_Images_Links_Images1");
        });

        modelBuilder.Entity<Links_LinkDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Links");

            entity.ToTable("Links_LinkDetails", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.Address).HasComment("This field is used to store Link address(Url).");
            entity.Property(e => e.ImageId).HasComment("This field is reference to Files table ImageID.");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasComment("This field is used for active or inactive the link.");
            entity.Property(e => e.IsLogEnabled)
                .HasDefaultValue(false)
                .HasComment("This field is used to store if true then keep logactivity of this link.");
            entity.Property(e => e.IsOpenNewWindow)
                .HasDefaultValue(true)
                .HasComment("This field is used to store if true then always open the link in new window.");
            entity.Property(e => e.IsTrackingEnabled)
                .HasDefaultValue(false)
                .HasComment("This field is used to store if true then track how many times hit the link.");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Parameter)
                .HasMaxLength(500)
                .HasComment("This field is used to store passed paramater string to Link Address.");
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .HasComment("This filed is used to store Link type (Url or Page).");
            entity.Property(e => e.ViewOrder).HasComment("This field is used to store number representing the position in the list for this link.");

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.Links_LinkDetails)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Links_LinkDetails_Links_DC");

            entity.HasOne(d => d.Image).WithMany(p => p.Links_LinkDetails)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_Links_LinkDetails_LI");
        });

        modelBuilder.Entity<Links_Log>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_LinkLog");

            entity.ToTable("Links_Log", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.ClickDate)
                .HasComment("This field is used to store date and time when user click the link.")
                .HasColumnType("datetime");
            entity.Property(e => e.LinkTrackingId).HasComment("This field is reference to LinkTracking table LinkTrackingID");
            entity.Property(e => e.UserId).HasComment("This field is used to store userID, who was click the link. ");

            entity.HasOne(d => d.LinkTracking).WithMany(p => p.Links_Logs)
                .HasForeignKey(d => d.LinkTrackingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Links_Log_Links_Tracking1");
        });

        modelBuilder.Entity<Links_Tracking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_LinkTracking");

            entity.ToTable("Links_Tracking", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.Clicks).HasComment("This field is used to store how many hits on this link.");
            entity.Property(e => e.LastClick)
                .HasComment("This field is used to store when this link hit at last time.")
                .HasColumnType("datetime");
            entity.Property(e => e.LinkDetailsId).HasComment("This field is reference to Links table LinkID.");

            entity.HasOne(d => d.LinkDetails).WithMany(p => p.Links_Trackings)
                .HasForeignKey(d => d.LinkDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Links_Tracking_Links_LD");
        });

        modelBuilder.Entity<Listing>(entity =>
        {
            entity.HasKey(e => e.ListingID).HasName("PK_Listing_1");

            entity.ToTable("Listing", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.ListingType).WithMany(p => p.Listings)
                .HasForeignKey(d => d.ListingTypeID)
                .HasConstraintName("FK_Listing_LutListingType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.Listings)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Listing_PropSnapshot");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Listings)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Listing_ServiceRequest1");
        });

        modelBuilder.Entity<ListingSnap>(entity =>
        {
            entity.HasKey(e => e.ListingSnapID).HasName("PK__ListingS__D89C159D8D0AFDFC");

            entity.ToTable("ListingSnap", "Listing");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.LocationID).HasName("PK_Room");

            entity.ToTable("Location", "PnC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Description)
                .HasMaxLength(7500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Label)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.APN).WithMany(p => p.Locations)
                .HasForeignKey(d => d.APNID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Location_APN");

            entity.HasOne(d => d.Level).WithMany(p => p.Locations)
                .HasForeignKey(d => d.LevelID)
                .HasConstraintName("FK_Location_Level");

            entity.HasOne(d => d.LutLocationType).WithMany(p => p.Locations)
                .HasForeignKey(d => d.LutLocationTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Location_LutLocationType");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.Locations)
                .HasForeignKey(d => d.ProjectSiteID)
                .HasConstraintName("FK_Location_ProjectSite");

            entity.HasOne(d => d.Structure).WithMany(p => p.Locations)
                .HasForeignKey(d => d.StructureID)
                .HasConstraintName("FK_Location_Structure");

            entity.HasOne(d => d.Unit).WithMany(p => p.Locations)
                .HasForeignKey(d => d.UnitID)
                .HasConstraintName("FK_Location_Unit");
        });

        modelBuilder.Entity<LookupMaster>(entity =>
        {
            entity.ToTable("LookupMaster", "CC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.SchemaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.Roles).WithMany(p => p.LookupMasters)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnLookupRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnLookupRole_RoleMaster"),
                    l => l.HasOne<LookupMaster>().WithMany()
                        .HasForeignKey("LookupMasterId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnLookupRole_LookupMaster"),
                    j =>
                    {
                        j.HasKey("LookupMasterId", "RoleId");
                        j.ToTable("AssnLookupRole", "CC");
                    });
        });

        modelBuilder.Entity<LutAHUPScore>(entity =>
        {
            entity.HasKey(e => e.LutAHUPScoreID).HasName("PK__LutAHUPS__D64FDF198B05ACC9");

            entity.ToTable("LutAHUPScore", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutAMI>(entity =>
        {
            entity.ToTable("LutAMI", "PnC");

            entity.Property(e => e.AMI)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutAccessibilityComplianceStatus>(entity =>
        {
            entity.ToTable("LutAccessibilityComplianceStatus", "AAHR");

            entity.Property(e => e.AccessibilityComplianceStatus)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutAccessibleUnitFeature>(entity =>
        {
            entity.ToTable("LutAccessibleUnitFeature", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SpecialNoteRequired).HasDefaultValue(false);
        });

        modelBuilder.Entity<LutAccountTypeCategory>(entity =>
        {
            entity.HasKey(e => e.LutAccountTypeCategoryID).HasName("PkLutAccountTypeCategoryID");

            entity.ToTable("LutAccountTypeCategory", "TRN", tb => tb.HasComment("Account type category"));

            entity.HasIndex(e => e.RowID, "UcLutAccountTypeCategory_RowID").IsUnique();

            entity.Property(e => e.LutAccountTypeCategoryID)
                .ValueGeneratedNever()
                .HasComment("Primary Key Identity column for the LutAccountTypeCategory table");
            entity.Property(e => e.Category)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("short description for the recrod");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("long description for the record");
            entity.Property(e => e.IsDeleted).HasComment("1 = record mark as deleted");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
        });

        modelBuilder.Entity<LutAltContactType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LutAltContactType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutAltContactTypeID).ValueGeneratedOnAdd();
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PreferContactType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutApplicableAccessibilityStandard>(entity =>
        {
            entity.HasKey(e => e.LutApplicableAccessibilityStandardId).HasName("PK__LutAppli__76866F9DC24B0E41");

            entity.ToTable("LutApplicableAccessibilityStandards", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutApplicationDeclineReason>(entity =>
        {
            entity.ToTable("LutApplicationDeclineReason", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeclineReason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutApplicationType>(entity =>
        {
            entity.ToTable("LutApplicationType", "AAHR");

            entity.Property(e => e.ApplicationType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutBatchStatus>(entity =>
        {
            entity.HasKey(e => e.LutBatchStatusID).HasName("PkLutBatchStatus");

            entity.ToTable("LutBatchStatus", "AAHR");

            entity.HasIndex(e => e.RowID, "UcLutBatchStatus_RowID").IsUnique();

            entity.Property(e => e.LutBatchStatusID).ValueGeneratedNever();
            entity.Property(e => e.BatchApp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BatchStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExternStateCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<LutBatchType>(entity =>
        {
            entity.ToTable("LutBatchType", "AAHR");

            entity.HasIndex(e => e.RowID, "UcLutBatchType_RowID").IsUnique();

            entity.Property(e => e.BatchType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<LutBathroomType>(entity =>
        {
            entity.HasKey(e => e.LutBathroomTypeID).HasName("PK__LutBathr__7F8886E18BBD5ECC");

            entity.ToTable("LutBathroomType", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(200);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutBathroomTypeOption>(entity =>
        {
            entity.HasKey(e => e.LutBathroomTypeOptionID).HasName("PK__LutBathr__DF6D11E6509FA306");

            entity.ToTable("LutBathroomTypeOption", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutBuildingType>(entity =>
        {
            entity.HasKey(e => e.LutBuildingTypeID).HasName("PK__LutBuild__7D70217C2B385E5E");

            entity.ToTable("LutBuildingType", "AAHPCC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutCAPChecklistItem>(entity =>
        {
            entity.ToTable("LutCAPChecklistItem", "CAP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObselete).HasDefaultValue(false);
            entity.Property(e => e.Item)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutCAPChecklistSubItem>(entity =>
        {
            entity.ToTable("LutCAPChecklistSubItem", "CAP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DMSSubCategory)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObselete).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SubItem).IsUnicode(false);

            entity.HasOne(d => d.LutCAPChecklistItem).WithMany(p => p.LutCAPChecklistSubItems)
                .HasForeignKey(d => d.LutCAPChecklistItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutCAPChecklistSubItem_LutCAPChecklistItem");
        });

        modelBuilder.Entity<LutCAPCloseReason>(entity =>
        {
            entity.HasKey(e => e.LutCAPCloseReasonId).HasName("PK__LutCAPCl__B364CE538A9612F4");

            entity.ToTable("LutCAPCloseReason", "CAP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutCESType>(entity =>
        {
            entity.ToTable("LutCESType", "PnC");

            entity.HasIndex(e => e.RowID, "UcLutCESType_RowID").IsUnique();

            entity.Property(e => e.CESType).HasMaxLength(500);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayText).HasMaxLength(500);
            entity.Property(e => e.DisplayTextPublic).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<LutCallType>(entity =>
        {
            entity.ToTable("LutCallType", "AAHR");

            entity.Property(e => e.CallType).HasMaxLength(100);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutCaseReferralType>(entity =>
        {
            entity.ToTable("LutCaseReferralType", "CMS");

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutCertificateType>(entity =>
        {
            entity.HasKey(e => e.LutCertificateTypeID).HasName("PkLutCertificateType");

            entity.ToTable("LutCertificateType", "AAHR", tb => tb.HasComment("Lookup table for the type of certification"));

            entity.HasIndex(e => e.RowID, "UcLutCertificateType_RowID").IsUnique();

            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.ComplianceType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<LutCloseReason>(entity =>
        {
            entity.HasKey(e => e.LutCloseReasonId).HasName("PK__LutClose__C3CC72758F773CFF");

            entity.ToTable("LutCloseReason", "ENF");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutComplianceStatus>(entity =>
        {
            entity.ToTable("LutComplianceStatus", "IMS");

            entity.Property(e => e.ComplianceStatus).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutConstructionType>(entity =>
        {
            entity.ToTable("LutConstructionType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolete).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutContactType>(entity =>
        {
            entity.ToTable("LutContactType", "PnC");

            entity.HasIndex(e => e.ContactType, "idx_ContactType");

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.LutContactTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutContractorType>(entity =>
        {
            entity.ToTable("LutContractorType", "AAHPCC");

            entity.Property(e => e.LutContractorTypeID).ValueGeneratedNever();
            entity.Property(e => e.ContractorType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolete).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutCourseType>(entity =>
        {
            entity.HasKey(e => e.LutCourseTypeId).HasName("PK_TRN.LutCourseType");

            entity.ToTable("LutCourseType", "TRN");

            entity.Property(e => e.LutCourseTypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<LutDeniedConsentUserType>(entity =>
        {
            entity.ToTable("LutDeniedConsentUserType", "IMS");

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutDepartment>(entity =>
        {
            entity.HasKey(e => e.LutDepartmentID).HasName("PK__LutDepar__38A7ED787641C970");

            entity.ToTable("LutDepartment", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDeterminationStatus>(entity =>
        {
            entity.ToTable("LutDeterminationStatus", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDevelopmentCategory>(entity =>
        {
            entity.ToTable("LutDevelopmentCategory", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DevelopmentCategory).HasMaxLength(100);
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDistance>(entity =>
        {
            entity.ToTable("LutDistance", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Distance)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDistanceType>(entity =>
        {
            entity.ToTable("LutDistanceType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DistanceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDocumentAttribute>(entity =>
        {
            entity.ToTable("LutDocumentAttribute", "DMS");

            entity.Property(e => e.AttributeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AttributeValue)
                .HasComment("Comma seperated possible value for the attribute")
                .HasColumnType("ntext");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDocumentCategory>(entity =>
        {
            entity.HasKey(e => e.LutDocumentCategoryID).HasName("PkLutDocumentCategory");

            entity.ToTable("LutDocumentCategory", "DMS", tb => tb.HasComment("document category use for DMS"));

            entity.HasIndex(e => e.RowID, "UcLutDocumentCategory_RowID").IsUnique();

            entity.Property(e => e.LutDocumentCategoryID).HasComment("Primary Key Identity column for the LutDocumentCategory table");
            entity.Property(e => e.AccessRole)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Main category for the document");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Description for the record");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("the main key used for this main and sub category");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
            entity.Property(e => e.SubCategory)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("sub-cateogorty for the document");
        });

        modelBuilder.Entity<LutDocumentTag>(entity =>
        {
            entity.ToTable("LutDocumentTag", "DMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentTag)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocumentTagCd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutEAPFeature>(entity =>
        {
            entity.ToTable("LutEAPFeature", "AAHR");

            entity.Property(e => e.CreatedBy).IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EAPFeature).IsUnicode(false);
            entity.Property(e => e.ModifiedBy).IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectType).IsUnicode(false);
            entity.Property(e => e.TableType).IsUnicode(false);
        });

        modelBuilder.Entity<LutECRequestType>(entity =>
        {
            entity.ToTable("LutECRequestType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ECRequestType).HasMaxLength(100);
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutECType>(entity =>
        {
            entity.ToTable("LutECType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ECType).HasMaxLength(1000);
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutECRequestType).WithMany(p => p.LutECTypes)
                .HasForeignKey(d => d.LutECRequestTypeID)
                .HasConstraintName("FK_LutECType_LutECRequestType");
        });

        modelBuilder.Entity<LutEventReminderType>(entity =>
        {
            entity.HasKey(e => e.LutEventReminderTypeID).HasName("PK_LutScheduleReminderType");

            entity.ToTable("LutEventReminderType", "EMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.EventReminderType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutExternalGroup>(entity =>
        {
            entity.HasKey(e => e.LutExternalGroupId).HasName("PK__tmp_ms_x__974B8F4914FD13B7");

            entity.ToTable("LutExternalGroups", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutFHACFiledSource>(entity =>
        {
            entity.ToTable("LutFHACFiledSource", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FHACFiledSource).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutFHAStandard>(entity =>
        {
            entity.HasKey(e => e.LutFHAStandardId).HasName("PK__LutFHASt__D23A82ABD3EB1DB0");

            entity.ToTable("LutFHAStandards", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutFHAType>(entity =>
        {
            entity.HasKey(e => e.LutFHATypeID).HasName("PK__LutFHATy__A28421956386C05F");

            entity.ToTable("LutFHAType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutFeature>(entity =>
        {
            entity.HasKey(e => e.LutFeatureID).HasName("PK_LutListingFeature");

            entity.ToTable("LutFeature", "AAHR");

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Feature)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FeatureArea)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutFixedFloatingUnit>(entity =>
        {
            entity.ToTable("LutFixedFloatingUnit", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutFollowUpType>(entity =>
        {
            entity.ToTable("LutFollowUpType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FollowUpType).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGMCheckList>(entity =>
        {
            entity.ToTable("LutGMCheckList", "IMS");

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Question).IsUnicode(false);
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutGrievanceDetermination>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceDeterminationID).HasName("PK__LutGriev__EEAE9B02F0E29547");

            entity.ToTable("LutGrievanceDetermination", "GRV");

            entity.Property(e => e.DeterminationStatus).IsUnicode(false);
        });

        modelBuilder.Entity<LutGrievanceDeterminationStatus>(entity =>
        {
            entity.ToTable("LutGrievanceDeterminationStatus", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceDeterminationTitle>(entity =>
        {
            entity.ToTable("LutGrievanceDeterminationTitle", "AAHR");

            entity.Property(e => e.OptionText).IsUnicode(false);
        });

        modelBuilder.Entity<LutGrievanceLogType>(entity =>
        {
            entity.ToTable("LutGrievanceLogType", "GRV");

            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
        });

        modelBuilder.Entity<LutGrievanceMilestone>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceMilestonesID).HasName("PK__LutGriev__EDC54478AD9D99A6");

            entity.ToTable("LutGrievanceMilestones", "GRV");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.MilestoneName).HasMaxLength(300);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceQuestion>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceQuestionId).HasName("PK__LutGriev__3CAF27A909824FE7");

            entity.ToTable("LutGrievanceQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldTypeValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Question)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Tooltip)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.LutGrievanceQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__LutGrieva__LutGr__1AA482DB");
        });

        modelBuilder.Entity<LutGrievanceReferralAgency>(entity =>
        {
            entity.ToTable("LutGrievanceReferralAgency", "GRV");

            entity.Property(e => e.AgencyName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceSource>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceSourceID).HasName("PkLutGrievanceSource");

            entity.ToTable("LutGrievanceSource", "GRV");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceStatus>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceStatusID).HasName("PK_LutGrivenaceStatus");

            entity.ToTable("LutGrievanceStatus", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GrievanceStatus).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceSubQuestion>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceSubQuestionId).HasName("PK__LutGriev__7A750576E0640679");

            entity.ToTable("LutGrievanceSubQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DependantFieldJson).IsUnicode(false);
            entity.Property(e => e.FieldType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SubQuestion)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubQuestionHeader)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.LutGrievanceSubQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__LutGrieva__LutGr__1E7513BF");
        });

        modelBuilder.Entity<LutGrievanceSubmitType>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceSubmitTypeID).HasName("PK_LutGrivenaceSubmitType");

            entity.ToTable("LutGrievanceSubmitType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GrievanceSubmitType).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceType>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceTypeId).HasName("PK__LutGriev__E473A3F4105D95A5");

            entity.ToTable("LutGrievanceType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.GrievanceType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievantType>(entity =>
        {
            entity.HasKey(e => e.LutGrievantTypeID).HasName("PK__LutGrievantType");

            entity.ToTable("LutGrievantType", "GRT");

            entity.Property(e => e.OptionText).IsUnicode(false);
        });

        modelBuilder.Entity<LutHUDFairHousingActDesignManual>(entity =>
        {
            entity.HasKey(e => e.LutHUDFairHousingActDesignManualId).HasName("PK__LutHUDFa__9B4968CA54A85B43");

            entity.ToTable("LutHUDFairHousingActDesignManual", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutHousingType>(entity =>
        {
            entity.ToTable("LutHousingType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HousingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutImportantDate>(entity =>
        {
            entity.ToTable("LutImportantDate", "AAHPCC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EventDisplayName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.EventName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Action).WithMany(p => p.LutImportantDates)
                .HasForeignKey(d => d.ActionID)
                .HasConstraintName("FK_LutImportantDate_WF_Action");

            entity.HasOne(d => d.CaseType).WithMany(p => p.LutImportantDates)
                .HasForeignKey(d => d.CaseTypeID)
                .HasConstraintName("FK_LutImportantDate_CaseType");
        });

        modelBuilder.Entity<LutInspectionStatus>(entity =>
        {
            entity.ToTable("LutInspectionStatus", "IMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.InspectionStatus).HasMaxLength(50);
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutInspectionType>(entity =>
        {
            entity.ToTable("LutInspectionType", "IMS", tb => tb.HasComment("Look up table for Inspection Type."));

            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LutLanguage>(entity =>
        {
            entity.HasKey(e => e.LutLanguageID).HasName("PK_Language");

            entity.ToTable("LutLanguage", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Language).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLanguageLine>(entity =>
        {
            entity.ToTable("LutLanguageLine", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LanguageLine).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLanguageTranslation>(entity =>
        {
            entity.HasKey(e => e.LutLanguageTranslationID).HasName("PK_LanguageTranslation");

            entity.ToTable("LutLanguageTranslation", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LanguageTranslation).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLeaseAddendumNotExecuteReason>(entity =>
        {
            entity.ToTable("LutLeaseAddendumNotExecuteReason", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LeaseAddendumNotExecuteReason).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLegalEntityType>(entity =>
        {
            entity.HasKey(e => e.LutLegalEntityTypeID).HasName("PK_LegalEntityType");

            entity.ToTable("LutLegalEntityType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.LegalEntityType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutListingType>(entity =>
        {
            entity.ToTable("LutListingType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ListingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLocationCategory>(entity =>
        {
            entity.HasKey(e => e.LutLocationCategoryID).HasName("PK_LutLocationViolationCategory");

            entity.ToTable("LutLocationCategory", "IMS");

            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutLocationType>(entity =>
        {
            entity.ToTable("LutLocationType", "PnC");

            entity.Property(e => e.LutLocationTypeID).ValueGeneratedNever();
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutLotteryApplnAvailMethod>(entity =>
        {
            entity.ToTable("LutLotteryApplnAvailMethod", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SpecialNoteRequired).HasDefaultValue(false);
        });

        modelBuilder.Entity<LutLotterySubmitMethod>(entity =>
        {
            entity.ToTable("LutLotterySubmitMethod", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SpecialNoteRequired).HasDefaultValue(false);
        });

        modelBuilder.Entity<LutMailType>(entity =>
        {
            entity.ToTable("LutMailType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MailType).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutMileageEntryType>(entity =>
        {
            entity.ToTable("LutMileageEntryType", "IMS");

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutMultiSelectOption>(entity =>
        {
            entity.HasKey(e => e.LutMultiSelectOptionsID).HasName("PK__LutMultiSelectOptions");

            entity.ToTable("LutMultiSelectOptions", "GRT");

            entity.Property(e => e.OptionText).IsUnicode(false);

            entity.HasOne(d => d.LutMultiSelectOptionsGroup).WithMany(p => p.LutMultiSelectOptions)
                .HasForeignKey(d => d.LutMultiSelectOptionsGroupID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LutMultiSelectOptions__LutMultiSelectOptionsGroupID");
        });

        modelBuilder.Entity<LutMultiSelectOptionsGroup>(entity =>
        {
            entity.HasKey(e => e.LutMultiSelectOptionsGroupID).HasName("PK__LutMultiSelectOptionsGroup");

            entity.ToTable("LutMultiSelectOptionsGroup", "GRT");

            entity.Property(e => e.OptionGroupName).IsUnicode(false);
        });

        modelBuilder.Entity<LutNACRecommendation>(entity =>
        {
            entity.ToTable("LutNACRecommendation", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutNeighborhood>(entity =>
        {
            entity.HasKey(e => e.NeighborhoodID).HasName("PK_Neighborhood");

            entity.ToTable("LutNeighborhood", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.GeoJsonCoordinates).IsUnicode(false);
            entity.Property(e => e.GeoJsonGeometryType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.WKT).IsUnicode(false);
        });

        modelBuilder.Entity<LutNeighborhoodCouncil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LutNeighborhoodCouncil", "AAHR");

            entity.Property(e => e.EmpowerlaUrl)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FolderPath)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GeometryType)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LayerYearDescription)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(2)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NeighborhoodCouncilName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.WKT).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.coordinates).UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<LutNoticeType>(entity =>
        {
            entity.ToTable("LutNoticeType", "IMS");

            entity.Property(e => e.Code).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<LutOccupancyReason>(entity =>
        {
            entity.ToTable("LutOccupancyReason", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OccupancyReason).HasMaxLength(50);
        });

        modelBuilder.Entity<LutOccupancyStatus>(entity =>
        {
            entity.HasKey(e => e.LutOccupancyStatusID).HasName("PK__LutOccup__A7FE2B2219469170");

            entity.ToTable("LutOccupancyStatus", "PnC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutOutOfScopeType>(entity =>
        {
            entity.ToTable("LutOutOfScopeType", "IMS");

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutOutcome>(entity =>
        {
            entity.ToTable("LutOutcome", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Outcome).HasMaxLength(100);
        });

        modelBuilder.Entity<LutOutreachType>(entity =>
        {
            entity.HasKey(e => e.LutOutreachTypeID).HasName("PK__LutOutre__D07441DA91EEDF76");

            entity.ToTable("LutOutreachType", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(200);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutPMPProjType>(entity =>
        {
            entity.ToTable("LutPMPProjType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.SpecialNoteRequired).HasDefaultValue(false);
        });

        modelBuilder.Entity<LutParkingType>(entity =>
        {
            entity.ToTable("LutParkingType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ParkingType)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutPhoneType>(entity =>
        {
            entity.HasKey(e => e.LutPhoneTypeCd);

            entity.ToTable("LutPhoneType", "AAHR");

            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutPhoneType1>(entity =>
        {
            entity.HasKey(e => e.LutPhoneTypeCd);

            entity.ToTable("LutPhoneType", "PnC");

            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutPolicyReviewReportLanguage>(entity =>
        {
            entity.HasKey(e => e.LutReviewReportLanguageID).HasName("PK_LutPolicyReviewReport");

            entity.ToTable("LutPolicyReviewReportLanguage", "AAHPPC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("system");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ReportLanguage).IsUnicode(false);
            entity.Property(e => e.TemplateIdentifier).IsUnicode(false);

            entity.HasOne(d => d.ReviewReportItem).WithMany(p => p.LutPolicyReviewReportLanguages)
                .HasForeignKey(d => d.ReviewReportItemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutPolicyReviewReportLanguage_LutReviewReportItem");
        });

        modelBuilder.Entity<LutPreDir>(entity =>
        {
            entity.HasKey(e => e.LutPreDirCD).HasName("PkLutPreDirCD");

            entity.ToTable("LutPreDir", "AAHR");

            entity.Property(e => e.LutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutProgram>(entity =>
        {
            entity.HasKey(e => e.ProgramId);

            entity.ToTable("LutProgram", "IMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(150);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LutProgramCycle>(entity =>
        {
            entity.ToTable("LutProgramCycle", "IMS");

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LutProjSource>(entity =>
        {
            entity.HasKey(e => e.LutProjSourceCD).HasName("PkLutProjSource");

            entity.ToTable("LutProjSource", "PnC", tb => tb.HasComment("Lookup table for PnCProject.\r\nSourec of PnC Project"));

            entity.HasIndex(e => e.RowID, "UcLutProjSource_RowID").IsUnique();

            entity.Property(e => e.LutProjSourceCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Primary Key Identity column for the LutProjSource table.  A code represent source of PnC Project");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Description for LutProjSourceCD");
            entity.Property(e => e.Exhibit)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Exhibit from settlement agreement");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.LongCode)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("long form for the code");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderSeq).HasComment("Sequence for report sorting");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
            entity.Property(e => e.SAVersion)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The settlement agreement version number");
            entity.Property(e => e.ShortCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Short form for the code");
        });

        modelBuilder.Entity<LutProjectFund>(entity =>
        {
            entity.ToTable("LutProjectFund", "PnC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FundCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FundDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPrefix).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutProjectSiteQuestion>(entity =>
        {
            entity.HasKey(e => e.LutProjectSiteQuestionID).HasName("PK_LutListingQuestion");

            entity.ToTable("LutProjectSiteQuestion", "AAHR");

            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutProjectSiteStatus>(entity =>
        {
            entity.ToTable("LutProjectSiteStatus", "AAHR");

            entity.Property(e => e.LutProjectSiteStatusID).HasComment("Primary Key Identity column for the Holiday table");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Description of status")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IsCoveredProperty).HasComment("1 = is covered property");
            entity.Property(e => e.IsDeleted).HasComment("1 = record mark as deleted");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
        });

        modelBuilder.Entity<LutProjectSiteStatusDisplayName>(entity =>
        {
            entity.HasKey(e => e.LutProjectSiteStatusDisplayNameID).HasName("PK_PnC.ProjectSiteStatusDisplayName");

            entity.ToTable("LutProjectSiteStatusDisplayName", "PnC");

            entity.Property(e => e.DisplayIconColor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DisplayName).IsUnicode(false);
            entity.Property(e => e.ProjectSiteStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutPropAttribute>(entity =>
        {
            entity.ToTable("LutPropAttribute", "PnC");

            entity.Property(e => e.FlagType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<LutQRCertifyTerm>(entity =>
        {
            entity.HasKey(e => e.LutQRCertifyTermsID);

            entity.ToTable("LutQRCertifyTerms", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsAcceptMandatory).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsMandatory).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutRACategory>(entity =>
        {
            entity.ToTable("LutRACategory", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutRARequestType).WithMany(p => p.LutRACategories)
                .HasForeignKey(d => d.LutRARequestTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutRACategory_LutRARequestType");
        });

        modelBuilder.Entity<LutRARequestType>(entity =>
        {
            entity.HasKey(e => e.LutRARequestTypeID).HasName("PK_AAHR.LutReasonableAccomondationRequestType");

            entity.ToTable("LutRARequestType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RARequestType).HasMaxLength(100);

            entity.HasOne(d => d.LutUserType).WithMany(p => p.LutRARequestTypes)
                .HasForeignKey(d => d.LutUserTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutRARequestType_LutUserType");
        });

        modelBuilder.Entity<LutRASubCategory>(entity =>
        {
            entity.ToTable("LutRASubCategory", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutRACategory).WithMany(p => p.LutRASubCategories)
                .HasForeignKey(d => d.LutRACategoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutRASubCategory_LutRACategory");
        });

        modelBuilder.Entity<LutReferenceType>(entity =>
        {
            entity.ToTable("LutReferenceType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<LutRelatedEntity>(entity =>
        {
            entity.ToTable("LutRelatedEntity", "DF");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RelatedEntityName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RowId).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<LutRenderType>(entity =>
        {
            entity.ToTable("LutRenderType", "CC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RenderType).HasMaxLength(50);
        });

        modelBuilder.Entity<LutRentalSubsidy>(entity =>
        {
            entity.ToTable("LutRentalSubsidy", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RentalSubsidy).IsUnicode(false);
        });

        modelBuilder.Entity<LutReviewReportItem>(entity =>
        {
            entity.ToTable("LutReviewReportItem", "AAHPPC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutReviewReportSubItem>(entity =>
        {
            entity.ToTable("LutReviewReportSubItem", "AAHPPC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SubItem).IsUnicode(false);

            entity.HasOne(d => d.LutReviewReportItem).WithMany(p => p.LutReviewReportSubItems)
                .HasForeignKey(d => d.LutReviewReportItemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutReviewReportSubItem_LutReviewReportItem");
        });

        modelBuilder.Entity<LutScopeItem>(entity =>
        {
            entity.HasKey(e => e.LutScopeItemID).HasName("PK_LutScopeOfWork");

            entity.ToTable("LutScopeItem", "AAHPCC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ScopeItem)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutServiceRequestType>(entity =>
        {
            entity.HasKey(e => e.LutServiceRequestTypeID).HasName("PK_LutBrushCaseType");

            entity.ToTable("LutServiceRequestType", "IMS");

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasMany(d => d.LutViolationLocations).WithMany(p => p.LutServiceRequestTypes)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnServiceRequestTypeViolationLocation",
                    r => r.HasOne<LutViolationLocation>().WithMany()
                        .HasForeignKey("LutViolationLocationID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestTypeViolationLocation_LutViolationLocation"),
                    l => l.HasOne<LutServiceRequestType>().WithMany()
                        .HasForeignKey("LutServiceRequestTypeID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestTypeViolationLocation_LutServiceRequestType"),
                    j =>
                    {
                        j.HasKey("LutServiceRequestTypeID", "LutViolationLocationID");
                        j.ToTable("AssnServiceRequestTypeViolationLocation", "IMS");
                    });
        });

        modelBuilder.Entity<LutSignatureTitle>(entity =>
        {
            entity.HasKey(e => e.LutSignatureTitleID).HasName("PK_LutSignatureTitleIDLutSignatureTitleID");

            entity.ToTable("LutSignatureTitle", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SignatureTitle).HasMaxLength(50);
        });

        modelBuilder.Entity<LutSiteSurveyGroup>(entity =>
        {
            entity.ToTable("LutSiteSurveyGroup", "AAHR");

            entity.Property(e => e.CreatedBy).IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SiteSurveyGroup)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutState>(entity =>
        {
            entity.HasKey(e => e.LutStateCd).HasName("PkLutState");

            entity.ToTable("LutState", "AAHR");

            entity.Property(e => e.LutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutState1>(entity =>
        {
            entity.HasKey(e => e.LutStateCd).HasName("PkLutState");

            entity.ToTable("LutState", "PnC");

            entity.Property(e => e.LutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStopWorkOrderReasonType>(entity =>
        {
            entity.ToTable("LutStopWorkOrderReasonType", "IMS");

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutStreetPrefix>(entity =>
        {
            entity.HasKey(e => e.PreDirCd);

            entity.ToTable("LutStreetPrefix", "AAHR");

            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStreetPrefix1>(entity =>
        {
            entity.HasKey(e => e.PreDirCd);

            entity.ToTable("LutStreetPrefix", "PnC");

            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStreetSuffix>(entity =>
        {
            entity.HasKey(e => e.PostDirCd);

            entity.ToTable("LutStreetSuffix", "AAHR");

            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStreetSuffix1>(entity =>
        {
            entity.HasKey(e => e.PostDirCd);

            entity.ToTable("LutStreetSuffix", "PnC");

            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStreetType>(entity =>
        {
            entity.HasKey(e => e.LutStreetTypeCd).HasName("PkLutStreetType");

            entity.ToTable("LutStreetType", "AAHR");

            entity.Property(e => e.LutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStructureType>(entity =>
        {
            entity.HasKey(e => e.LutStructureTypeID).HasName("PK__LutStruc__F8603A52BDFFEA24");

            entity.ToTable("LutStructureType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutStructureType1>(entity =>
        {
            entity.HasKey(e => e.LutStructureTypeID).HasName("PK_LutStructureType_1");

            entity.ToTable("LutStructureType", "PnC");

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutTargetAudience>(entity =>
        {
            entity.ToTable("LutTargetAudience", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutTemplate>(entity =>
        {
            entity.ToTable("LutTemplate", "DMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DocumentType).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.SampleData).IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutTemplate1>(entity =>
        {
            entity.HasKey(e => e.LutTemplateID).HasName("PK__LutTempl__FAF1218EC0EDC6E8");

            entity.ToTable("LutTemplate", "ENF");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutTenantSelectedFrom>(entity =>
        {
            entity.ToTable("LutTenantSelectedFrom", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.TenantSelectedFrom).HasMaxLength(50);
        });

        modelBuilder.Entity<LutTotalBathroom>(entity =>
        {
            entity.HasKey(e => e.LutTotalBathroomsID);

            entity.ToTable("LutTotalBathrooms", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutTotalBedroom>(entity =>
        {
            entity.HasKey(e => e.LutTotalBedroomsID);

            entity.ToTable("LutTotalBedrooms", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutTrainingSessionStatus>(entity =>
        {
            entity.HasKey(e => e.LutTrainingSessionStatusID).HasName("PkLutTrainingSessionStatusID");

            entity.ToTable("LutTrainingSessionStatus", "TRN", tb => tb.HasComment("Lookup table for training session status"));

            entity.HasIndex(e => e.RowID, "UcLutTrainingSessionStatus_RowID").IsUnique();

            entity.Property(e => e.LutTrainingSessionStatusID).HasComment("Primary Key Identity column for the LutTrainingSessionStatus table");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Training session status");
        });

        modelBuilder.Entity<LutTransferWaitListReason>(entity =>
        {
            entity.ToTable("LutTransferWaitListReason", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutTypeofProject>(entity =>
        {
            entity.ToTable("LutTypeofProject", "PnC", tb => tb.HasComment("Type of Project from HIMS system.\r\nAll PnC Project comes from HIMS"));

            entity.HasIndex(e => e.RowID, "UcLutTypeofProject_RowID").IsUnique();

            entity.Property(e => e.LutTypeofProjectID).HasComment("Primary Key Identity column for the LutTypeofProject table.  This number match HIMS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("description about type of project");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
        });

        modelBuilder.Entity<LutUnitAccessibiltyType>(entity =>
        {
            entity.ToTable("LutUnitAccessibiltyType", "PnC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.UnitAccessibiltyType)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutUnitType>(entity =>
        {
            entity.ToTable("LutUnitType", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutUpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("LutUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutUserType>(entity =>
        {
            entity.ToTable("LutUserType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UserType).HasMaxLength(50);
        });

        modelBuilder.Entity<LutViolation>(entity =>
        {
            entity.HasKey(e => e.LutViolationID).HasName("PK_Voilation");

            entity.ToTable("LutViolation", "IMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.Justification).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.QuestionForm).HasMaxLength(50);
            entity.Property(e => e.QuestionNumber).HasMaxLength(50);
            entity.Property(e => e.RefViolation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remedy).HasMaxLength(50);
            entity.Property(e => e.SeverityLevelBldg)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeverityLevelProp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeverityLevelUnit)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.LutViolationCategory).WithMany(p => p.LutViolations)
                .HasForeignKey(d => d.LutViolationCategoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutViolation_LutViolationCategory");

            entity.HasMany(d => d.LutLocationCategories).WithMany(p => p.LutViolations)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnViolationLocationCategory",
                    r => r.HasOne<LutLocationCategory>().WithMany()
                        .HasForeignKey("LutLocationCategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IMS.AssnViolationLocationCat_LutLocationViolationCategory"),
                    l => l.HasOne<LutViolation>().WithMany()
                        .HasForeignKey("LutViolationID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnViolationLocationCategory_LutViolation"),
                    j =>
                    {
                        j.HasKey("LutViolationID", "LutLocationCategoryId");
                        j.ToTable("AssnViolationLocationCategory", "IMS");
                    });

            entity.HasMany(d => d.LutViolationCodes).WithMany(p => p.LutViolations)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnViolationCode",
                    r => r.HasOne<LutViolationCode>().WithMany()
                        .HasForeignKey("LutViolationCodeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IMS.AssnViolationCode_IMS.LutViolationCode"),
                    l => l.HasOne<LutViolation>().WithMany()
                        .HasForeignKey("LutViolationID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnViolationCode_LutViolation"),
                    j =>
                    {
                        j.HasKey("LutViolationID", "LutViolationCodeId");
                        j.ToTable("AssnViolationCode", "IMS");
                    });

            entity.HasMany(d => d.LutViolationLocations).WithMany(p => p.LutViolations)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnViolationLocation",
                    r => r.HasOne<LutViolationLocation>().WithMany()
                        .HasForeignKey("LutViolationLocationID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnViolationLocation_LutViolationLocation"),
                    l => l.HasOne<LutViolation>().WithMany()
                        .HasForeignKey("LutViolationID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnViolationLocation_LutViolation"),
                    j =>
                    {
                        j.HasKey("LutViolationID", "LutViolationLocationID");
                        j.ToTable("AssnViolationLocation", "IMS");
                    });
        });

        modelBuilder.Entity<LutViolationCategory>(entity =>
        {
            entity.ToTable("LutViolationCategory", "IMS", tb => tb.HasComment("Violation Category like Electrical, Mechanical etc"));

            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutViolationChecklist>(entity =>
        {
            entity.ToTable("LutViolationChecklist", "IMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(1000);
        });

        modelBuilder.Entity<LutViolationCode>(entity =>
        {
            entity.HasKey(e => e.LutViolationCodeId).HasName("PK_IMS.LutViolationCode");

            entity.ToTable("LutViolationCode", "IMS");

            entity.Property(e => e.LutViolationCodeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);

            entity.HasOne(d => d.LutViolationCodeType).WithMany(p => p.LutViolationCodes)
                .HasForeignKey(d => d.LutViolationCodeTypeId)
                .HasConstraintName("FK_IMS.LutViolationCode_IMS.LutViolationCodeType");
        });

        modelBuilder.Entity<LutViolationCodeType>(entity =>
        {
            entity.HasKey(e => e.LutViolationCodeTypeId).HasName("PK_IMS.LutViolationCodeType");

            entity.ToTable("LutViolationCodeType", "IMS");

            entity.Property(e => e.LutViolationCodeTypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LutViolationLocation>(entity =>
        {
            entity.ToTable("LutViolationLocation", "IMS", tb => tb.HasComment("Violation Location - Kitchen, Living Room etc"));

            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutWithdrawReason>(entity =>
        {
            entity.HasKey(e => e.LutWithdrawReasonId).HasName("PK__LutWithd__3710ECFAB0F858C9");

            entity.ToTable("LutWithdrawReason", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.WithdrawReason)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutWorkLogType>(entity =>
        {
            entity.HasKey(e => e.LutWorkLogTypeID).HasName("PkLutWorkLogTypeID");

            entity.ToTable("LutWorkLogType", "AAHR");

            entity.HasIndex(e => e.RowID, "UcLutWorkLogType_RowID").IsUnique();

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.WorkLogType)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutWorkLogType1>(entity =>
        {
            entity.HasKey(e => e.LutWorkLogTypeID);

            entity.ToTable("LutWorkLogType", "IMS");

            entity.Property(e => e.Code).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Neighborhood>(entity =>
        {
            entity.ToTable("Neighborhood", "PnC");

            entity.Property(e => e.NeighborhoodID)
                .ValueGeneratedNever()
                .HasComment("Primary Key Identity column for the Neighborhood table");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.GeoJsonCoordinates)
                .IsUnicode(false)
                .HasComment("Geographic Json cooridantes");
            entity.Property(e => e.GeoJsonGeometryType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Geographic Json type");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of Neighborhood or Region");
            entity.Property(e => e.NeighborhoodNumber).HasComment("1 Sorting sequence for Region");
            entity.Property(e => e.ParentNeighborhoodID).HasComment("Neighborhood belongs to which region");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("N = Neighborhood, R = Region");
            entity.Property(e => e.WKT)
                .IsUnicode(false)
                .HasComment("Well know text for the geometry");
        });

        modelBuilder.Entity<NeighborhoodCouncil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NeighborhoodCouncil", "AAHR");

            entity.Property(e => e.EmpowerlaUrl)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FolderPath)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GeometryType)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LayerInfo)
                .HasMaxLength(34)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NeighborhoodCouncilName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Source)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.WKT).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.coordinates).UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<News_DisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_News_DisplayConfiguration");

            entity.ToTable("News_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.DateToDisplay).HasMaxLength(50);
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<News_NewsDetail>(entity =>
        {
            entity.ToTable("News_NewsDetails", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.PublishDate).HasColumnType("datetime");
            entity.Property(e => e.SubmittedDate).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(256);

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.News_NewsDetails)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_News_NewsDetails_News_DC");
        });

        modelBuilder.Entity<NonCoveredProjectSite>(entity =>
        {
            entity.ToTable("NonCoveredProjectSite", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DeveloperPortfolio).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
        });

        modelBuilder.Entity<Notice>(entity =>
        {
            entity.ToTable("Notice", "IMS");

            entity.Property(e => e.ApprovedBy).HasMaxLength(50);
            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.MailAddressLine1).HasMaxLength(500);
            entity.Property(e => e.MailAddressLine2).HasMaxLength(500);
            entity.Property(e => e.MailTrackingNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NoticeURL).HasMaxLength(200);
            entity.Property(e => e.RecipientName).HasMaxLength(200);
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.Notices)
                .HasForeignKey(d => d.ContactIdentifierID)
                .HasConstraintName("FK_Notice_ContactIdentifier");

            entity.HasOne(d => d.LutNoticeType).WithMany(p => p.Notices)
                .HasForeignKey(d => d.LutNoticeTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notice_LutNoticeType");

            entity.HasMany(d => d.Violations).WithMany(p => p.Notices)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnNoticeViolation",
                    r => r.HasOne<Violation>().WithMany()
                        .HasForeignKey("ViolationID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnNoticeViolation_Violation"),
                    l => l.HasOne<Notice>().WithMany()
                        .HasForeignKey("NoticeID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnNoticeViolation_Notice"),
                    j =>
                    {
                        j.HasKey("NoticeID", "ViolationID");
                        j.ToTable("AssnNoticeViolation", "IMS");
                    });
        });

        modelBuilder.Entity<NoticeOfObligation>(entity =>
        {
            entity.ToTable("NoticeOfObligation", "CAP");

            entity.Property(e => e.BestContact1Address)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1CityStateZip)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1Company)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1Email)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1FullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1Title)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2Address)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2CityStateZip)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2Company)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2Email)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2FullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2Title)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CCEMailIds).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LupamAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LupamCompany)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LupamEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LupamFullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LupamTitle)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NOBType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NocDate).HasColumnType("datetime");
            entity.Property(e => e.OwnerAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCityStateZip)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompany)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerTitle)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PMEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PMFullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RegulatoryAgreementExecDate).HasColumnType("datetime");
            entity.Property(e => e.SelfCertAdpotionDate).HasColumnType("datetime");
            entity.Property(e => e.ToEMailIds).IsUnicode(false);

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.NoticeOfObligations)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NoticeOfObligation_ServiceRequest");
        });

        modelBuilder.Entity<NotificationLog>(entity =>
        {
            entity.ToTable("NotificationLogs", "CC");

            entity.Property(e => e.Action).HasMaxLength(500);
            entity.Property(e => e.RefrenceType).HasMaxLength(100);
            entity.Property(e => e.SentOn).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<NotificationSchema>(entity =>
        {
            entity.ToTable("NotificationSchema", "CC");

            entity.Property(e => e.Type).HasMaxLength(100);
        });

        modelBuilder.Entity<NotificationSource>(entity =>
        {
            entity.ToTable("NotificationSource", "CC");

            entity.Property(e => e.CredentialName).HasMaxLength(50);
            entity.Property(e => e.CredentialPwd).HasMaxLength(50);
            entity.Property(e => e.FromEmailId).HasMaxLength(150);
            entity.Property(e => e.Host).HasMaxLength(50);
        });

        modelBuilder.Entity<NotificationTemplate>(entity =>
        {
            entity.ToTable("NotificationTemplate", "CC");

            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Organization>(entity =>
        {
            entity.ToTable("Organization", "PnC");

            entity.Property(e => e.AreaServed)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BusinessLicense).HasMaxLength(100);
            entity.Property(e => e.CensoredName).HasMaxLength(150);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Email1).HasMaxLength(200);
            entity.Property(e => e.Email2).HasMaxLength(200);
            entity.Property(e => e.EmailDomain)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.IDMUserName).HasMaxLength(50);
            entity.Property(e => e.LegalName).HasMaxLength(150);
            entity.Property(e => e.LicenseValidFrom).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidTo).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.Phone1).HasMaxLength(50);
            entity.Property(e => e.Phone2).HasMaxLength(50);
            entity.Property(e => e.PhoneFax).HasMaxLength(50);
            entity.Property(e => e.PictureMain).HasMaxLength(200);
            entity.Property(e => e.PictureThumbnail).HasMaxLength(200);
            entity.Property(e => e.ServiceProvided)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TTY)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WebSite)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrganizationAddress>(entity =>
        {
            entity.ToTable("OrganizationAddress", "PnC");

            entity.Property(e => e.AddressLine1).HasMaxLength(100);
            entity.Property(e => e.AddressLine2).HasMaxLength(100);
            entity.Property(e => e.AddressType).HasMaxLength(20);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(463)
                .HasComputedColumnSql("((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([State]+' ',''))+isnull([City]+' ',''))+[Zip])", false);
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.Latitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostDirCd).HasMaxLength(50);
            entity.Property(e => e.PreDirCd).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName).HasMaxLength(100);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.UnitNo).HasMaxLength(20);
            entity.Property(e => e.Zip).HasMaxLength(5);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);

            entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationAddresses)
                .HasForeignKey(d => d.OrganizationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationAddress_Organization");
        });

        modelBuilder.Entity<OutreachAndAffimativeMarketing>(entity =>
        {
            entity.HasKey(e => e.OutreachID);

            entity.ToTable("OutreachAndAffimativeMarketing", "AAHR");

            entity.Property(e => e.ContactName).HasMaxLength(500);
            entity.Property(e => e.ContactPhone).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfOutreach).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName).HasMaxLength(500);
            entity.Property(e => e.OutreachType).IsUnicode(false);
            entity.Property(e => e.PartyForDistrubution).IsUnicode(false);
        });

        modelBuilder.Entity<PCMStoPncSyncLog>(entity =>
        {
            entity.HasKey(e => e.SyncLogID).HasName("PK_AAHR.AuditTrail");

            entity.ToTable("PCMStoPncSyncLog", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("system");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IdentifierID)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdentifierJSON).IsUnicode(false);
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("system");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<PMP>(entity =>
        {
            entity.ToTable("PMP", "AAHR", tb => tb.HasTrigger("trg_PMPLog"));

            entity.Property(e => e.AuthSignatoryName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfAckCertificate).HasColumnType("datetime");
            entity.Property(e => e.EntityContactEmail).HasMaxLength(100);
            entity.Property(e => e.EntityContactPhone).HasMaxLength(20);
            entity.Property(e => e.EntityContactPhoneExt).HasMaxLength(20);
            entity.Property(e => e.FinalCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PreliminaryCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.SignatoryPersonTitle)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.LutLegalEntityType).WithMany(p => p.PMPs)
                .HasForeignKey(d => d.LutLegalEntityTypeId)
                .HasConstraintName("FK_PMP_LutLegalEntityType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.PMPs)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMP_ServiceRequest");
        });

        modelBuilder.Entity<PMPAddnlMarketingEffort>(entity =>
        {
            entity.ToTable("PMPAddnlMarketingEffort", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LeaseUpBannerParty).IsUnicode(false);
            entity.Property(e => e.LeaseUpBannerPostDate).HasColumnType("datetime");
            entity.Property(e => e.LeaseUpPhoneLineParty).IsUnicode(false);
            entity.Property(e => e.LeaseUpPhoneLinePostDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherName).IsUnicode(false);
            entity.Property(e => e.OtherPostedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherResponsibleParty).IsUnicode(false);

            entity.HasOne(d => d.PMP).WithMany(p => p.PMPAddnlMarketingEfforts)
                .HasForeignKey(d => d.PMPID)
                .HasConstraintName("FK_PMPAddnlMarketingEffort_PMP");
        });

        modelBuilder.Entity<PMPAddnlMarketingEffortSnap>(entity =>
        {
            entity.ToTable("PMPAddnlMarketingEffortSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LeaseUpBannerParty).IsUnicode(false);
            entity.Property(e => e.LeaseUpBannerPostDate).HasColumnType("datetime");
            entity.Property(e => e.LeaseUpPhoneLineParty).IsUnicode(false);
            entity.Property(e => e.LeaseUpPhoneLinePostDate).HasColumnType("datetime");
            entity.Property(e => e.OtherName).IsUnicode(false);
            entity.Property(e => e.OtherPostedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherResponsibleParty).IsUnicode(false);

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPAddnlMarketingEffortSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPAddnlMarketingEffortSnap_PMPSnap");
        });

        modelBuilder.Entity<PMPAgency>(entity =>
        {
            entity.ToTable("PMPAgency", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PMPAgencyContactName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PMPAgencyEmail).HasMaxLength(100);
            entity.Property(e => e.PMPAgencyName).IsUnicode(false);
            entity.Property(e => e.PMPAgencyPhoneNumber).HasMaxLength(50);
        });

        modelBuilder.Entity<PMPAgencySnap>(entity =>
        {
            entity.ToTable("PMPAgencySnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.PMPAgencyContactName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.PMPAgencyEmail).HasMaxLength(100);
            entity.Property(e => e.PMPAgencyName).IsUnicode(false);
            entity.Property(e => e.PMPAgencyPhoneNumber).HasMaxLength(50);

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPAgencySnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPAgencySnap_PMPSnap");
        });

        modelBuilder.Entity<PMPLog>(entity =>
        {
            entity.ToTable("PMPLog", "AAHR");

            entity.Property(e => e.AuthSignatoryName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfAckCertificate).HasColumnType("datetime");
            entity.Property(e => e.EntityContactEmail).HasMaxLength(100);
            entity.Property(e => e.EntityContactPhone).HasMaxLength(20);
            entity.Property(e => e.FinalCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PreliminaryCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.SignatoryPersonTitle)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PMPOutreachAndAffimativeMarketingSnap>(entity =>
        {
            entity.HasKey(e => e.OutreachSnapID).HasName("PK_PMPOutreachAndAffimativeMarketing");

            entity.ToTable("PMPOutreachAndAffimativeMarketingSnap", "PMP");

            entity.Property(e => e.ContactName).HasMaxLength(500);
            entity.Property(e => e.ContactPhone).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfOutreach).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName).HasMaxLength(500);
            entity.Property(e => e.OutreachType).IsUnicode(false);
            entity.Property(e => e.PartyForDistrubution).IsUnicode(false);

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPOutreachAndAffimativeMarketingSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPOutreachAndAffimativeMarketingSnap_PMPSnap");
        });

        modelBuilder.Entity<PMPOutreachOrganisation>(entity =>
        {
            entity.ToTable("PMPOutreachOrganisation", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherOutreachType).IsUnicode(false);
            entity.Property(e => e.OutreachDate).HasColumnType("datetime");

            entity.HasOne(d => d.Organisation).WithMany(p => p.PMPOutreachOrganisations)
                .HasForeignKey(d => d.OrganisationID)
                .HasConstraintName("FK_PMPOutreachOrganisation_Organization");

            entity.HasOne(d => d.OutreachType).WithMany(p => p.PMPOutreachOrganisations)
                .HasForeignKey(d => d.OutreachTypeId)
                .HasConstraintName("FK_PMPOutreachOrganisation_LutOutreachType");

            entity.HasOne(d => d.PMP).WithMany(p => p.PMPOutreachOrganisations)
                .HasForeignKey(d => d.PMPID)
                .HasConstraintName("FK_PMPOutreachOrganisation_PMP");
        });

        modelBuilder.Entity<PMPOutreachOrganisationSnap>(entity =>
        {
            entity.ToTable("PMPOutreachOrganisationSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherOutreachType).IsUnicode(false);
            entity.Property(e => e.OutreachDate).HasColumnType("datetime");

            entity.HasOne(d => d.LutOutreachType).WithMany(p => p.PMPOutreachOrganisationSnaps)
                .HasForeignKey(d => d.LutOutreachTypeID)
                .HasConstraintName("FK_PMPOutreachOrganisationSnap_LutOutreachType");

            entity.HasOne(d => d.Organisation).WithMany(p => p.PMPOutreachOrganisationSnaps)
                .HasForeignKey(d => d.OrganisationID)
                .HasConstraintName("FK_PMPOutreachOrganisationSnap_Organization");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPOutreachOrganisationSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .HasConstraintName("FK_PMPOutreachOrganisationSnap_PMPSnap");
        });

        modelBuilder.Entity<PMPPSHClientServingOrganization>(entity =>
        {
            entity.HasKey(e => e.PMPPSHClientServingOrganizationId).HasName("PK__PMPPSHCl__0CD719AD8039054E");

            entity.ToTable("PMPPSHClientServingOrganization", "AAHR");

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ResourceType)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.PMP).WithMany(p => p.PMPPSHClientServingOrganizations)
                .HasForeignKey(d => d.PMPId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPPSHClientServingOrganization_PMP");
        });

        modelBuilder.Entity<PMPPSHClientServingOrganizationSnap>(entity =>
        {
            entity.ToTable("PMPPSHClientServingOrganizationSnap", "PMP");

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ResourceType)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPPSHClientServingOrganizationSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPPSHClientServingOrganizationSnap_PMPSnap");
        });

        modelBuilder.Entity<PMPProjectSiteSnap>(entity =>
        {
            entity.ToTable("PMPProjectSiteSnap", "PMP");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.IsAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsAccessibleAffordable).HasDefaultValue(false);
            entity.Property(e => e.IsAffordable).HasDefaultValue(false);
            entity.Property(e => e.IsCovered).HasDefaultValue(false);
            entity.Property(e => e.IsTenantReferredUnit).HasComment("For HACLA property");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteNum).HasDefaultValue(0);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.LutCESType).WithMany(p => p.PMPProjectSiteSnaps)
                .HasForeignKey(d => d.LutCESTypeID)
                .HasConstraintName("FK_PMPProjectSiteSnap_LutCESType");

            entity.HasOne(d => d.LutOccupancyStatus).WithMany(p => p.PMPProjectSiteSnaps)
                .HasForeignKey(d => d.LutOccupancyStatusID)
                .HasConstraintName("FK_PMPProjectSiteSnap_LutOccupancyStatus");

            entity.HasOne(d => d.LutProjectSiteStatus).WithMany(p => p.PMPProjectSiteSnaps)
                .HasForeignKey(d => d.LutProjectSiteStatusID)
                .HasConstraintName("FK_PMPProjectSiteSnap_LutProjectSiteStatus");

            entity.HasOne(d => d.Neighborhood).WithMany(p => p.PMPProjectSiteSnaps)
                .HasForeignKey(d => d.NeighborhoodID)
                .HasConstraintName("FK_PMPProjectSiteSnap_LutNeighborhood");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPProjectSiteSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPProjectSiteSnap_PMPSnap");

            entity.HasOne(d => d.Project).WithMany(p => p.PMPProjectSiteSnaps)
                .HasForeignKey(d => d.ProjectID)
                .HasConstraintName("FK_PMPProjectSiteSnap_Project");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.PMPProjectSiteSnaps)
                .HasForeignKey(d => d.ProjectSiteID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPProjectSiteSnap_ProjectSite");

            entity.HasOne(d => d.SiteAddressNavigation).WithMany(p => p.PMPProjectSiteSnaps)
                .HasForeignKey(d => d.SiteAddressID)
                .HasConstraintName("FK_PMPProjectSiteSnap_SiteAddress");
        });

        modelBuilder.Entity<PMPSiteAddressSnap>(entity =>
        {
            entity.ToTable("PMPSiteAddressSnap", "PMP");

            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .HasComputedColumnSql("(ltrim(rtrim(replace(replace((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([City]+' ',''))+isnull([State]+' ',''))+[Zip],'  ',' '),'  ',' '))))", false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.PIN)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ZipSuffix)
                .HasMaxLength(4)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPSiteAddressSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPSiteAddressSnap_PMPSnap");
        });

        modelBuilder.Entity<PMPSnap>(entity =>
        {
            entity.HasKey(e => e.PMPSnapID).HasName("PK_PMPSnap_1");

            entity.ToTable("PMPSnap", "PMP");

            entity.Property(e => e.AuthSignatoryName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfAckCertificate).HasColumnType("datetime");
            entity.Property(e => e.EntityContactEmail).HasMaxLength(100);
            entity.Property(e => e.EntityContactPhone).HasMaxLength(20);
            entity.Property(e => e.EntityContactPhoneExt).HasMaxLength(20);
            entity.Property(e => e.FinalCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.PreliminaryCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.SignatoryPersonTitle)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.LutCESType).WithMany(p => p.PMPSnaps)
                .HasForeignKey(d => d.LutCESTypeID)
                .HasConstraintName("FK_PMPSnap_LutCESType");

            entity.HasOne(d => d.LutConstructionType).WithMany(p => p.PMPSnaps)
                .HasForeignKey(d => d.LutConstructionTypeID)
                .HasConstraintName("FK_PMPSnap_LutConstructionType");

            entity.HasOne(d => d.LutLegalEntityType).WithMany(p => p.PMPSnaps)
                .HasForeignKey(d => d.LutLegalEntityTypeId)
                .HasConstraintName("FK_PMPSnap_LutLegalEntityType");

            entity.HasOne(d => d.PMP).WithMany(p => p.PMPSnaps)
                .HasForeignKey(d => d.PMPID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPSnap_PMP1");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.PMPSnaps)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPSnap_PropSnapshot1");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.PMPSnaps)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPSnap_ServiceRequest1");
        });

        modelBuilder.Entity<PMPUnitAttributeSnap>(entity =>
        {
            entity.ToTable("PMPUnitAttributeSnap", "PMP");

            entity.Property(e => e.AUWaitListPosition).HasMaxLength(9);
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsAdaptable).HasDefaultValue(false);
            entity.Property(e => e.IsAddendumSigned).HasDefaultValue(0);
            entity.Property(e => e.IsCES).HasDefaultValue(false);
            entity.Property(e => e.IsEnhancedAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.IsOccupied).HasDefaultValue(false);
            entity.Property(e => e.IsOccupiedByDisabled).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutEAPFeatureIDs1A).IsUnicode(false);
            entity.Property(e => e.LutEAPFeatureIDs1B).IsUnicode(false);
            entity.Property(e => e.LutEAPFeatureIDsOptional).IsUnicode(false);
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.LutAMI).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutAMIID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutAMI");

            entity.HasOne(d => d.LutFHAType).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutFHATypeID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutFHAType");

            entity.HasOne(d => d.LutFixedFloatingUnit).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutFixedFloatingUnitID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutFixedFloatingUnit");

            entity.HasOne(d => d.LutLeaseAddendumNotExecuteReason).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutLeaseAddendumNotExecuteReasonID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutLeaseAddendumNotExecuteReason");

            entity.HasOne(d => d.LutOccupancyReason).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutOccupancyReasonID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutOccupancyReason");

            entity.HasOne(d => d.LutRentalSubsidy).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutRentalSubsidyID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutRentalSubsidy");

            entity.HasOne(d => d.LutTenantSelectedFrom).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutTenantSelectedFromID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutTenantSelectedFrom");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutTotalBathroomID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutTotalBedroomID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.LutUnitTypeID)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutUnitType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitAttributeSnap_PropSnapshot");

            entity.HasOne(d => d.UnitAttribute).WithMany(p => p.PMPUnitAttributeSnaps)
                .HasForeignKey(d => d.UnitAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitAttributeSnap_UnitAttribute");
        });

        modelBuilder.Entity<PMPUnitInfoSummarySnap>(entity =>
        {
            entity.ToTable("PMPUnitInfoSummarySnap", "PMP");

            entity.Property(e => e.AMI).HasMaxLength(10);
            entity.Property(e => e.AccessibilityType).HasMaxLength(50);
            entity.Property(e => e.BedRoomSize).HasMaxLength(10);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.NoOfunit).HasMaxLength(10);

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPUnitInfoSummarySnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitInfoSummarySnap_PMPSnap");
        });

        modelBuilder.Entity<PMPUnitSnap>(entity =>
        {
            entity.ToTable("PMPUnitSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.APN).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.APNID)
                .HasConstraintName("FK_PMPUnitSnap_APN");

            entity.HasOne(d => d.Level).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.LevelID)
                .HasConstraintName("FK_PMPUnitSnap_Level");

            entity.HasOne(d => d.LutUnitAccessibiltyType).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.LutUnitAccessibiltyTypeID)
                .HasConstraintName("FK_PMPUnitSnap_LutUnitAccessibiltyType");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitSnap_PMPSnap");

            entity.HasOne(d => d.Project).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.ProjectID)
                .HasConstraintName("FK_PMPUnitSnap_Project");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.ProjectSiteID)
                .HasConstraintName("FK_PMPUnitSnap_ProjectSite");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitSnap_PropSnapshot");

            entity.HasOne(d => d.SiteAddress).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.SiteAddressID)
                .HasConstraintName("FK_PMPUnitSnap_SiteAddress");

            entity.HasOne(d => d.Unit).WithMany(p => p.PMPUnitSnaps)
                .HasForeignKey(d => d.UnitID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitSnap_Unit");
        });

        modelBuilder.Entity<PhoneLog>(entity =>
        {
            entity.ToTable("PhoneLog", "AAHR");

            entity.Property(e => e.AdditionalPhoneNo).HasMaxLength(50);
            entity.Property(e => e.CallerName).HasMaxLength(500);
            entity.Property(e => e.CallerType).HasMaxLength(500);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherCallType).HasMaxLength(500);
            entity.Property(e => e.PhoneNo).HasMaxLength(50);

            entity.HasOne(d => d.LutCallType).WithMany(p => p.PhoneLogs)
                .HasForeignKey(d => d.LutCallTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhoneLog_LutCallType");

            entity.HasOne(d => d.LutLanguageLine).WithMany(p => p.PhoneLogs)
                .HasForeignKey(d => d.LutLanguageLineID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhoneLog_LutLanguageLine");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.PhoneLogs)
                .HasForeignKey(d => d.ProjectSiteID)
                .HasConstraintName("FK_PhoneLog_ProjectSite");
        });

        modelBuilder.Entity<PolicyComplianceDetail>(entity =>
        {
            entity.HasKey(e => e.PolicyComplianceDetailID).HasName("PK_PolicyComplainceDetail");

            entity.ToTable("PolicyComplianceDetail", "AAHPPC", tb => tb.HasComment("Policy complliance detail information"));

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PMContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PropertyAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.Case).WithMany(p => p.PolicyComplianceDetails)
                .HasForeignKey(d => d.CaseID)
                .HasConstraintName("FK_PolicyComplianceDetail_Case");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.PolicyComplianceDetails)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_PolicyComplianceDetail_ServiceRequest");
        });

        modelBuilder.Entity<PolicyComplianceReminder>(entity =>
        {
            entity.ToTable("PolicyComplianceReminder", "AAHPPC");

            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifedBy)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ReminderLog).IsUnicode(false);
            entity.Property(e => e.ReminderSetBy).IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.PolicyComplianceReminders)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PolicyComplianceReminder_ServiceRequest");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.ToTable("Project", "PnC", tb => tb.HasTrigger("trg_projectlog"));

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutProjSourceCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SettlementAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.YearEnd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.LutProjSourceCDNavigation).WithMany(p => p.Projects)
                .HasForeignKey(d => d.LutProjSourceCD)
                .HasConstraintName("FK_Project_LutProjSource");

            entity.HasOne(d => d.LutProjectFund).WithMany(p => p.Projects)
                .HasForeignKey(d => d.LutProjectFundID)
                .HasConstraintName("FK_Project_LutProjectFund");

            entity.HasOne(d => d.LutTypeofProject).WithMany(p => p.Projects)
                .HasForeignKey(d => d.LutTypeofProjectID)
                .HasConstraintName("FK_Project_LutTypeofProject");
        });

        modelBuilder.Entity<ProjectAttribute>(entity =>
        {
            entity.HasKey(e => e.ProjectAttributeID).HasName("PK__tmp_ms_x__A180E8873AF662C8");

            entity.ToTable("ProjectAttribute", "AAHR", tb => tb.HasTrigger("trg_ProjectAttributeLog"));

            entity.Property(e => e.AcHPAssociatedAccessorParcelNumberAPN)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AcHPFileNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AdditionalRCS).IsUnicode(false);
            entity.Property(e => e.AssignedRCS)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AssociatedHIMSNumbers).IsUnicode(false);
            entity.Property(e => e.CovenantExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HIMSAssociatedAssessorParcelNumberAPN)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutFundingId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutNacRecomadationID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PrimaryHIMSNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectDescription).IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ResponseToRetrofitSurveyEmailContent).IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.ProjectAttributes)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectAttribute_PropSnapshot");
        });

        modelBuilder.Entity<ProjectAttributeLog>(entity =>
        {
            entity.HasKey(e => e.ProjectAttributeLogID).HasName("PK__ProjectA__2C47AFA051089AF0");

            entity.ToTable("ProjectAttributeLog", "AAHR");

            entity.Property(e => e.AcHPAssociatedAccessorParcelNumberAPN)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AcHPFileNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AssignedRCS)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HIMSAssociatedAssessorParcelNumberAPN)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutFundingId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProjectLog>(entity =>
        {
            entity.HasKey(e => e.ProjectLogID).HasName("PK__ProjectL__4CECAC47C0924473");

            entity.ToTable("ProjectLog", "AAHR");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutProjSourceCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SettlementAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.YearEnd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ProjectSite>(entity =>
        {
            entity.ToTable("ProjectSite", "PnC", tb =>
                {
                    tb.HasTrigger("tr_Upd_ProjectSite");
                    tb.HasTrigger("trg_ProjectSiteLog");
                });

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.IsAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsAccessibleAffordable).HasDefaultValue(false);
            entity.Property(e => e.IsAffordable).HasDefaultValue(false);
            entity.Property(e => e.IsCovered).HasDefaultValue(false);
            entity.Property(e => e.IsTenantReferredUnit).HasComment("For HACLA property");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteNum).HasDefaultValue(0);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.LACountyServicePlanningArea).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.LACountyServicePlanningAreaID)
                .HasConstraintName("FK_ProjectSite_LACountyServicePlanningArea");

            entity.HasOne(d => d.LutCESType).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.LutCESTypeID)
                .HasConstraintName("FK_ProjectSite_LutCESType");

            entity.HasOne(d => d.LutOccupancyStatus).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.LutOccupancyStatusID)
                .HasConstraintName("FK_ProjectSite_LutOccupancyStatus");

            entity.HasOne(d => d.LutProjectSiteStatus).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.LutProjectSiteStatusID)
                .HasConstraintName("FK_ProjectSite_LutProjectSiteStatus");

            entity.HasOne(d => d.Neighborhood).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.NeighborhoodID)
                .HasConstraintName("FK_ProjectSite_Neighborhood");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.ProjectID)
                .HasConstraintName("FK_ProjectSite_Project");

            entity.HasOne(d => d.Region).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.RegionID)
                .HasConstraintName("FK_ProjectSite_Region");

            entity.HasOne(d => d.SiteAddressNavigation).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.SiteAddressID)
                .HasConstraintName("FK_ProjectSite_SiteAddress");
        });

        modelBuilder.Entity<ProjectSiteAdditionalQuestion>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteAddQuestionId);

            entity.ToTable("ProjectSiteAdditionalQuestions", "AAHR", tb => tb.HasComment("To save the additional questions added by owner/pm for property which will be asked while application"));

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.ProjectSiteAdditionalQuestions)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .HasConstraintName("FK_ProjectSiteAdditionalQuestions_ProjectSiteAttribute");
        });

        modelBuilder.Entity<ProjectSiteAdditionalQuestionsSnap>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteAddQuestionSnapId);

            entity.ToTable("ProjectSiteAdditionalQuestionsSnap", "Listing", tb => tb.HasComment("To save snap for table projectSiteAddtionalQuestions when listing published"));

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.ProjectSiteAdditionalQuestionsSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .HasConstraintName("FK_ProjectSiteAdditionalQuestionsSnap_ProjectSiteSnap");
        });

        modelBuilder.Entity<ProjectSiteAttribute>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteAttributeID).HasName("PK_Listing");

            entity.ToTable("ProjectSiteAttribute", "AAHR", tb => tb.HasTrigger("trg_ProjectSiteAttributeLog"));

            entity.HasIndex(e => e.PropSnapshotID, "NI_ProjectSiteAttribute");

            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CWLOpenPriorRegistryDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DocSubmitDateForOutreach).HasColumnType("datetime");
            entity.Property(e => e.HearingAndVisionUnitsPercentageRequired)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InitialOccupiedDate).HasColumnType("datetime");
            entity.Property(e => e.IsLocked).HasDefaultValue(false);
            entity.Property(e => e.LUTExternalGroupId).IsUnicode(false);
            entity.Property(e => e.LockComment).HasMaxLength(500);
            entity.Property(e => e.LotteryDrawOn).HasColumnType("datetime");
            entity.Property(e => e.LutNacRecomadationID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PropertyName).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SelectedStatus).HasMaxLength(500);
            entity.Property(e => e.SeniorDesignated).IsUnicode(false);
            entity.Property(e => e.SiteDescription).IsUnicode(false);
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);

            entity.HasOne(d => d.HousingType).WithMany(p => p.ProjectSiteAttributes)
                .HasForeignKey(d => d.HousingTypeID)
                .HasConstraintName("FK_ProjectSiteAttribute_LutHousingType");

            entity.HasOne(d => d.ParkingType).WithMany(p => p.ProjectSiteAttributes)
                .HasForeignKey(d => d.ParkingTypeID)
                .HasConstraintName("FK_ProjectSiteAttribute_LutParkingType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.ProjectSiteAttributes)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteAttribute_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSiteAttributeLog>(entity =>
        {
            entity.HasKey(e => e.PropertyAttributeLogID).HasName("PK_PropertyAttributeLog");

            entity.ToTable("ProjectSiteAttributeLog", "AAHR");

            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CWLOpenPriorRegistryDate).HasColumnType("datetime");
            entity.Property(e => e.CanPurchaseMoreParking).HasDefaultValue(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DocSubmitDateForOutreach).HasColumnType("datetime");
            entity.Property(e => e.HearingAndVisionUnitsPercentageRequired).IsUnicode(false);
            entity.Property(e => e.InitialOccupiedDate).HasColumnType("datetime");
            entity.Property(e => e.LUTExternalGroupId).IsUnicode(false);
            entity.Property(e => e.LotteryDrawOn).HasColumnType("datetime");
            entity.Property(e => e.LutNacRecomadationID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PropertyName).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SeniorDesignated).IsUnicode(false);
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);
        });

        modelBuilder.Entity<ProjectSiteAttributeSnap>(entity =>
        {
            entity.ToTable("ProjectSiteAttributeSnap", "PMP");

            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CWLOpenPriorRegistryDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DocSubmitDateForOutreach).HasColumnType("datetime");
            entity.Property(e => e.HearingAndVisionUnitsPercentageRequired)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InitialOccupiedDate).HasColumnType("datetime");
            entity.Property(e => e.IsLocked).HasDefaultValue(false);
            entity.Property(e => e.LUTExternalGroupId).IsUnicode(false);
            entity.Property(e => e.LockComment).HasMaxLength(500);
            entity.Property(e => e.LotteryDrawOn).HasColumnType("datetime");
            entity.Property(e => e.LutNacRecomadationID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PropertyName).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SelectedStatus).HasMaxLength(500);
            entity.Property(e => e.SeniorDesignated).IsUnicode(false);
            entity.Property(e => e.SiteDescription).IsUnicode(false);
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.ProjectSiteAttributeSnaps)
                .HasForeignKey(d => d.ProjectSiteAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteAttributeSnap_ProjectSiteAttribute");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.ProjectSiteAttributeSnaps)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteAttributeSnap_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSiteFutureWaitList>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteFutureWaitListID).HasName("PK_AssnProjSiteFutureWaitList");

            entity.ToTable("ProjectSiteFutureWaitList", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsWaitListOpenInFuture).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OutReachConductDate).HasColumnType("datetime");
            entity.Property(e => e.PropertyStatus)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.ProjectSiteFutureWaitLists)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnProjSiteFutureWaitList_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSiteLog>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteLogID).HasName("PK__ProjectS__7949BE5B34AD12E2");

            entity.ToTable("ProjectSiteLog", "AAHR");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<ProjectSiteMarketingFlyer>(entity =>
        {
            entity.HasKey(e => e.MarketingFlyerId);

            entity.ToTable("ProjectSiteMarketingFlyer", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FaxNumber).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.ProjectSiteMarketingFlyers)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_ProjectSiteMarketingFlyer_ProjectSite");
        });

        modelBuilder.Entity<ProjectSiteMarketingFlyerSnap>(entity =>
        {
            entity.HasKey(e => e.MarketingFlyerSnapId);

            entity.ToTable("ProjectSiteMarketingFlyerSnap", "Listing");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FaxNumber).HasMaxLength(50);

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.ProjectSiteMarketingFlyerSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .HasConstraintName("FK_ProjectSiteMarketingFlyerSnap_ProjectSiteSnap");
        });

        modelBuilder.Entity<ProjectSiteNoChangeReport>(entity =>
        {
            entity.ToTable("ProjectSiteNoChangeReport", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.ProjectSiteNoChangeReports)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteNoChangeReport_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSiteSnap>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteSnapID).HasName("PK__projectS__10BFECB5388838FA");

            entity.ToTable("ProjectSiteSnap", "Listing", tb => tb.HasTrigger("trg_ProjectSiteSnapLog"));

            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CWLOpenPriorRegistryDate).HasColumnType("datetime");
            entity.Property(e => e.CloseDateReasonByOPM)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PropertyStatus).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.WaitListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);

            entity.HasOne(d => d.ListingSnap).WithMany(p => p.ProjectSiteSnaps)
                .HasForeignKey(d => d.ListingSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__projectSi__Listi__58C0E58E");
        });

        modelBuilder.Entity<ProjectSiteSnapLog>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteSnapLogId).HasName("PK__ProjectS__4D19A20FEB771378");

            entity.ToTable("ProjectSiteSnapLog", "Listing");

            entity.Property(e => e.ActionPeformed).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CloseDateReasonByOPM)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LogCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.WaitListCloseDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProjectSiteUpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("ProjectSiteUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsUnitBecomeVacant).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.ProjectSiteUpcomingUnitVacancies)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteUpcomingUnitVacancy_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSite_10252023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProjectSite_10252023", "PnC");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteID).ValueGeneratedOnAdd();
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<ProjectWorkLog>(entity =>
        {
            entity.HasKey(e => e.WorkLogID).HasName("PkProjectWorkLog");

            entity.ToTable("ProjectWorkLog", "AAHR");

            entity.HasIndex(e => e.RowID, "UcProjectWorkLog_RowID").IsUnique();

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ResolutionDate).HasColumnType("datetime");
            entity.Property(e => e.ResolutionMessage)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");
            entity.Property(e => e.WorkLog).IsUnicode(false);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.ContactIdentifierID)
                .HasConstraintName("FkProjectWorkLog_ContactIdentifierID");

            entity.HasOne(d => d.HousingAdvocate).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.HousingAdvocateID)
                .HasConstraintName("ProjectWorkLog_HousingAdvocate");

            entity.HasOne(d => d.LutWorkLogType).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.LutWorkLogTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkProjecWorkLog_LutWorkLogType");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.ProjectID)
                .HasConstraintName("FkProjectWorkLog_PncProject");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.ProjectSiteID)
                .HasConstraintName("FkProjectWorkLog_PncProjectSite");
        });

        modelBuilder.Entity<PropAttribute>(entity =>
        {
            entity.HasKey(e => new { e.PropSnapshotID, e.LutPropAttributeID });

            entity.ToTable("PropAttribute", "PnC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.FlagValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");

            entity.HasOne(d => d.LutPropAttribute).WithMany(p => p.PropAttributes)
                .HasForeignKey(d => d.LutPropAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PropAttribute_LutPropAttribute");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.PropAttributes)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PropAttribute_PropSnapshot");
        });

        modelBuilder.Entity<PropSnapshot>(entity =>
        {
            entity.HasKey(e => e.PropSnapshotID).HasName("PK_PropIdentifier");

            entity.ToTable("PropSnapshot", "PnC", tb => tb.HasTrigger("tr_Ins_PropSnapshot"));

            entity.HasIndex(e => e.IdentifierType, "IX_PropSnapshot_IdentifierType_ProjectID");

            entity.HasIndex(e => e.IdentifierType, "IX_PropSnapshot_IdentifierType_ProjectSiteID");

            entity.HasIndex(e => new { e.IdentifierType, e.ProjectSiteID }, "NI_PropSnapshot");

            entity.HasIndex(e => e.ProjectSiteID, "NI_PropSnapshot1");

            entity.HasIndex(e => e.ProjectSiteID, "NI_PropSnapshot_UnitID");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierJSON)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.APN).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.APNID)
                .HasConstraintName("FK_PropIdentifier_APN");

            entity.HasOne(d => d.Level).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.LevelID)
                .HasConstraintName("FK_PropSnapshot_Level");

            entity.HasOne(d => d.Location).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.LocationID)
                .HasConstraintName("FK_PropSnapshot_Location");

            entity.HasOne(d => d.Project).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.ProjectID)
                .HasConstraintName("FK_PropSnapshot_Project");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.ProjectSiteID)
                .HasConstraintName("FK_PropSnapshot_ProjectSite");

            entity.HasOne(d => d.SiteAddress).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.SiteAddressID)
                .HasConstraintName("FK_PropIdentifier_SiteAddress");

            entity.HasOne(d => d.Structure).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.StructureID)
                .HasConstraintName("FK_PropSnapshot_Structure");

            entity.HasOne(d => d.Unit).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.UnitID)
                .HasConstraintName("FK_PropIdentifier_Unit");
        });

        modelBuilder.Entity<PropSnapshot_temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PropSnapshot_temp");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierJSON)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotID).ValueGeneratedOnAdd();
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<PropSnapshot_tempAfter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PropSnapshot_tempAfter");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierJSON)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotID).ValueGeneratedOnAdd();
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<PropertyAccountContactSnapShot>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PropertyAccountContactSnapShot");

            entity.HasIndex(e => e.CaptureDate, "IDX_PropertyAccountContactSnapShot_CaptureDate").IsDescending();

            entity.HasIndex(e => new { e.CaptureDate, e.ContactID }, "IDX_PropertyAccountContactSnapShot_CaptureDate_ContactID").IsDescending(true, false);

            entity.HasIndex(e => e.ContactID, "IDX_PropertyAccoutContactSnapShot_ContactID");

            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Company).HasMaxLength(150);
            entity.Property(e => e.ContactCreatedBy).HasMaxLength(50);
            entity.Property(e => e.ContactCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ContactModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.IDMUserName).HasMaxLength(50);
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo).HasMaxLength(100);
            entity.Property(e => e.Zip).HasMaxLength(100);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<PropertyAccountContactSnapShot1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PropertyAccountContactSnapShot", "DPT");

            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Company).HasMaxLength(150);
            entity.Property(e => e.ContactCreatedBy).HasMaxLength(50);
            entity.Property(e => e.ContactCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ContactModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.IDMUserName).HasMaxLength(50);
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo).HasMaxLength(100);
            entity.Property(e => e.Zip).HasMaxLength(100);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<QRAUTransferWaitList>(entity =>
        {
            entity.ToTable("QRAUTransferWaitList", "AAHR");

            entity.Property(e => e.AUTransferWaitListNumber)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.AccessibilieWaitListDate).HasColumnType("datetime");
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDate).HasColumnType("datetime");
            entity.Property(e => e.TransferRequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.AUTransferWaitList).WithMany(p => p.QRAUTransferWaitLists)
                .HasForeignKey(d => d.AUTransferWaitListID)
                .HasConstraintName("FK_QRAUTransferWaitList_AUTransferWaitList");

            entity.HasOne(d => d.CurrentUnitProjectSite).WithMany(p => p.QRAUTransferWaitListCurrentUnitProjectSites)
                .HasForeignKey(d => d.CurrentUnitProjectSiteID)
                .HasConstraintName("FK_QRAUTransferWaitList_ProjectSite1");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.QRAUTransferWaitListCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotID)
                .HasConstraintName("FK_QRAUTransferWaitList_PropSnapshot");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.QRAUTransferWaitLists)
                .HasForeignKey(d => d.LutTotalBathroomID)
                .HasConstraintName("FK_QRAUTransferWaitList_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.QRAUTransferWaitLists)
                .HasForeignKey(d => d.LutTotalBedroomID)
                .HasConstraintName("FK_QRAUTransferWaitList_LutTotalBedrooms");

            entity.HasOne(d => d.LutTransferWaitListReason).WithMany(p => p.QRAUTransferWaitLists)
                .HasForeignKey(d => d.LutTransferWaitListReasonID)
                .HasConstraintName("FK_QRAUTransferWaitList_LutTransferWaitListReason");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.QRAUTransferWaitLists)
                .HasForeignKey(d => d.LutUnitTypeID)
                .HasConstraintName("FK_QRAUTransferWaitList_QRLutUnitType");

            entity.HasOne(d => d.MoveInProjectSite).WithMany(p => p.QRAUTransferWaitListMoveInProjectSites)
                .HasForeignKey(d => d.MoveInProjectSiteID)
                .HasConstraintName("FK_QRAUTransferWaitList_ProjectSite");

            entity.HasOne(d => d.MoveInUnitPropSnapShot).WithMany(p => p.QRAUTransferWaitListMoveInUnitPropSnapShots)
                .HasForeignKey(d => d.MoveInUnitPropSnapShotID)
                .HasConstraintName("FK_QRAUTransferWaitList_MoveInPropSnapshot");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRAUTransferWaitLists)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRAUTransferWaitList_QuarterlyReport");
        });

        modelBuilder.Entity<QRAUWaitList>(entity =>
        {
            entity.ToTable("QRAUWaitList", "AAHR");

            entity.Property(e => e.AUWaitListNumber).HasMaxLength(50);
            entity.Property(e => e.AUWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.ApplicantMovedUnit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.NatureOfRARequests).IsUnicode(false);
            entity.Property(e => e.TenantAUTransferDate).HasColumnType("datetime");
            entity.Property(e => e.TenantMadeRADate).HasColumnType("datetime");
            entity.Property(e => e.WaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.AUWaitList).WithMany(p => p.QRAUWaitLists)
                .HasForeignKey(d => d.AUWaitListID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRAUWaitList_AUWaitList");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.QRAUWaitListCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotID)
                .HasConstraintName("FK_QRAUWaitList_PropSnapshot");

            entity.HasOne(d => d.LutApplicationType).WithMany(p => p.QRAUWaitLists)
                .HasForeignKey(d => d.LutApplicationTypeID)
                .HasConstraintName("FK_QRAUWaitList_LutApplicationType");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.QRAUWaitLists)
                .HasForeignKey(d => d.LutTotalBathroomID)
                .HasConstraintName("FK_QRAUWaitList_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.QRAUWaitLists)
                .HasForeignKey(d => d.LutTotalBedroomID)
                .HasConstraintName("FK_QRAUWaitList_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.QRAUWaitLists)
                .HasForeignKey(d => d.LutUnitTypeID)
                .HasConstraintName("FK_QRAUWaitList_QRLutUnitType");

            entity.HasOne(d => d.MoveInUnitProjectSite).WithMany(p => p.QRAUWaitLists)
                .HasForeignKey(d => d.MoveInUnitProjectSiteID)
                .HasConstraintName("FK_QRAUWaitList_ProjectSite");

            entity.HasOne(d => d.MoveInUnitPropSnapShot).WithMany(p => p.QRAUWaitListMoveInUnitPropSnapShots)
                .HasForeignKey(d => d.MoveInUnitPropSnapShotID)
                .HasConstraintName("FK_QRAUWaitList_MoveInPropSnapshot");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRAUWaitLists)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRAUWaitList_QuarterlyReport");
        });

        modelBuilder.Entity<QRAssnGrievanceTypeQuestion>(entity =>
        {
            entity.HasKey(e => e.QRAssnGrievanceTypeQuestionId).HasName("PK__QRAssnGr__BBD4A03699C42E4A");

            entity.ToTable("QRAssnGrievanceTypeQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.AssnGrievanceTypeQuestion).WithMany(p => p.QRAssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.AssnGrievanceTypeQuestionId)
                .HasConstraintName("FK__QRAssnGri__AssnG__3F162224");

            entity.HasOne(d => d.GrievanceLog).WithMany(p => p.QRAssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.GrievanceLogId)
                .HasConstraintName("FK__QRAssnGri__Griev__41F28ECF");

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.QRAssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__QRAssnGri__LutGr__400A465D");

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.QRAssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__QRAssnGri__LutGr__40FE6A96");

            entity.HasOne(d => d.QRGrievanceLog).WithMany(p => p.QRAssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.QRGrievanceLogId)
                .HasConstraintName("FK__QRAssnGri__QRGri__63A88855");
        });

        modelBuilder.Entity<QRAssnGrievanceTypeSubQuestion>(entity =>
        {
            entity.HasKey(e => e.QRAssnGrievanceTypeSubQuestionId).HasName("PK__QRAssnGr__F715D46357776A37");

            entity.ToTable("QRAssnGrievanceTypeSubQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmployeOrTenantName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeOrTenantDescription)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeTitleOrUnitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.AssnGrievanceTypeSubQuestion).WithMany(p => p.QRAssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.AssnGrievanceTypeSubQuestionId)
                .HasConstraintName("FK__QRAssnGri__AssnG__45C31FB3");

            entity.HasOne(d => d.GrievanceLog).WithMany(p => p.QRAssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.GrievanceLogId)
                .HasConstraintName("FK__QRAssnGri__Griev__4993B097");

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.QRAssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__QRAssnGri__LutGr__46B743EC");

            entity.HasOne(d => d.LutGrievanceSubQuestion).WithMany(p => p.QRAssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceSubQuestionId)
                .HasConstraintName("FK__QRAssnGri__LutGr__47AB6825");

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.QRAssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__QRAssnGri__LutGr__489F8C5E");

            entity.HasOne(d => d.QRGrievanceLog).WithMany(p => p.QRAssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.QRGrievanceLogId)
                .HasConstraintName("FK__QRAssnGri__QRGri__696161AB");
        });

        modelBuilder.Entity<QRConfiguration>(entity =>
        {
            entity.ToTable("QRConfiguration", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.QRCode)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QREffectiveCommunication>(entity =>
        {
            entity.ToTable("QREffectiveCommunication", "AAHR");

            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfWithdrawal).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.EffectiveCommunicationNumber).HasMaxLength(50);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate1).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate2).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate3).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate4).HasColumnType("datetime");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.EffectiveCommunication).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.EffectiveCommunicationID)
                .HasConstraintName("FK_QREffectiveCommunication_EffectiveCommunication");

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.LutDeterminationStatusID)
                .HasConstraintName("FK_QREffectiveCommunication_LutDeterminationStatus");

            entity.HasOne(d => d.LutECRequestType).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.LutECRequestTypeID)
                .HasConstraintName("FK_QREffectiveCommunication_LutECRequestType");

            entity.HasOne(d => d.LutECType).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.LutECTypeID)
                .HasConstraintName("FK_QREffectiveCommunication_LutECType");

            entity.HasOne(d => d.LutLanguage).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.LutLanguageID)
                .HasConstraintName("FK_QREffectiveCommunication_LutLanguage");

            entity.HasOne(d => d.LutLanguageTranslation).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.LutLanguageTranslationID)
                .HasConstraintName("FK_QREffectiveCommunication_LutLanguageTranslation");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.LutUserTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QREffectiveCommunication_LutUserType");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QREffectiveCommunication_QuarterlyReport");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.UnitProjectSiteID)
                .HasConstraintName("FK_QREffectiveCommunication_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QREffectiveCommunications)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_QREffectiveCommunication_PropSnapshot");
        });

        modelBuilder.Entity<QRFairHousing>(entity =>
        {
            entity.ToTable("QRFairHousing", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LegalOwnerName).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OwnerEmail).HasMaxLength(100);
            entity.Property(e => e.OwnerPhone).HasMaxLength(30);
            entity.Property(e => e.PMEmail).HasMaxLength(100);
            entity.Property(e => e.PMName).HasMaxLength(300);
            entity.Property(e => e.PMPhone).HasMaxLength(30);
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SignerName).HasMaxLength(300);

            entity.HasOne(d => d.FairHousing).WithMany(p => p.QRFairHousings)
                .HasForeignKey(d => d.FairHousingID)
                .HasConstraintName("FK_QRFairHousing_FairHousing");

            entity.HasOne(d => d.LutSignatureTitle).WithMany(p => p.QRFairHousings)
                .HasForeignKey(d => d.LutSignatureTitleID)
                .HasConstraintName("FK_QRFairHousing_LutSignatureTitle");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRFairHousings)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRFairHousing_QuarterlyReport");
        });

        modelBuilder.Entity<QRGrievanceLog>(entity =>
        {
            entity.ToTable("QRGrievanceLog", "AAHR");

            entity.Property(e => e.AnticipatedDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicantAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DecisionPendingDate).HasColumnType("datetime");
            entity.Property(e => e.DecisionProvidedDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDetail).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationName).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationPhone).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationTitleOther).IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceDetail).IsUnicode(false);
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.ImplementationDelayReason).IsUnicode(false);
            entity.Property(e => e.ImplementationInformation).IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MeetingManagerName).IsUnicode(false);
            entity.Property(e => e.MeetingManagerTitle).IsUnicode(false);
            entity.Property(e => e.MeetingRequestDate).HasColumnType("datetime");
            entity.Property(e => e.MeetingScheduledDate).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PendingStatusDescription).IsUnicode(false);
            entity.Property(e => e.RecordsProvidedDate).HasColumnType("datetime");
            entity.Property(e => e.RecordsRequestDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalReason).IsUnicode(false);

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.QRGrievanceLogs)
                .HasForeignKey(d => d.LutDeterminationStatusID)
                .HasConstraintName("FK_QRGrievanceLog_LutGrievanceDeterminationStatus");

            entity.HasOne(d => d.LutDevelopmentCategory).WithMany(p => p.QRGrievanceLogs)
                .HasForeignKey(d => d.LutDevelopmentCategoryID)
                .HasConstraintName("FK_QRGrievanceLog_LutDevelopmentCategory");

            entity.HasOne(d => d.LutFinalDeterminationTitle).WithMany(p => p.QRGrievanceLogs)
                .HasForeignKey(d => d.LutFinalDeterminationTitleID)
                .HasConstraintName("FK_QRGrievanceLog_GrievanceLog");

            entity.HasOne(d => d.LutGrievanceStatus).WithMany(p => p.QRGrievanceLogs)
                .HasForeignKey(d => d.LutGrievanceStatusID)
                .HasConstraintName("FK_QRGrievanceLog_LutGrievanceStatus");

            entity.HasOne(d => d.LutGrievanceSubmitType).WithMany(p => p.QRGrievanceLogs)
                .HasForeignKey(d => d.LutGrievanceSubmitTypeID)
                .HasConstraintName("FK_QRGrievanceLog_LutGrievanceSubmitType");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.QRGrievanceLogs)
                .HasForeignKey(d => d.LutUserTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRGrievanceLog_LutUserType");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.QRGrievanceLogProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .HasConstraintName("FK_QRGrievanceLog_PropSnapshot");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRGrievanceLogs)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRGrievanceLog_QuarterlyReport");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.QRGrievanceLogs)
                .HasForeignKey(d => d.UnitProjectSiteID)
                .HasConstraintName("FK_QRGrievanceLog_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QRGrievanceLogUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_QRGrievanceLog_TenantPropSnapshot");
        });

        modelBuilder.Entity<QROccupancyUnit>(entity =>
        {
            entity.ToTable("QROccupancyUnit", "AAHR");

            entity.Property(e => e.AUWaitListPosition).HasMaxLength(9);
            entity.Property(e => e.AgencyName).HasMaxLength(50);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutPreDirCD).HasMaxLength(50);
            entity.Property(e => e.LutStateCD).HasMaxLength(50);
            entity.Property(e => e.LutStreetTypeCD).HasMaxLength(50);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostDirCd).HasMaxLength(50);
            entity.Property(e => e.PreviousLiveInProperty).HasMaxLength(10);
            entity.Property(e => e.ReferralRecipientEmail).HasMaxLength(100);
            entity.Property(e => e.ReferralRecipientPhone).HasMaxLength(30);
            entity.Property(e => e.StreetName).HasMaxLength(100);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Zip).HasMaxLength(5);

            entity.HasOne(d => d.Building).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.BuildingID)
                .HasConstraintName("FK_QROccupancyUnit_Structure");

            entity.HasOne(d => d.CurrentProjSitePropSnapShot).WithMany(p => p.QROccupancyUnitCurrentProjSitePropSnapShots)
                .HasForeignKey(d => d.CurrentProjSitePropSnapShotID)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot2");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.QROccupancyUnitCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotID)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot3");

            entity.HasOne(d => d.Level).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LevelID)
                .HasConstraintName("FK_QROccupancyUnit_Level");

            entity.HasOne(d => d.LutAMI).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LutAMIID)
                .HasConstraintName("FK_QROccupancyUnit_LutAMI");

            entity.HasOne(d => d.LutLeaseAddendumNotExecuteReason).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LutLeaseAddendumNotExecuteReasonID)
                .HasConstraintName("FK_QROccupancyUnit_LutLeaseAddendumNotExecuteReason");

            entity.HasOne(d => d.LutOccupancyReason).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LutOccupancyReasonID)
                .HasConstraintName("FK_QROccupancyUnit_LutOccupancyReason");

            entity.HasOne(d => d.LutRentalSubsidy).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LutRentalSubsidyID)
                .HasConstraintName("FK_QROccupancyUnit_LutRentalSubsidy");

            entity.HasOne(d => d.LutTenantSelectedFrom).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LutTenantSelectedFromID)
                .HasConstraintName("FK_QROccupancyUnit_LutTenantSelectedFrom");

            entity.HasOne(d => d.LutTotalBathrooms).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LutTotalBathroomsID)
                .HasConstraintName("FK_QROccupancyUnit_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedrooms).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LutTotalBedroomsID)
                .HasConstraintName("FK_QROccupancyUnit_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.LutUnitTypeID)
                .HasConstraintName("FK_QROccupancyUnit_QRLutUnitType");

            entity.HasOne(d => d.PreviousProjSitePropSnapShot).WithMany(p => p.QROccupancyUnitPreviousProjSitePropSnapShots)
                .HasForeignKey(d => d.PreviousProjSitePropSnapShotID)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot4");

            entity.HasOne(d => d.PreviousUnitPropSnapShot).WithMany(p => p.QROccupancyUnitPreviousUnitPropSnapShots)
                .HasForeignKey(d => d.PreviousUnitPropSnapShotID)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot1");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.QuarterlyReportID)
                .HasConstraintName("FK_QROccupancyUnit_QuarterlyReport");

            entity.HasOne(d => d.SiteAddress).WithMany(p => p.QROccupancyUnits)
                .HasForeignKey(d => d.SiteAddressID)
                .HasConstraintName("FK_QROccupancyUnit_SiteAddress");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QROccupancyUnitUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot");
        });

        modelBuilder.Entity<QRProjectSiteFutureWaitList>(entity =>
        {
            entity.ToTable("QRProjectSiteFutureWaitList", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsWaitListOpenInFuture).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OutReachConductDate).HasColumnType("datetime");
            entity.Property(e => e.PropertyStatus)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectSiteFutureWaitList).WithMany(p => p.QRProjectSiteFutureWaitLists)
                .HasForeignKey(d => d.ProjectSiteFutureWaitListID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteFutureWaitList_ProjectSiteFutureWaitList");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRProjectSiteFutureWaitLists)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteFutureWaitList_QuarterlyReport");
        });

        modelBuilder.Entity<QRProjectSiteNoChangeReport>(entity =>
        {
            entity.ToTable("QRProjectSiteNoChangeReport", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSiteNoChangeReport).WithMany(p => p.QRProjectSiteNoChangeReports)
                .HasForeignKey(d => d.ProjectSiteNoChangeReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteNoChangeReport_ProjectSiteNoChangeReport");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRProjectSiteNoChangeReports)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteNoChangeReport_QuarterlyReport");
        });

        modelBuilder.Entity<QRProjectSiteUpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("QRProjectSiteUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSiteUpcomingUnitVacancy).WithMany(p => p.QRProjectSiteUpcomingUnitVacancies)
                .HasForeignKey(d => d.ProjectSiteUpcomingUnitVacancyID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteUpcomingUnitVacancy_ProjectSiteUpcomingUnitVacancy");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRProjectSiteUpcomingUnitVacancies)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteUpcomingUnitVacancy_QuarterlyReport");
        });

        modelBuilder.Entity<QRReasonableAccommodation>(entity =>
        {
            entity.HasKey(e => e.QRReasonableAccommodationID).HasName("PK_QRReasonableAccommodationLog");

            entity.ToTable("QRReasonableAccommodation", "AAHR");

            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateForAddInfo).HasColumnType("datetime");
            entity.Property(e => e.DateForResponse).HasColumnType("datetime");
            entity.Property(e => e.DateOfWithdrawal).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate1).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate2).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate3).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate4).HasColumnType("datetime");
            entity.Property(e => e.ReasonableAccommodationNumber).HasMaxLength(50);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.LutDeterminationStatusID)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutDeterminationStatus");

            entity.HasOne(d => d.LutRACategory).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.LutRACategoryID)
                .HasConstraintName("FK_QRReasonableAccommodation_LutRACategory");

            entity.HasOne(d => d.LutRARequestType).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.LutRARequestTypeID)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutRARequestType");

            entity.HasOne(d => d.LutRASubCategory).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.LutRASubCategoryID)
                .HasConstraintName("FK_QRReasonableAccommodation_LutRASubCategory");

            entity.HasOne(d => d.LutTotalBathrooms).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.LutTotalBathroomsID)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedrooms).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.LutTotalBedroomsID)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutTotalBedrooms");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.LutUserTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutUserType");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRReasonableAccommodation_QuarterlyReport");

            entity.HasOne(d => d.ReasonableAccommodation).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.ReasonableAccommodationID)
                .HasConstraintName("FK_QRReasonableAccommodation_ReasonableAccommodation");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.UnitProjectSiteID)
                .HasConstraintName("FK_QRReasonableAccommodation_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QRReasonableAccommodations)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_QRReasonableAccommodationLog_PropSnapshot");
        });

        modelBuilder.Entity<QRUpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("QRUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.AUWLNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.QRUpcomingUnitVacancyCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotID)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_PropSnapshot2");

            entity.HasOne(d => d.LutUpcomingUnitVacancy).WithMany(p => p.QRUpcomingUnitVacancies)
                .HasForeignKey(d => d.LutUpcomingUnitVacancyID)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_LutUpcomingUnitVacancy");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.QRUpcomingUnitVacancyProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_PropSnapshot");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRUpcomingUnitVacancies)
                .HasForeignKey(d => d.QuarterlyReportID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_QuarterlyReport");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QRUpcomingUnitVacancyUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_PropSnapshot1");

            entity.HasOne(d => d.UpcomingUnitVacancy).WithMany(p => p.QRUpcomingUnitVacancies)
                .HasForeignKey(d => d.UpcomingUnitVacancyID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_UpcomingUnitVacancy");
        });

        modelBuilder.Entity<QRUtilizationSurvey>(entity =>
        {
            entity.ToTable("QRUtilizationSurvey", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QRUtilizationSurveys)
                .HasForeignKey(d => d.QuarterlyReportID)
                .HasConstraintName("FK_QRUtilizationSurvey_QuarterlyReport");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QRUtilizationSurveys)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_QRUtilizationSurvey_PropSnapshot");
        });

        modelBuilder.Entity<QuarterlyReport>(entity =>
        {
            entity.ToTable("QuarterlyReport", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Quarter).HasMaxLength(2);

            entity.HasOne(d => d.PropSnapShot).WithMany(p => p.QuarterlyReports)
                .HasForeignKey(d => d.PropSnapShotID)
                .HasConstraintName("FK_QuarterlyReport_PropSnapshot");

            entity.HasOne(d => d.ReviewedCaseLog).WithMany(p => p.QuarterlyReportReviewedCaseLogs)
                .HasForeignKey(d => d.ReviewedCaseLogID)
                .HasConstraintName("FK_QuarterlyReport_CaseLog1");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.QuarterlyReports)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_QuarterlyReport_ServiceRequest");

            entity.HasOne(d => d.SubmittedCaseLog).WithMany(p => p.QuarterlyReportSubmittedCaseLogs)
                .HasForeignKey(d => d.SubmittedCaseLogID)
                .HasConstraintName("FK_QuarterlyReport_CaseLog");
        });

        modelBuilder.Entity<ReasonableAccommodation>(entity =>
        {
            entity.HasKey(e => e.ReasonableAccommodationID).HasName("PK_ReasonableAccommodationLog");

            entity.ToTable("ReasonableAccommodation", "AAHR", tb => tb.HasTrigger("trgReasonableAccommodationNumber"));

            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateForAddInfo).HasColumnType("datetime");
            entity.Property(e => e.DateForResponse).HasColumnType("datetime");
            entity.Property(e => e.DateOfWithdrawal).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate1).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate2).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate3).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate4).HasColumnType("datetime");
            entity.Property(e => e.ReasonableAccommodationNumber).HasMaxLength(50);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutDeterminationStatusID)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutDeterminationStatus");

            entity.HasOne(d => d.LutRACategory).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutRACategoryID)
                .HasConstraintName("FK_ReasonableAccommodation_LutRACategory");

            entity.HasOne(d => d.LutRARequestType).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutRARequestTypeID)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutRARequestType");

            entity.HasOne(d => d.LutRASubCategory).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutRASubCategoryID)
                .HasConstraintName("FK_ReasonableAccommodation_LutRASubCategory");

            entity.HasOne(d => d.LutTotalBathrooms).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutTotalBathroomsID)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedrooms).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutTotalBedroomsID)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutTotalBedrooms");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutUserTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutUserType");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.UnitProjectSiteID)
                .HasConstraintName("FK_ReasonableAccommodation_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_ReasonableAccommodationLog_PropSnapshot");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.ToTable("Region", "PnC");

            entity.Property(e => e.RegionID)
                .ValueGeneratedNever()
                .HasComment("Primary Key Identity column for the Neighborhood table");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("('System')")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.GeoJsonCoordinates)
                .IsUnicode(false)
                .HasComment("Geographic Json cooridantes");
            entity.Property(e => e.GeoJsonGeometryType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Geographic Json type");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.ParentNeighborhoodID).HasComment("Neighborhood belongs to which region");
            entity.Property(e => e.RegionName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of Neighborhood or Region");
            entity.Property(e => e.RegionNumber).HasComment("1 Sorting sequence for Region");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("N = Neighborhood, R = Region");
            entity.Property(e => e.WKT)
                .IsUnicode(false)
                .HasComment("Well know text for the geometry");
        });

        modelBuilder.Entity<ReviewListingLog>(entity =>
        {
            entity.ToTable("ReviewListingLog", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsAcHPStaff).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status).IsUnicode(false);
        });

        modelBuilder.Entity<ReviewPMPLog>(entity =>
        {
            entity.ToTable("ReviewPMPLog", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAffirmativeMarketingDoc).HasColumnType("datetime");
            entity.Property(e => e.DateFinalCertificate).HasColumnType("datetime");
            entity.Property(e => e.DatePrelimaryCertificate).HasColumnType("datetime");
            entity.Property(e => e.FinalCertUploadByUserFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinalCertUploadByUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAcHPStaff).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PrelimaryCertUploadByUserFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrelimaryCertUploadByUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreliminaryApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Status).IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.ReviewPMPLogs)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FK_ReviewPMPLog_Case");
        });

        modelBuilder.Entity<ReviewPMPLogSnap>(entity =>
        {
            entity.ToTable("ReviewPMPLogSnap", "PMP");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAffirmativeMarketingDoc).HasColumnType("datetime");
            entity.Property(e => e.DateFinalCertificate).HasColumnType("datetime");
            entity.Property(e => e.DatePrelimaryCertificate).HasColumnType("datetime");
            entity.Property(e => e.FinalCertUploadByUserFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinalCertUploadByUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAcHPStaff).HasDefaultValue(false);
            entity.Property(e => e.PrelimaryCertUploadByUserFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrelimaryCertUploadByUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreliminaryApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Status).IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.ReviewPMPLogSnaps)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FK_ReviewPMPLogSnap_Case");

            entity.HasOne(d => d.PMPSnap).WithMany(p => p.ReviewPMPLogSnaps)
                .HasForeignKey(d => d.PMPSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReviewPMPLogSnap_PMPSnap");
        });

        modelBuilder.Entity<ReviewReportDetail>(entity =>
        {
            entity.ToTable("ReviewReportDetail", "AAHPPC");

            entity.Property(e => e.Analyst)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Supervisor)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.ReviewReportDetails)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_ReviewReportDetail_ServiceRequest1");
        });

        modelBuilder.Entity<ReviewReportItem>(entity =>
        {
            entity.HasKey(e => e.ReviewReportItemID).HasName("PK_PolicyReportDetail");

            entity.ToTable("ReviewReportItem", "AAHPPC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ReportLanguage).IsUnicode(false);

            entity.HasOne(d => d.LutReviewReportItem).WithMany(p => p.ReviewReportItems)
                .HasForeignKey(d => d.LutReviewReportItemID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReviewReportItem_LutReviewReportItem");

            entity.HasOne(d => d.ReviewReportDetail).WithMany(p => p.ReviewReportItems)
                .HasForeignKey(d => d.ReviewReportDetailID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReviewReportItem_ReviewReportDetail");
        });

        modelBuilder.Entity<RoleMaster>(entity =>
        {
            entity.ToTable("RoleMaster", "CC");

            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.Application).WithMany(p => p.RoleMasters)
                .HasForeignKey(d => d.ApplicationId)
                .HasConstraintName("FK_RoleMaster_AM");
        });

        modelBuilder.Entity<SPDetailView_ColumnConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPDetailView_CC");

            entity.ToTable("SPDetailView_ColumnConfig", "CC");

            entity.Property(e => e.ColumnName).HasMaxLength(500);
            entity.Property(e => e.DisplayName).HasMaxLength(500);
            entity.Property(e => e.SPConfigId).HasComment("Reference to SPView_SPConfiguration");
            entity.Property(e => e.Target).HasMaxLength(50);

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.SPDetailView_ColumnConfigs)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPDetailView_CCSPDV_DC");

            entity.HasOne(d => d.SPConfig).WithMany(p => p.SPDetailView_ColumnConfigs)
                .HasForeignKey(d => d.SPConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPDetailView_SPV_SPC");
        });

        modelBuilder.Entity<SPDetailView_DisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPView_DisplayConfig");

            entity.ToTable("SPDetailView_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.HelpText).IsUnicode(false);
            entity.Property(e => e.IsCollapsed)
                .HasDefaultValue(false)
                .HasComment("This field is used to store set SPView accrodian setting is expand or collapse.");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.NoOfViewColumns).HasComment("This field is used to store how many columns display on SPView section.");
            entity.Property(e => e.ParamNamenValue).HasComment("This field is used to store stored procedure paramater name and parameter value. ");
            entity.Property(e => e.SPConfigId).HasComment("Reference to SPView_SPConfiguration");

            entity.HasOne(d => d.SPConfig).WithMany(p => p.SPDetailView_DisplayConfigs)
                .HasForeignKey(d => d.SPConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPDetailView_DisConfSPV_SPC");
        });

        modelBuilder.Entity<SPGridView_ColumnConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPGridView_CC");

            entity.ToTable("SPGridView_ColumnConfig", "CC");

            entity.Property(e => e.ColumnName).HasMaxLength(50);
            entity.Property(e => e.DisplayName).HasMaxLength(500);
            entity.Property(e => e.SPConfigId).HasComment("Reference to SPView_SPConfiguration");
            entity.Property(e => e.Target).HasMaxLength(50);

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.SPGridView_ColumnConfigs)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGridView_CC_SPGV_DC");

            entity.HasOne(d => d.SPConfig).WithMany(p => p.SPGridView_ColumnConfigs)
                .HasForeignKey(d => d.SPConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGV_CC_SPV_SPC");
        });

        modelBuilder.Entity<SPGridView_DisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SSRSTable_DispConf");

            entity.ToTable("SPGridView_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.IsADA).HasDefaultValue(false);
            entity.Property(e => e.IsCollapsed)
                .HasDefaultValue(false)
                .HasComment("This field is used to store set SPView accrodian setting is expand or collapse.");
            entity.Property(e => e.IsFilter).HasDefaultValue(false);
            entity.Property(e => e.IsPaging).HasDefaultValue(false);
            entity.Property(e => e.IsSearch).HasDefaultValue(false);
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.NoOfRecords).HasComment("This field is used for how many records you want to display on report.");
            entity.Property(e => e.ParamNamenValue).HasComment("This field is used to store stored procedure paramater name and parameter value. ");
            entity.Property(e => e.SPConfigId).HasComment("Reference to SPView_SPConfiguration");

            entity.HasOne(d => d.LutRenderType).WithMany(p => p.SPGridView_DisplayConfigs)
                .HasForeignKey(d => d.LutRenderTypeID)
                .HasConstraintName("FK_SPGridView_DisplayConfig_LutRenderType");

            entity.HasOne(d => d.SPConfig).WithMany(p => p.SPGridView_DisplayConfigs)
                .HasForeignKey(d => d.SPConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGridView_DC_SPV_SPC");
        });

        modelBuilder.Entity<SPGroupView_ColumnConfig>(entity =>
        {
            entity.ToTable("SPGroupView_ColumnConfig", "CC");

            entity.Property(e => e.ColumnName).HasMaxLength(50);
            entity.Property(e => e.DisplayName).HasMaxLength(50);
            entity.Property(e => e.Target).HasMaxLength(50);

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.SPGroupView_ColumnConfigs)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGroupView_ColumnConfig_SPGroupView_DisplayConfig");

            entity.HasOne(d => d.SPConfig).WithMany(p => p.SPGroupView_ColumnConfigs)
                .HasForeignKey(d => d.SPConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGroupView_ColumnConfig_SPView_SPConfig");
        });

        modelBuilder.Entity<SPGroupView_DisplayConfig>(entity =>
        {
            entity.ToTable("SPGroupView_DisplayConfig", "CC");

            entity.Property(e => e.GroupColumnName).HasMaxLength(50);
            entity.Property(e => e.LabelColumnName).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.ValueColumnName).HasMaxLength(50);

            entity.HasOne(d => d.SPConfig).WithMany(p => p.SPGroupView_DisplayConfigs)
                .HasForeignKey(d => d.SPConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGroupView_DisplayConfig_SPView_SPConfig");
        });

        modelBuilder.Entity<SPMatrixView_DisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SSRSMatrix_DC");

            entity.ToTable("SPMatrixView_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("DisplayConfigID is identity column.");
            entity.Property(e => e.ColumnField)
                .HasMaxLength(50)
                .HasComment("This field is used to store y coordinates column name of matrix report.");
            entity.Property(e => e.DataField)
                .HasMaxLength(50)
                .HasComment("This field stores data column whose count will be displayed in matrix.");
            entity.Property(e => e.IsCollapsed)
                .HasDefaultValue(false)
                .HasComment("This field is used to store set SPView accrodian setting is expand or collapse.");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.NoOfRecords).HasComment("This field is used to store how many records you want to display on report.");
            entity.Property(e => e.ParamNamenValue).HasComment("This field is used to store stored procedure paramater name and parameter value. ");
            entity.Property(e => e.RowField)
                .HasMaxLength(50)
                .HasComment("This field is used to store x coordinates column name of matrix report.");
            entity.Property(e => e.SPConfigId).HasComment("Reference to SPView_SPConfiguration");

            entity.HasOne(d => d.SPConfig).WithMany(p => p.SPMatrixView_DisplayConfigs)
                .HasForeignKey(d => d.SPConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPMatrixView_DC_SPV_SPC");
        });

        modelBuilder.Entity<SPView_DBConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPView_DBConfiguration");

            entity.ToTable("SPView_DBConfig", "CC");

            entity.Property(e => e.Id).HasComment("DBConfigID is identity column.");
            entity.Property(e => e.DBName)
                .HasMaxLength(50)
                .HasComment("This field is used to store database name.");
            entity.Property(e => e.Password)
                .HasMaxLength(50)
                .HasComment("This field is used to store database password.");
            entity.Property(e => e.Port)
                .HasMaxLength(10)
                .HasComment("Port.");
            entity.Property(e => e.ServerName)
                .HasMaxLength(50)
                .HasComment("This field is used to store database server name.");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .HasComment("This field is used to store database username.");
        });

        modelBuilder.Entity<SPView_SPConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPView_SPConfiguration");

            entity.ToTable("SPView_SPConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.DBConfigId).HasComment("Reference to SPView_DBConfiguration table");
            entity.Property(e => e.SPName)
                .HasMaxLength(50)
                .HasComment("This field is used to store stored procedure name which is exists on selected database server.");

            entity.HasOne(d => d.DBConfig).WithMany(p => p.SPView_SPConfigs)
                .HasForeignKey(d => d.DBConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPView_SPC_SPV_DBC");
        });

        modelBuilder.Entity<SVCAREA2012>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SVCAREA2012");

            entity.Property(e => e.ABBV).HasMaxLength(5);
            entity.Property(e => e.LABEL).HasMaxLength(3);
            entity.Property(e => e.SPA_NAME).HasMaxLength(15);
        });

        modelBuilder.Entity<ServiceRequest>(entity =>
        {
            entity.HasKey(e => e.ServiceRequestID).HasName("PK_BrushCase");

            entity.ToTable("ServiceRequest", "IMS", tb => tb.HasComment("Service Request table."));

            entity.HasIndex(e => e.CaseID, "NI_unitattributeid");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestNumber).HasMaxLength(20);
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);

            entity.HasOne(d => d.Case).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BrushCase_Case");

            entity.HasOne(d => d.LutComplianceStatus).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.LutComplianceStatusID)
                .HasConstraintName("FK_BrushCase_LutComplianceStatus");

            entity.HasOne(d => d.LutInspectionStatus).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.LutInspectionStatusID)
                .HasConstraintName("FK_BrushCase_LutInspectionStatus");

            entity.HasOne(d => d.LutProgramCycle).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.LutProgramCycleID)
                .HasConstraintName("FK_ServiceRequest_LutProgramCycle");

            entity.HasOne(d => d.LutServiceRequestType).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.LutServiceRequestTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequest_ServiceRequestType");

            entity.HasOne(d => d.RefServiceRequestNavigation).WithMany(p => p.InverseRefServiceRequestNavigation)
                .HasForeignKey(d => d.RefServiceRequest)
                .HasConstraintName("FK_ServiceRequest_ServiceRequest");

            entity.HasMany(d => d.Notices).WithMany(p => p.ServiceRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnServiceRequestNotice",
                    r => r.HasOne<Notice>().WithMany()
                        .HasForeignKey("NoticeID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestNotice_Notice"),
                    l => l.HasOne<ServiceRequest>().WithMany()
                        .HasForeignKey("ServiceRequestID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestNotice_ServiceRequest"),
                    j =>
                    {
                        j.HasKey("ServiceRequestID", "NoticeID");
                        j.ToTable("AssnServiceRequestNotice", "IMS");
                    });

            entity.HasMany(d => d.PropSnapshots).WithMany(p => p.ServiceRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnServiceRequestPropSnapshot",
                    r => r.HasOne<PropSnapshot>().WithMany()
                        .HasForeignKey("PropSnapshotID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestPropIdentifier_PropIdentifier"),
                    l => l.HasOne<ServiceRequest>().WithMany()
                        .HasForeignKey("ServiceRequestID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestPropIdentifier_ServiceRequest"),
                    j =>
                    {
                        j.HasKey("ServiceRequestID", "PropSnapshotID").HasName("PK_AssnServiceRequestPropIdentifier");
                        j.ToTable("AssnServiceRequestPropSnapshot", "PnC");
                        j.HasIndex(new[] { "PropSnapshotID" }, "IX_AssnServiceRequestPropSnapshot_PropSnapshotID");
                    });
        });

        modelBuilder.Entity<ServiceRequestContact>(entity =>
        {
            entity.HasKey(e => e.ServiceRequestContactID).HasName("PK_CaseContact");

            entity.ToTable("ServiceRequestContact", "PnC");

            entity.Property(e => e.AssociationType).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsMailing).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.ServiceRequestContacts)
                .HasForeignKey(d => d.ContactIdentifierID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestContact_ContactIdentifier");

            entity.HasOne(d => d.LutContactType).WithMany(p => p.ServiceRequestContacts)
                .HasForeignKey(d => d.LutContactTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestContact_LutContactType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.ServiceRequestContacts)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestContact_ServiceRequest");
        });

        modelBuilder.Entity<ServiceRequestGMCheckList>(entity =>
        {
            entity.HasKey(e => e.SRGMCheckListID);

            entity.ToTable("ServiceRequestGMCheckList", "IMS");

            entity.Property(e => e.Answer)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutGMCheckList).WithMany(p => p.ServiceRequestGMCheckLists)
                .HasForeignKey(d => d.LutGMCheckListID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestGMCheckList_LutGMCheckList");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.ServiceRequestGMCheckLists)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestGMCheckList_ServiceRequest");
        });

        modelBuilder.Entity<SiteAddress>(entity =>
        {
            entity.ToTable("SiteAddress", "PnC", tb => tb.HasTrigger("trg_SiteAddressLog"));

            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .HasComputedColumnSql("(ltrim(rtrim(replace(replace((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([City]+' ',''))+isnull([State]+' ',''))+[Zip],'  ',' '),'  ',' '))))", false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PIN)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ZipSuffix)
                .HasMaxLength(4)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasMany(d => d.Structures).WithMany(p => p.SiteAddresses)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnSiteAddressStructure",
                    r => r.HasOne<Structure>().WithMany()
                        .HasForeignKey("StructureID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_BuildingID_AssnBuildingID"),
                    l => l.HasOne<SiteAddress>().WithMany()
                        .HasForeignKey("SiteAddressID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SiteAddressID_AssnSiteAddressID"),
                    j =>
                    {
                        j.HasKey("SiteAddressID", "StructureID").HasName("PK_SiteAddress_BuildingID");
                        j.ToTable("AssnSiteAddressStructure", "PnC");
                    });
        });

        modelBuilder.Entity<SiteAddressLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SiteAddressLog", "PnC");

            entity.Property(e => e.AddressLine1).HasMaxLength(100);
            entity.Property(e => e.AddressLine2).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PIN)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostDirCd).HasMaxLength(50);
            entity.Property(e => e.PreDirCd).HasMaxLength(50);
            entity.Property(e => e.SiteAddressLogID).ValueGeneratedOnAdd();
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName).HasMaxLength(100);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Zip).HasMaxLength(5);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<SiteAssociatedAssessorsParcelNumber>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SiteAsso__3214EC07E4A71BCF");

            entity.ToTable("SiteAssociatedAssessorsParcelNumber", "AAHR");

            entity.Property(e => e.APNNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAcHP).HasDefaultValue(false);
            entity.Property(e => e.IsHIMS).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.isDeleted).HasDefaultValue(false);
        });

        modelBuilder.Entity<Structure>(entity =>
        {
            entity.HasKey(e => e.StructureID).HasName("PK_Building");

            entity.ToTable("Structure", "PnC", tb => tb.HasTrigger("trg_StructureLog"));

            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Description).HasDefaultValue("");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefID)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.APN).WithMany(p => p.Structures)
                .HasForeignKey(d => d.APNID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Structure_APN");

            entity.HasOne(d => d.LutStructureType).WithMany(p => p.Structures)
                .HasForeignKey(d => d.LutStructureTypeID)
                .HasConstraintName("FK_Structure_LutStructureType");
        });

        modelBuilder.Entity<StructureAssociatedAssessorsParcelNumber>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Structur__3214EC0793AEC3D7");

            entity.ToTable("StructureAssociatedAssessorsParcelNumber", "AAHR");

            entity.Property(e => e.APNNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.isDeleted).HasDefaultValue(false);
        });

        modelBuilder.Entity<StructureAttribute>(entity =>
        {
            entity.HasKey(e => e.StructureAttributeID).HasName("PK__tmp_ms_x__9B8778DE1F7985B9");

            entity.ToTable("StructureAttribute", "AAHR", tb => tb.HasTrigger("trg_StructureAttributeLog"));

            entity.Property(e => e.AcHPAssociatedAPN)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BuildingDescription).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DBSRetrofitBuildingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DateOf1stBuildingPermitForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stCoFOForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stPlanCheckSubmissionForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stTCOForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOfCurrentBuildingPermitFinaled).HasColumnType("datetime");
            entity.Property(e => e.DateOfFCO).HasColumnType("datetime");
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FHA_11ADesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstPlanCheckSubmissionForConversionToResidential).HasMaxLength(100);
            entity.Property(e => e.HIMSAPN)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.HistoricBuildingCofODate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitIssueDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitNumber).IsUnicode(false);
            entity.Property(e => e.HistoricBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.LADBSjson).IsUnicode(false);
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModificationsGrantedByLADBSUnitsBuildings).IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OtherStructureType).HasMaxLength(100);
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.LutBuildingType).WithMany(p => p.StructureAttributes)
                .HasForeignKey(d => d.LutBuildingTypeID)
                .HasConstraintName("FK_StructureAttribute_LutBuildingType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.StructureAttributes)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StructureAttribute_PropSnapshot");
        });

        modelBuilder.Entity<StructureAttributeLog>(entity =>
        {
            entity.HasKey(e => e.StructureAttributeLogID).HasName("PK_StructureAttributeLogID");

            entity.ToTable("StructureAttributeLog", "AAHR");

            entity.Property(e => e.AcHPAssociatedAPN)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BuildingDescription).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DBSRetrofitBuildingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DateOf1stBuildingPermitForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stCoFOForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stPlanCheckSubmissionForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stTCOForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOfCurrentBuildingPermitFinaled).HasColumnType("datetime");
            entity.Property(e => e.DateOfFCO).HasColumnType("datetime");
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FHA_11ADesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstPlanCheckSubmissionForConversionToResidential).HasMaxLength(100);
            entity.Property(e => e.HIMSAPN)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.HistoricBuildingCofODate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitIssueDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitNumber).IsUnicode(false);
            entity.Property(e => e.HistoricBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.LADBSjson).IsUnicode(false);
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModificationsGrantedByLADBSUnitsBuildings).IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OtherStructureType).HasMaxLength(100);
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StructureAttribute_temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StructureAttribute_temp");

            entity.Property(e => e.AcHPAssociatedAPN)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DBSRetrofitBuildingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FHA_11ADesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HIMSAPN)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StructureAttributeID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<StructureAttribute_tempAfter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StructureAttribute_tempAfter");

            entity.Property(e => e.AcHPAssociatedAPN)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DBSRetrofitBuildingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FHA_11ADesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HIMSAPN)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StructureAttributeID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<StructureLog>(entity =>
        {
            entity.HasKey(e => e.StructureLogID).HasName("PK_StructureLogId");

            entity.ToTable("StructureLog", "AAHR");

            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefID)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StructureUnitInformation>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK__Structur__3214EC27851E84A1");

            entity.ToTable("StructureUnitInformation", "AAHR");

            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Total).HasDefaultValue(0);
        });

        modelBuilder.Entity<Structure_temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Structure_temp");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefID)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureID).ValueGeneratedOnAdd();
            entity.Property(e => e.StructureNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Structure_tempAfter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Structure_tempAfter");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefID)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureID).ValueGeneratedOnAdd();
            entity.Property(e => e.StructureNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SubmissionErrorLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ListingSubmissionErrorLog");

            entity.ToTable("SubmissionErrorLog", "AAHR");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModuleName).HasMaxLength(50);
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.HasKey(e => e.SubscriptionID).HasName("PK_Subscriptions");

            entity.ToTable("Subscription", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.ContactIdentifierID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Subscriptions_ContactIdentifier");
        });

        modelBuilder.Entity<SurveyReport>(entity =>
        {
            entity.HasKey(e => e.SurveyReportID).HasName("PK_AAHPCC.LCMIntake");

            entity.ToTable("SurveyReport", "AAHPCC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DBSCertificateOccupancyDate).HasColumnType("datetime");
            entity.Property(e => e.DBSDatePermitIssued).HasColumnType("datetime");
            entity.Property(e => e.DBSDateSubmitToLA).HasColumnType("datetime");
            entity.Property(e => e.DBSPermitFinalledDate).HasColumnType("datetime");
            entity.Property(e => e.DBSRequiresFHAInspection)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Mob10perReqByAgreement).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MobExisting)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MobRecommend)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NACInspectionDate).HasColumnType("datetime");
            entity.Property(e => e.ParkingRequired)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PlanCheckPermitCost).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PrevailWageMaterialCostPlus30per).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ReformedAndFinalDate).HasColumnType("datetime");
            entity.Property(e => e.ReportDate).HasColumnType("datetime");
            entity.Property(e => e.ResidentialBuildingType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TotalCostForRetrofit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UCF4perReqByAgreement).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UCFExisting)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UCFRecommended)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.SurveyReports)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_NACIntake_ServiceRequest");
        });

        modelBuilder.Entity<TAssnPropContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TAssnPropContact", "PnC");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierType).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<TQR2FairHousingBatch1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TQR2FairHousingBatch1");

            entity.Property(e => e.AcHP__)
                .HasMaxLength(255)
                .HasColumnName("AcHP #");
            entity.Property(e => e.F13).HasMaxLength(255);
            entity.Property(e => e.F2).HasMaxLength(255);
            entity.Property(e => e.Legal_Owner_Name)
                .HasMaxLength(255)
                .HasColumnName("Legal Owner Name");
            entity.Property(e => e.Owner_Address)
                .HasMaxLength(255)
                .HasColumnName("Owner Address");
            entity.Property(e => e.Owner_Email)
                .HasMaxLength(255)
                .HasColumnName("Owner Email");
            entity.Property(e => e.Owner_Phone)
                .HasMaxLength(255)
                .HasColumnName("Owner Phone");
            entity.Property(e => e.PMEmail).HasMaxLength(255);
            entity.Property(e => e.PMName).HasMaxLength(255);
            entity.Property(e => e.PMPhone).HasMaxLength(255);
            entity.Property(e => e.Property_Address)
                .HasMaxLength(255)
                .HasColumnName("Property Address");
            entity.Property(e => e.Property_Name)
                .HasMaxLength(255)
                .HasColumnName("Property Name");
            entity.Property(e => e.QRBegin_Date)
                .HasColumnType("datetime")
                .HasColumnName("QRBegin Date");
            entity.Property(e => e.QREnd_Date)
                .HasColumnType("datetime")
                .HasColumnName("QREnd Date");
            entity.Property(e => e.QRReport_Create_Date_Time__Copy_from_Previous_Tab_Column_H_)
                .HasColumnType("datetime")
                .HasColumnName("QRReport Create Date Time (Copy from Previous Tab Column H)");
            entity.Property(e => e.Quarterly_Report_ID__Sys_)
                .HasMaxLength(255)
                .HasColumnName("Quarterly Report ID (Sys)");
            entity.Property(e => e.Statement_1)
                .HasMaxLength(255)
                .HasColumnName("Statement 1");
            entity.Property(e => e.Statement_10)
                .HasMaxLength(255)
                .HasColumnName("Statement 10");
            entity.Property(e => e.Statement_11)
                .HasMaxLength(255)
                .HasColumnName("Statement 11");
            entity.Property(e => e.Statement_12)
                .HasMaxLength(255)
                .HasColumnName("Statement 12");
            entity.Property(e => e.Statement_13)
                .HasMaxLength(255)
                .HasColumnName("Statement 13");
            entity.Property(e => e.Statement_14)
                .HasMaxLength(255)
                .HasColumnName("Statement 14");
            entity.Property(e => e.Statement_15)
                .HasMaxLength(255)
                .HasColumnName("Statement 15");
            entity.Property(e => e.Statement_16)
                .HasMaxLength(255)
                .HasColumnName("Statement 16");
            entity.Property(e => e.Statement_2)
                .HasMaxLength(255)
                .HasColumnName("Statement 2");
            entity.Property(e => e.Statement_3)
                .HasMaxLength(255)
                .HasColumnName("Statement 3");
            entity.Property(e => e.Statement_4)
                .HasMaxLength(255)
                .HasColumnName("Statement 4");
            entity.Property(e => e.Statement_5)
                .HasMaxLength(255)
                .HasColumnName("Statement 5");
            entity.Property(e => e.Statement_6)
                .HasMaxLength(255)
                .HasColumnName("Statement 6");
            entity.Property(e => e.Statement_7)
                .HasMaxLength(255)
                .HasColumnName("Statement 7");
            entity.Property(e => e.Statement_8)
                .HasMaxLength(255)
                .HasColumnName("Statement 8");
            entity.Property(e => e.Statement_9)
                .HasMaxLength(255)
                .HasColumnName("Statement 9");
            entity.Property(e => e.Total_Fully_Accessible_HVUnit).HasColumnName("Total Fully Accessible HVUnit");
            entity.Property(e => e.Total_Fully_Accessible_Mobility_Unit).HasColumnName("Total Fully Accessible Mobility Unit");
            entity.Property(e => e.Total_Tenants_Occupied_AUWithout_Need).HasColumnName("Total Tenants Occupied AUWithout Need");
            entity.Property(e => e.Total_Vacant_AUThis_Quarter).HasColumnName("Total Vacant AUThis Quarter");
            entity.Property(e => e.Year_QR)
                .HasMaxLength(255)
                .HasColumnName("Year QR");
        });

        modelBuilder.Entity<TQR2ServiceRequestBatch1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TQR2ServiceRequestBatch1");

            entity.Property(e => e.AcHP__)
                .HasMaxLength(255)
                .HasColumnName("AcHP #");
            entity.Property(e => e.Created_By)
                .HasMaxLength(255)
                .HasColumnName("Created By");
            entity.Property(e => e.Created_On__Upload_Date_to_Intranet_)
                .HasColumnType("datetime")
                .HasColumnName("Created On (Upload Date to Intranet)");
            entity.Property(e => e.QR_Quarter)
                .HasMaxLength(255)
                .HasColumnName("QR Quarter");
            entity.Property(e => e.QR_Status)
                .HasMaxLength(255)
                .HasColumnName("QR Status");
            entity.Property(e => e.QR_year_YYYY_).HasColumnName("QR year YYYY ");
            entity.Property(e => e.Quarterly_Report_ID)
                .HasMaxLength(255)
                .HasColumnName("Quarterly Report ID");
            entity.Property(e => e.Service_Request_ID)
                .HasMaxLength(255)
                .HasColumnName("Service Request ID");
        });

        modelBuilder.Entity<TabControlViewMap>(entity =>
        {
            entity.ToTable("TabControlViewMap", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table.");
            entity.Property(e => e.ControlViewId).HasComment("This ID will connect to Contro View Master to fetch the associated Control with specific View Configuration.");
            entity.Property(e => e.RenderSection)
                .HasMaxLength(50)
                .HasComment("Optional Parameter to specify the locatin where control should be rendered. This should be in sync with sections on Tab.");
            entity.Property(e => e.TabId).HasComment("This ID represents Tab on which associated control will be rendered. It connects to Tab Master.");

            entity.HasOne(d => d.ControlView).WithMany(p => p.TabControlViewMaps)
                .HasForeignKey(d => d.ControlViewId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TabControlViewMap_CV");

            entity.HasOne(d => d.Tab).WithMany(p => p.TabControlViewMaps)
                .HasForeignKey(d => d.TabId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TabControlViewMap_TabMaste");

            entity.HasMany(d => d.Roles).WithMany(p => p.TabControlViews)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnTabControlRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnTabControlRole_RM"),
                    l => l.HasOne<TabControlViewMap>().WithMany()
                        .HasForeignKey("TabControlView")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnTabControlRole_TCVM"),
                    j =>
                    {
                        j.HasKey("TabControlView", "RoleId");
                        j.ToTable("AssnTabControlRole", "CC");
                    });
        });

        modelBuilder.Entity<TabMaster>(entity =>
        {
            entity.ToTable("TabMaster", "CC", tb => tb.HasComment("This table holds information about all the tabs within an application. Any tab that needs to render common control has to be added to this table."));

            entity.Property(e => e.DisplayName).HasMaxLength(50);
            entity.Property(e => e.IsLoginRequired).HasDefaultValue(true);
            entity.Property(e => e.ShowTitle).HasDefaultValue(true);
            entity.Property(e => e.TabName).HasMaxLength(50);

            entity.HasOne(d => d.Application).WithMany(p => p.TabMasters)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TabMaster_ApplicationMaste");

            entity.HasOne(d => d.ParentTab).WithMany(p => p.InverseParentTab)
                .HasForeignKey(d => d.ParentTabId)
                .HasConstraintName("FK_TabMaster_TabMaster");

            entity.HasOne(d => d.Reference).WithMany(p => p.InverseReference)
                .HasForeignKey(d => d.ReferenceId)
                .HasConstraintName("FK_TabMaster_TabMaster1");

            entity.HasOne(d => d.Template).WithMany(p => p.TabMasters)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_TabMaster_TemplateMaster");

            entity.HasMany(d => d.Roles).WithMany(p => p.Tabs)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnTabRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnTabRole_RoleMaster"),
                    l => l.HasOne<TabMaster>().WithMany()
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnTabRole_TabMaster"),
                    j =>
                    {
                        j.HasKey("TabId", "RoleId");
                        j.ToTable("AssnTabRole", "CC");
                    });
        });

        modelBuilder.Entity<TeamManagement>(entity =>
        {
            entity.ToTable("TeamManagement", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<TempPrefHouseId>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempPrefHouseId");

            entity.Property(e => e.APN)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PrefHouseId)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TemplateDetail>(entity =>
        {
            entity.ToTable("TemplateDetail", "CC", tb => tb.HasComment("This table is used for to store template detail in form of row and number of column that template have. Each row have 1 or more columns and column increase in multiple of 2 i.e. 2,4,6...12. Max column width is 12."));

            entity.Property(e => e.RenderSection)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Template).WithMany(p => p.TemplateDetails)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_TemplateDetail_TemplateMaster");
        });

        modelBuilder.Entity<TemplateMaster>(entity =>
        {
            entity.ToTable("TemplateMaster", "CC");

            entity.Property(e => e.TemplateName).HasMaxLength(100);
        });

        modelBuilder.Entity<Trainer>(entity =>
        {
            entity.HasKey(e => e.TrainerID).HasName("PkTrainer");

            entity.ToTable("Trainer", "TRN", tb => tb.HasComment("Training information"));

            entity.Property(e => e.TrainerID).HasComment("Primary Key Identity column for the Trainer table");
            entity.Property(e => e.Comment)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("internal notes related to trainer");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("trainer email addresss");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("trainer first name");
            entity.Property(e => e.HireDate)
                .HasComment("date start work for provide training service")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasComment("if 0, trainer wont be assign to train session anymore");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("trainer last name");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("trainer middle name");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("trainer phone number");
            entity.Property(e => e.Profile)
                .IsUnicode(false)
                .HasComment("trainer profile, some information about the trainer");
        });

        modelBuilder.Entity<TrainingHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrainingHistory", "DPT");

            entity.Property(e => e.CancelByHostDate).HasColumnType("datetime");
            entity.Property(e => e.CancelByUserDate).HasColumnType("datetime");
            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContactIdentifierEmail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierFirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierIDMUserName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierLastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierMiddleName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CourseDetails).IsUnicode(false);
            entity.Property(e => e.CourseName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.EnrolledDate).HasColumnType("datetime");
            entity.Property(e => e.GenerateCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.GroupContactFirstName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupContactLastName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupContactMiddleName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupIDMUserName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.MarkAbsentDate).HasColumnType("datetime");
            entity.Property(e => e.MarkAttendDate).HasColumnType("datetime");
            entity.Property(e => e.StatementNumber)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TraineeTitle).HasMaxLength(100);
            entity.Property(e => e.TrainerComments)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerEmail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerHireDate)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerPhone)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerProfile).IsUnicode(false);
            entity.Property(e => e.TrainingCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrainingDate).HasColumnType("datetime");
            entity.Property(e => e.TrainingLocation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedByName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.TrainingRegistryFirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryLastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryMiddleName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryStatus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistyEmail).HasMaxLength(500);
            entity.Property(e => e.TrainingSessionNotes).IsUnicode(false);
            entity.Property(e => e.TrainingType)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TransferCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateCertificateNameDate).HasColumnType("datetime");
            entity.Property(e => e.staffcomments).IsUnicode(false);
        });

        modelBuilder.Entity<TrainingHistory_20211122>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrainingHistory_20211122", "DPT");

            entity.Property(e => e.CancelByHostDate).HasColumnType("datetime");
            entity.Property(e => e.CancelByUserDate).HasColumnType("datetime");
            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContactIdentifierEmail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierFirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierIDMUserName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierLastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierMiddleName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CourseDetails).IsUnicode(false);
            entity.Property(e => e.CourseName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.EnrolledDate).HasColumnType("datetime");
            entity.Property(e => e.GenerateCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.GroupContactFirstName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupContactLastName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupContactMiddleName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupIDMUserName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.ID).ValueGeneratedOnAdd();
            entity.Property(e => e.MarkAbsentDate).HasColumnType("datetime");
            entity.Property(e => e.MarkAttendDate).HasColumnType("datetime");
            entity.Property(e => e.StatementNumber)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TraineeTitle).HasMaxLength(100);
            entity.Property(e => e.TrainerComments)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerEmail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerHireDate)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerPhone)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerProfile).IsUnicode(false);
            entity.Property(e => e.TrainingCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrainingDate).HasColumnType("datetime");
            entity.Property(e => e.TrainingLocation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedByName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.TrainingRegistryFirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryLastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryStatus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistyEmail).HasMaxLength(500);
            entity.Property(e => e.TrainingSessionNotes).IsUnicode(false);
            entity.Property(e => e.TrainingType)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TransferCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateCertificateNameDate).HasColumnType("datetime");
            entity.Property(e => e.staffcomments).IsUnicode(false);
        });

        modelBuilder.Entity<TrainingRegistry>(entity =>
        {
            entity.ToTable("TrainingRegistry", "TRN");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.FirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(50);

            entity.HasOne(d => d.Case).WithMany(p => p.TrainingRegistries)
                .HasForeignKey(d => d.CaseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingRegistry_Case");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.TrainingRegistries)
                .HasForeignKey(d => d.ContactIdentifierID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingRegistry_ContactIdentifier");

            entity.HasOne(d => d.Organization).WithMany(p => p.TrainingRegistries)
                .HasForeignKey(d => d.OrganizationID)
                .HasConstraintName("FkTrainingRegistry_OrganizationID");

            entity.HasOne(d => d.TrainingSession).WithMany(p => p.TrainingRegistries)
                .HasForeignKey(d => d.TrainingSessionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingRegistry_TrainingSession");
        });

        modelBuilder.Entity<TrainingSession>(entity =>
        {
            entity.HasKey(e => e.TrainingSessionID).HasName("PkTrainingSession");

            entity.ToTable("TrainingSession", "TRN", tb => tb.HasComment("Training Session"));

            entity.HasIndex(e => e.TrainingCode, "UC_TrainingSession_TrainingCode").IsUnique();

            entity.HasIndex(e => e.RowID, "UcTrainingSession_RowID").IsUnique();

            entity.Property(e => e.TrainingSessionID).HasComment("Primary Key Identity column for the TrainingSession table");
            entity.Property(e => e.Capacity).HasComment("max capacity for the training session");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasComment("internal comment");
            entity.Property(e => e.CourseID).HasComment("Course for the training session");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Duration).HasComment("Duration for the training session");
            entity.Property(e => e.EndEnrollDate)
                .HasComment("End enrollment date")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasComment("1 = the training session mark as deleted in system.");
            entity.Property(e => e.IsPrivate).HasComment("1 = reserve for private");
            entity.Property(e => e.LutTrainingSessionStatusID).HasComment("status for the training session");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasComment("additional information related to the training session");
            entity.Property(e => e.RowID)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System");
            entity.Property(e => e.ScheduleDate)
                .HasComment("schedule date and time for the training session")
                .HasColumnType("datetime");
            entity.Property(e => e.StartEnrollDate)
                .HasComment("Start enrollment date")
                .HasColumnType("datetime");
            entity.Property(e => e.TrainingCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("human readable code for the training session");
            entity.Property(e => e.TrainingLocation)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("location hosted the training");

            entity.HasOne(d => d.Course).WithMany(p => p.TrainingSessions)
                .HasForeignKey(d => d.CourseID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkTrainingSession_Course");

            entity.HasOne(d => d.LutTrainingSessionStatus).WithMany(p => p.TrainingSessions)
                .HasForeignKey(d => d.LutTrainingSessionStatusID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkTrainingSession_LutTrainingSessionStatus");
        });

        modelBuilder.Entity<TrainingSessionTrainer>(entity =>
        {
            entity.HasKey(e => new { e.TrainingSessionID, e.AssnCourseTrainerID });

            entity.ToTable("TrainingSessionTrainer", "TRN");

            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.AssnCourseTrainer).WithMany(p => p.TrainingSessionTrainers)
                .HasForeignKey(d => d.AssnCourseTrainerID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingSessionTrainer_AssnCourseTrainer");
        });

        modelBuilder.Entity<Unit>(entity =>
        {
            entity.HasKey(e => e.UnitID).HasName("PK_UnitAddress");

            entity.ToTable("Unit", "PnC", tb =>
                {
                    tb.HasTrigger("tr_Upd_Unit");
                    tb.HasTrigger("trg_UnitLog");
                });

            entity.HasIndex(e => e.Status, "NCI_Unit");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.APN).WithMany(p => p.Units)
                .HasForeignKey(d => d.APNID)
                .HasConstraintName("FK_UnitAddress_APN");

            entity.HasOne(d => d.Building).WithMany(p => p.Units)
                .HasForeignKey(d => d.BuildingID)
                .HasConstraintName("FK_Unit_Building");

            entity.HasOne(d => d.Level).WithMany(p => p.Units)
                .HasForeignKey(d => d.LevelID)
                .HasConstraintName("FK_Unit_Floor");

            entity.HasOne(d => d.LutUnitAccessibiltyType).WithMany(p => p.Units)
                .HasForeignKey(d => d.LutUnitAccessibiltyTypeID)
                .HasConstraintName("FK_Unit_LutUnitAccessibiltyType");

            entity.HasOne(d => d.Project).WithMany(p => p.Units)
                .HasForeignKey(d => d.ProjectID)
                .HasConstraintName("FK_Unit_Project");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.Units)
                .HasForeignKey(d => d.ProjectSiteID)
                .HasConstraintName("FK_Unit_ProjectSite");

            entity.HasOne(d => d.SiteAddress).WithMany(p => p.Units)
                .HasForeignKey(d => d.SiteAddressID)
                .HasConstraintName("FK_UnitAddress_SiteAddress");
        });

        modelBuilder.Entity<UnitAttribute>(entity =>
        {
            entity.HasKey(e => e.UnitAttributeID).HasName("PK_ListingUnit");

            entity.ToTable("UnitAttribute", "AAHR", tb => tb.HasTrigger("trg_UnitAttributeLog"));

            entity.HasIndex(e => e.IsDeleted, "NCI_UnitAttribute");

            entity.HasIndex(e => e.IsDeleted, "NCI_UnitAttribute1");

            entity.HasIndex(e => e.PropSnapshotID, "PK_PropsnapshotId").IsUnique();

            entity.Property(e => e.AUWaitListPosition).HasMaxLength(9);
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FloorPlanType).HasMaxLength(100);
            entity.Property(e => e.IsAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsAdaptable).HasDefaultValue(false);
            entity.Property(e => e.IsAddendumSigned).HasDefaultValue(0);
            entity.Property(e => e.IsCES).HasDefaultValue(false);
            entity.Property(e => e.IsEnhancedAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.IsOccupied).HasDefaultValue(false);
            entity.Property(e => e.IsOccupiedByDisabled).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutEAPFeatureIDs1A).IsUnicode(false);
            entity.Property(e => e.LutEAPFeatureIDs1B).IsUnicode(false);
            entity.Property(e => e.LutEAPFeatureIDsOptional).IsUnicode(false);
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.CurrentProjSitePropSnapShot).WithMany(p => p.UnitAttributeCurrentProjSitePropSnapShots)
                .HasForeignKey(d => d.CurrentProjSitePropSnapShotID)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot3");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.UnitAttributeCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotID)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot4");

            entity.HasOne(d => d.LutAMI).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutAMIID)
                .HasConstraintName("FK_ListingUnit_LutAMI");

            entity.HasOne(d => d.LutAccessibilityComplianceStatus).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutAccessibilityComplianceStatusId)
                .HasConstraintName("FK_UnitAttribute_LutAccessibilityComplianceStatus");

            entity.HasOne(d => d.LutFixedFloatingUnit).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutFixedFloatingUnitID)
                .HasConstraintName("FK_UnitAttribute_LutFixedFloatingUnit");

            entity.HasOne(d => d.LutLeaseAddendumNotExecuteReason).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutLeaseAddendumNotExecuteReasonID)
                .HasConstraintName("FK_UnitAttribute_LutLeaseAddendumNotExecuteReason");

            entity.HasOne(d => d.LutOccupancyReason).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutOccupancyReasonID)
                .HasConstraintName("FK_UnitAttribute_LutOccupancyReason");

            entity.HasOne(d => d.LutRentalSubsidy).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutRentalSubsidyID)
                .HasConstraintName("FK_ListingUnit_LutRentalSubsidy");

            entity.HasOne(d => d.LutTenantSelectedFrom).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutTenantSelectedFromID)
                .HasConstraintName("FK_UnitAttribute_LutTenantSelectedFrom");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.UnitAttributeLutTotalBathrooms)
                .HasForeignKey(d => d.LutTotalBathroomID)
                .HasConstraintName("FK_UnitAttribute_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.UnitAttributeLutTotalBedrooms)
                .HasForeignKey(d => d.LutTotalBedroomID)
                .HasConstraintName("FK_UnitAttribute_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.UnitAttributeLutUnitTypes)
                .HasForeignKey(d => d.LutUnitTypeID)
                .HasConstraintName("FK_ListingUnit_LutUnitType");

            entity.HasOne(d => d.PreviousProjSitePropSnapShot).WithMany(p => p.UnitAttributePreviousProjSitePropSnapShots)
                .HasForeignKey(d => d.PreviousProjSitePropSnapShotID)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot1");

            entity.HasOne(d => d.PreviousUnitPropSnapShot).WithMany(p => p.UnitAttributePreviousUnitPropSnapShots)
                .HasForeignKey(d => d.PreviousUnitPropSnapShotID)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot2");

            entity.HasOne(d => d.PropSnapshot).WithOne(p => p.UnitAttributePropSnapshot)
                .HasForeignKey<UnitAttribute>(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot");

            entity.HasOne(d => d.TenantRequestedBathrooms).WithMany(p => p.UnitAttributeTenantRequestedBathrooms)
                .HasForeignKey(d => d.TenantRequestedBathroomsID)
                .HasConstraintName("FK_UnitAttribute_LutTotalBathrooms1");

            entity.HasOne(d => d.TenantRequestedBedrooms).WithMany(p => p.UnitAttributeTenantRequestedBedrooms)
                .HasForeignKey(d => d.TenantRequestedBedroomsID)
                .HasConstraintName("FK_UnitAttribute_LutTotalBedrooms1");

            entity.HasOne(d => d.TenantRequestedUnitType).WithMany(p => p.UnitAttributeTenantRequestedUnitTypes)
                .HasForeignKey(d => d.TenantRequestedUnitTypeID)
                .HasConstraintName("FK_UnitAttribute_LutUnitType");
        });

        modelBuilder.Entity<UnitAttributeLog>(entity =>
        {
            entity.HasKey(e => e.ListingUnitLogID);

            entity.ToTable("UnitAttributeLog", "AAHR");

            entity.Property(e => e.AUWaitListPosition).HasMaxLength(9);
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAddendumSigned).HasDefaultValue(0);
            entity.Property(e => e.IsCES).HasDefaultValue(false);
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.IsOccupied).HasDefaultValue(false);
            entity.Property(e => e.IsOccupiedByDisabled).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<UnitBathroomType>(entity =>
        {
            entity.HasKey(e => e.UnitBathroomTypeID).HasName("PK__UnitBath__0129AFE45C94B7F8");

            entity.ToTable("UnitBathroomType", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutBathroomType).WithMany(p => p.UnitBathroomTypes)
                .HasForeignKey(d => d.LutBathroomTypeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UnitBathr__LutBa__641CBE4A");

            entity.HasOne(d => d.UnitAttribute).WithMany(p => p.UnitBathroomTypes)
                .HasForeignKey(d => d.UnitAttributeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UnitBathr__UnitA__4B66EA70");
        });

        modelBuilder.Entity<UnitLog>(entity =>
        {
            entity.HasKey(e => e.UnitLogID).HasName("PK_UnitLogId");

            entity.ToTable("UnitLog", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UnitNum).HasMaxLength(20);
        });

        modelBuilder.Entity<UnitSnap>(entity =>
        {
            entity.HasKey(e => e.UnitSnapID).HasName("PK__UnitSnap__D84E1A8425BEA9AF");

            entity.ToTable("UnitSnap", "Listing");

            entity.HasIndex(e => new { e.LutUnitTypeID, e.IsAccessible }, "idx_listing_UnitSnap_LutUnitTypeID");

            entity.HasIndex(e => e.ProjectSiteSnapID, "idx_listing_UnitSnap_ProjectSiteSnapID");

            entity.Property(e => e.AUWaitListPosition).HasMaxLength(9);
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalsubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.UnitNo).IsUnicode(false);

            entity.HasOne(d => d.LutLeaseAddendumNotExecuteReason).WithMany(p => p.UnitSnaps)
                .HasForeignKey(d => d.LutLeaseAddendumNotExecuteReasonID)
                .HasConstraintName("FK_UnitSnap_LutLeaseAddendumNotExecuteReason");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.UnitSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UnitSnap__Projec__6432983A");
        });

        modelBuilder.Entity<UpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("UpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.AUWLNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.UpcomingUnitVacancyCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotID)
                .HasConstraintName("FK_UpcomingUnitVacancy_PropSnapshot2");

            entity.HasOne(d => d.LutUpcomingUnitVacancy).WithMany(p => p.UpcomingUnitVacancies)
                .HasForeignKey(d => d.LutUpcomingUnitVacancyID)
                .HasConstraintName("FK_UpcomingUnitVacancy_LutUpcomingUnitVacancy");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.UpcomingUnitVacancyProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UpcomingUnitVacancy_PropSnapshot");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.UpcomingUnitVacancyUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotID)
                .HasConstraintName("FK_UpcomingUnitVacancy_PropSnapshot1");
        });

        modelBuilder.Entity<UserSearchCriterion>(entity =>
        {
            entity.ToTable("UserSearchCriteria", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ViewConfiguration");

            entity.ToTable("ViewConfig", "CC", tb => tb.HasComment("View Configuration for SSRSViewer Control."));

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.DisplayName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Name or title to be displayed during rendering of this control. If not specified, blank title will be displayed.");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Name of this configuration. This name should be unique for given type of control.");
        });

        modelBuilder.Entity<Violation>(entity =>
        {
            entity.HasKey(e => e.ViolationID).HasName("PK_Voilation_1");

            entity.ToTable("Violation", "IMS");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ClearedBy).HasMaxLength(100);
            entity.Property(e => e.ClearedOn).HasColumnType("datetime");
            entity.Property(e => e.CodeInfo).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsFeeRequired).HasComment("Obsolete yes or no");
            entity.Property(e => e.IsPermitRequired).HasComment("Obsolete yes or no");
            entity.Property(e => e.Justification).IsUnicode(false);
            entity.Property(e => e.LocationCategory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocationInfo).IsUnicode(false);
            entity.Property(e => e.MarkerLatitude).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.MarkerLongitude).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Remedy).IsUnicode(false);
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.SeverityLevelBldg)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeverityLevelProp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeverityLevelUnit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.LutViolation).WithMany(p => p.Violations)
                .HasForeignKey(d => d.LutViolationID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Violation_LutViolation1");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.Violations)
                .HasForeignKey(d => d.PropSnapshotID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Violation_PropSnapshot");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Violations)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_Violation_ServiceRequest");
        });

        modelBuilder.Entity<VwProjectSitePrimaryContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwProjectSitePrimaryContacts");

            entity.Property(e => e.Address).HasMaxLength(361);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyName).HasMaxLength(150);
            entity.Property(e => e.ContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Street).HasMaxLength(161);
            entity.Property(e => e.Unit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WFLog_DisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WFLog_DisplayConfiguration");

            entity.ToTable("WFLog_DisplayConfig", "CC");

            entity.Property(e => e.LogGroupedBy)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.WFDefinition).WithMany(p => p.WFLog_DisplayConfigs)
                .HasForeignKey(d => d.WFDefinitionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFLog_DC_WF_Def");
        });

        modelBuilder.Entity<WFNavigation_DisplayConfig>(entity =>
        {
            entity.ToTable("WFNavigation_DisplayConfig", "CC");

            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.NavigationStyle).HasMaxLength(50);

            entity.HasOne(d => d.WFDefinition).WithMany(p => p.WFNavigation_DisplayConfigs)
                .HasForeignKey(d => d.WFDefinitionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFNavigation_DC_WF_Def");
        });

        modelBuilder.Entity<WFStateFlag>(entity =>
        {
            entity.HasKey(e => e.WorkFlowFlagID);

            entity.ToTable("WFStateFlag", "IMS");
        });

        modelBuilder.Entity<WF_Action>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WF_Transition");

            entity.ToTable("WF_Action", "CC");

            entity.Property(e => e.CaseConditionParam).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.ActionView).WithMany(p => p.WF_Actions)
                .HasForeignKey(d => d.ActionViewID)
                .HasConstraintName("FK_WF_Action_WF_ActionView");

            entity.HasOne(d => d.CaseCondition).WithMany(p => p.WF_Actions)
                .HasForeignKey(d => d.CaseConditionID)
                .HasConstraintName("FK_WF_Action_WF_CaseCondition");

            entity.HasOne(d => d.Definition).WithMany(p => p.WF_Actions)
                .HasForeignKey(d => d.DefinitionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_Action_WF_Definition");

            entity.HasOne(d => d.DestinationState).WithMany(p => p.WF_ActionDestinationStates)
                .HasForeignKey(d => d.DestinationStateID)
                .HasConstraintName("FK_WF_Action_WF_State_Dest");

            entity.HasOne(d => d.SourceState).WithMany(p => p.WF_ActionSourceStates)
                .HasForeignKey(d => d.SourceStateID)
                .HasConstraintName("FK_WF_Action_WF_State_Source");

            entity.HasMany(d => d.Roles).WithMany(p => p.WFActions)
                .UsingEntity<Dictionary<string, object>>(
                    "WF_AssnWFActionAccessRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnWFActionRole_RM"),
                    l => l.HasOne<WF_Action>().WithMany()
                        .HasForeignKey("WFActionID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WF_AssnWFActionRole_WF_Act"),
                    j =>
                    {
                        j.HasKey("WFActionID", "RoleID").HasName("PK_WF_AssnWFActionRole");
                        j.ToTable("WF_AssnWFActionAccessRole", "CC");
                    });

            entity.HasMany(d => d.RolesNavigation).WithMany(p => p.WFActionsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "WF_AssnWFActionAssigneeRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WF_AssnWFActionARM"),
                    l => l.HasOne<WF_Action>().WithMany()
                        .HasForeignKey("WFActionID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WF_AssnWFAAR_WF_A"),
                    j =>
                    {
                        j.HasKey("WFActionID", "RoleID").HasName("PK_WF_AssnWFActionAR");
                        j.ToTable("WF_AssnWFActionAssigneeRole", "CC");
                    });
        });

        modelBuilder.Entity<WF_ActionView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WF_Action");

            entity.ToTable("WF_ActionView", "CC");

            entity.Property(e => e.Action).HasMaxLength(50);
            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Controller).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Parameters).HasMaxLength(500);
        });

        modelBuilder.Entity<WF_ActionViewPermission>(entity =>
        {
            entity.HasKey(e => e.ActionViewPermissionID);

            entity.ToTable("WF_ActionViewPermission", "CC");

            entity.Property(e => e.FieldName).HasMaxLength(100);

            entity.HasOne(d => d.ActionView).WithMany(p => p.WF_ActionViewPermissions)
                .HasForeignKey(d => d.ActionViewID)
                .HasConstraintName("FK_WF_ActionViewPermission_WF_ActionView");

            entity.HasOne(d => d.Role).WithMany(p => p.WF_ActionViewPermissions)
                .HasForeignKey(d => d.RoleID)
                .HasConstraintName("FK_WF_ActionViewPermission_RoleMaster");
        });

        modelBuilder.Entity<WF_CaseCondition>(entity =>
        {
            entity.ToTable("WF_CaseCondition", "CC", tb => tb.HasComment("This table holds condition based on assignee or creator of the case. \r\ne.g. \r\nAssignee/Craetor Only will ignore previlleage to Role category and only the assignee/creator will view the option."));

            entity.Property(e => e.Condition).HasMaxLength(50);
        });

        modelBuilder.Entity<WF_Definition>(entity =>
        {
            entity.ToTable("WF_Definition", "CC");

            entity.Property(e => e.DiagramData).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.Application).WithMany(p => p.WF_Definitions)
                .HasForeignKey(d => d.ApplicationId)
                .HasConstraintName("FK_WF_Definition_AppMast");
        });

        modelBuilder.Entity<WF_State>(entity =>
        {
            entity.ToTable("WF_State", "CC");

            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Type).HasMaxLength(10);

            entity.HasOne(d => d.AutoNextAction).WithMany(p => p.WF_States)
                .HasForeignKey(d => d.AutoNextActionID)
                .HasConstraintName("FK_WF_State_WF_Action");

            entity.HasOne(d => d.Definition).WithMany(p => p.WF_States)
                .HasForeignKey(d => d.DefinitionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_State_WF_Definition1");
        });

        modelBuilder.Entity<WSDetailView_ColumnConfig>(entity =>
        {
            entity.ToTable("WSDetailView_ColumnConfig", "CC");

            entity.Property(e => e.ColumnName).HasMaxLength(20);
            entity.Property(e => e.DisplayName).HasMaxLength(20);
            entity.Property(e => e.LinkTarget).HasMaxLength(20);

            entity.HasOne(d => d.WSConfig).WithMany(p => p.WSDetailView_ColumnConfigs)
                .HasForeignKey(d => d.WSConfigId)
                .HasConstraintName("FK_WSDetailView_ColumnConfig_WSView_WSConfig");

            entity.HasOne(d => d.WSDisplayConfig).WithMany(p => p.WSDetailView_ColumnConfigs)
                .HasForeignKey(d => d.WSDisplayConfigId)
                .HasConstraintName("FK_WSDetailView_ColumnConfig_WSDetailView_DisplayConfig");
        });

        modelBuilder.Entity<WSDetailView_DisplayConfig>(entity =>
        {
            entity.ToTable("WSDetailView_DisplayConfig", "CC");

            entity.HasOne(d => d.WSConfig).WithMany(p => p.WSDetailView_DisplayConfigs)
                .HasForeignKey(d => d.WSConfigId)
                .HasConstraintName("FK_WSDetailView_DisplayConfig_WSView_WSConfig");
        });

        modelBuilder.Entity<WSGridView_ColumnConfig>(entity =>
        {
            entity.ToTable("WSGridView_ColumnConfig", "CC");

            entity.Property(e => e.Alignment).HasMaxLength(20);
            entity.Property(e => e.ColumnName).HasMaxLength(20);
            entity.Property(e => e.DataFormat).HasMaxLength(20);
            entity.Property(e => e.DataType).HasMaxLength(20);
            entity.Property(e => e.DisplayName).HasMaxLength(20);
            entity.Property(e => e.LinkTarget).HasMaxLength(20);
            entity.Property(e => e.SortingDir).HasMaxLength(20);
            entity.Property(e => e.SortingType).HasMaxLength(20);

            entity.HasOne(d => d.WSConfig).WithMany(p => p.WSGridView_ColumnConfigs)
                .HasForeignKey(d => d.WSConfigId)
                .HasConstraintName("FK_WSGridView_ColumnConfig_WSView_WSConfig");

            entity.HasOne(d => d.WSDisplayConfig).WithMany(p => p.WSGridView_ColumnConfigs)
                .HasForeignKey(d => d.WSDisplayConfigId)
                .HasConstraintName("FK_WSGridView_ColumnConfig_WSGridView_DisplayConfig");
        });

        modelBuilder.Entity<WSGridView_DisplayConfig>(entity =>
        {
            entity.ToTable("WSGridView_DisplayConfig", "CC");

            entity.HasOne(d => d.WSConfig).WithMany(p => p.WSGridView_DisplayConfigs)
                .HasForeignKey(d => d.WSConfigId)
                .HasConstraintName("FK_WSGridView_DisplayConfig_WSView_WSConfig");
        });

        modelBuilder.Entity<WSView_WSConfig>(entity =>
        {
            entity.ToTable("WSView_WSConfig", "CC");

            entity.HasOne(d => d.WSType).WithMany(p => p.WSView_WSConfigs)
                .HasForeignKey(d => d.WSTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WSView_WSConfig_WSView_WSType1");
        });

        modelBuilder.Entity<WSView_WSType>(entity =>
        {
            entity.ToTable("WSView_WSType", "CC");

            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .IsFixedLength();
        });

        modelBuilder.Entity<WarrantDetail>(entity =>
        {
            entity.ToTable("WarrantDetail", "IMS");

            entity.Property(e => e.ContactName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.WarrantRequestedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Inspection).WithMany(p => p.WarrantDetails)
                .HasForeignKey(d => d.InspectionID)
                .HasConstraintName("FK_WarrantDetail_Inspection");
        });

        modelBuilder.Entity<WorkExtension>(entity =>
        {
            entity.HasKey(e => e.WorkExtensionID).HasName("PK_Extension");

            entity.ToTable("WorkExtension", "IMS");

            entity.Property(e => e.ApprovedDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PreferredDay)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Inspection).WithMany(p => p.WorkExtensions)
                .HasForeignKey(d => d.InspectionID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Extension_Inspection");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.WorkExtensions)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Extension_ServiceRequest");
        });

        modelBuilder.Entity<WorkLog>(entity =>
        {
            entity.ToTable("WorkLog", "IMS");

            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutWorkLogType).WithMany(p => p.WorkLogs)
                .HasForeignKey(d => d.LutWorkLogTypeID)
                .HasConstraintName("FK_WorkLog_LutWorkLogType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.WorkLogs)
                .HasForeignKey(d => d.ServiceRequestID)
                .HasConstraintName("FK_WorkLog_ServiceRequest");
        });

        modelBuilder.Entity<WorkOrder>(entity =>
        {
            entity.ToTable("WorkOrder", "IMS");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAward).HasColumnType("datetime");
            entity.Property(e => e.DateSignedOff).HasColumnType("datetime");
            entity.Property(e => e.DateSubmittedAcc).HasColumnType("datetime");
            entity.Property(e => e.EncumberedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EstimatedCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ExtendedDueDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoicingDate).HasColumnType("datetime");
            entity.Property(e => e.LateDay).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ReleasedDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.TotalWOCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.WCDueDate).HasColumnType("datetime");
            entity.Property(e => e.WOTalliedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.WorkCompletionDate).HasColumnType("datetime");
            entity.Property(e => e.WorkOrderReference)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasComputedColumnSql("(replicate('0',(9)-len(rtrim([WorkOrderID])))+rtrim([WorkOrderID]))", true);

            entity.HasOne(d => d.Contractor).WithMany(p => p.WorkOrders)
                .HasForeignKey(d => d.ContractorID)
                .HasConstraintName("FK_WorkOrder_AssnUserContractor");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.WorkOrders)
                .HasForeignKey(d => d.ServiceRequestID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WorkOrder_ServiceRequest");
        });

        modelBuilder.Entity<allapn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("allapn");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutEllisTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LutModReasonCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LutModVerifiedCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LutResidHotelTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropDesc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.UseCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<lupbldg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("lupbldg");

            entity.Property(e => e.BldgClassShpTxt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.BldgDsgnTypCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.BldgSubPartNbr)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LupSysUserID)
                .HasMaxLength(8)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LupTimestmp).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<replacementapn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("replacementapn");

            entity.Property(e => e.hims)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<tContactIdentifier>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tContactIdentifier", "PnC");

            entity.Property(e => e.BusinessLicense).HasMaxLength(100);
            entity.Property(e => e.CensoredName).HasMaxLength(150);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierID).ValueGeneratedOnAdd();
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email2).HasMaxLength(200);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress).HasMaxLength(300);
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IDMUserName).HasMaxLength(50);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseValidFrom).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidTo).HasColumnType("datetime");
            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneFax).HasMaxLength(50);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.Phone_Ext)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PictureMain).HasMaxLength(200);
            entity.Property(e => e.PictureThumbnail).HasMaxLength(200);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferredContactMethod).HasMaxLength(20);
            entity.Property(e => e.Salutation).HasMaxLength(20);
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
            entity.Property(e => e.apn).HasMaxLength(50);
        });

        modelBuilder.Entity<tcaselog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tcaselog");

            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CaseLogID).ValueGeneratedOnAdd();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FromState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastAssigneeID)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.LastAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NewAssigneeID)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.NewAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ToState)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<tempdocstatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempdocstatus");

            entity.Property(e => e.status).HasMaxLength(500);
        });

        modelBuilder.Entity<tqrCorrectionNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tqrCorrectionNote");

            entity.Property(e => e.CorrectionNote).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.QRCorrectionNoteID).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<vwAAHRDefaultContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAAHRDefaultContact", "AAHR");

            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContact)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PMAddress).HasMaxLength(361);
            entity.Property(e => e.PMCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PMCompanyName).HasMaxLength(150);
            entity.Property(e => e.PMContact)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PMContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.PMEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMPhone).HasMaxLength(4000);
            entity.Property(e => e.PMState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PMStreet).HasMaxLength(161);
            entity.Property(e => e.PMUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMZip)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwAAHRGISFeature>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAAHRGISFeature", "AAHR");

            entity.Property(e => e.Address).HasMaxLength(4000);
            entity.Property(e => e.LAT).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.lon).HasColumnType("decimal(9, 6)");
        });

        modelBuilder.Entity<vwAAHRPropertiesToGetLADBSPermit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAAHRPropertiesToGetLADBSPermit", "AAHR");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PIN).HasMaxLength(50);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SourceReferenceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SourceType)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ZipSuffix)
                .HasMaxLength(4)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwAAHRPublicContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAAHRPublicContact", "AAHR");

            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContact)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PMAddress).HasMaxLength(361);
            entity.Property(e => e.PMCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PMCompanyName).HasMaxLength(150);
            entity.Property(e => e.PMContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.PMEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMPhone).HasMaxLength(4000);
            entity.Property(e => e.PMState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PMStreet).HasMaxLength(161);
            entity.Property(e => e.PMUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMZip)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwAcHPDataForHHH>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAcHPDataForHHH", "AAHR");

            entity.Property(e => e.Currently_Occupied_or_Not_Occupied)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Currently Occupied or Not Occupied");
            entity.Property(e => e.Date_City_Certification_Issued).HasColumnName("Date City Certification Issued");
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Policy_Compliance_Review_Date)
                .HasColumnType("datetime")
                .HasColumnName("Policy Compliance Review Date");
            entity.Property(e => e.ProjectName).HasMaxLength(500);
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.Property_Management_Plan__PMP____Updated_2020)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Property Management Plan (PMP) - Updated 2020");
            entity.Property(e => e.Site_Visit_Date)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Site Visit Date");
        });

        modelBuilder.Entity<vwAccessLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAccessLog", "IDM");

            entity.Property(e => e.AccessLogID).ValueGeneratedOnAdd();
            entity.Property(e => e.AppKey)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LastLogOn).HasColumnType("datetime");
            entity.Property(e => e.LogonData).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LogonStatus)
                .HasMaxLength(10)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwAffordableApplicationCloseDateNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAffordableApplicationCloseDateNotification", "Listing");

            entity.Property(e => e.Notification)
                .HasMaxLength(109)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwAllPropertyList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllPropertyList", "AAHR");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.LAT).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LowestAMI).HasMaxLength(10);
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PMAddress).HasMaxLength(361);
            entity.Property(e => e.PMCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PMCompanyName).HasMaxLength(150);
            entity.Property(e => e.PMContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.PMEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMPhone).HasMaxLength(4000);
            entity.Property(e => e.PMState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PMStreet).HasMaxLength(161);
            entity.Property(e => e.PMUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCESType).HasMaxLength(500);
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.RentalSubsidy)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e._0Bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
            entity.Property(e => e.lon).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwAllPropertyPolicyAnalyst>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllPropertyPolicyAnalyst", "AAHR");

            entity.Property(e => e.AssigneeFullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AssigneeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
        });

        modelBuilder.Entity<vwAllPurportedUnitsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllPurportedUnitsDetail", "AAHR");

            entity.Property(e => e.Accessibility_Feature)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Accessibility Feature");
            entity.Property(e => e.Affordability_Level_AMI)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Affordability Level AMI");
            entity.Property(e => e.Funding_Restriction)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Funding Restriction");
            entity.Property(e => e.IsAccessible)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Lease_Addendum).HasColumnName("Lease Addendum");
            entity.Property(e => e.Move_In_Date).HasColumnName("Move In Date");
            entity.Property(e => e.No__of_Bedrooms)
                .IsUnicode(false)
                .HasColumnName("No. of Bedrooms");
            entity.Property(e => e.Occupant_Disabled).HasColumnName("Occupant Disabled");
            entity.Property(e => e.Program_Eligibility)
                .IsUnicode(false)
                .HasColumnName("Program Eligibility");
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwApplication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwApplication", "IDM");

            entity.Property(e => e.AppKey)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationDomain)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationId).ValueGeneratedOnAdd();
            entity.Property(e => e.ApplicationURL)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Attributes)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ConnectionString)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.JWTAccessCode)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.JWTSharedSecrete)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwApplicationUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwApplicationUser", "IDM");
        });

        modelBuilder.Entity<vwAspNetRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAspNetRoles", "IDM");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwAspNetUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAspNetUsers", "IDM");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.EmployeeID)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.EmployeeTitle)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserId).ValueGeneratedOnAdd();
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwAspNetUserRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAspNetUserRoles", "IDM");
        });

        modelBuilder.Entity<vwCCAllPropertyList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCAllPropertyList", "AAHR");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.LAT).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PMAddress).HasMaxLength(361);
            entity.Property(e => e.PMCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PMCompanyName).HasMaxLength(150);
            entity.Property(e => e.PMContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.PMEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMPhone).HasMaxLength(4000);
            entity.Property(e => e.PMState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PMStreet).HasMaxLength(161);
            entity.Property(e => e.PMUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCESType).HasMaxLength(500);
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.RentalSubsidy)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e._0Bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
            entity.Property(e => e.lon).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwCCProjectSiteUnitSummaryAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCProjectSiteUnitSummaryAll", "AAHR");

            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e._0Bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<vwCaseLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCaseLog", "CMS");

            entity.Property(e => e.ActionName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserName).HasMaxLength(201);
            entity.Property(e => e.FromState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastAssigneeID)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.NewAssigneeID)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.ToState)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwComment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwComment", "CC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ReferenceID).HasMaxLength(64);
            entity.Property(e => e.ReferenceType).HasMaxLength(20);
        });

        modelBuilder.Entity<vwCoveredPropertyList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCoveredPropertyList", "AAHR");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CWLOpenPriorRegistryDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.HousingRegistryStatusDisplayName).IsUnicode(false);
            entity.Property(e => e.LAT).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LowestAMI).HasMaxLength(10);
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PMAddress).HasMaxLength(361);
            entity.Property(e => e.PMCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PMCompanyName).HasMaxLength(150);
            entity.Property(e => e.PMContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.PMEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMPhone).HasMaxLength(4000);
            entity.Property(e => e.PMState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PMStreet).HasMaxLength(161);
            entity.Property(e => e.PMUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCESType).HasMaxLength(500);
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e._0Bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
            entity.Property(e => e.lon).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwCoveredPropertyList1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCoveredPropertyList", "Listing");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CWLOpenPriorRegistryDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.HousingRegistryStatusDisplayName).IsUnicode(false);
            entity.Property(e => e.HousingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LAT).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LowestAMI).HasMaxLength(10);
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PMAddress).HasMaxLength(361);
            entity.Property(e => e.PMCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PMCompanyName).HasMaxLength(150);
            entity.Property(e => e.PMContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.PMEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMPhone).HasMaxLength(4000);
            entity.Property(e => e.PMState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PMStreet).HasMaxLength(161);
            entity.Property(e => e.PMUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCESType).HasMaxLength(500);
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4Bedroom).HasColumnName("4Bedroom");
            entity.Property(e => e._5orMoreBedroom).HasColumnName("5orMoreBedroom");
            entity.Property(e => e.lon).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwDMSDocument>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDMSDocument", "AAHR");

            entity.Property(e => e.APN)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AcHP_Number)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("AcHP Number");
            entity.Property(e => e.AcHP_Project_ID)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("AcHP Project ID");
            entity.Property(e => e.AcHP_Property_ID)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("AcHP Property ID");
            entity.Property(e => e.Audience)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Case_ID)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Case ID");
            entity.Property(e => e.Category)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Created_By)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Created By");
            entity.Property(e => e.Default_Image)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Default Image");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FileExtension)
                .HasMaxLength(15)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FileSize)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HIMS_Number)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("HIMS Number");
            entity.Property(e => e.HIMS_Project_Id)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("HIMS Project Id");
            entity.Property(e => e.InternalURL)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Last_Accessed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Last Accessed");
            entity.Property(e => e.MimeType)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Modified_By)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Modified By");
            entity.Property(e => e.Original_File_Name)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Original File Name");
            entity.Property(e => e.Primary_Key)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Primary Key");
            entity.Property(e => e.Received)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Sub_Category)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Sub Category");
            entity.Property(e => e.System_Description)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("System Description");
            entity.Property(e => e.UniqueId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.View_Order)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("View Order");
        });

        modelBuilder.Entity<vwGeo_CounilDistrict>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGeo_CounilDistrict", "AAHR");

            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(2)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FolderPath)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GeometryType)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.WKT).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.coordinates).UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwHCIDAAHPApplicationUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHCIDAAHPApplicationUser", "IDM");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.EmployeeID)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.EmployeeTitle)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IDMUserName).HasMaxLength(256);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwHousingApplication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHousingApplication", "AAHR");

            entity.Property(e => e.AltArea)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltLutPhoneTypeCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPhone)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPrefix)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltTrunk)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationStatus).HasMaxLength(50);
            entity.Property(e => e.Bathrooms).IsUnicode(false);
            entity.Property(e => e.Bedrooms).IsUnicode(false);
            entity.Property(e => e.BirthMMDD)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.CESType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress).HasMaxLength(300);
            entity.Property(e => e.HRMStatus).HasMaxLength(4000);
            entity.Property(e => e.HousingAdvocate).HasMaxLength(150);
            entity.Property(e => e.IDMUserName).HasMaxLength(50);
            entity.Property(e => e.IncomeHousehold).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreferContactMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.ReasonableAccommodations).HasMaxLength(2000);
            entity.Property(e => e.Region)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.SubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnSubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<vwOLAP_AllProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_AllProperties", "AAHR");

            entity.Property(e => e.ACHPFileNumberProject)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ConventionalWaitListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.ConventionalWaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.DateLADBSInitialCertificateOccupancy).HasColumnType("datetime");
            entity.Property(e => e.DatePMPostedDataOnAHR).HasColumnType("datetime");
            entity.Property(e => e.DateSubsequentAUMarketing).HasColumnType("datetime");
            entity.Property(e => e.DistanceToNearByServices)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.DistanceToTransit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FeatureArea)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Features)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FundSources)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.HouseNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HousingProgram).HasMaxLength(500);
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.LAT).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LastPublishedDate).HasColumnType("datetime");
            entity.Property(e => e.ListingStatus).HasMaxLength(50);
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.NearByServices)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyStatus)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OpenForApplication).HasColumnType("datetime");
            entity.Property(e => e.OpenForMarketing).HasColumnType("datetime");
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParkingType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PriorSurvey)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCESType).HasMaxLength(500);
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyFullAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RegionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.ScatteredSites).HasMaxLength(4000);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SubmittedBy)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.TransitWithinOneMile)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeOfConstruction).HasMaxLength(50);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.lon).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.projectSiteStatusChangeDate).HasColumnType("datetime");
            entity.Property(e => e.state)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwOLAP_CertifiedUnitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_CertifiedUnitDetails", "AAHR");

            entity.Property(e => e.AMI)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountAs)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FixedOrFloating)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyRestrictions).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TotalBathroom).IsUnicode(false);
            entity.Property(e => e.TotalBedroom).IsUnicode(false);
            entity.Property(e => e.UnitAccessibiltyType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UnitAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitFeature)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitFeatureArea)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Unit_Attribute_Date)
                .HasColumnType("datetime")
                .HasColumnName("Unit Attribute Date");
            entity.Property(e => e.currentTenant)
                .HasMaxLength(302)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwOLAP_ConstructionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_ConstructionDetails", "AAHR");

            entity.Property(e => e.APN_).HasColumnName("APN#");
            entity.Property(e => e.AcHPFileProjectNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcHP__)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AcHP #");
            entity.Property(e => e.CAPClosureDate).HasMaxLength(4000);
            entity.Property(e => e.CAPSummary).IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.HIMS__)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMS #");
            entity.Property(e => e.ModifiedOn)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ProjectAddress).IsUnicode(false);
            entity.Property(e => e.Project_Address)
                .IsUnicode(false)
                .HasColumnName("Project Address");
            entity.Property(e => e.Project_Name).HasColumnName("Project Name");
            entity.Property(e => e.Property_Name).HasMaxLength(500);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Summary).HasMaxLength(500);
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.WithdrawReason)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e._073_DateNACInspectionScheduled)
                .HasMaxLength(4000)
                .HasColumnName("073_DateNACInspectionScheduled");
            entity.Property(e => e._074_020_EndDateOfSurvey)
                .HasMaxLength(4000)
                .HasColumnName("074_020_EndDateOfSurvey");
            entity.Property(e => e._074_StartDateOfSurvey)
                .HasMaxLength(4000)
                .HasColumnName("074_StartDateOfSurvey");
            entity.Property(e => e._075_LinktoNACInspectionReport)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("075_LinktoNACInspectionReport");
            entity.Property(e => e._076_DateOfNACInspectionReport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("076_DateOfNACInspectionReport");
            entity.Property(e => e._081_200_NoticeToProceedWithRetrofitDate)
                .HasColumnType("datetime")
                .HasColumnName("081_200_NoticeToProceedWithRetrofitDate");
            entity.Property(e => e._081_ProposedRetrofitCommenceDate)
                .HasMaxLength(4000)
                .HasColumnName("081_ProposedRetrofitCommenceDate");
            entity.Property(e => e._088_100_DateSiteRetrofitFinalAcHPInspectionApproved)
                .HasMaxLength(4000)
                .HasColumnName("088_100_DateSiteRetrofitFinalAcHPInspectionApproved");
            entity.Property(e => e._088_200_DateProjectRetrofitFinalAcHPInspectionApproved)
                .HasMaxLength(4000)
                .HasColumnName("088_200_DateProjectRetrofitFinalAcHPInspectionApproved");
            entity.Property(e => e._089_100_DateSiteAcHPFinalNewConstructionInspApproved)
                .HasMaxLength(4000)
                .HasColumnName("089_100_DateSiteAcHPFinalNewConstructionInspApproved");
            entity.Property(e => e._089_200_DateProjectAcHPFinalNewConstructionInspApproved)
                .HasMaxLength(4000)
                .HasColumnName("089_200_DateProjectAcHPFinalNewConstructionInspApproved");
            entity.Property(e => e._089_300_DateSiteAcHPFinalRehabInspApproved)
                .HasMaxLength(4000)
                .HasColumnName("089_300_DateSiteAcHPFinalRehabInspApproved");
            entity.Property(e => e._089_400_DateProjectAcHPFinalRehabInspApproved)
                .HasMaxLength(4000)
                .HasColumnName("089_400_DateProjectAcHPFinalRehabInspApproved");
            entity.Property(e => e._1126_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRetrofitUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1126_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRetrofitUnderCSA");
            entity.Property(e => e._1127_000_DateTheCityCertifiedSiteAccessibilityForRetrofitUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1127_000_DateTheCityCertifiedSiteAccessibilityForRetrofitUnderCSA");
            entity.Property(e => e._1128_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRetrofitUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1128_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRetrofitUnderCSA");
            entity.Property(e => e._1129_000_DateTheCityCertifiedProjectAccessibilityForRetrofitUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1129_000_DateTheCityCertifiedProjectAccessibilityForRetrofitUnderCSA");
            entity.Property(e => e._1130_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRehabUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1130_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRehabUnderCSA");
            entity.Property(e => e._1131_000_DateTheCityCertifiedSiteAccessibilityForRehabUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1131_000_DateTheCityCertifiedSiteAccessibilityForRehabUnderCSA");
            entity.Property(e => e._1132_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRehabUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1132_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRehabUnderCSA");
            entity.Property(e => e._1133_000_DateTheCityCertifiedProjectAccessibilityForRehabUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1133_000_DateTheCityCertifiedProjectAccessibilityForRehabUnderCSA");
            entity.Property(e => e._1134_000_DateTheNACIssuedVerificationOfSiteAccessibilityForNewConstructionUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1134_000_DateTheNACIssuedVerificationOfSiteAccessibilityForNewConstructionUnderCSA");
            entity.Property(e => e._1135_000_DateTheCityCertifiedSiteAccessibilityForNewConstructionUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1135_000_DateTheCityCertifiedSiteAccessibilityForNewConstructionUnderCSA");
            entity.Property(e => e._1136_000_DateTheNACIssuedVerificationOfProjectAccessibilityForNewConstructionUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1136_000_DateTheNACIssuedVerificationOfProjectAccessibilityForNewConstructionUnderCSA");
            entity.Property(e => e._1137_000_DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderCSA)
                .HasMaxLength(4000)
                .HasColumnName("1137_000_DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderCSA");
            entity.Property(e => e._1138_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRetrofitUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1138_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRetrofitUnderVCA");
            entity.Property(e => e._1139_000_DateTheCityCertifiedSiteAccessibilityForRetrofitUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1139_000_DateTheCityCertifiedSiteAccessibilityForRetrofitUnderVCA");
            entity.Property(e => e._1140_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRetrofitUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1140_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRetrofitUnderVCA");
            entity.Property(e => e._1141_000_DateTheCityCertifiedProjectAccessibilityForRetrofitUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1141_000_DateTheCityCertifiedProjectAccessibilityForRetrofitUnderVCA");
            entity.Property(e => e._1142_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRehabUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1142_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRehabUnderVCA");
            entity.Property(e => e._1143_000_DateTheCityCertifiedSiteAccessibilityForRehabUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1143_000_DateTheCityCertifiedSiteAccessibilityForRehabUnderVCA");
            entity.Property(e => e._1144_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRehabUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1144_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRehabUnderVCA");
            entity.Property(e => e._1145_000_DateTheCityCertifiedProjectAccessibilityForRehabUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1145_000_DateTheCityCertifiedProjectAccessibilityForRehabUnderVCA");
            entity.Property(e => e._1146_000_DateTheNACIssuedVerificationOfSiteAccessibilityForNewConstructionUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1146_000_DateTheNACIssuedVerificationOfSiteAccessibilityForNewConstructionUnderVCA");
            entity.Property(e => e._1147_000_DateTheCityCertifiedSiteAccessibilityForNewConstructionUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1147_000_DateTheCityCertifiedSiteAccessibilityForNewConstructionUnderVCA");
            entity.Property(e => e._1148_000_DateTheNACIssuedVerificationOfProjectAccessibilityForNewConstructionUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1148_000_DateTheNACIssuedVerificationOfProjectAccessibilityForNewConstructionUnderVCA");
            entity.Property(e => e._1149_000_DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderVCA)
                .HasMaxLength(4000)
                .HasColumnName("1149_000_DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderVCA");
            entity.Property(e => e._160_CorrectiveActionPlanIssueDate)
                .HasMaxLength(4000)
                .HasColumnName("160_CorrectiveActionPlanIssueDate");
            entity.Property(e => e._196_AssignedRCS)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("196_AssignedRCS");
            entity.Property(e => e._525_1_DateOf1stPlanCheckSubmission)
                .HasMaxLength(4000)
                .HasColumnName("525_1_DateOf1stPlanCheckSubmission");
            entity.Property(e => e._525_2_DateOf1stBuildingPermit)
                .HasMaxLength(4000)
                .HasColumnName("525_2_DateOf1stBuildingPermit");
            entity.Property(e => e._525_3_BuildingPermitNumber).HasColumnName("525_3_BuildingPermitNumber");
            entity.Property(e => e._525_4_DateOf1stTCO)
                .HasMaxLength(4000)
                .HasColumnName("525_4_DateOf1stTCO");
            entity.Property(e => e._525_5_DateOf1stCofO)
                .HasMaxLength(4000)
                .HasColumnName("525_5_DateOf1stCofO");
            entity.Property(e => e._526_5__DateOf1stCoFOForConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("526_5__DateOf1stCoFOForConversionToResidential");
            entity.Property(e => e._527_1_DateOfMostRecentPlanCheckSubmission)
                .HasMaxLength(4000)
                .HasColumnName("527_1_DateOfMostRecentPlanCheckSubmission");
            entity.Property(e => e._527_2_DateOMostRecentBuildingPermit)
                .HasMaxLength(4000)
                .HasColumnName("527_2_DateOMostRecentBuildingPermit");
            entity.Property(e => e._527_3_MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("527_3_MostRecentBuldingPermitNumber");
            entity.Property(e => e._527_4_DateOfMostRecentTCO).HasColumnName("527_4_DateOfMostRecentTCO");
            entity.Property(e => e._527_5_DateOfMostRecentCofO).HasColumnName("527_5_DateOfMostRecentCofO");
            entity.Property(e => e._527_6_DateOfBuildingPermitFinaled).HasColumnName("527_6_DateOfBuildingPermitFinaled");
            entity.Property(e => e._528_1_DateOfCurrentPlanCheckSubmission)
                .HasMaxLength(4000)
                .HasColumnName("528_1_DateOfCurrentPlanCheckSubmission");
            entity.Property(e => e._528_2_DateOfCurrentBuildingPermitNumber)
                .HasMaxLength(4000)
                .HasColumnName("528_2_DateOfCurrentBuildingPermitNumber");
            entity.Property(e => e._528_3_CurrentBuldingPermitNumberr)
                .HasMaxLength(100)
                .HasColumnName("528_3_CurrentBuldingPermitNumberr");
            entity.Property(e => e._528_4_DateOfCurrentTCO).HasColumnName("528_4_DateOfCurrentTCO");
            entity.Property(e => e._528_5_DateOfCurrentCofO).HasColumnName("528_5_DateOfCurrentCofO");
            entity.Property(e => e._528_6_DateOfCurrentBuildingPermitFinaled)
                .HasColumnType("datetime")
                .HasColumnName("528_6_DateOfCurrentBuildingPermitFinaled");
            entity.Property(e => e._529_1_DateOfRetrofitPlanCheckSubmission)
                .HasMaxLength(4000)
                .HasColumnName("529_1_DateOfRetrofitPlanCheckSubmission");
            entity.Property(e => e._529_2_DateOfCurrentBuildingPermitNumber)
                .HasMaxLength(4000)
                .HasColumnName("529_2_DateOfCurrentBuildingPermitNumber");
            entity.Property(e => e._529_3_DBSRetrofitBuildingPermitNumber)
                .HasMaxLength(100)
                .HasColumnName("529_3_DBSRetrofitBuildingPermitNumber");
            entity.Property(e => e._529_4_DateOfCofOPostRetrofit)
                .HasMaxLength(4000)
                .HasColumnName("529_4_DateOfCofOPostRetrofit");
            entity.Property(e => e._529_5_DateOfBuildingPermitFinaled)
                .HasMaxLength(4000)
                .HasColumnName("529_5_DateOfBuildingPermitFinaled");
            entity.Property(e => e._649_AreainSquareFeet).HasColumnName("649_AreainSquareFeet");
            entity.Property(e => e._650_Floorplantype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("650_Floorplantype");
            entity.Property(e => e._652_Currentstatusofprojectcase)
                .HasMaxLength(50)
                .HasColumnName("652_Currentstatusofprojectcase");
            entity.Property(e => e._653_IsParkingAvailableAtBuilding)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("653_IsParkingAvailableAtBuilding");
            entity.Property(e => e._654_SharedparkingLots)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("654_SharedparkingLots");
            entity.Property(e => e._655_ResidentialParkingRatio).HasColumnName("655_ResidentialParkingRatio");
            entity.Property(e => e._656_AssignedResidentialParking).HasColumnName("656_AssignedResidentialParking");
            entity.Property(e => e._657_ApplicableAccessibilityStandard)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("657_ApplicableAccessibilityStandard");
            entity.Property(e => e._658_IsthisaPreVCAdevelopment).HasColumnName("658_IsthisaPreVCAdevelopment");
            entity.Property(e => e._659_TotalNumber_FHA11AUnitsRequired)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("659_TotalNumber_FHA11AUnitsRequired");
            entity.Property(e => e._660_MaximumMobilityCSACount).HasColumnName("660_MaximumMobilityCSACount");
            entity.Property(e => e._661_UnitsNoForAllTypes)
                .HasMaxLength(2016)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNoForAllTypes");
            entity.Property(e => e._661_UnitsNumbersForAllTypes_EnhancedAccessibility)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNumbersForAllTypes_EnhancedAccessibility");
            entity.Property(e => e._661_UnitsNumbersForAllTypes_HearingVision)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNumbersForAllTypes_HearingVision");
            entity.Property(e => e._661_UnitsNumbersForAllTypes_Mobility)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNumbersForAllTypes_Mobility");
            entity.Property(e => e._661_UnitsNumbersForAllTypes_Mobility_)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNumbersForAllTypes_Mobility.");
            entity.Property(e => e._661_UnitsNumbersForAllTypes_UnitDesignation).HasColumnName("661_UnitsNumbersForAllTypes_UnitDesignation");
            entity.Property(e => e._662_HUDChecklistforSelection1perBuiliding)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("662_HUDChecklistforSelection1perBuiliding");
            entity.Property(e => e._663_IsParkingAvailableAtBuilding)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("663_IsParkingAvailableAtBuilding");
            entity.Property(e => e._664_BuildingType).HasColumnName("664_BuildingType");
            entity.Property(e => e._665_AssignedResidentialParking)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("665_AssignedResidentialParking");
            entity.Property(e => e._666_ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("666_ResidentialParkingRatio");
            entity.Property(e => e._667_TotalResidentialParking).HasColumnName("667_TotalResidentialParking");
            entity.Property(e => e._668_Residentialstandardaccessibleparkingspaces).HasColumnName("668_Residentialstandardaccessibleparkingspaces");
            entity.Property(e => e._669_VanAccessibleSpaces).HasColumnName("669_VanAccessibleSpaces");
            entity.Property(e => e._670_TotalResidentialParking).HasColumnName("670_TotalResidentialParking");
            entity.Property(e => e._671_StandardCommercialSpaces).HasColumnName("671_StandardCommercialSpaces");
            entity.Property(e => e._672_CommercialAccessibleSpaces).HasColumnName("672_CommercialAccessibleSpaces");
            entity.Property(e => e._673_CommercialVanAccessibleSpaces).HasColumnName("673_CommercialVanAccessibleSpaces");
            entity.Property(e => e._674_CommercialVanAccessibleSpaces).HasColumnName("674_CommercialVanAccessibleSpaces");
            entity.Property(e => e._675_StandardVisitorSpaces).HasColumnName("675_StandardVisitorSpaces");
            entity.Property(e => e._676_VisitorAccessibleSpaces).HasColumnName("676_VisitorAccessibleSpaces");
            entity.Property(e => e._677_VisitorVanAccessibleSpaces).HasColumnName("677_VisitorVanAccessibleSpaces");
            entity.Property(e => e._678_VisitorVanAccessibleSpaces).HasColumnName("678_VisitorVanAccessibleSpaces");
            entity.Property(e => e._679_CommercialElectricVanAccessibleChargingStation).HasColumnName("679_CommercialElectricVanAccessibleChargingStation");
            entity.Property(e => e._680_CommercialElectricAmbulatoryChargingStation).HasColumnName("680_CommercialElectricAmbulatoryChargingStation");
            entity.Property(e => e._681_CommercialElectricAmbulatoryChargingStation).HasColumnName("681_CommercialElectricAmbulatoryChargingStation");
            entity.Property(e => e._682_CommercialElectricAmbulatoryChargingStation).HasColumnName("682_CommercialElectricAmbulatoryChargingStation");
            entity.Property(e => e._683_DateAssignedtoAcHPStaff_Project)
                .HasMaxLength(4000)
                .HasColumnName("683_DateAssignedtoAcHPStaff_Project");
            entity.Property(e => e._684_DateAcHPStampedPlansandClearedProjectinPCIS_Project)
                .HasMaxLength(4000)
                .HasColumnName("684_DateAcHPStampedPlansandClearedProjectinPCIS_Project");
            entity.Property(e => e._685_ProjectedProjectCompletionDate_Project)
                .HasMaxLength(4000)
                .HasColumnName("685_ProjectedProjectCompletionDate_Project");
            entity.Property(e => e._686_Pre_FinalAccessibilityInspectionRequested_Project)
                .HasMaxLength(4000)
                .HasColumnName("686_Pre-FinalAccessibilityInspectionRequested_Project");
            entity.Property(e => e._687_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_Project)
                .HasMaxLength(4000)
                .HasColumnName("687_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_Project");
            entity.Property(e => e._688_Datemeetingwithowner_Project)
                .HasMaxLength(4000)
                .HasColumnName("688_Datemeetingwithowner_Project");
            entity.Property(e => e._689_DateAssignedtoAcHPStaff_Site)
                .HasMaxLength(4000)
                .HasColumnName("689_DateAssignedtoAcHPStaff_Site");
            entity.Property(e => e._690_DateAcHPStampedPlansandClearedProjectinPCIS_Site)
                .HasMaxLength(4000)
                .HasColumnName("690_DateAcHPStampedPlansandClearedProjectinPCIS_Site");
            entity.Property(e => e._691_ProjectedRetrofitCompletionDate_Site)
                .HasMaxLength(4000)
                .HasColumnName("691_ProjectedRetrofitCompletionDate_Site");
            entity.Property(e => e._692_Pre_FinalAccessibilityInspectionRequestedbyDeveloperOwner_Site)
                .HasMaxLength(4000)
                .HasColumnName("692_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_Site");
            entity.Property(e => e._693_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_Site)
                .HasMaxLength(4000)
                .HasColumnName("693_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_Site");
            entity.Property(e => e._694_ProgressInspectionRequestbyDeveloperOwnerDate_Site)
                .HasMaxLength(4000)
                .HasColumnName("694_ProgressInspectionRequestbyDeveloperOwnerDate_Site");
            entity.Property(e => e._695_DateAcHPProgressInspectionApproved_Site)
                .HasMaxLength(4000)
                .HasColumnName("695_DateAcHPProgressInspectionApproved_Site");
            entity.Property(e => e._696_DateAcHPIssuedCorrectionsforProgressInspection_Site)
                .HasMaxLength(4000)
                .HasColumnName("696_DateAcHPIssuedCorrectionsforProgressInspection_Site");
            entity.Property(e => e._697_RoughInspectionAccessibilityReportApprovedDate_Site)
                .HasMaxLength(4000)
                .HasColumnName("697_RoughInspectionAccessibilityReportApprovedDate_Site");
            entity.Property(e => e._698_DateAssignedtoAcHPStaff_SubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("698_DateAssignedtoAcHPStaff_SubRehabProject");
            entity.Property(e => e._699_DateAcHPStampedPlansandClearedProjectinPCIS_SubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("699_DateAcHPStampedPlansandClearedProjectinPCIS_SubRehabProject");
            entity.Property(e => e._700_ProjectedProjectCompletionDate_SubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("700_ProjectedProjectCompletionDate_SubRehabProject");
            entity.Property(e => e._701_Pre_FinalAccessibilityInspectionRequestedbyDeveloperOwner_SubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("701_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_SubRehabProject");
            entity.Property(e => e._702_DateAcHPIssuedCorrectionsforFinalAccessibility_Inspection_SubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("702_DateAcHPIssuedCorrectionsforFinalAccessibility Inspection_SubRehabProject");
            entity.Property(e => e._703_DateDeveloperOwnerRequestedNACInspection_SubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("703_DateDeveloperOwnerRequestedNACInspection_SubRehabProject");
            entity.Property(e => e._704_DateAssignedtoAcHPStaff_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("704_DateAssignedtoAcHPStaff_SubRehabSite");
            entity.Property(e => e._705_DateAcHPStampedPlansandClearedProjectinPCIS_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("705_DateAcHPStampedPlansandClearedProjectinPCIS_SubRehabSite");
            entity.Property(e => e._706_ProjectedProjectCompletionDate_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("706_ProjectedProjectCompletionDate_SubRehabSite");
            entity.Property(e => e._707_Pre_FinalAccessibilityInspectionRequestedbyDeveloperOwner_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("707_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_SubRehabSite");
            entity.Property(e => e._708_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("708_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_SubRehabSite");
            entity.Property(e => e._709_DateDeveloperOwnerRequestedNACInspection_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("709_DateDeveloperOwnerRequestedNACInspection_SubRehabSite");
            entity.Property(e => e._710_DateAcHPIssuedCorrectionsforDesignReview_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("710_DateAcHPIssuedCorrectionsforDesignReview_SubRehabSite");
            entity.Property(e => e._711_RoughInspectionRequestedbyDeveloperOwner_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("711_RoughInspectionRequestedbyDeveloperOwner_SubRehabSite");
            entity.Property(e => e._712_RoughInspectionAccessibilityReportApprovedDate_SubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("712_RoughInspectionAccessibilityReportApprovedDate_SubRehabSite");
            entity.Property(e => e._810_DateAssignedtoAcHPStaff_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("810_DateAssignedtoAcHPStaff_NewConstructionProject");
            entity.Property(e => e._811_DateAcHPStampedPlansandClearedProjectinPCIS_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("811_DateAcHPStampedPlansandClearedProjectinPCIS_NewConstructionProject");
            entity.Property(e => e._812_ProjectedProjectCompletionDate_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("812_ProjectedProjectCompletionDate_NewConstructionProject");
            entity.Property(e => e._813_Pre_FinalAccessibilityInspectionRequestedbyDeveloperOwner_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("813_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_NewConstructionProject");
            entity.Property(e => e._814_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("814_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_NewConstructionProject");
            entity.Property(e => e._815_DateDeveloperOwnerRequestedNACInspection_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("815_DateDeveloperOwnerRequestedNACInspection_NewConstructionProject");
            entity.Property(e => e._816_DateAssignedtoAcHPStaff_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("816_DateAssignedtoAcHPStaff_NewConstructionProject");
            entity.Property(e => e._817_DateAcHPStampedPlansandClearedProjectinPCIS_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("817_DateAcHPStampedPlansandClearedProjectinPCIS_NewConstructionProject");
            entity.Property(e => e._818_ProjectedProjectCompletionDate_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("818_ProjectedProjectCompletionDate_NewConstructionProject");
            entity.Property(e => e._819_Pre_FinalAccessibilityInspectionRequestedbyDeveloperOwner_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("819_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_NewConstructionProject");
            entity.Property(e => e._820_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("820_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_NewConstructionProject");
            entity.Property(e => e._821_DateDeveloperOwnerRequestedNACInspection_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("821_DateDeveloperOwnerRequestedNACInspection_NewConstructionProject");
            entity.Property(e => e._822_DateAcHPIssuedCorrectionsforDesignReview_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("822_DateAcHPIssuedCorrectionsforDesignReview_NewConstructionProject");
            entity.Property(e => e._823_RoughInspectionRequestedbyDeveloperOwner_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("823_RoughInspectionRequestedbyDeveloperOwner_NewConstructionProject");
            entity.Property(e => e._824_RoughInspectionAccessibilityReportApprovedDate_NewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("824_RoughInspectionAccessibilityReportApprovedDate_NewConstructionProject");
            entity.Property(e => e._826_500_CorrectiveActionPlanCaseNumber)
                .HasMaxLength(20)
                .HasColumnName("826_500_CorrectiveActionPlanCaseNumber");
            entity.Property(e => e._826_700_CAPStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("826_700_CAPStatus");
            entity.Property(e => e._826_CorrectiveActionPlanDueDate)
                .HasMaxLength(4000)
                .HasColumnName("826_CorrectiveActionPlanDueDate");
            entity.Property(e => e._827_CorrectiveActionPlanReceivedDate)
                .HasMaxLength(4000)
                .HasColumnName("827_CorrectiveActionPlanReceivedDate");
            entity.Property(e => e._828_010_CorrectiveActionPlanAchievedDate)
                .HasMaxLength(4000)
                .HasColumnName("828_010_CorrectiveActionPlanAchievedDate");
            entity.Property(e => e._828_CorrectiveActionPlanComplete)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("828_CorrectiveActionPlanComplete");
            entity.Property(e => e._829_400_SecondExtensionEndDate)
                .HasColumnType("datetime")
                .HasColumnName("829_400_SecondExtensionEndDate");
            entity.Property(e => e._829_500_CAPNon_CompliantCategoriesatDateofCAPIssuance).HasColumnName("829_500_CAPNon-CompliantCategoriesatDateofCAPIssuance");
            entity.Property(e => e._829_CorrectiveActionPlanExtensions)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("829_CorrectiveActionPlanExtensions");
            entity.Property(e => e._830_ExtensionEndDate)
                .HasColumnType("datetime")
                .HasColumnName("830_ExtensionEndDate");
            entity.Property(e => e._831_Non_ComplianceCaseOpenDate).HasColumnName("831_Non-ComplianceCaseOpenDate");
            entity.Property(e => e._832_Non_ComplianceCaseNumber)
                .HasMaxLength(20)
                .HasColumnName("832_Non-ComplianceCaseNumber");
            entity.Property(e => e._833_OrderToComplyIssueDate).HasColumnName("833_OrderToComplyIssueDate");
            entity.Property(e => e._834_ComplianceDueDate).HasColumnName("834_ComplianceDueDate");
            entity.Property(e => e._835_010_OTCComplianceAchievedDate).HasColumnName("835_010_OTCComplianceAchievedDate");
            entity.Property(e => e._835_IsComplianceAchieved).HasColumnName("835_IsComplianceAchieved");
            entity.Property(e => e._836_DueDateForAnyExtensionToComply).HasColumnName("836_DueDateForAnyExtensionToComply");
            entity.Property(e => e._837_SubsequentActions)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("837_SubsequentActions");
            entity.Property(e => e._838_ResponsibleCityStaff)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("838_ResponsibleCityStaff");
            entity.Property(e => e._839_010_EnforcementComplianceAchievedDate).HasColumnName("839_010_EnforcementComplianceAchievedDate");
            entity.Property(e => e._839_500_CommentsConcerningEnforcement)
                .HasMaxLength(200)
                .HasColumnName("839_500_CommentsConcerningEnforcement");
            entity.Property(e => e._839_600_DatePolicyComplianceDecertified).HasColumnName("839_600_DatePolicyComplianceDecertified");
            entity.Property(e => e._839_700_DatePolicyCertificateReIssued).HasColumnName("839_700_DatePolicyCertificateReIssued");
            entity.Property(e => e._839_DateNon_ComplianceCaseClosed).HasColumnName("839_DateNon-ComplianceCaseClosed");
            entity.Property(e => e._843_000_TotalNumberOfNoncompliantConditions).HasColumnName("843_000_TotalNumberOfNoncompliantConditions");
            entity.Property(e => e._846_000_EstimatedTotalRemovalCost)
                .HasMaxLength(4000)
                .HasColumnName("846_000_EstimatedTotalRemovalCost");
            entity.Property(e => e._847_000_Region).HasColumnName("847_000_Region");
            entity.Property(e => e._848_000_Facility)
                .HasMaxLength(4000)
                .HasColumnName("848_000_Facility");
            entity.Property(e => e._849_000_AddressFromETA)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("849_000_AddressFromETA");
            entity.Property(e => e._850_000_SurveyStandards)
                .HasMaxLength(4000)
                .HasColumnName("850_000_SurveyStandards");
            entity.Property(e => e._851_000_SitePlanDrawingNumber)
                .HasMaxLength(4000)
                .HasColumnName("851_000_SitePlanDrawingNumber");
            entity.Property(e => e._90_0_DateCertificationAccessibilityissues)
                .HasMaxLength(4000)
                .HasColumnName("90_0_DateCertificationAccessibilityissues");
            entity.Property(e => e._90_1_DateCertificationAccessibilityissues)
                .HasMaxLength(4000)
                .HasColumnName("90_1_DateCertificationAccessibilityissues");
        });

        modelBuilder.Entity<vwOLAP_ContactDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_ContactDetails", "AAHR");

            entity.Property(e => e.Company).HasMaxLength(150);
            entity.Property(e => e.ContactCreatedBy).HasMaxLength(50);
            entity.Property(e => e.ContactCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ContactModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IDMUserName).HasMaxLength(50);
            entity.Property(e => e.LinkType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo).HasMaxLength(100);
            entity.Property(e => e.Zip).HasMaxLength(100);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<vwOLAP_DocumentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_DocumentDetails", "AAHR");

            entity.Property(e => e.AcHP_Number)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("AcHP Number");
            entity.Property(e => e.Category)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Created_By)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Created By");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MimeType)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Modified_By)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Modified By");
            entity.Property(e => e.Original_File_Name)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Original File Name");
            entity.Property(e => e.Received)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Sub_Category)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Sub Category");
            entity.Property(e => e.UniqueId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwOLAP_Grievance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_Grievance", "AAHR");

            entity.Property(e => e.Property_Name).HasMaxLength(500);
            entity.Property(e => e._1014_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_accommodation_from_the_property_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1014_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_accommodation_from_the_property?");
            entity.Property(e => e._1015_000_Type_s__of_Reasonable_Accommodation_requested_by_the_grievant)
                .IsUnicode(false)
                .HasColumnName("1015_000_Type(s)_of_Reasonable_Accommodation_requested_by_the_grievant");
            entity.Property(e => e._1016_000_Does_the_grievant_allege_their_reasonable_accommodation_request_has_not_been_processed_promptly_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1016_000_Does_the_grievant_allege_their_reasonable_accommodation_request_has_not_been_processed_promptly?");
            entity.Property(e => e._1017_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third_party_verification_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1017_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third-party_verification?");
            entity.Property(e => e._1018_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_accommodation_request_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1018_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_accommodation_request?");
            entity.Property(e => e._1019_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_accommodation_request_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1019_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_accommodation_request?");
            entity.Property(e => e._1020_000_Does_the_grievant_allege_there_are_other_issues_regarding_their_reasonable_accommodation_request_not_already_listed_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1020_000_Does_the_grievant_allege_there_are_other_issues_regarding_their_reasonable_accommodation_request_not_already_listed?");
            entity.Property(e => e._1021_000_Description_of_other_issues_regarding_reasonable_accommodation_request)
                .IsUnicode(false)
                .HasColumnName("1021_000_Description_of_other_issues_regarding_reasonable_accommodation_request");
            entity.Property(e => e._1022_000_Date_of_Reasonable_Accommodation_request)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1022_000_Date_of_Reasonable_Accommodation_request");
            entity.Property(e => e._1022_001_PrevReasonableAccmQRID)
                .IsUnicode(false)
                .HasColumnName("1022_001_PrevReasonableAccmQRID");
            entity.Property(e => e._1023_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1023_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1024_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_modification_from_the_property_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1024_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_modification_from_the_property?");
            entity.Property(e => e._1025_000_Type_s__of_Reasonable_Modification_requested_by_the_grievant)
                .IsUnicode(false)
                .HasColumnName("1025_000_Type(s)_of_Reasonable_Modification_requested_by_the_grievant");
            entity.Property(e => e._1026_000_Description_of_requested_feature)
                .IsUnicode(false)
                .HasColumnName("1026_000_Description_of_requested_feature");
            entity.Property(e => e._1027_000_Does_the_grievant_allege_their_reasonable_modification_has_not_been_processed_promptly_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1027_000_Does_the_grievant_allege_their_reasonable_modification_has_not_been_processed_promptly?");
            entity.Property(e => e._1028_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third_party_verification_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1028_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third-party_verification?");
            entity.Property(e => e._1029_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_modification_request_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1029_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_modification_request?");
            entity.Property(e => e._1030_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_modification_request_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1030_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_modification_request?");
            entity.Property(e => e._1031_000_Does_the_property_grievant_allege_there_are_other_issues_regarding_their_reasonable_modification_request_not_already_li)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1031_000_Does_the_property_grievant_allege_there_are_other_issues_regarding_their_reasonable_modification_request_not_already_li");
            entity.Property(e => e._1032_000_Explanation_of_the_other_issues_regarding_reasonable_modification_request)
                .IsUnicode(false)
                .HasColumnName("1032_000_Explanation_of_the_other_issues_regarding_reasonable_modification_request");
            entity.Property(e => e._1033_000_Date_of_Reasonable_Modification_request)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1033_000_Date_of_Reasonable_Modification_request");
            entity.Property(e => e._1033_001_PrevReasonableModfQRID)
                .IsUnicode(false)
                .HasColumnName("1033_001_PrevReasonableModfQRID");
            entity.Property(e => e._1034_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1034_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1035_000_Does_the_grievance_relate_to_a_request_for_auxiliary_aids_and_or_services_for_effective_communication_from_the_property)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1035_000_Does_the_grievance_relate_to_a_request_for_auxiliary_aids_and/or_services_for_effective_communication_from_the_property");
            entity.Property(e => e._1036_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("1036_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1037_000_Date_of_effective_communication_request)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1037_000_Date_of_effective_communication_request");
            entity.Property(e => e._1037_001_PrevEffectiveCommQRID)
                .IsUnicode(false)
                .HasColumnName("1037_001_PrevEffectiveCommQRID");
            entity.Property(e => e._1038_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1038_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1039_000_Does_the_grievance_relate_to_the_maintenance_of_accessible_features__other_than_elevators___or_to_barriers_blocking_acc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1039_000_Does_the_grievance_relate_to_the_maintenance_of_accessible_features_(other_than_elevators),_or_to_barriers_blocking_acc");
            entity.Property(e => e._1040_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("1040_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1041_000_Description_of_maintenance_issue)
                .IsUnicode(false)
                .HasColumnName("1041_000_Description_of_maintenance_issue");
            entity.Property(e => e._1042_000_Does_the_grievance_relate_to_an_elevator_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1042_000_Does_the_grievance_relate_to_an_elevator?");
            entity.Property(e => e._1043_000_If_yes__please_choose_all_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("1043_000_If_yes,_please_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._1044_000_Does_the_grievance_relate_to_placement_on_a_waiting_list_or_transfer_list__or_transfer_from_a_waiting_list_or_transfer_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1044_000_Does_the_grievance_relate_to_placement_on_a_waiting_list_or_transfer_list,_or_transfer_from_a_waiting_list_or_transfer_");
            entity.Property(e => e._1045_000_If_yes__please_choose_all_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("1045_000_If_yes,_please_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._1046_000_Date_of_Waiting_List_or_Unit_Transfer_request)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1046_000_Date_of_Waiting_List_or_Unit_Transfer_request");
            entity.Property(e => e._1047_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1047_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1048_000_Does_the_grievant_face_a_potential_eviction_from_the_property_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1048_000_Does_the_grievant_face_a_potential_eviction_from_the_property?");
            entity.Property(e => e._1049_000_If_yes__has_the_grievant_been_served_with_any_of_the_following__Please_choose_all_that_apply)
                .IsUnicode(false)
                .HasColumnName("1049_000_If_yes,_has_the_grievant_been_served_with_any_of_the_following?_Please_choose_all_that_apply");
            entity.Property(e => e._1050_000_Date_Notice_was_served)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1050_000_Date_Notice_was_served");
            entity.Property(e => e._1051_000_Does_the_grievance_relate_to_a_threatened__pending__or_past_eviction_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1051_000_Does_the_grievance_relate_to_a_threatened,_pending,_or_past_eviction?");
            entity.Property(e => e._1052_000_Does_the_grievance_relate_to_a_proposed__pending__or_completed_relocation_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1052_000_Does_the_grievance_relate_to_a_proposed,_pending,_or_completed_relocation?");
            entity.Property(e => e._1053_000_If_yes__please_describe)
                .IsUnicode(false)
                .HasColumnName("1053_000_If_yes,_please_describe");
            entity.Property(e => e._1054_000_Does_the_grievance_relate_to_a_proposed__pending__or_completed_retrofit_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1054_000_Does_the_grievance_relate_to_a_proposed,_pending,_or_completed_retrofit?");
            entity.Property(e => e._1055_000_If_yes__please_describe)
                .IsUnicode(false)
                .HasColumnName("1055_000_If_yes,_please_describe");
            entity.Property(e => e._1056_000_Noise_complaints__choose_all_that_apply_from_the_list_of_options)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1056_000_Noise_complaints:_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._1057_000_If_the_noise_complaint_relates_to_noise_from_another_tenant__please_provide_that_tenant_s_name)
                .IsUnicode(false)
                .HasColumnName("1057_000_If_the_noise_complaint_relates_to_noise_from_another_tenant,_please_provide_that_tenant's_name");
            entity.Property(e => e._1058_000_If_the_noise_complaint_relates_to_noise_from_another_unit__please_provide_that_unit_number)
                .IsUnicode(false)
                .HasColumnName("1058_000_If_the_noise_complaint_relates_to_noise_from_another_unit,_please_provide_that_unit_number");
            entity.Property(e => e._1059_000_If_the_noise_complaint_relates_to_noise_from_a_common_area__please_describe_the_common_area_location)
                .IsUnicode(false)
                .HasColumnName("1059_000_If_the_noise_complaint_relates_to_noise_from_a_common_area,_please_describe_the_common_area_location");
            entity.Property(e => e._1060_000_Does_the_grievance_relate_to_an_assistance_animal__either_a_service_animal_or_emotional_support_animal_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1060_000_Does_the_grievance_relate_to_an_assistance_animal,_either_a_service_animal_or_emotional_support_animal?");
            entity.Property(e => e._1061_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("1061_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1062_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1062_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1063_000_Does_the_grievance_relate_to_claims_of_discrimination_or_different_treatment_from_the_property_because_the_grievant_is_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1063_000_Does_the_grievance_relate_to_claims_of_discrimination_or_different_treatment_from_the_property_because_the_grievant_is_");
            entity.Property(e => e._1064_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("1064_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1065_000_Does_the_grievance_relate_to_claims_of_harassment_on_the_property_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1065_000_Does_the_grievance_relate_to_claims_of_harassment_on_the_property?");
            entity.Property(e => e._1066_000_If_yes__choose_all_that_apply_from_the_list_of_options_concerning_the_claimed_harasser_s_)
                .HasMaxLength(108)
                .IsUnicode(false)
                .HasColumnName("1066_000_If_yes,_choose_all_that_apply_from_the_list_of_options_concerning_the_claimed_harasser(s)");
            entity.Property(e => e._1067_000_If_the_claimed_harasser_is_an_employee_of_the_property__provide_names_of_the_employee_s_)
                .IsUnicode(false)
                .HasColumnName("1067_000_If_the_claimed_harasser_is_an_employee_of_the_property,_provide_names_of_the_employee(s)");
            entity.Property(e => e._1068_000_If_the_claimed_harasser_is_an_employee_of_the_property__provide_titles_of_the_employee_s_)
                .IsUnicode(false)
                .HasColumnName("1068_000_If_the_claimed_harasser_is_an_employee_of_the_property,_provide_titles_of_the_employee(s)");
            entity.Property(e => e._1069_000_If_the_claimed_harasser_is_an_employee_of_the_property__and_the_name_or_title_are_unknown__please_provide_a_description)
                .IsUnicode(false)
                .HasColumnName("1069_000_If_the_claimed_harasser_is_an_employee_of_the_property,_and_the_name_or_title_are_unknown,_please_provide_a_description");
            entity.Property(e => e._1070_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property__provide_names_of_the_persons)
                .IsUnicode(false)
                .HasColumnName("1070_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_provide_names_of_the_persons");
            entity.Property(e => e._1071_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property__provide_titles_of_the_persons)
                .IsUnicode(false)
                .HasColumnName("1071_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_provide_titles_of_the_persons");
            entity.Property(e => e._1072_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property__and_the_name_or_title_are_unknown__please_provide_a_d)
                .IsUnicode(false)
                .HasColumnName("1072_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_and_the_name_or_title_are_unknown,_please_provide_a_d");
            entity.Property(e => e._1073_000_If_the_claimed_harasser_is_a_tenant_or_guest__provide_names_of_the_persons)
                .IsUnicode(false)
                .HasColumnName("1073_000_If_the_claimed_harasser_is_a_tenant_or_guest,_provide_names_of_the_persons");
            entity.Property(e => e._1074_000_If_the_claimed_harasser_is_a_tenant_or_guest__provide_the_unit_number)
                .IsUnicode(false)
                .HasColumnName("1074_000_If_the_claimed_harasser_is_a_tenant_or_guest,_provide_the_unit_number");
            entity.Property(e => e._1075_000_If_the_claimed_harasser_is_a_tenant_or_guest__and_the_name_or_unit_number_are_unknown__please_provide_a_description_of_)
                .IsUnicode(false)
                .HasColumnName("1075_000_If_the_claimed_harasser_is_a_tenant_or_guest,_and_the_name_or_unit_number_are_unknown,_please_provide_a_description_of_");
            entity.Property(e => e._1076_000_If_the_claimed_harasser_s__is_someone_other_than_an_employee__contractor__agent__tenant_or_guest__provide_as_much_ident)
                .IsUnicode(false)
                .HasColumnName("1076_000_If_the_claimed_harasser(s)_is_someone_other_than_an_employee,_contractor,_agent,_tenant_or_guest,_provide_as_much_ident");
            entity.Property(e => e._1077_000_Does_the_grievant_believe_they_are_being_harassed_because_they_are_a_member_of_a_group_protected_by_the_Fair_Housing_Po)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1077_000_Does_the_grievant_believe_they_are_being_harassed_because_they_are_a_member_of_a_group_protected_by_the_Fair_Housing_Po");
            entity.Property(e => e._1078_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("1078_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1079_000_Does_the_grievant_allege_they_are_being_retaliated_against_by_the_property_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1079_000_Does_the_grievant_allege_they_are_being_retaliated_against_by_the_property?");
            entity.Property(e => e._1080_000_If_yes__please_choose_the_options_that_best_describe_the_alleged_reason_for_the_claimed_retaliation)
                .IsUnicode(false)
                .HasColumnName("1080_000_If_yes,_please_choose_the_options_that_best_describe_the_alleged_reason_for_the_claimed_retaliation");
            entity.Property(e => e._1081_000_If_yes__please_choose_the_options_that_best_describe_the_alleged_nature_of_the_retaliatory_action)
                .IsUnicode(false)
                .HasColumnName("1081_000_If_yes,_please_choose_the_options_that_best_describe_the_alleged_nature_of_the_retaliatory_action");
            entity.Property(e => e._1082_000_Does_the_grievance_relate_to_a_rental_application_)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1082_000_Does_the_grievance_relate_to_a_rental_application?");
            entity.Property(e => e._1083_000_If_yes__please_select_the_options_that_best_describe_the_alleged_basis_for_the_grievance)
                .IsUnicode(false)
                .HasColumnName("1083_000_If_yes,_please_select_the_options_that_best_describe_the_alleged_basis_for_the_grievance");
            entity.Property(e => e._1084_000_Date_grievant_submitted_Rental_Application)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1084_000_Date_grievant_submitted_Rental_Application");
            entity.Property(e => e._1085_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1085_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1086_000_Other_grievance__Describe_other_basis_for_grievance)
                .IsUnicode(false)
                .HasColumnName("1086_000_Other_grievance:_Describe_other_basis_for_grievance");
            entity.Property(e => e._1087_000_Did_the_City_Grievant_file_a_grievance_with_the_Property_related_to_the_same_issue_as_the_City_grievance___Verify_by_ch)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1087_000_Did_the_City_Grievant_file_a_grievance_with_the_Property_related_to_the_same_issue_as_the_City_grievance?_(Verify_by_ch");
            entity.Property(e => e._1088_000_If_yes__date_of_the_property_grievance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1088_000_If_yes,_date_of_the_property_grievance");
            entity.Property(e => e._1089_000_If_yes__date_the_grievance_was_listed_on_the_Quarterly_Report_Grievance_Log)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1089_000_If_yes,_date_the_grievance_was_listed_on_the_Quarterly_Report_Grievance_Log");
            entity.Property(e => e._1090_000_If_yes__date_the_grievant_received_decision_from_property)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1090_000_If_yes,_date_the_grievant_received_decision_from_property");
            entity.Property(e => e._1091_000_Did_the_Property_follow_required_Procedures_in_response_to_any_Reasonable_Accommodation__Reasonable_Modification_or_Eff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1091_000_Did_the_Property_follow_required_Procedures_in_response_to_any_Reasonable_Accommodation,_Reasonable_Modification_or_Eff");
            entity.Property(e => e._1092_000_If_no__please_explain)
                .IsUnicode(false)
                .HasColumnName("1092_000_If_no,_please_explain");
            entity.Property(e => e._1116_000_GrievanceSubmissionSource)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("1116_000_GrievanceSubmissionSource");
            entity.Property(e => e._1117_000_LastActionDate)
                .HasMaxLength(10)
                .HasColumnName("1117_000_LastActionDate");
            entity.Property(e => e._1118_000_NumberOfDaysSinceGrievanceReceived).HasColumnName("1118_000_NumberOfDaysSinceGrievanceReceived");
            entity.Property(e => e._1119_000_CaseCreatedOn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1119_000_CaseCreatedOn");
            entity.Property(e => e._1120_000_ReferredToAgency).HasColumnName("1120_000_ReferredToAgency");
            entity.Property(e => e._1121_000_CaseOpened)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("1121_000_CaseOpened");
            entity.Property(e => e._1122_000_NoticeOfDetermination)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("1122_000_NoticeOfDetermination");
            entity.Property(e => e._1123_000_LinkedProperties).HasColumnName("1123_000_LinkedProperties");
            entity.Property(e => e._1124_000_AcHPEmployeeUsername)
                .HasMaxLength(200)
                .HasColumnName("1124_000_AcHPEmployeeUsername");
            entity.Property(e => e._142_010_GrievanceIDNumber)
                .HasMaxLength(20)
                .HasColumnName("142_010_GrievanceIDNumber");
            entity.Property(e => e._142_020_GrievantFirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("142_020_GrievantFirstName");
            entity.Property(e => e._142_021_GrievantMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("142_021_GrievantMiddleName");
            entity.Property(e => e._142_022_GrievantLastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("142_022_GrievantLastName");
            entity.Property(e => e._142_025_DateGrievanceFiled)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_025_DateGrievanceFiled");
            entity.Property(e => e._142_028_IsIncidentSpecificLocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("142_028_IsIncidentSpecificLocation");
            entity.Property(e => e._142_030_PropertyNameSubToGrievance)
                .HasMaxLength(500)
                .HasColumnName("142_030_PropertyNameSubToGrievance");
            entity.Property(e => e._142_040_PropertyAcHpNumberSubToGrievance)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("142_040_PropertyAcHpNumberSubToGrievance");
            entity.Property(e => e._142_050_PropertyAddressSubToGrievance)
                .IsUnicode(false)
                .HasColumnName("142_050_PropertyAddressSubToGrievance");
            entity.Property(e => e._142_051_IncidentAddressHouseNum).HasColumnName("142_051_IncidentAddressHouseNum");
            entity.Property(e => e._142_052_IncidentAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_052_IncidentAddressHouseFracNum");
            entity.Property(e => e._142_053_IncidentAddressLutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("142_053_IncidentAddressLutPreDirCD");
            entity.Property(e => e._142_054_IncidentAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("142_054_IncidentAddressStreetName");
            entity.Property(e => e._142_055_IncidentAddressLutStreetTypeCD)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("142_055_IncidentAddressLutStreetTypeCD");
            entity.Property(e => e._142_060_UnitNoRelateToGrievance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_060_UnitNoRelateToGrievance");
            entity.Property(e => e._142_061_IncidentAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("142_061_IncidentAddressCity");
            entity.Property(e => e._142_062_IncidentAddressLutStateCD)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("142_062_IncidentAddressLutStateCD");
            entity.Property(e => e._142_063_IncidentAddressZip).HasColumnName("142_063_IncidentAddressZip");
            entity.Property(e => e._142_070_DescriptionOfGrievance).HasColumnName("142_070_DescriptionOfGrievance");
            entity.Property(e => e._142_080_DevelopmentCategoryForGrievance)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("142_080_DevelopmentCategoryForGrievance");
            entity.Property(e => e._142_081_IsCoveredHousingDevelopment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("142_081_IsCoveredHousingDevelopment");
            entity.Property(e => e._142_082_IsDisabilityRelated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("142_082_IsDisabilityRelated");
            entity.Property(e => e._142_090_CityActionOnGrievance).HasColumnName("142_090_CityActionOnGrievance");
            entity.Property(e => e._142_100_ResolutionOnGrievance).HasColumnName("142_100_ResolutionOnGrievance");
            entity.Property(e => e._142_110_GrievanceOutcomeStafisfactoryOrUnsatisfactory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("142_110_GrievanceOutcomeStafisfactoryOrUnsatisfactory");
            entity.Property(e => e._142_120_ReferralSourcesConcerningGrievance).HasColumnName("142_120_ReferralSourcesConcerningGrievance");
            entity.Property(e => e._142_130_StatusOnGrievance)
                .HasMaxLength(50)
                .HasColumnName("142_130_StatusOnGrievance");
            entity.Property(e => e._142_140_ModeOfGrievanceSubmission)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("142_140_ModeOfGrievanceSubmission");
            entity.Property(e => e._142_150_GrievanceType)
                .HasMaxLength(302)
                .IsUnicode(false)
                .HasColumnName("142_150_GrievanceType");
            entity.Property(e => e._142_160_GrievanceDeterminationStatus)
                .IsUnicode(false)
                .HasColumnName("142_160_GrievanceDeterminationStatus");
            entity.Property(e => e._142_170_DateOfGrievanceDetermination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_170_DateOfGrievanceDetermination");
            entity.Property(e => e._142_180_DateOfAnticipatedImplementationInResponseToGrievance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_180_DateOfAnticipatedImplementationInResponseToGrievance");
            entity.Property(e => e._142_190_DateOfImplementationInResponseToGrievance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_190_DateOfImplementationInResponseToGrievance");
            entity.Property(e => e._143_500_IsFiledRelatedGrievance)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("143_500_IsFiledRelatedGrievance");
            entity.Property(e => e._144_500_RelatedGrievanceQRGrievanceLogID)
                .IsUnicode(false)
                .HasColumnName("144_500_RelatedGrievanceQRGrievanceLogID");
            entity.Property(e => e._144_DatesGrievancesAgainstPropertyFiledWithCity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("144_DatesGrievancesAgainstPropertyFiledWithCity");
            entity.Property(e => e._145_DateAcHPReviewGrivancesWithCityAgainstProperty)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("145_DateAcHPReviewGrivancesWithCityAgainstProperty");
            entity.Property(e => e._175_100_CityGrievances)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("175_100_CityGrievances");
            entity.Property(e => e._175_200_DateCityGrievancesOpened)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("175_200_DateCityGrievancesOpened");
            entity.Property(e => e._175_300_DateCityGrievancesClosed)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("175_300_DateCityGrievancesClosed");
            entity.Property(e => e._175_CityGrievancesDateOpenedAndClosed)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("175_CityGrievancesDateOpenedAndClosed");
            entity.Property(e => e._183_400_FiledLawsuitWithAnotherAgency)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("183_400_FiledLawsuitWithAnotherAgency");
            entity.Property(e => e._183_500_LawsuitFiledAgencyNames)
                .IsUnicode(false)
                .HasColumnName("183_500_LawsuitFiledAgencyNames");
            entity.Property(e => e._183_600_LawSuitFiledDates)
                .IsUnicode(false)
                .HasColumnName("183_600_LawSuitFiledDates");
            entity.Property(e => e._758_Grv_Grievant_PrimaryPhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("758_Grv_Grievant_PrimaryPhoneType");
            entity.Property(e => e._759_Grv_Grievant_PrimaryPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("759_Grv_Grievant_PrimaryPhoneNumber");
            entity.Property(e => e._760_Grv_Grievant_AdditonalPhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("760_Grv_Grievant_AdditonalPhoneType");
            entity.Property(e => e._761_Grv_Grievant_AdditionalPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("761_Grv_Grievant_AdditionalPhoneNumber");
            entity.Property(e => e._762_Grv_Grievant_Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("762_Grv_Grievant_Email");
            entity.Property(e => e._763_Grv_Grievant_PreferredLanguage)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("763_Grv_Grievant_PreferredLanguage");
            entity.Property(e => e._764_Grv_Grievant_PreferredMethodOfContact)
                .HasMaxLength(26)
                .IsUnicode(false)
                .HasColumnName("764_Grv_Grievant_PreferredMethodOfContact");
            entity.Property(e => e._765_Grv_Grievant_OtherPreferredMethodOfContact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("765_Grv_Grievant_OtherPreferredMethodOfContact");
            entity.Property(e => e._766_Grv_Add_POBOX)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("766_Grv_Add_POBOX");
            entity.Property(e => e._767_100_GrievantAddressHouseNum).HasColumnName("767_100_GrievantAddressHouseNum");
            entity.Property(e => e._767_200_GrievantAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("767_200_GrievantAddressHouseFracNum");
            entity.Property(e => e._767_300_GrievantAddressLutPreDirCD)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("767_300_GrievantAddressLutPreDirCD");
            entity.Property(e => e._767_400_GrievantAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("767_400_GrievantAddressStreetName");
            entity.Property(e => e._767_500_GrievantAddressLutStreetTypeCD)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("767_500_GrievantAddressLutStreetTypeCD");
            entity.Property(e => e._767_600_GrievantAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("767_600_GrievantAddressUnit");
            entity.Property(e => e._767_700_GrievantAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("767_700_GrievantAddressCity");
            entity.Property(e => e._767_800_GrievantAddressLutStateCD)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("767_800_GrievantAddressLutStateCD");
            entity.Property(e => e._767_900_GrievantAddressZip).HasColumnName("767_900_GrievantAddressZip");
            entity.Property(e => e._767_901_IsFileForSomeOne)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("767_901_IsFileForSomeOne");
            entity.Property(e => e._767_Grv_Add_POBOXNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("767_Grv_Add_POBOXNumber");
            entity.Property(e => e._768_Grv_Preparer_RelationshipToPersonWhohasGrievance)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("768_Grv_Preparer_RelationshipToPersonWhohasGrievance");
            entity.Property(e => e._769_Grv_Preparer_FirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("769_Grv_Preparer_FirstName");
            entity.Property(e => e._770_Grv_Preparer_MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("770_Grv_Preparer_MiddleName");
            entity.Property(e => e._771_Grv_Preparer_LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("771_Grv_Preparer_LastName");
            entity.Property(e => e._772_Grv_Preparer_PrimaryPhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("772_Grv_Preparer_PrimaryPhoneType");
            entity.Property(e => e._773_Grv_Preparer_PrimaryPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("773_Grv_Preparer_PrimaryPhoneNumber");
            entity.Property(e => e._774_Grv_Preparer_AdditonalPhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("774_Grv_Preparer_AdditonalPhoneType");
            entity.Property(e => e._775_Grv_Preparer_AdditionalPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("775_Grv_Preparer_AdditionalPhoneNumber");
            entity.Property(e => e._776_Grv_Preparer_Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("776_Grv_Preparer_Email");
            entity.Property(e => e._777_Grv_Preparer_PreferredMethodOfContact)
                .HasMaxLength(26)
                .IsUnicode(false)
                .HasColumnName("777_Grv_Preparer_PreferredMethodOfContact");
            entity.Property(e => e._778_Grv_Preparer_OtherPreferredMethodOfContact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("778_Grv_Preparer_OtherPreferredMethodOfContact");
            entity.Property(e => e._779_Grv_PreparerAdd_POBOX)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("779_Grv_PreparerAdd_POBOX");
            entity.Property(e => e._780_Grv_PreparerAdd_POBOXNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("780_Grv_PreparerAdd_POBOXNumber");
            entity.Property(e => e._781_Grv_PreparerAdd_HouseNumber).HasColumnName("781_Grv_PreparerAdd_HouseNumber");
            entity.Property(e => e._782_Grv_PreparerAdd_HouseFractionNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("782_Grv_PreparerAdd_HouseFractionNumber");
            entity.Property(e => e._783_Grv_PreparerAdd_StreetDirection)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("783_Grv_PreparerAdd_StreetDirection");
            entity.Property(e => e._784_Grv_PreparerAdd_StreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("784_Grv_PreparerAdd_StreetName");
            entity.Property(e => e._785_100_PreparerAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("785_100_PreparerAddressUnit");
            entity.Property(e => e._785_200_PreparerAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("785_200_PreparerAddressCity");
            entity.Property(e => e._785_Grv_PreparerAdd_StreetType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("785_Grv_PreparerAdd_StreetType");
            entity.Property(e => e._786_Grv_PreparerAdd_State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("786_Grv_PreparerAdd_State");
            entity.Property(e => e._787_Grv_PreparerAdd_ZipCode).HasColumnName("787_Grv_PreparerAdd_ZipCode");
            entity.Property(e => e._788_Grv_Location_HouseNumber).HasColumnName("788_Grv_Location_HouseNumber");
            entity.Property(e => e._789_Grv_Location_HouseFractionNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("789_Grv_Location_HouseFractionNumber");
            entity.Property(e => e._790_Grv_Location_StreetDirection)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("790_Grv_Location_StreetDirection");
            entity.Property(e => e._791_Grv_Location_StreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("791_Grv_Location_StreetName");
            entity.Property(e => e._792_Grv_Location_StreetType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("792_Grv_Location_StreetType");
            entity.Property(e => e._793_Grv_Location_UnitNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("793_Grv_Location_UnitNumber");
            entity.Property(e => e._794_Grv_Location_City)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("794_Grv_Location_City");
            entity.Property(e => e._795_Grv_Location_State)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("795_Grv_Location_State");
            entity.Property(e => e._796_Grv_Location_ZipCode).HasColumnName("796_Grv_Location_ZipCode");
            entity.Property(e => e._797_Grv_Notice_NoticeToVacateFromTheOwnerOrManager)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("797_Grv_Notice_NoticeToVacateFromTheOwnerOrManager");
            entity.Property(e => e._798_Grv_Notice_UnlawfulDetainerSummonsfromTheCourt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("798_Grv_Notice_UnlawfulDetainerSummonsfromTheCourt");
            entity.Property(e => e._799_Grv_Notice_SheriffNoticeToVacate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("799_Grv_Notice_SheriffNoticeToVacate");
            entity.Property(e => e._800_Grv_Notice_WereDateToMoveOutGiven)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("800_Grv_Notice_WereDateToMoveOutGiven");
            entity.Property(e => e._801_500_IsUnitDenied)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("801_500_IsUnitDenied");
            entity.Property(e => e._801_Grv_Notice_DateGivenToMoveOut)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("801_Grv_Notice_DateGivenToMoveOut");
            entity.Property(e => e._802_Grv_Notice_IsItStillVacant)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("802_Grv_Notice_IsItStillVacant");
            entity.Property(e => e._803_Grv_Notice_WasItAnAccessibleUnit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("803_Grv_Notice_WasItAnAccessibleUnit");
            entity.Property(e => e._804_500_Case_Status)
                .HasMaxLength(50)
                .HasColumnName("804_500_Case_Status");
            entity.Property(e => e._804_Grv_Notice_SupportingDocuments)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("804_Grv_Notice_SupportingDocuments");
            entity.Property(e => e._805_Grv_Status_Assignee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("805_Grv_Status_Assignee");
            entity.Property(e => e._806_Grv_Milestone_CaseExtensionProvided)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("806_Grv_Milestone_CaseExtensionProvided");
            entity.Property(e => e._807_Grv_Milestone_NoticeOfAppeal)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("807_Grv_Milestone_NoticeOfAppeal");
            entity.Property(e => e._808_Grv_System_AcHPEmployeeName)
                .HasMaxLength(200)
                .HasColumnName("808_Grv_System_AcHPEmployeeName");
            entity.Property(e => e._809_Grv_UnitNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("809_Grv_UnitNumber");
        });

        modelBuilder.Entity<vwOLAP_HIMSContactInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSContactInfo", "AAHR");

            entity.Property(e => e.Address)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicantOrBorrower)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.BusPhone)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(250)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Modified)
                .HasMaxLength(114)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ParticipantType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.cellPhone)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwOLAP_HIMSCovenant>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSCovenants", "AAHR");

            entity.Property(e => e.AgreementNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AssignedTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CalculatedMonitoringFee)
                .HasMaxLength(300)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CovRegAgreementType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CovenantLink)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CovenantNo)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DateAdditionalRefferral).HasColumnType("datetime");
            entity.Property(e => e.DateAssignedToOMMonitor).HasColumnType("datetime");
            entity.Property(e => e.DateCovRegEnd).HasColumnType("datetime");
            entity.Property(e => e.DateCovRegStart).HasColumnType("datetime");
            entity.Property(e => e.DateExecute).HasColumnType("datetime");
            entity.Property(e => e.DateFirstAssignedToContractedMonitor).HasColumnType("datetime");
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HousingServicesProgram)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MonitoringFlatFee).HasColumnType("money");
            entity.Property(e => e.ProjName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ProjectCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ReportingPeriod)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.UnitComments)
                .HasMaxLength(300)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwOLAP_HIMSMilestone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSMilestones", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateReceived).HasColumnType("datetime");
            entity.Property(e => e.DateRequested).HasColumnType("datetime");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MilestoneName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwOLAP_HIMSParticipantInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSParticipantInfo", "AAHR");

            entity.Property(e => e.ApplicantBorrower)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CSZ)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(203)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.EscrowOrOrderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FaxNumber)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LegalStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PFullNameOnly)
                .HasMaxLength(250)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PNameAndType)
                .HasMaxLength(302)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ParticipantTypeDesc)
                .HasMaxLength(12)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PrimaryPhoneNumber)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SecondaryPhoneNumber)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.TitleDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip2)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.address)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwOLAP_HIMSUnitInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSUnitInfo", "AAHR");

            entity.Property(e => e.APNID)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Bedroom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Percent)
                .HasMaxLength(51)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.address)
                .HasMaxLength(179)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<vwOLAP_PMPDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_PMPDetails", "AAHR");

            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PMPLogStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestNumber).HasMaxLength(20);
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<vwOLAP_PMPDetails_Updated>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_PMPDetails_Updated", "AAHR");

            entity.Property(e => e.Application_End_Date)
                .HasColumnType("datetime")
                .HasColumnName("Application End Date");
            entity.Property(e => e.DatePMPSubmittedOnline).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StatusOfPMPOnline)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e._101_001_OwnerOrLegalEntityName).HasColumnName("101_001_OwnerOrLegalEntityName");
            entity.Property(e => e._101_002_LegalEntityType)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("101_002_LegalEntityType");
            entity.Property(e => e._111_100_DatePMPPreliminaryCertificate)
                .HasColumnType("datetime")
                .HasColumnName("111_100_DatePMPPreliminaryCertificate");
            entity.Property(e => e._111_200_DatePMPFinalCertificate)
                .HasColumnType("datetime")
                .HasColumnName("111_200_DatePMPFinalCertificate");
            entity.Property(e => e._112_DatePropertyInitiallyBeginsAcceptingLotteryApplications)
                .HasColumnType("datetime")
                .HasColumnName("112_DatePropertyInitiallyBeginsAcceptingLotteryApplications");
            entity.Property(e => e._113_DateInitiallyOpenforMarketing)
                .HasColumnType("datetime")
                .HasColumnName("113_DateInitiallyOpenforMarketing");
            entity.Property(e => e._116_DateCUWaitingListOpened)
                .HasColumnType("datetime")
                .HasColumnName("116_DateCUWaitingListOpened");
            entity.Property(e => e._122_DocumentSubmissionforOutreachMarketingtoHCIDLADate)
                .HasColumnType("datetime")
                .HasColumnName("122_DocumentSubmissionforOutreachMarketingtoHCIDLADate");
            entity.Property(e => e._142_Date_of_Outreach)
                .HasColumnType("datetime")
                .HasColumnName("142_Date of Outreach");
            entity.Property(e => e._526_DateProjectEstimatedOpenforOccupancy)
                .HasColumnType("datetime")
                .HasColumnName("526_DateProjectEstimatedOpenforOccupancy");
            entity.Property(e => e._621_LotteryDrawDate)
                .HasColumnType("datetime")
                .HasColumnName("621_LotteryDrawDate");
            entity.Property(e => e._622_Special_Note_For_Other_project_Type_)
                .IsUnicode(false)
                .HasColumnName("622_Special Note(For Other project Type)");
            entity.Property(e => e._623_OrganizationName)
                .HasMaxLength(500)
                .HasColumnName("623_OrganizationName");
            entity.Property(e => e._624_ContactName)
                .HasMaxLength(500)
                .HasColumnName("624_ContactName");
            entity.Property(e => e._625_ContactPhone)
                .HasMaxLength(20)
                .HasColumnName("625_ContactPhone");
            entity.Property(e => e._626_Target_Audience).HasColumnName("626_Target Audience");
            entity.Property(e => e._627_LocationofDistribution).HasColumnName("627_LocationofDistribution");
            entity.Property(e => e._628_TypeofOutreach)
                .IsUnicode(false)
                .HasColumnName("628_TypeofOutreach");
            entity.Property(e => e._629_PartyResponsibleforDistribution)
                .IsUnicode(false)
                .HasColumnName("629_PartyResponsibleforDistribution");
            entity.Property(e => e._630_Organization__Resource_list_)
                .HasMaxLength(500)
                .HasColumnName("630_Organization (Resource list)");
            entity.Property(e => e._631_LeaseUpBanner_ResponsibleParty)
                .IsUnicode(false)
                .HasColumnName("631_LeaseUpBanner_ResponsibleParty");
            entity.Property(e => e._632_LeaseUpBanner_DatePostedAvailable)
                .HasColumnType("datetime")
                .HasColumnName("632_LeaseUpBanner_DatePostedAvailable");
            entity.Property(e => e._633_LeaseUpPhoneLine_ReponsibleParty)
                .IsUnicode(false)
                .HasColumnName("633_LeaseUpPhoneLine_ReponsibleParty");
            entity.Property(e => e._634_LeaseUpPhoneLine_DatePostedAvailable)
                .HasColumnType("datetime")
                .HasColumnName("634_LeaseUpPhoneLine_DatePostedAvailable");
            entity.Property(e => e._635_OtherName)
                .IsUnicode(false)
                .HasColumnName("635_OtherName");
            entity.Property(e => e._636_OtherDatePostedAvailable)
                .HasColumnType("datetime")
                .HasColumnName("636_OtherDatePostedAvailable");
            entity.Property(e => e._637_Other_ResponsibleParty)
                .IsUnicode(false)
                .HasColumnName("637_Other-ResponsibleParty");
            entity.Property(e => e._638_Lottery_available_additional_methods).HasColumnName("638_Lottery available additional methods");
            entity.Property(e => e._639_Lottery_Submit_methods).HasColumnName("639_Lottery Submit methods");
            entity.Property(e => e._640_MoreDetail).HasColumnName("640_MoreDetail");
            entity.Property(e => e._641_MethodDevelopmentConductLottery).HasColumnName("641_MethodDevelopmentConductLottery");
            entity.Property(e => e._642_Vacancy_Policy_Description).HasColumnName("642_Vacancy Policy Description");
            entity.Property(e => e._643_WaitListAdditionalInformation).HasColumnName("643_WaitListAdditionalInformation");
            entity.Property(e => e._644_WaitListDescriptionForHOPWA).HasColumnName("644_WaitListDescriptionForHOPWA");
            entity.Property(e => e._645_NameofAuthorizedSignatoryPerson)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("645_NameofAuthorizedSignatoryPerson");
            entity.Property(e => e._646_TitleofSignatoryPerson)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("646_TitleofSignatoryPerson");
            entity.Property(e => e._647_Review1By).HasColumnName("647_Review1By");
            entity.Property(e => e._647_Review2By).HasColumnName("647_Review2By");
            entity.Property(e => e._648_Comments).HasColumnName("648_Comments");
        });

        modelBuilder.Entity<vwOLAP_PolicyCaseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_PolicyCaseDetails", "AAHR");

            entity.Property(e => e.Analyst)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CheckListItems).IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReportDescription).IsUnicode(false);
            entity.Property(e => e.ReportItem)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.status).HasMaxLength(50);
        });

        modelBuilder.Entity<vwOLAP_ProjectDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_ProjectDetails", "AAHR");

            entity.Property(e => e.AssignedRCS)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CaseStatus).HasMaxLength(50);
            entity.Property(e => e.DoFairHousingActAccessibilityProvisionsApply)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NACRecommendation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Occupiedstatus)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PreSettlementDevelopment)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TypeOfProject)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.casetype).HasMaxLength(50);
        });

        modelBuilder.Entity<vwOLAP_ProjectDetails_Updated>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_ProjectDetails_Updated", "AAHR");

            entity.Property(e => e.AssignedRCS)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CaseStatus).HasMaxLength(50);
            entity.Property(e => e.DoFairHousingActAccessibilityProvisionsApply)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NACRecommendation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Occupiedstatus)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PreSettlementDevelopment)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TypeOfProject)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.casetype).HasMaxLength(50);
        });

        modelBuilder.Entity<vwOLAP_PurportedUnitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_PurportedUnitDetails", "AAHR");

            entity.Property(e => e.AMI)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountAs)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FixedOrFloating)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyRestrictions).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TotalBathroom).IsUnicode(false);
            entity.Property(e => e.TotalBedroom).IsUnicode(false);
            entity.Property(e => e.UnitAccessibiltyType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UnitFeature)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitFeatureArea)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Unit_Attribute_Date)
                .HasColumnType("datetime")
                .HasColumnName("Unit Attribute Date");
            entity.Property(e => e.currentTenant)
                .HasMaxLength(302)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwOLAP_QRAUTransferWaitList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRAUTransferWaitList", "AAHR");

            entity.Property(e => e.AccessibilieWaitListDate).HasColumnType("datetime");
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.Bathroom).IsUnicode(false);
            entity.Property(e => e.Bedroom).IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CurrentUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CurrentUnitStatus).HasMaxLength(20);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsPreviousAUWaitList)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsTransferred)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MoveInSiteAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MoveInUnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.Property_name).HasMaxLength(500);
            entity.Property(e => e.QRReportCreateDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonDate).HasColumnType("datetime");
            entity.Property(e => e.TransferReason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TransferRequestDate).HasColumnType("datetime");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearQR).HasMaxLength(14);
            entity.Property(e => e._132_100_TransferListTenantFirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("132_100_TransferListTenantFirstName");
            entity.Property(e => e._132_200_TransferListTenantMiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("132_200_TransferListTenantMiddleInitial");
            entity.Property(e => e._132_300_TransferListTenantLastName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("132_300_TransferListTenantLastName");
            entity.Property(e => e._133_100_TransferRequestDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("133_100_TransferRequestDate");
            entity.Property(e => e._316_000_TenantCurrentUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("316_000_TenantCurrentUnitNumber");
            entity.Property(e => e._317_000_TenantPreviouslyOnAccessibleUnitWaitlist)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("317_000_TenantPreviouslyOnAccessibleUnitWaitlist");
            entity.Property(e => e._318_000_DateWhenTenantPlacedOnAccessibleUnitWaitlist)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("318_000_DateWhenTenantPlacedOnAccessibleUnitWaitlist");
            entity.Property(e => e._319_000_DateTenantOnAUTransferListMovesIntoAU)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("319_000_DateTenantOnAUTransferListMovesIntoAU");
            entity.Property(e => e._320_000_NewAUUnitAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("320_000_NewAUUnitAddress");
            entity.Property(e => e._320_100_NewUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("320_100_NewUnitNumber");
        });

        modelBuilder.Entity<vwOLAP_QRAUWaitList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRAUWaitList", "AAHR");

            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.ApplicantMovedUnit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDateTime).HasColumnType("datetime");
            entity.Property(e => e.ApplicationType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Bathroom).IsUnicode(false);
            entity.Property(e => e.Bedroom).IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MoveInUnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.NatureOfRARequests).IsUnicode(false);
            entity.Property(e => e.Property_Name).HasMaxLength(500);
            entity.Property(e => e.QRReportCreateDate).HasColumnType("datetime");
            entity.Property(e => e.TenantAUTransferDate).HasColumnType("datetime");
            entity.Property(e => e.TenantPutOnAUTrasnferWaitLIstDate).HasColumnType("datetime");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearQR).HasMaxLength(14);
            entity.Property(e => e._126_100_WaitListApplicantFirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("126_100_WaitListApplicantFirstName");
            entity.Property(e => e._126_200_WaitListApplicantMiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("126_200_WaitListApplicantMiddleInitial");
            entity.Property(e => e._126_300_WaitListApplicantLastName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("126_300_WaitListApplicantLastName");
            entity.Property(e => e._127_100_WaitListApplicationDateTime)
                .HasColumnType("datetime")
                .HasColumnName("127_100_WaitListApplicationDateTime");
            entity.Property(e => e._127_200_WaitListMoveInDate)
                .HasColumnType("datetime")
                .HasColumnName("127_200_WaitListMoveInDate");
            entity.Property(e => e._321_000_AccessibleUnitWaitListPosition).HasColumnName("321_000_AccessibleUnitWaitListPosition");
            entity.Property(e => e._322_000_LotteryPosition).HasColumnName("322_000_LotteryPosition");
            entity.Property(e => e._323_000_ConventionalWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("323_000_ConventionalWaitListPosition");
            entity.Property(e => e._324_000_WaitListMoveInDate)
                .HasColumnType("datetime")
                .HasColumnName("324_000_WaitListMoveInDate");
            entity.Property(e => e._325_000_ApplicantMovedIntoAccessbleOrConventionalUnit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("325_000_ApplicantMovedIntoAccessbleOrConventionalUnit");
            entity.Property(e => e._326_000_DateTenantPlacedOnAUTransferList)
                .HasColumnType("datetime")
                .HasColumnName("326_000_DateTenantPlacedOnAUTransferList");
            entity.Property(e => e._327_000_DidTenantMakeReasonableAccommodationOrModificationForAccessibilityFeatures)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("327_000_DidTenantMakeReasonableAccommodationOrModificationForAccessibilityFeatures");
            entity.Property(e => e._327_100_DateTenantMakeReasonableAccommodationOrModificationForAccessibilityFeatures)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("327_100_DateTenantMakeReasonableAccommodationOrModificationForAccessibilityFeatures");
        });

        modelBuilder.Entity<vwOLAP_QRAUWaitListAggProjSiteCount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRAUWaitListAggProjSiteCount", "AAHR");

            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.Modified_On)
                .HasColumnType("datetime")
                .HasColumnName("Modified On");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e._126_000_AUWaitList_Count).HasColumnName("126_000_AUWaitList_Count");
        });

        modelBuilder.Entity<vwOLAP_QREffectiveCommunication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QREffectiveCommunication", "AAHR");

            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.ECRequestType).HasMaxLength(100);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.IsGrievanceField)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsGrievanceProcedureProvided)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Property_Name).HasMaxLength(500);
            entity.Property(e => e.QRReportCreateDate).HasColumnType("datetime");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestorAddress).HasMaxLength(300);
            entity.Property(e => e.UserType).HasMaxLength(50);
            entity.Property(e => e.YearQR).HasMaxLength(14);
            entity.Property(e => e._1109_000_SubCategory_LanguageAccess)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("1109_000_SubCategory_LanguageAccess");
            entity.Property(e => e._1109_100_SubCategory_LanguageAccess_Language)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("1109_100_SubCategory_LanguageAccess_Language");
            entity.Property(e => e._280_000_EffectiveCommunicationsThisQurter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("280_000_EffectiveCommunicationsThisQurter");
            entity.Property(e => e._281_000_EffectiveCommunicationsGrantedAndPartiallyGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("281_000_EffectiveCommunicationsGrantedAndPartiallyGrantedOnReport");
            entity.Property(e => e._281_000_EffectiveCommunicationsGrantedAndPartiallyGrantedOnReportThisQurter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("281_000_EffectiveCommunicationsGrantedAndPartiallyGrantedOnReportThisQurter");
            entity.Property(e => e._281_000_EffectiveCommunicationsGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("281_000_EffectiveCommunicationsGrantedOnReport");
            entity.Property(e => e._281_000_EffectiveCommunicationsGrantedThisQurter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("281_000_EffectiveCommunicationsGrantedThisQurter");
            entity.Property(e => e._282_000_EffectiveCommunicationsDeniedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("282_000_EffectiveCommunicationsDeniedOnReport");
            entity.Property(e => e._282_000_EffectiveCommunicationsDeniedThisQurter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("282_000_EffectiveCommunicationsDeniedThisQurter");
            entity.Property(e => e._283_000_EffectiveCommunicationsPendingOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("283_000_EffectiveCommunicationsPendingOnReport");
            entity.Property(e => e._347_000_ApplicantOrTenant_ECLog)
                .HasMaxLength(50)
                .HasColumnName("347_000_ApplicantOrTenant_ECLog");
            entity.Property(e => e._347_100_RequestorFirstName_ECLog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("347_100_RequestorFirstName_ECLog");
            entity.Property(e => e._347_200_RequestorMiddleInitial_ECLog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("347_200_RequestorMiddleInitial_ECLog");
            entity.Property(e => e._347_300_RequestorLastName_ECLog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("347_300_RequestorLastName_ECLog");
            entity.Property(e => e._347_400_DateOfRequestForEffectiveCommunication)
                .HasColumnType("datetime")
                .HasColumnName("347_400_DateOfRequestForEffectiveCommunication");
            entity.Property(e => e._347_500_TenantsCurrentUnitAddress)
                .HasMaxLength(300)
                .HasColumnName("347_500_TenantsCurrentUnitAddress");
            entity.Property(e => e._347_600_TenantsCurrentUnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("347_600_TenantsCurrentUnitNum");
            entity.Property(e => e._347_700_ApplicantsAddress)
                .HasMaxLength(300)
                .HasColumnName("347_700_ApplicantsAddress");
            entity.Property(e => e._348_000_TypeOfEffectiveCommunicationsRequest_ECLog)
                .HasMaxLength(100)
                .HasColumnName("348_000_TypeOfEffectiveCommunicationsRequest_ECLog");
            entity.Property(e => e._348_010_SubCategory_EffectiveCommunication)
                .HasMaxLength(1000)
                .HasColumnName("348_010_SubCategory_EffectiveCommunication");
            entity.Property(e => e._348_020_SubCategory_Effective_Communication_Common_Area)
                .HasMaxLength(1000)
                .HasColumnName("348_020_SubCategory_Effective Communication_Common Area");
            entity.Property(e => e._348_030_SubCategory_Other).HasColumnName("348_030_SubCategory_Other");
            entity.Property(e => e._348_100_DescriptionOfECRequest).HasColumnName("348_100_DescriptionOfECRequest");
            entity.Property(e => e._366_000_DeterminationStatus_ECLog)
                .HasMaxLength(50)
                .HasColumnName("366_000_DeterminationStatus_ECLog");
            entity.Property(e => e._366_100_DateOfWithdrawal).HasColumnName("366_100_DateOfWithdrawal");
            entity.Property(e => e._366_200_ReasonForWithdrawal).HasColumnName("366_200_ReasonForWithdrawal");
            entity.Property(e => e._367_000_DateOfDetermination_ECLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("367_000_DateOfDetermination_ECLog");
            entity.Property(e => e._367_100_ExplanationOfDetermination).HasColumnName("367_100_ExplanationOfDetermination");
            entity.Property(e => e._368_000_DateOfAnticipatedImplementation_ECLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("368_000_DateOfAnticipatedImplementation_ECLog");
            entity.Property(e => e._369_000_DateOfImplementationCompletion_ECLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("369_000_DateOfImplementationCompletion_ECLog");
            entity.Property(e => e._369_100_ImplementationInformation_ECLog).HasColumnName("369_100_ImplementationInformation_ECLog");
            entity.Property(e => e._369_200_AdditionalImplementationInformation_ECLog)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("369_200_AdditionalImplementationInformation_ECLog");
            entity.Property(e => e._369_300_IfDenied_CheckAllThatApply_ECLog)
                .HasMaxLength(71)
                .IsUnicode(false)
                .HasColumnName("369_300_IfDenied_CheckAllThatApply_ECLog");
            entity.Property(e => e._370_000_DateOfGrievance_ECLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("370_000_DateOfGrievance_ECLog");
            entity.Property(e => e._371_000_CorrespondingGrievanceNumber_ECLog)
                .HasMaxLength(50)
                .HasColumnName("371_000_CorrespondingGrievanceNumber_ECLog");
        });

        modelBuilder.Entity<vwOLAP_QRGrievanceLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRGrievanceLog", "AAHR");

            entity.Property(e => e.AnticipatedDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicantAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDetail).IsUnicode(false);
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceDetail).IsUnicode(false);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.ImplementationInformation).IsUnicode(false);
            entity.Property(e => e.IsEffectiveCommunication)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsFairHousingComplaint)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsFairHousingComplaintFiled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsHCIDLACompliantFiled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsHUDCompliantFiled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsReasonableAccommodation)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.QRReportCreateDate).HasColumnType("datetime");
            entity.Property(e => e.UnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.YearQR).HasMaxLength(14);
            entity.Property(e => e._1000_000_DecisionProvidedDateForPropertyGrievance_Partially_Granted).HasColumnName("1000_000_DecisionProvidedDateForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._1001_000_FinalDeterminationPersonName_Partially_Granted)
                .IsUnicode(false)
                .HasColumnName("1001_000_FinalDeterminationPersonName_Partially_Granted");
            entity.Property(e => e._1002_000_FinalDeterminationPersonTitle_Partially_Granted)
                .IsUnicode(false)
                .HasColumnName("1002_000_FinalDeterminationPersonTitle_Partially_Granted");
            entity.Property(e => e._1003_000_FinalDeterminationPersonPhone_Partially_Granted)
                .IsUnicode(false)
                .HasColumnName("1003_000_FinalDeterminationPersonPhone_Partially_Granted");
            entity.Property(e => e._1004_000_DeterminationDateForPropertyGrievance_Denied)
                .HasColumnType("datetime")
                .HasColumnName("1004_000_DeterminationDateForPropertyGrievance_Denied");
            entity.Property(e => e._1005_000_ExplanationOfDeterminationForPropertyGrievance_Denied)
                .IsUnicode(false)
                .HasColumnName("1005_000_ExplanationOfDeterminationForPropertyGrievance_Denied");
            entity.Property(e => e._1006_000_IsDecisionReceivedForPropertyGrievance_Denied).HasColumnName("1006_000_IsDecisionReceivedForPropertyGrievance_Denied");
            entity.Property(e => e._1007_000_DecisionProvidedDateForPropertyGrievance_Denied)
                .HasColumnType("datetime")
                .HasColumnName("1007_000_DecisionProvidedDateForPropertyGrievance_Denied");
            entity.Property(e => e._1008_000_FinalDeterminationPersonName)
                .IsUnicode(false)
                .HasColumnName("1008_000_FinalDeterminationPersonName");
            entity.Property(e => e._1009_00_FinalDeterminationPersonTitle)
                .IsUnicode(false)
                .HasColumnName("1009_00_FinalDeterminationPersonTitle");
            entity.Property(e => e._1010_000_FinalDeterminationPersonPhone)
                .IsUnicode(false)
                .HasColumnName("1010_000_FinalDeterminationPersonPhone");
            entity.Property(e => e._1011_000_WithdrawalDate).HasColumnName("1011_000_WithdrawalDate");
            entity.Property(e => e._1012_000_WithdrawalReason)
                .IsUnicode(false)
                .HasColumnName("1012_000_WithdrawalReason");
            entity.Property(e => e._1013_000_GrievanceSubmitType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("1013_000_GrievanceSubmitType");
            entity.Property(e => e._328_000_GrievanceRelatedToReasonableAccommodation_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("328_000_GrievanceRelatedToReasonableAccommodation_GLog");
            entity.Property(e => e._329_000_GrievanceRelatedToEffectiveCommunication_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("329_000_GrievanceRelatedToEffectiveCommunication_GLog");
            entity.Property(e => e._330_000_GrievanceRelatedToFairHousing_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("330_000_GrievanceRelatedToFairHousing_GLog");
            entity.Property(e => e._331_000_IsGrievantApplicant_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("331_000_IsGrievantApplicant_GLog");
            entity.Property(e => e._332_000_IsGrievantTenant_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("332_000_IsGrievantTenant_GLog");
            entity.Property(e => e._333_000_GrievanceLogDeterminationStatus_GLog)
                .HasMaxLength(50)
                .HasColumnName("333_000_GrievanceLogDeterminationStatus_GLog");
            entity.Property(e => e._334_000_DescriptionOfGrievance_GLog)
                .IsUnicode(false)
                .HasColumnName("334_000_DescriptionOfGrievance_GLog");
            entity.Property(e => e._335_000_DateOfAnticipatedImplementation_GLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("335_000_DateOfAnticipatedImplementation_GLog");
            entity.Property(e => e._336_000_DateOfImplementationCompletion_GLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("336_000_DateOfImplementationCompletion_GLog");
            entity.Property(e => e._500_000_GrievanceLogNumber)
                .HasMaxLength(50)
                .HasColumnName("500_000_GrievanceLogNumber");
            entity.Property(e => e._501_000_GrievantFirstName_GLog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("501_000_GrievantFirstName_GLog");
            entity.Property(e => e._502_000_GrievantMiddleInitial_GLog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("502_000_GrievantMiddleInitial_GLog");
            entity.Property(e => e._503_000_Grievant_Last_Name_GLog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("503_000_Grievant_Last_Name_GLog");
            entity.Property(e => e._504_000_DateGrievanceFiled_GLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("504_000_DateGrievanceFiled_GLog");
            entity.Property(e => e._505_000_PropertyNameSubjectToGrievance_GLog)
                .HasMaxLength(500)
                .HasColumnName("505_000_PropertyNameSubjectToGrievance_GLog");
            entity.Property(e => e._506_000_PropertyAcHPNumberSubjectToGrievance_GLog)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("506_000_PropertyAcHPNumberSubjectToGrievance_GLog");
            entity.Property(e => e._507_000_PropertyAddressSubjectToGrievance_GLog)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("507_000_PropertyAddressSubjectToGrievance_GLog");
            entity.Property(e => e._508_000_IfApplicable_UnitNumberRelevantToGrievance_GLog)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("508_000_IfApplicable_UnitNumberRelevantToGrievance_GLog");
            entity.Property(e => e._509_000_DescriptionOfGrievance_GLog)
                .IsUnicode(false)
                .HasColumnName("509_000_DescriptionOfGrievance_GLog");
            entity.Property(e => e._510_000_DevelopmentCategoryForGrievance_GLog)
                .HasMaxLength(100)
                .HasColumnName("510_000_DevelopmentCategoryForGrievance_GLog");
            entity.Property(e => e._511_000_City_PropertyActionOn_Grievance).HasColumnName("511_000_City_PropertyActionOn Grievance");
            entity.Property(e => e._512_000_ResolutionOfGrievance_GLog)
                .IsUnicode(false)
                .HasColumnName("512_000_ResolutionOfGrievance_GLog");
            entity.Property(e => e._515_000_GrievanceLogDeterminationStatus_GLog)
                .HasMaxLength(50)
                .HasColumnName("515_000_GrievanceLogDeterminationStatus_GLog");
            entity.Property(e => e._517_000_Property_GrievanceType)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("517_000_Property_GrievanceType");
            entity.Property(e => e._518_000_GrievanceLogDeterminationStatus_GLog)
                .HasMaxLength(50)
                .HasColumnName("518_000_GrievanceLogDeterminationStatus_GLog");
            entity.Property(e => e._519_000_GrievanceLogDeterminationDate_GLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("519_000_GrievanceLogDeterminationDate_GLog");
            entity.Property(e => e._520_000_GrievanceLogAnticipatedDate_GLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("520_000_GrievanceLogAnticipatedDate_GLog");
            entity.Property(e => e._521_000_GrievanceLogImplementationDate_GLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("521_000_GrievanceLogImplementationDate_GLog");
            entity.Property(e => e._522_000_GrievanceLogAnyComplaintsFiled_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("522_000_GrievanceLogAnyComplaintsFiled_GLog");
            entity.Property(e => e._522_100_GrievanceLogIIsHCIDLACompliantFiled_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("522_100_GrievanceLogIIsHCIDLACompliantFiled_GLog");
            entity.Property(e => e._522_100_GrievanceLogIsFairHousingComplaintFiled_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("522_100_GrievanceLogIsFairHousingComplaintFiled_GLog");
            entity.Property(e => e._522_100_GrievanceLogIsHUDCompliantFiled_GLog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("522_100_GrievanceLogIsHUDCompliantFiled_GLog");
            entity.Property(e => e._900_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_accommodation_from_the_property_)
                .IsUnicode(false)
                .HasColumnName("900_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_accommodation_from_the_property?");
            entity.Property(e => e._901_000_Type_s__of_Reasonable_Accommodation_requested_by_the_grievant)
                .IsUnicode(false)
                .HasColumnName("901_000_Type(s)_of_Reasonable_Accommodation_requested_by_the_grievant");
            entity.Property(e => e._902_000_Does_the_grievant_allege_their_reasonable_accommodation_request_has_not_been_processed_promptly_)
                .IsUnicode(false)
                .HasColumnName("902_000_Does_the_grievant_allege_their_reasonable_accommodation_request_has_not_been_processed_promptly?");
            entity.Property(e => e._903_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third_party_verification_)
                .IsUnicode(false)
                .HasColumnName("903_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third-party_verification?");
            entity.Property(e => e._904_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_accommodation_request_)
                .IsUnicode(false)
                .HasColumnName("904_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_accommodation_request?");
            entity.Property(e => e._905_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_accommodation_request_)
                .IsUnicode(false)
                .HasColumnName("905_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_accommodation_request?");
            entity.Property(e => e._906_000_Does_the_grievant_allege_there_are_other_issues_regarding_their_reasonable_accommodation_request_not_already_listed_)
                .IsUnicode(false)
                .HasColumnName("906_000_Does_the_grievant_allege_there_are_other_issues_regarding_their_reasonable_accommodation_request_not_already_listed?");
            entity.Property(e => e._907_000_Description_of_other_issues_regarding_reasonable_accommodation_request)
                .IsUnicode(false)
                .HasColumnName("907_000_Description_of_other_issues_regarding_reasonable_accommodation_request");
            entity.Property(e => e._908_000_Date_of_Reasonable_Accommodation_request)
                .IsUnicode(false)
                .HasColumnName("908_000_Date_of_Reasonable_Accommodation_request");
            entity.Property(e => e._909_000_Date_request_was_listed_on_the_Quarterly_Report_Reasonable_Accommodation_log)
                .IsUnicode(false)
                .HasColumnName("909_000_Date_request_was_listed_on_the_Quarterly_Report_Reasonable_Accommodation_log");
            entity.Property(e => e._910_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .IsUnicode(false)
                .HasColumnName("910_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._911_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_modification_from_the_property_)
                .IsUnicode(false)
                .HasColumnName("911_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_modification_from_the_property?");
            entity.Property(e => e._912_000_Type_s__of_Reasonable_Modification_requested_by_the_grievant)
                .IsUnicode(false)
                .HasColumnName("912_000_Type(s)_of_Reasonable_Modification_requested_by_the_grievant");
            entity.Property(e => e._913_000_Description_of_requested_feature)
                .IsUnicode(false)
                .HasColumnName("913_000_Description_of_requested_feature");
            entity.Property(e => e._914_000_Does_the_grievant_allege_their_reasonable_modification_has_not_been_processed_promptly_)
                .IsUnicode(false)
                .HasColumnName("914_000_Does_the_grievant_allege_their_reasonable_modification_has_not_been_processed_promptly?");
            entity.Property(e => e._915_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third_party_verification_)
                .IsUnicode(false)
                .HasColumnName("915_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third-party_verification?");
            entity.Property(e => e._916_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_modification_request_)
                .IsUnicode(false)
                .HasColumnName("916_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_modification_request?");
            entity.Property(e => e._917_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_modification_request_)
                .IsUnicode(false)
                .HasColumnName("917_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_modification_request?");
            entity.Property(e => e._918_000_Does_the_property_grievant_allege_there_are_other_issues_regarding_their_reasonable_modification_request_not_already_lis)
                .IsUnicode(false)
                .HasColumnName("918_000_Does_the_property_grievant_allege_there_are_other_issues_regarding_their_reasonable_modification_request_not_already_lis");
            entity.Property(e => e._919_000_Explanation_of_the_other_issues_regarding_reasonable_modification_request)
                .IsUnicode(false)
                .HasColumnName("919_000_Explanation_of_the_other_issues_regarding_reasonable_modification_request");
            entity.Property(e => e._920_000_Date_of_Reasonable_Modification_request)
                .IsUnicode(false)
                .HasColumnName("920_000_Date_of_Reasonable_Modification_request");
            entity.Property(e => e._921_000_Date_request_was_listed_on_the_Quarterly_Report_Reasonable_Modification_log)
                .IsUnicode(false)
                .HasColumnName("921_000_Date_request_was_listed_on_the_Quarterly_Report_Reasonable_Modification_log");
            entity.Property(e => e._922_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .IsUnicode(false)
                .HasColumnName("922_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._923_000_Does_the_grievance_relate_to_a_request_for_auxiliary_aids_and_or_services_for_effective_communication_from_the_property_)
                .IsUnicode(false)
                .HasColumnName("923_000_Does_the_grievance_relate_to_a_request_for_auxiliary_aids_and/or_services_for_effective_communication_from_the_property?");
            entity.Property(e => e._924_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("924_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._925_000_Date_of_effective_communication_request)
                .IsUnicode(false)
                .HasColumnName("925_000_Date_of_effective_communication_request");
            entity.Property(e => e._926_000_Date_request_was_listed_on_the_Quarterly_Report_Effective_Communication_log)
                .IsUnicode(false)
                .HasColumnName("926_000_Date_request_was_listed_on_the_Quarterly_Report_Effective_Communication_log");
            entity.Property(e => e._927_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .IsUnicode(false)
                .HasColumnName("927_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._928_000_Does_the_grievance_relate_to_the_maintenance_of_accessible_features__other_than_elevators___or_to_barriers_blocking_acce)
                .IsUnicode(false)
                .HasColumnName("928_000_Does_the_grievance_relate_to_the_maintenance_of_accessible_features_(other_than_elevators),_or_to_barriers_blocking_acce");
            entity.Property(e => e._929_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("929_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._929_500_Description_of_maintenance_issue)
                .IsUnicode(false)
                .HasColumnName("929_500_Description_of_maintenance_issue");
            entity.Property(e => e._930_000_Does_the_grievance_relate_to_an_elevator_)
                .IsUnicode(false)
                .HasColumnName("930_000_Does_the_grievance_relate_to_an_elevator?");
            entity.Property(e => e._931_000_If_yes__please_choose_all_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("931_000_If_yes,_please_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._932_000_Does_the_grievance_relate_to_placement_on_a_waiting_list_or_transfer_list__or_transfer_from_a_waiting_list_or_transfer_l)
                .IsUnicode(false)
                .HasColumnName("932_000_Does_the_grievance_relate_to_placement_on_a_waiting_list_or_transfer_list,_or_transfer_from_a_waiting_list_or_transfer_l");
            entity.Property(e => e._933_000_If_yes__please_choose_all_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("933_000_If_yes,_please_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._934_000_Date_of_Waiting_List_or_Unit_Transfer_request)
                .IsUnicode(false)
                .HasColumnName("934_000_Date_of_Waiting_List_or_Unit_Transfer_request");
            entity.Property(e => e._935_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .IsUnicode(false)
                .HasColumnName("935_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._936_000_Does_the_grievant_face_a_potential_eviction_from_the_property_)
                .IsUnicode(false)
                .HasColumnName("936_000_Does_the_grievant_face_a_potential_eviction_from_the_property?");
            entity.Property(e => e._937_000_If_yes__has_the_grievant_been_served_with_any_of_the_following__Please_choose_all_that_apply)
                .IsUnicode(false)
                .HasColumnName("937_000_If_yes,_has_the_grievant_been_served_with_any_of_the_following?_Please_choose_all_that_apply");
            entity.Property(e => e._938_000_Date_Notice_was_served)
                .IsUnicode(false)
                .HasColumnName("938_000_Date_Notice_was_served");
            entity.Property(e => e._939_000_Does_the_grievance_relate_to_a_threatened__pending__or_past_eviction_)
                .IsUnicode(false)
                .HasColumnName("939_000_Does_the_grievance_relate_to_a_threatened,_pending,_or_past_eviction?");
            entity.Property(e => e._940_000_Does_the_grievance_relate_to_a_proposed__pending__or_completed_relocation_)
                .IsUnicode(false)
                .HasColumnName("940_000_Does_the_grievance_relate_to_a_proposed,_pending,_or_completed_relocation?");
            entity.Property(e => e._941_000_If_yes__please_describe)
                .IsUnicode(false)
                .HasColumnName("941_000_If_yes,_please_describe");
            entity.Property(e => e._942_000_Does_the_grievance_relate_to_a_proposed__pending__or_completed_retrofit_)
                .IsUnicode(false)
                .HasColumnName("942_000_Does_the_grievance_relate_to_a_proposed,_pending,_or_completed_retrofit?");
            entity.Property(e => e._943_000_If_yes__please_describe)
                .IsUnicode(false)
                .HasColumnName("943_000_If_yes,_please_describe");
            entity.Property(e => e._944_000_Noise_complaints__choose_all_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("944_000_Noise_complaints:_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._945_000_If_the_noise_complaint_relates_to_noise_from_another_tenant__please_provide_that_tenant_s_name)
                .IsUnicode(false)
                .HasColumnName("945_000_If_the_noise_complaint_relates_to_noise_from_another_tenant,_please_provide_that_tenant's_name");
            entity.Property(e => e._945_100_If_the_noise_complaint_relates_to_noise_from_another_unit__please_provide_that_unit_number)
                .IsUnicode(false)
                .HasColumnName("945_100_If_the_noise_complaint_relates_to_noise_from_another_unit,_please_provide_that_unit_number");
            entity.Property(e => e._945_200_If_the_noise_complaint_relates_to_noise_from_a_common_area__please_describe_the_common_area_location)
                .IsUnicode(false)
                .HasColumnName("945_200_If_the_noise_complaint_relates_to_noise_from_a_common_area,_please_describe_the_common_area_location");
            entity.Property(e => e._946_000_Does_the_grievance_relate_to_an_assistance_animal__either_a_service_animal_or_emotional_support_animal_)
                .IsUnicode(false)
                .HasColumnName("946_000_Does_the_grievance_relate_to_an_assistance_animal,_either_a_service_animal_or_emotional_support_animal?");
            entity.Property(e => e._947_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("947_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._948_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .IsUnicode(false)
                .HasColumnName("948_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._949_000_Does_the_grievance_relate_to_claims_of_discrimination_or_different_treatment_from_the_property_because_the_grievant_is_a)
                .IsUnicode(false)
                .HasColumnName("949_000_Does_the_grievance_relate_to_claims_of_discrimination_or_different_treatment_from_the_property_because_the_grievant_is_a");
            entity.Property(e => e._950_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("950_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._951_000_Does_the_grievance_relate_to_claims_of_harassment_on_the_property_)
                .IsUnicode(false)
                .HasColumnName("951_000_Does_the_grievance_relate_to_claims_of_harassment_on_the_property?");
            entity.Property(e => e._952_000_If_yes__choose_all_that_apply_from_the_list_of_options_concerning_the_claimed_harasser_s_)
                .IsUnicode(false)
                .HasColumnName("952_000_If_yes,_choose_all_that_apply_from_the_list_of_options_concerning_the_claimed_harasser(s)");
            entity.Property(e => e._953_000_If_the_claimed_harasser_is_an_employee_of_the_property__provide_names_of_the_employee_s_)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("953_000_If_the_claimed_harasser_is_an_employee_of_the_property,_provide_names_of_the_employee(s)");
            entity.Property(e => e._954_000_If_the_claimed_harasser_is_an_employee_of_the_property__provide_titles_of_the_employee_s_)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("954_000_If_the_claimed_harasser_is_an_employee_of_the_property,_provide_titles_of_the_employee(s)");
            entity.Property(e => e._955_000_If_the_claimed_harasser_is_an_employee_of_the_property__and_the_name_or_title_are_unknown__please_provide_a_description_)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("955_000_If_the_claimed_harasser_is_an_employee_of_the_property,_and_the_name_or_title_are_unknown,_please_provide_a_description_");
            entity.Property(e => e._956_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property__provide_names_of_the_persons)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("956_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_provide_names_of_the_persons");
            entity.Property(e => e._957_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property__provide_titles_of_the_persons)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("957_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_provide_titles_of_the_persons");
            entity.Property(e => e._958_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property__and_the_name_or_title_are_unknown__please_provide_a_de)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("958_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_and_the_name_or_title_are_unknown,_please_provide_a_de");
            entity.Property(e => e._959_000_If_the_claimed_harasser_is_a_tenant_or_guest__provide_names_of_the_persons)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("959_000_If_the_claimed_harasser_is_a_tenant_or_guest,_provide_names_of_the_persons");
            entity.Property(e => e._960_000_If_the_claimed_harasser_is_a_tenant_or_guest__provide_the_unit_number)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("960_000_If_the_claimed_harasser_is_a_tenant_or_guest,_provide_the_unit_number");
            entity.Property(e => e._961_000_If_the_claimed_harasser_is_a_tenant_or_guest__and_the_name_or_unit_number_are_unknown__please_provide_a_description_of_t)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("961_000_If_the_claimed_harasser_is_a_tenant_or_guest,_and_the_name_or_unit_number_are_unknown,_please_provide_a_description_of_t");
            entity.Property(e => e._962_000_If_the_claimed_harasser_s__is_someone_other_than_an_employee__contractor__agent__tenant_or_guest__provide_as_much_identi)
                .IsUnicode(false)
                .HasColumnName("962_000_If_the_claimed_harasser(s)_is_someone_other_than_an_employee,_contractor,_agent,_tenant_or_guest,_provide_as_much_identi");
            entity.Property(e => e._963_000_Does_the_grievant_believe_they_are_being_harassed_because_they_are_a_member_of_a_group_protected_by_the_Fair_Housing_Pol)
                .IsUnicode(false)
                .HasColumnName("963_000_Does_the_grievant_believe_they_are_being_harassed_because_they_are_a_member_of_a_group_protected_by_the_Fair_Housing_Pol");
            entity.Property(e => e._964_000_If_yes__please_choose_all_claims_that_apply_from_the_list_of_options)
                .IsUnicode(false)
                .HasColumnName("964_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._965_000_Does_the_grievant_allege_they_are_being_retaliated_against_by_the_property_)
                .IsUnicode(false)
                .HasColumnName("965_000_Does_the_grievant_allege_they_are_being_retaliated_against_by_the_property?");
            entity.Property(e => e._966_000_If_yes__please_choose_the_options_that_best_describe_the_alleged_reason_for_the_claimed_retaliation)
                .IsUnicode(false)
                .HasColumnName("966_000_If_yes,_please_choose_the_options_that_best_describe_the_alleged_reason_for_the_claimed_retaliation");
            entity.Property(e => e._967_000_If_yes__please_choose_the_options_that_best_describe_the_alleged_nature_of_the_retaliatory_action)
                .IsUnicode(false)
                .HasColumnName("967_000_If_yes,_please_choose_the_options_that_best_describe_the_alleged_nature_of_the_retaliatory_action");
            entity.Property(e => e._968_000_Does_the_grievance_relate_to_a_rental_application_)
                .IsUnicode(false)
                .HasColumnName("968_000_Does_the_grievance_relate_to_a_rental_application?");
            entity.Property(e => e._969_000_If_yes__please_select_the_options_that_best_describe_the_alleged_basis_for_the_grievance)
                .IsUnicode(false)
                .HasColumnName("969_000_If_yes,_please_select_the_options_that_best_describe_the_alleged_basis_for_the_grievance");
            entity.Property(e => e._970_000_Date_grievant_submitted_Rental_Application)
                .IsUnicode(false)
                .HasColumnName("970_000_Date_grievant_submitted_Rental_Application");
            entity.Property(e => e._971_000_Date_grievant_was_notified_of_denial__partial_denial__or_delay)
                .IsUnicode(false)
                .HasColumnName("971_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._972_000_Other_grievance__Describe_other_basis_for_grievance)
                .IsUnicode(false)
                .HasColumnName("972_000_Other_grievance:_Describe_other_basis_for_grievance");
            entity.Property(e => e._973_000_PropertyGrievanceDeterminationStatus)
                .HasMaxLength(29)
                .IsUnicode(false)
                .HasColumnName("973_000_PropertyGrievanceDeterminationStatus");
            entity.Property(e => e._974_000_PendingStatusDescription)
                .IsUnicode(false)
                .HasColumnName("974_000_PendingStatusDescription");
            entity.Property(e => e._975_000_IsRecordsRequested).HasColumnName("975_000_IsRecordsRequested");
            entity.Property(e => e._976_000_RecordsRequestDate).HasColumnName("976_000_RecordsRequestDate");
            entity.Property(e => e._977_000_IsRecordsProvided).HasColumnName("977_000_IsRecordsProvided");
            entity.Property(e => e._978_000_PropertyGrievancePending_If_Yes_RecordsProvidedDate).HasColumnName("978_000_PropertyGrievancePending_If_Yes_RecordsProvidedDate");
            entity.Property(e => e._979_000_PropertyGrievancePending_If_No_RecordsProvidedDate).HasColumnName("979_000_PropertyGrievancePending_If_No_RecordsProvidedDate");
            entity.Property(e => e._980_000_IsMeetingRequested).HasColumnName("980_000_IsMeetingRequested");
            entity.Property(e => e._981_000_MeetingRequestDate).HasColumnName("981_000_MeetingRequestDate");
            entity.Property(e => e._982_000_IsMeetingScheduled).HasColumnName("982_000_IsMeetingScheduled");
            entity.Property(e => e._983_000_MeetingScheduledDate).HasColumnName("983_000_MeetingScheduledDate");
            entity.Property(e => e._984_000_MeetingManagerName)
                .IsUnicode(false)
                .HasColumnName("984_000_MeetingManagerName");
            entity.Property(e => e._985_000_MeetingManagerTitle)
                .IsUnicode(false)
                .HasColumnName("985_000_MeetingManagerTitle");
            entity.Property(e => e._986_000_IsAssistanceProvided).HasColumnName("986_000_IsAssistanceProvided");
            entity.Property(e => e._987_000_IsDecisionReceived).HasColumnName("987_000_IsDecisionReceived");
            entity.Property(e => e._988_000_DecisionProvidedDate)
                .HasColumnType("datetime")
                .HasColumnName("988_000_DecisionProvidedDate");
            entity.Property(e => e._989_000_DeterminationDateForPropertyGrievance_Granted)
                .HasColumnType("datetime")
                .HasColumnName("989_000_DeterminationDateForPropertyGrievance_Granted");
            entity.Property(e => e._990_000_ExplanationOfDeterminationForPropertyGrievance_Granted)
                .IsUnicode(false)
                .HasColumnName("990_000_ExplanationOfDeterminationForPropertyGrievance_Granted");
            entity.Property(e => e._991_000_DateOfAnticipatedImplementationForPropertyGrievance_Granted)
                .HasColumnType("datetime")
                .HasColumnName("991_000_DateOfAnticipatedImplementationForPropertyGrievance_Granted");
            entity.Property(e => e._992_000_ImplementationDelayReasonForPropertyGrievance_Granted)
                .IsUnicode(false)
                .HasColumnName("992_000_ImplementationDelayReasonForPropertyGrievance_Granted");
            entity.Property(e => e._993_000_IsDecisionReceivedForPropertyGrievance_Granted).HasColumnName("993_000_IsDecisionReceivedForPropertyGrievance_Granted");
            entity.Property(e => e._994_000_DecisionProvidedDateForPropertyGrievance_Granted).HasColumnName("994_000_DecisionProvidedDateForPropertyGrievance_Granted");
            entity.Property(e => e._995_000_DeterminationDateForPropertyGrievance_Partially_Granted)
                .HasColumnType("datetime")
                .HasColumnName("995_000_DeterminationDateForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._996_000_ExplanationOfDeterminationForPropertyGrievance_Partially_Granted)
                .IsUnicode(false)
                .HasColumnName("996_000_ExplanationOfDeterminationForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._997_000_DateOfAnticipatedImplementationForPropertyGrievance_Partially_Granted)
                .HasColumnType("datetime")
                .HasColumnName("997_000_DateOfAnticipatedImplementationForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._998_000_ImplementationDelayReasonForPropertyGrievance_Partially_Granted)
                .IsUnicode(false)
                .HasColumnName("998_000_ImplementationDelayReasonForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._999_000_IsDecisionReceivedForPropertyGrievance_Partially_Granted).HasColumnName("999_000_IsDecisionReceivedForPropertyGrievance_Partially_Granted");
        });

        modelBuilder.Entity<vwOLAP_QROccupancyUnit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QROccupancyUnit", "AAHR");

            entity.Property(e => e.AMI)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AUWaitListPosition).HasMaxLength(9);
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.AgencyName).HasMaxLength(50);
            entity.Property(e => e.Bathroom).IsUnicode(false);
            entity.Property(e => e.Bedroom).IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAvailabeFromAUTransferList)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsAvailableFromAUWaitList)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsOccupied)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsOccupiedWithNeeded)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LeaseAddendumExecutedDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LeaseAddendumExpirationDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MoveInDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MoveOutDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyReason).HasMaxLength(50);
            entity.Property(e => e.PreviousLiveInProperty).HasMaxLength(10);
            entity.Property(e => e.PreviousUnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ProgramEligibility___PSH)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ProgramEligibility - PSH");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.QRReportCreateDate).HasColumnType("datetime");
            entity.Property(e => e.QualifiedTenantCurrentUnitAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.QualifiedTenantCurrentUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ReferralRecipientEmail).HasMaxLength(100);
            entity.Property(e => e.ReferralRecipientPhone).HasMaxLength(30);
            entity.Property(e => e.ReferralRequestDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RelocationDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TenantSelectedFrom).HasMaxLength(50);
            entity.Property(e => e.UnitCity).HasMaxLength(50);
            entity.Property(e => e.UnitHouseFracNum).HasMaxLength(50);
            entity.Property(e => e.UnitHouseNum).HasMaxLength(50);
            entity.Property(e => e.UnitLutPreDirCD).HasMaxLength(50);
            entity.Property(e => e.UnitLutStateCD).HasMaxLength(50);
            entity.Property(e => e.UnitLutStreetTypeCD).HasMaxLength(50);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnitPostDirCD).HasMaxLength(50);
            entity.Property(e => e.UnitStreetName).HasMaxLength(100);
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnitZip).HasMaxLength(5);
            entity.Property(e => e.YearQR).HasMaxLength(14);
            entity.Property(e => e._056_100_NameOfCurrentTenant)
                .IsUnicode(false)
                .HasColumnName("056_100_NameOfCurrentTenant");
            entity.Property(e => e._056_101_FirstNameOfCurrentTenant)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("056_101_FirstNameOfCurrentTenant");
            entity.Property(e => e._056_102_MiddleInitialOfCurrentTenant)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("056_102_MiddleInitialOfCurrentTenant");
            entity.Property(e => e._056_103_LastNameOfCurrentTenant)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("056_103_LastNameOfCurrentTenant");
            entity.Property(e => e._056_110_IsOccupiedByPWD_WhoNeedsTheFeatures)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("056_110_IsOccupiedByPWD_WhoNeedsTheFeatures");
            entity.Property(e => e._056_120_IsLeaseAddendum)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("056_120_IsLeaseAddendum");
            entity.Property(e => e._056_130_BeginningDateMostCurrentAddendum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("056_130_BeginningDateMostCurrentAddendum");
            entity.Property(e => e._056_131_DoesTheLeaseAddendumHaveExpirationDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("056_131_DoesTheLeaseAddendumHaveExpirationDate");
            entity.Property(e => e._056_135_ExpirationDateMostCurrentAddendum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("056_135_ExpirationDateMostCurrentAddendum");
            entity.Property(e => e._056_240_TenantSelectedFrom)
                .HasMaxLength(50)
                .HasColumnName("056_240_TenantSelectedFrom");
            entity.Property(e => e._226_000_NumberOfVacantAccessibleUnits)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("226_000_NumberOfVacantAccessibleUnits");
            entity.Property(e => e._226_100_NumberOfVacantHVUnits)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("226_100_NumberOfVacantHVUnits");
            entity.Property(e => e._226_200_NumberOfVacantAccessibleUnits)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("226_200_NumberOfVacantAccessibleUnits");
            entity.Property(e => e._373_000_Move_InDate)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("373_000_Move-InDate");
            entity.Property(e => e._374_000_TenantSelectedFrom)
                .HasMaxLength(50)
                .HasColumnName("374_000_TenantSelectedFrom");
        });

        modelBuilder.Entity<vwOLAP_QRReasonableAccommodation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRReasonableAccommodation", "AAHR");

            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.Bathrooms).IsUnicode(false);
            entity.Property(e => e.Bedrooms).IsUnicode(false);
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.IsGrievanceField)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsGrievanceProcedureProvided)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsNeedAUUnit)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsOnAUTransferList)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsOnAUWaitList)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsTransferRequest)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.QRReportCreateDate).HasColumnType("datetime");
            entity.Property(e => e.RARequestType).HasMaxLength(50);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestorAddress).HasMaxLength(300);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserType).HasMaxLength(50);
            entity.Property(e => e.YearQR).HasMaxLength(14);
            entity.Property(e => e._047_000_UnitNumberSubjectToReasonableModification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("047_000_UnitNumberSubjectToReasonableModification");
            entity.Property(e => e._047_110_Sub_Category___Install_New_Feature___Unit).HasColumnName("047_110_Sub Category - Install New Feature - Unit");
            entity.Property(e => e._047_120_Sub_Category___Modify_Existing_Feature___Unit).HasColumnName("047_120_Sub Category - Modify Existing Feature - Unit");
            entity.Property(e => e._047_130_Sub_Category___Install_New_Feature___Common_Area).HasColumnName("047_130_Sub Category - Install New Feature - Common Area");
            entity.Property(e => e._047_140_Sub_Category___Modify_Existing_Feature___Common_Area).HasColumnName("047_140_Sub Category - Modify Existing Feature – Common Area");
            entity.Property(e => e._047_150_Sub_Category___Other).HasColumnName("047_150_Sub Category - Other");
            entity.Property(e => e._047_200_Describe_reasonable_modification_request).HasColumnName("047_200_Describe reasonable modification request");
            entity.Property(e => e._047_300_Type_of_reasonable_accommodation)
                .HasMaxLength(50)
                .HasColumnName("047_300_Type of reasonable accommodation");
            entity.Property(e => e._047_301_Sub_Category___Rent).HasColumnName("047_301_Sub Category - Rent");
            entity.Property(e => e._047_302_Sub_Category___Alternate_Tenant_Contacts).HasColumnName("047_302_Sub Category - Alternate Tenant Contacts");
            entity.Property(e => e._047_303_Sub_Category___Document_Submission_Requirements).HasColumnName("047_303_Sub Category - Document Submission Requirements");
            entity.Property(e => e._047_304_Sub_Category___Unit_Transfer).HasColumnName("047_304_Sub Category - Unit Transfer");
            entity.Property(e => e._047_305_Sub_Category___In_Home_Support).HasColumnName("047_305_Sub Category - In-Home Support");
            entity.Property(e => e._047_306_Sub_Category___Accessibility_Requests___Common_Areas).HasColumnName("047_306_Sub Category - Accessibility Requests - Common Areas");
            entity.Property(e => e._047_307_Sub_Category___Tenant_Notices).HasColumnName("047_307_Sub Category - Tenant Notices");
            entity.Property(e => e._047_308_Sub_Category___Accessibility_Requests___Unit).HasColumnName("047_308_Sub Category - Accessibility Requests - Unit");
            entity.Property(e => e._047_309_Sub_Category___Applications_and_Lottery).HasColumnName("047_309_Sub Category - Applications and Lottery");
            entity.Property(e => e._047_310_Sub_Category___Support_Animals).HasColumnName("047_310_Sub Category - Support Animals");
            entity.Property(e => e._047_311_Sub_Category___Other).HasColumnName("047_311_Sub Category - Other");
            entity.Property(e => e._047_400_Describe_reasonable_accomadation_request).HasColumnName("047_400_Describe reasonable accomadation request");
            entity.Property(e => e._1093_000_RequestorFirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("1093_000_RequestorFirstName");
            entity.Property(e => e._1094_000_RequestorMiddleName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("1094_000_RequestorMiddleName");
            entity.Property(e => e._1095_000_RequestorLastName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("1095_000_RequestorLastName");
            entity.Property(e => e._1096_000_TenantsCurrentUnitAddress)
                .HasMaxLength(300)
                .HasColumnName("1096_000_TenantsCurrentUnitAddress");
            entity.Property(e => e._1097_000_TenantsCurrentUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("1097_000_TenantsCurrentUnitNumber");
            entity.Property(e => e._1098_000_IsOnAUTransferList).HasColumnName("1098_000_IsOnAUTransferList");
            entity.Property(e => e._1099_000_ApplicantsCurrentAddress)
                .HasMaxLength(300)
                .HasColumnName("1099_000_ApplicantsCurrentAddress");
            entity.Property(e => e._1100_000_IsOnAUWaitList).HasColumnName("1100_000_IsOnAUWaitList");
            entity.Property(e => e._1104_000_IsAdditionalInfoReq).HasColumnName("1104_000_IsAdditionalInfoReq");
            entity.Property(e => e._1105_000_DateForAdditionalInfo).HasColumnName("1105_000_DateForAdditionalInfo");
            entity.Property(e => e._1106_000_ReasonForAddVerification).HasColumnName("1106_000_ReasonForAddVerification");
            entity.Property(e => e._1107_000_DateForResponse).HasColumnName("1107_000_DateForResponse");
            entity.Property(e => e._1108_000_ReasonForDelay).HasColumnName("1108_000_ReasonForDelay");
            entity.Property(e => e._137_100_DateOfRequestForReasonableAccommodationOrReasonableModification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("137_100_DateOfRequestForReasonableAccommodationOrReasonableModification");
            entity.Property(e => e._270_000_ReasonableAccommodationID)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("270_000_ReasonableAccommodationID");
            entity.Property(e => e._270_000_ReasonableAccommodationRequestThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("270_000_ReasonableAccommodationRequestThisQuarter");
            entity.Property(e => e._271_000_ReasonableAccommodationGrantedAndPartiallyGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("271_000_ReasonableAccommodationGrantedAndPartiallyGrantedOnReport");
            entity.Property(e => e._271_000_ReasonableAccommodationGrantedAndPartiallyGrantedOnReportThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("271_000_ReasonableAccommodationGrantedAndPartiallyGrantedOnReportThisQuarter");
            entity.Property(e => e._271_000_ReasonableAccommodationGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("271_000_ReasonableAccommodationGrantedOnReport");
            entity.Property(e => e._271_000_ReasonableAccommodationGrantedThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("271_000_ReasonableAccommodationGrantedThisQuarter");
            entity.Property(e => e._272_000_ReasonableAccommodationDeniedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("272_000_ReasonableAccommodationDeniedOnReport");
            entity.Property(e => e._272_000_ReasonableAccommodationDeniedThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("272_000_ReasonableAccommodationDeniedThisQuarter");
            entity.Property(e => e._273_000_ReasonableAccommodationPendingOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("273_000_ReasonableAccommodationPendingOnReport");
            entity.Property(e => e._275_000_ReasonableModificationID)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("275_000_ReasonableModificationID");
            entity.Property(e => e._275_000_ReasonableModificationThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("275_000_ReasonableModificationThisQuarter");
            entity.Property(e => e._276_000_ReasonableModificationGrantedAndPartiallyGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("276_000_ReasonableModificationGrantedAndPartiallyGrantedOnReport");
            entity.Property(e => e._276_000_ReasonableModificationGrantedAndPartiallyGrantedOnReportThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("276_000_ReasonableModificationGrantedAndPartiallyGrantedOnReportThisQuarter");
            entity.Property(e => e._276_000_ReasonableModificationGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("276_000_ReasonableModificationGrantedOnReport");
            entity.Property(e => e._276_000_ReasonableModificationGrantedThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("276_000_ReasonableModificationGrantedThisQuarter");
            entity.Property(e => e._277_000_ReasonableModificationDeniedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("277_000_ReasonableModificationDeniedOnReport");
            entity.Property(e => e._277_000_ReasonableModificationDeniedThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("277_000_ReasonableModificationDeniedThisQuarter");
            entity.Property(e => e._278_000_ReasonableModificationPendingOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("278_000_ReasonableModificationPendingOnReport");
            entity.Property(e => e._337_000_ApplicantOrTenant_RALog)
                .HasMaxLength(50)
                .HasColumnName("337_000_ApplicantOrTenant_RALog");
            entity.Property(e => e._338_000_DoTheyNeedAnAccessibleUnit_RALog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("338_000_DoTheyNeedAnAccessibleUnit_RALog");
            entity.Property(e => e._339_000_RequestedUnitSizeBed_RALog)
                .IsUnicode(false)
                .HasColumnName("339_000_RequestedUnitSizeBed_RALog");
            entity.Property(e => e._339_100_RequestedUnitSizeBathroom_RALog)
                .IsUnicode(false)
                .HasColumnName("339_100_RequestedUnitSizeBathroom_RALog");
            entity.Property(e => e._340_000_RA_Or_RM_Request_RALog)
                .HasMaxLength(50)
                .HasColumnName("340_000_RA_Or_RM_Request_RALog");
            entity.Property(e => e._341_000_DeterminationStatusPartiallyGranted_RALog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("341_000_DeterminationStatusPartiallyGranted_RALog");
            entity.Property(e => e._341_100_DateOfWithdrawal).HasColumnName("341_100_DateOfWithdrawal");
            entity.Property(e => e._341_200_ReasonForWithdrawal).HasColumnName("341_200_ReasonForWithdrawal");
            entity.Property(e => e._342_000_DateOfDetermination_RALog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("342_000_DateOfDetermination_RALog");
            entity.Property(e => e._342_100_ExplanationOfDetermination).HasColumnName("342_100_ExplanationOfDetermination");
            entity.Property(e => e._343_000_DateOfAnticipatedImplementation_RALog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("343_000_DateOfAnticipatedImplementation_RALog");
            entity.Property(e => e._343_100_ReasonForDelay).HasColumnName("343_100_ReasonForDelay");
            entity.Property(e => e._344_000_DateOfImplementation_RALog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("344_000_DateOfImplementation_RALog");
            entity.Property(e => e._344_100_AnyAdditionalImplementationInformation).HasColumnName("344_100_AnyAdditionalImplementationInformation");
            entity.Property(e => e._344_200_NotificationDates)
                .HasMaxLength(163)
                .IsUnicode(false)
                .HasColumnName("344_200_NotificationDates");
            entity.Property(e => e._345_000_DateOfGrievance_RALog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("345_000_DateOfGrievance_RALog");
            entity.Property(e => e._346_000_CorrespondingGrievanceNumber_RALog)
                .HasMaxLength(50)
                .HasColumnName("346_000_CorrespondingGrievanceNumber_RALog");
        });

        modelBuilder.Entity<vwOLAP_QRUpcomingUnitVacancy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.QRReportCreateDate).HasColumnType("datetime");
            entity.Property(e => e.YearQR).HasMaxLength(14);
            entity.Property(e => e._1110_000_IsUnitBecomeVacant).HasColumnName("1110_000_IsUnitBecomeVacant");
            entity.Property(e => e._1111_000_UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("1111_000_UnitNum");
            entity.Property(e => e._1111_100_IsQualifiedAUTL).HasColumnName("1111_100_IsQualifiedAUTL");
            entity.Property(e => e._1111_200_CurrentUnitPropSnapShotID_ForQualifiedAUTL).HasColumnName("1111_200_CurrentUnitPropSnapShotID_ForQualifiedAUTL");
            entity.Property(e => e._1111_300_IsQualifiedAUTLIfNo).HasColumnName("1111_300_IsQualifiedAUTLIfNo");
            entity.Property(e => e._1111_400_IsQualifiedAUWL).HasColumnName("1111_400_IsQualifiedAUWL");
            entity.Property(e => e._1111_500_AUWLNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("1111_500_AUWLNo");
            entity.Property(e => e._1111_600_IsQualifiedNonPWDInAU).HasColumnName("1111_600_IsQualifiedNonPWDInAU");
            entity.Property(e => e._1111_700_CurrentUnitNum_ForQualifiedNonPWDInAU).HasColumnName("1111_700_CurrentUnitNum_ForQualifiedNonPWDInAU");
            entity.Property(e => e._1111_800_IsQualifiedNonPWDInAUIfNo).HasColumnName("1111_800_IsQualifiedNonPWDInAUIfNo");
            entity.Property(e => e._1112_000_NoticeDate).HasColumnName("1112_000_NoticeDate");
            entity.Property(e => e._1113_000_ExpectedVacancyDate).HasColumnName("1113_000_ExpectedVacancyDate");
            entity.Property(e => e._1114_000_ActualVacancyDate).HasColumnName("1114_000_ActualVacancyDate");
        });

        modelBuilder.Entity<vwOLAP_QuarterlyReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QuarterlyReport", "AAHR");

            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QRCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.QRReviwedBy).HasColumnType("datetime");
            entity.Property(e => e.QRReviwedOn).HasColumnType("datetime");
            entity.Property(e => e.QRSubmittedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.QRSubmittedOn).HasColumnType("datetime");
            entity.Property(e => e.Quarter).HasMaxLength(2);
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<vwOLAP_QuarterlyReportMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QuarterlyReportMaster", "AAHR");

            entity.Property(e => e.Accepted_Statement_1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 1");
            entity.Property(e => e.Accepted_Statement_10)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 10");
            entity.Property(e => e.Accepted_Statement_11)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 11");
            entity.Property(e => e.Accepted_Statement_12)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 12");
            entity.Property(e => e.Accepted_Statement_13)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 13");
            entity.Property(e => e.Accepted_Statement_14)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 14");
            entity.Property(e => e.Accepted_Statement_15)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 15");
            entity.Property(e => e.Accepted_Statement_16)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 16");
            entity.Property(e => e.Accepted_Statement_2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 2");
            entity.Property(e => e.Accepted_Statement_3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 3");
            entity.Property(e => e.Accepted_Statement_4)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 4");
            entity.Property(e => e.Accepted_Statement_5)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 5");
            entity.Property(e => e.Accepted_Statement_6)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 6");
            entity.Property(e => e.Accepted_Statement_7)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 7");
            entity.Property(e => e.Accepted_Statement_8)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 8");
            entity.Property(e => e.Accepted_Statement_9)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 9");
            entity.Property(e => e.CaseStatus).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FinalReviewDate)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FirstReviewedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstReviewedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstSubmittedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstSubmittedOn).HasColumnType("datetime");
            entity.Property(e => e.LastReviewBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastReviewOn).HasColumnType("datetime");
            entity.Property(e => e.LastSubmittedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastSubmittedOn).HasColumnType("datetime");
            entity.Property(e => e.LegalOwnerName).HasMaxLength(500);
            entity.Property(e => e.MaxYearQR).HasMaxLength(14);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OwnerEmail).HasMaxLength(100);
            entity.Property(e => e.OwnerPhone).HasMaxLength(30);
            entity.Property(e => e.PMEmail).HasMaxLength(100);
            entity.Property(e => e.PMName).HasMaxLength(300);
            entity.Property(e => e.PMPhone).HasMaxLength(30);
            entity.Property(e => e.Property_Address).HasColumnName("Property Address");
            entity.Property(e => e.Property_Name).HasMaxLength(500);
            entity.Property(e => e.QRPropertyName).HasMaxLength(500);
            entity.Property(e => e.Quarter).HasMaxLength(2);
            entity.Property(e => e.QuarterlyReportIDStatus).HasMaxLength(50);
            entity.Property(e => e.ReviewAction)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReviewFromStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReviewToStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReviewedOn).HasColumnType("datetime");
            entity.Property(e => e.SignerName).HasMaxLength(300);
            entity.Property(e => e.SubmitAction)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubmitFromStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubmitToStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubmittedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubmittedOn).HasColumnType("datetime");
            entity.Property(e => e.Title____Regional_Manager_or_Property_Manager_)
                .HasMaxLength(50)
                .HasColumnName("Title : (Regional Manager or Property Manager)");
            entity.Property(e => e.YearQR).HasMaxLength(14);
            entity.Property(e => e._114_000_DatesOfSubsequentAuMarketing)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("114_000_DatesOfSubsequentAuMarketing");
            entity.Property(e => e._135_000_DateOfCompletionReviewQuarterlyReport)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("135_000_DateOfCompletionReviewQuarterlyReport");
            entity.Property(e => e._143_000_DateAcHPReviewGrievancesFiledWithProperty)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("143_000_DateAcHPReviewGrievancesFiledWithProperty");
            entity.Property(e => e._152_000_DateOfSubmissionQuarterlyReport)
                .HasColumnType("datetime")
                .HasColumnName("152_000_DateOfSubmissionQuarterlyReport");
            entity.Property(e => e._154_000_QuarterlyReportQuarter)
                .HasMaxLength(14)
                .HasColumnName("154_000_QuarterlyReportQuarter");
            entity.Property(e => e._155_000_QuarterlyReportStatus)
                .HasMaxLength(50)
                .HasColumnName("155_000_QuarterlyReportStatus");
            entity.Property(e => e._156_000_DatesAcHPReviewofQuarterlyReportCompleted)
                .HasColumnType("datetime")
                .HasColumnName("156_000_DatesAcHPReviewofQuarterlyReportCompleted");
        });

        modelBuilder.Entity<vwOLAP_StructureDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_StructureDetails", "AAHR");

            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateOf1stBuildingPermitForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stCoFOForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stPlanCheckSubmissionForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.Elevator)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FirstPlanCheckSubmissionForConversionToResidential).HasMaxLength(100);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e._074_020_EndDateOfSurvey)
                .HasMaxLength(4000)
                .HasColumnName("074_020_EndDateOfSurvey");
            entity.Property(e => e._074_StartDateOfSurvey)
                .HasMaxLength(4000)
                .HasColumnName("074_StartDateOfSurvey");
            entity.Property(e => e._846_000_EstimatedTotalRemovalCost)
                .HasMaxLength(4000)
                .HasColumnName("846_000_EstimatedTotalRemovalCost");
            entity.Property(e => e._847_000_Region).HasColumnName("847_000_Region");
            entity.Property(e => e._848_000_Facility)
                .HasMaxLength(4000)
                .HasColumnName("848_000_Facility");
            entity.Property(e => e._849_000_AddressFromETA)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("849_000_AddressFromETA");
            entity.Property(e => e._850_000_SurveyStandards)
                .HasMaxLength(4000)
                .HasColumnName("850_000_SurveyStandards");
            entity.Property(e => e._851_000_SitePlanDrawingNumber)
                .HasMaxLength(4000)
                .HasColumnName("851_000_SitePlanDrawingNumber");
        });

        modelBuilder.Entity<vwOLAP_TrainingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_TrainingDetails", "AAHR");

            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e._164_100_TrainingDate)
                .HasColumnType("datetime")
                .HasColumnName("164_100_TrainingDate");
            entity.Property(e => e._164_200_TraineeTitle)
                .HasMaxLength(100)
                .HasColumnName("164_200_TraineeTitle");
            entity.Property(e => e._164_300_TraineeName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_300_TraineeName");
            entity.Property(e => e._164_300_TrainingCourseName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_300_TrainingCourseName");
            entity.Property(e => e._164_400_TrainingType)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("164_400_TrainingType");
            entity.Property(e => e._164_500_DateOfTrainingCertificate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("164_500_DateOfTrainingCertificate");
            entity.Property(e => e._164_600_ExpiryDateOfTrainingCertificates)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("164_600_ExpiryDateOfTrainingCertificates");
            entity.Property(e => e._164_700_TraineeFirstName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_700_TraineeFirstName");
            entity.Property(e => e._164_710_TraineeMiddleName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_710_TraineeMiddleName");
            entity.Property(e => e._164_720_TraineeLastName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_720_TraineeLastName");
            entity.Property(e => e._738_Trn_Trainer_Email)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("738_Trn_Trainer_Email");
            entity.Property(e => e._739_Trn_Trainer_Phone)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("739_Trn_Trainer_Phone");
            entity.Property(e => e._740_Trn_Trainer_Profile)
                .IsUnicode(false)
                .HasColumnName("740_Trn_Trainer_Profile");
            entity.Property(e => e._741_Trn_Trainer_HireDate)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("741_Trn_Trainer_HireDate");
            entity.Property(e => e._742_Trn_Trainer_Comments)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("742_Trn_Trainer_Comments");
            entity.Property(e => e._743_Trn_Course_CourseDetails)
                .IsUnicode(false)
                .HasColumnName("743_Trn_Course_CourseDetails");
            entity.Property(e => e._744_Trn_Course_TargetAudience)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("744_Trn_Course_TargetAudience");
            entity.Property(e => e._745_Trn_Course_Trainers).HasColumnName("745_Trn_Course_Trainers");
            entity.Property(e => e._746_Trn_Course_OnlyAllowEnrollmentForAccountsWithLinkedProperties).HasColumnName("746_Trn_Course_OnlyAllowEnrollmentForAccountsWithLinkedProperties");
            entity.Property(e => e._747_Trn_Session_TrainingLocation)
                .IsUnicode(false)
                .HasColumnName("747_Trn_Session_TrainingLocation");
            entity.Property(e => e._748_Trn_Session_Duration).HasColumnName("748_Trn_Session_Duration");
            entity.Property(e => e._749_Trn_Session_Capacity).HasColumnName("749_Trn_Session_Capacity");
            entity.Property(e => e._750_Trn_Session_IsPrivate).HasColumnName("750_Trn_Session_IsPrivate");
            entity.Property(e => e._751_Trn_Session_InternalStaffCommentOnly)
                .IsUnicode(false)
                .HasColumnName("751_Trn_Session_InternalStaffCommentOnly");
            entity.Property(e => e._752_Trn_Session_TrainersName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("752_Trn_Session_TrainersName");
            entity.Property(e => e._753_Trn_Session_Notes)
                .IsUnicode(false)
                .HasColumnName("753_Trn_Session_Notes");
            entity.Property(e => e._754_Trn_Enroll_EmailId)
                .HasMaxLength(500)
                .HasColumnName("754_Trn_Enroll_EmailId");
            entity.Property(e => e._755_Trn_Group_Email)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("755_Trn_Group_Email");
            entity.Property(e => e._756_Trn_Group_LinkAssociatedPropertyAddress)
                .HasMaxLength(4000)
                .HasColumnName("756_Trn_Group_LinkAssociatedPropertyAddress");
            entity.Property(e => e._767_Trn_Group_LinkOnSiteManagerName)
                .HasMaxLength(401)
                .IsUnicode(false)
                .HasColumnName("767_Trn_Group_LinkOnSiteManagerName");
        });

        modelBuilder.Entity<vwOLAP_UnitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_UnitDetails", "AAHR");

            entity.Property(e => e.AMI)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CountAs)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentTenant)
                .HasMaxLength(302)
                .IsUnicode(false);
            entity.Property(e => e.FixedOrFloating)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyRestrictions).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TotalBathroom).IsUnicode(false);
            entity.Property(e => e.TotalBedroom).IsUnicode(false);
            entity.Property(e => e.UnitAccessibiltyType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UnitFeature)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitFeatureArea)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitNum).HasMaxLength(20);
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Unit_Attribute_Date)
                .HasColumnType("datetime")
                .HasColumnName("Unit Attribute Date");
        });

        modelBuilder.Entity<vwProjectAttributeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectAttributeLogs", "AAHR");

            entity.Property(e => e.AcHPAssociatedAccessorParcelNumberAPN)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AcHPFileNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AssignedRCS)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSAssociatedAssessorParcelNumberAPN)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutFundingId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwProjectLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectLogs", "AAHR");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LutProjSourceCD)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SettlementAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.YearEnd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<vwProjectSiteAttributeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteAttributeLogs", "AAHR");

            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CWLOpenPriorRegistryDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DocSubmitDateForOutreach).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HearingAndVisionUnitsPercentageRequired).IsUnicode(false);
            entity.Property(e => e.InitialOccupiedDate).HasColumnType("datetime");
            entity.Property(e => e.LUTExternalGroupId).IsUnicode(false);
            entity.Property(e => e.LotteryDrawOn).HasColumnType("datetime");
            entity.Property(e => e.LutNacRecomadationID)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PropertyName).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SeniorDesignated).IsUnicode(false);
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);
        });

        modelBuilder.Entity<vwProjectSiteLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteLogs", "AAHR");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<vwProjectSiteUnitActualCNT>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitActualCNT", "AAHR");
        });

        modelBuilder.Entity<vwProjectSiteUnitActualCNT1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitActualCNT", "Listing");
        });

        modelBuilder.Entity<vwProjectSiteUnitSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitSummary", "AAHR");

            entity.Property(e => e.LowestAMI).HasMaxLength(10);
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e._0Bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<vwProjectSiteUnitSummary1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitSummary", "Listing");

            entity.Property(e => e.LowestAMI).HasMaxLength(10);
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4Bedroom).HasColumnName("4Bedroom");
            entity.Property(e => e._5orMoreBedroom).HasColumnName("5orMoreBedroom");
        });

        modelBuilder.Entity<vwProjectSiteUnitSummaryAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitSummaryAll", "AAHR");

            entity.Property(e => e.LowestAMI).HasMaxLength(10);
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e._0Bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<vwPropertySearch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPropertySearch", "AAHR");

            entity.Property(e => e.APN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HVRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.IsListed)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LAT).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LowestAMI).HasMaxLength(10);
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PMAddress).HasMaxLength(361);
            entity.Property(e => e.PMCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PMCompanyName).HasMaxLength(150);
            entity.Property(e => e.PMContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.PMEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PMPhone).HasMaxLength(4000);
            entity.Property(e => e.PMState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PMStreet).HasMaxLength(161);
            entity.Property(e => e.PMUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PMZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCESType).HasMaxLength(500);
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.RentalSubsidy)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e._0Bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1Bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2Bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3Bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
            entity.Property(e => e.lon).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwSRSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSRSummary", "IMS");

            entity.Property(e => e.APN).HasMaxLength(40);
            entity.Property(e => e.AcHPFileProjectNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Assignee)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CaseNo).HasMaxLength(20);
            entity.Property(e => e.CaseType).HasMaxLength(50);
            entity.Property(e => e.CouncilDistrict).HasMaxLength(10);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HIMSNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryAPN)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjSource)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ProjectFund)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TypeofProject)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwStructureAttributeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStructureAttributeLogs", "AAHR");

            entity.Property(e => e.AcHPAssociatedAPN)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.BuildingDescription).IsUnicode(false);
            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DBSRetrofitBuildingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DateOf1stBuildingPermitForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stCoFOForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stPlanCheckSubmissionForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stTCOForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOfCurrentBuildingPermitFinaled).HasColumnType("datetime");
            entity.Property(e => e.DateOfFCO).HasColumnType("datetime");
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FHA_11ADesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstPlanCheckSubmissionForConversionToResidential).HasMaxLength(100);
            entity.Property(e => e.HIMSAPN)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.HistoricBuildingCofODate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitIssueDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitNumber).IsUnicode(false);
            entity.Property(e => e.HistoricBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.LADBSjson).IsUnicode(false);
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModificationsGrantedByLADBSUnitsBuildings).IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OtherStructureType).HasMaxLength(100);
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwStructureLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStructureLogs", "AAHR");

            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefID)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwTrainingCertificate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTrainingCertificates", "TRN");

            entity.Property(e => e.AudienceCategory)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CaseStatus).HasMaxLength(50);
            entity.Property(e => e.CourseName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CourseTypeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.FirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<vwUnitAttributeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUnitAttributeLogs", "AAHR");

            entity.Property(e => e.AUWaitListPosition).HasMaxLength(9);
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<vwUnitLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUnitLogs", "AAHR");

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceTrackingID).HasMaxLength(100);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UnitNum).HasMaxLength(20);
        });

        modelBuilder.Entity<vwWaitListCloseDateNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWaitListCloseDateNotification", "Listing");
        });

        modelBuilder.Entity<vw_PCMSGroupMember>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PCMSGroupMember");

            entity.Property(e => e.Member_Name).HasColumnName("Member Name");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SiteAddress).HasMaxLength(463);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.contsource).HasMaxLength(50);
            entity.Property(e => e.source).HasMaxLength(50);
        });

        modelBuilder.Entity<vw_propertyContactdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_propertyContactdetails", "AAHPCC");

            entity.Property(e => e.ContactCompany).HasMaxLength(150);
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
        });
        modelBuilder.HasSequence<int>("orderseq")
            .StartsAt(0L)
            .IncrementsBy(100);
        modelBuilder.HasSequence("SeqAcHPCert", "AAHPCC");
        modelBuilder.HasSequence("SeqAcHPCertAdopt", "AAHPPC");
        modelBuilder.HasSequence("SeqAcHPCourse", "TRN").StartsAt(82L);

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
