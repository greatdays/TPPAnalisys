using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using DeveloperPortal.DataAccess.Common;
using DeveloperPortal.DataAccess.Entity.Models.Generated;
using DeveloperPortal.DataAccess.Repository.Interface;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
namespace DeveloperPortal.DataAccess.Entity.Data;

public partial class AAHREntities : DbContext
{
    private readonly IConfiguration _configuration;
    public AAHREntities()
    {
    }

    public AAHREntities(DbContextOptions<AAHREntities> options, IConfiguration configuration)
      : base(options)
    {
        _configuration = configuration;
    }

    public virtual DbSet<AcHpapn> AcHpapns { get; set; }

    public virtual DbSet<AcHppropertyManagementPlan> AcHppropertyManagementPlans { get; set; }

    public virtual DbSet<AccessLog> AccessLogs { get; set; }

    public virtual DbSet<AccountDeactivation> AccountDeactivations { get; set; }

    public virtual DbSet<AccountDeactivationLog> AccountDeactivationLogs { get; set; }

    public virtual DbSet<AdvanceSearchQuery> AdvanceSearchQueries { get; set; }

    public virtual DbSet<AffordableOnlyOwner> AffordableOnlyOwners { get; set; }

    public virtual DbSet<AkasiteAddressSnap> AkasiteAddressSnaps { get; set; }

    public virtual DbSet<Allapn> Allapns { get; set; }

    public virtual DbSet<Apn> Apns { get; set; }

    public virtual DbSet<Apnpin> Apnpins { get; set; }

    public virtual DbSet<AppConfig> AppConfigs { get; set; }

    public virtual DbSet<ApplicationMaster> ApplicationMasters { get; set; }

    public virtual DbSet<AssnActionSchemaTemplate> AssnActionSchemaTemplates { get; set; }

    public virtual DbSet<AssnApplicationDeclineReason> AssnApplicationDeclineReasons { get; set; }

    public virtual DbSet<AssnBackgroundCheck> AssnBackgroundChecks { get; set; }

    public virtual DbSet<AssnBgcnonCoveredProperty> AssnBgcnonCoveredProperties { get; set; }

    public virtual DbSet<AssnBidScopeOfWork> AssnBidScopeOfWorks { get; set; }

    public virtual DbSet<AssnCaseProjectSiteFolder> AssnCaseProjectSiteFolders { get; set; }

    public virtual DbSet<AssnComment> AssnComments { get; set; }

    public virtual DbSet<AssnContactContact> AssnContactContacts { get; set; }

    public virtual DbSet<AssnCoursePrerequisiteCourse> AssnCoursePrerequisiteCourses { get; set; }

    public virtual DbSet<AssnCourseTrainer> AssnCourseTrainers { get; set; }

    public virtual DbSet<AssnDocument> AssnDocuments { get; set; }

    public virtual DbSet<AssnDocumentSubCategoryStatus> AssnDocumentSubCategoryStatuses { get; set; }

    public virtual DbSet<AssnFairHousingCertifyTerm> AssnFairHousingCertifyTerms { get; set; }

    public virtual DbSet<AssnFhacfiledDate> AssnFhacfiledDates { get; set; }

    public virtual DbSet<AssnFolder> AssnFolders { get; set; }

    public virtual DbSet<AssnFolderDocument> AssnFolderDocuments { get; set; }

    public virtual DbSet<AssnGrievanceMilestonesDate> AssnGrievanceMilestonesDates { get; set; }

    public virtual DbSet<AssnGrievanceTypeMultiSelectOption> AssnGrievanceTypeMultiSelectOptions { get; set; }

    public virtual DbSet<AssnGrievanceTypeQuestion> AssnGrievanceTypeQuestions { get; set; }

    public virtual DbSet<AssnGrievanceTypeSubQuestion> AssnGrievanceTypeSubQuestions { get; set; }

    public virtual DbSet<AssnHrmapplicationPropQuestion> AssnHrmapplicationPropQuestions { get; set; }

    public virtual DbSet<AssnInspectionViolation> AssnInspectionViolations { get; set; }

    public virtual DbSet<AssnLocationCategoryLocation> AssnLocationCategoryLocations { get; set; }

    public virtual DbSet<AssnLutDistanceTypeSnap> AssnLutDistanceTypeSnaps { get; set; }

    public virtual DbSet<AssnOrganizationContact> AssnOrganizationContacts { get; set; }

    public virtual DbSet<AssnOutreachTargetAudience> AssnOutreachTargetAudiences { get; set; }

    public virtual DbSet<AssnPmpagency> AssnPmpagencies { get; set; }

    public virtual DbSet<AssnPmpagencySnap> AssnPmpagencySnaps { get; set; }

    public virtual DbSet<AssnPmplotteryApplnAvailMethod> AssnPmplotteryApplnAvailMethods { get; set; }

    public virtual DbSet<AssnPmplotteryApplnAvailMethodSnap> AssnPmplotteryApplnAvailMethodSnaps { get; set; }

    public virtual DbSet<AssnPmplotterySubmitMethod> AssnPmplotterySubmitMethods { get; set; }

    public virtual DbSet<AssnPmplotterySubmitMethodSnap> AssnPmplotterySubmitMethodSnaps { get; set; }

    public virtual DbSet<AssnPmpoutreachTargetAudienceSnap> AssnPmpoutreachTargetAudienceSnaps { get; set; }

    public virtual DbSet<AssnPmpprojSiteAccessibleUnitFeatureSnap> AssnPmpprojSiteAccessibleUnitFeatureSnaps { get; set; }

    public virtual DbSet<AssnPmpprojTypeSiteAttr> AssnPmpprojTypeSiteAttrs { get; set; }

    public virtual DbSet<AssnPmpprojTypeSiteAttrSnap> AssnPmpprojTypeSiteAttrSnaps { get; set; }

    public virtual DbSet<AssnPmpscatteredSite> AssnPmpscatteredSites { get; set; }

    public virtual DbSet<AssnPmpscatteredSiteSnap> AssnPmpscatteredSiteSnaps { get; set; }

    public virtual DbSet<AssnPmpsitesOutreach> AssnPmpsitesOutreaches { get; set; }

    public virtual DbSet<AssnPmpsitesOutreachSnap> AssnPmpsitesOutreachSnaps { get; set; }

    public virtual DbSet<AssnPmpunitFeatureSnap> AssnPmpunitFeatureSnaps { get; set; }

    public virtual DbSet<AssnProblemCase> AssnProblemCases { get; set; }

    public virtual DbSet<AssnProjSiteAccessibleUnitFeature> AssnProjSiteAccessibleUnitFeatures { get; set; }

    public virtual DbSet<AssnProjectSiteApn> AssnProjectSiteApns { get; set; }

    public virtual DbSet<AssnProjectSiteFeatureSnap> AssnProjectSiteFeatureSnaps { get; set; }

    public virtual DbSet<AssnProjectSiteQuestion> AssnProjectSiteQuestions { get; set; }

    public virtual DbSet<AssnProjectSiteReference> AssnProjectSiteReferences { get; set; }

    public virtual DbSet<AssnPropContact> AssnPropContacts { get; set; }

    public virtual DbSet<AssnPropContactLog> AssnPropContactLogs { get; set; }

    public virtual DbSet<AssnPropUser> AssnPropUsers { get; set; }

    public virtual DbSet<AssnPropertyAccountContactSnapShot> AssnPropertyAccountContactSnapShots { get; set; }

    public virtual DbSet<AssnPropertyAccountContactSnapShot1> AssnPropertyAccountContactSnapShots1 { get; set; }

    public virtual DbSet<AssnPropertyDistance> AssnPropertyDistances { get; set; }

    public virtual DbSet<AssnPropertyDistrict> AssnPropertyDistricts { get; set; }

    public virtual DbSet<AssnPropertyFeature> AssnPropertyFeatures { get; set; }

    public virtual DbSet<AssnPropertyUser> AssnPropertyUsers { get; set; }

    public virtual DbSet<AssnPropertyUser1> AssnPropertyUsers1 { get; set; }

    public virtual DbSet<AssnQrfairHousingCertifyTerm> AssnQrfairHousingCertifyTerms { get; set; }

    public virtual DbSet<AssnQrfhacfiledDate> AssnQrfhacfiledDates { get; set; }

    public virtual DbSet<AssnQrrentalSubsidy> AssnQrrentalSubsidies { get; set; }

    public virtual DbSet<AssnRentalSubsidy> AssnRentalSubsidies { get; set; }

    public virtual DbSet<AssnRentalSubsidySnap> AssnRentalSubsidySnaps { get; set; }

    public virtual DbSet<AssnScopeViolation> AssnScopeViolations { get; set; }

    public virtual DbSet<AssnServiceRequestPropSnapshotTemp> AssnServiceRequestPropSnapshotTemps { get; set; }

    public virtual DbSet<AssnServiceRequestPropSnapshotTempAfter> AssnServiceRequestPropSnapshotTempAfters { get; set; }

    public virtual DbSet<AssnServiceRequestTypeViolation> AssnServiceRequestTypeViolations { get; set; }

    public virtual DbSet<AssnSrcapchecklistItemStatus> AssnSrcapchecklistItemStatuses { get; set; }

    public virtual DbSet<AssnSrreviewReportItemStatus> AssnSrreviewReportItemStatuses { get; set; }

    public virtual DbSet<AssnTeamManagementUser> AssnTeamManagementUsers { get; set; }

    public virtual DbSet<AssnTeamManagementUser1> AssnTeamManagementUsers1 { get; set; }

    public virtual DbSet<AssnTrainingRegistryProjectSite> AssnTrainingRegistryProjectSites { get; set; }

    public virtual DbSet<AssnUnitFeature> AssnUnitFeatures { get; set; }

    public virtual DbSet<AssnUnitFeatureSnap> AssnUnitFeatureSnaps { get; set; }

    public virtual DbSet<AssnUserContractor> AssnUserContractors { get; set; }

    public virtual DbSet<AssnUserFavouriteCase> AssnUserFavouriteCases { get; set; }

    public virtual DbSet<AssnUserPropertyFavouriteCase> AssnUserPropertyFavouriteCases { get; set; }

    public virtual DbSet<AssnViolationProgram> AssnViolationPrograms { get; set; }

    public virtual DbSet<AssnWalkInApplicationDeclineReason> AssnWalkInApplicationDeclineReasons { get; set; }

    public virtual DbSet<AuditVisitDetail> AuditVisitDetails { get; set; }

    public virtual DbSet<AutransferWaitList> AutransferWaitLists { get; set; }

    public virtual DbSet<AuwaitList> AuwaitLists { get; set; }

    public virtual DbSet<AwardBidPackage> AwardBidPackages { get; set; }

    public virtual DbSet<BackgroundCheck> BackgroundChecks { get; set; }

    public virtual DbSet<BackgroundCheckReport> BackgroundCheckReports { get; set; }

    public virtual DbSet<BackupCase> BackupCases { get; set; }

    public virtual DbSet<BackupCaseLog> BackupCaseLogs { get; set; }

    public virtual DbSet<BatchJob> BatchJobs { get; set; }

    public virtual DbSet<BatchJobDetail> BatchJobDetails { get; set; }

    public virtual DbSet<BatchJobDetailLog> BatchJobDetailLogs { get; set; }

    public virtual DbSet<BidPackage> BidPackages { get; set; }

    public virtual DbSet<CannedNote> CannedNotes { get; set; }

    public virtual DbSet<Capdetail> Capdetails { get; set; }

    public virtual DbSet<Capextension> Capextensions { get; set; }

    public virtual DbSet<CapitemDetail> CapitemDetails { get; set; }

    public virtual DbSet<Case> Cases { get; set; }

    public virtual DbSet<CaseComment> CaseComments { get; set; }

    public virtual DbSet<CaseLog> CaseLogs { get; set; }

    public virtual DbSet<CaseType> CaseTypes { get; set; }

    public virtual DbSet<CaseWatcher> CaseWatchers { get; set; }

    public virtual DbSet<Ccdetail> Ccdetails { get; set; }

    public virtual DbSet<Ccrisdiagram> Ccrisdiagrams { get; set; }

    public virtual DbSet<Certificate> Certificates { get; set; }

    public virtual DbSet<CfgDocument> CfgDocuments { get; set; }

    public virtual DbSet<CfgNextRun> CfgNextRuns { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<ContactIdentifier> ContactIdentifiers { get; set; }

    public virtual DbSet<ContactIdentifierLog> ContactIdentifierLogs { get; set; }

    public virtual DbSet<ContactNameChangeLog> ContactNameChangeLogs { get; set; }

    public virtual DbSet<ControlMaster> ControlMasters { get; set; }

    public virtual DbSet<ControlViewMaster> ControlViewMasters { get; set; }

    public virtual DbSet<CorrectionNote> CorrectionNotes { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CustomDisplayConfig> CustomDisplayConfigs { get; set; }

    public virtual DbSet<DocTemplate> DocTemplates { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentEntity> DocumentEntities { get; set; }

    public virtual DbSet<DocumentTemplate> DocumentTemplates { get; set; }

    public virtual DbSet<DocumentsConfig> DocumentsConfigs { get; set; }

    public virtual DbSet<DrawRequest> DrawRequests { get; set; }

    public virtual DbSet<EffectiveCommunication> EffectiveCommunications { get; set; }

    public virtual DbSet<EmailLog> EmailLogs { get; set; }

    public virtual DbSet<EmailNotification> EmailNotifications { get; set; }

    public virtual DbSet<EmailSyncLog> EmailSyncLogs { get; set; }

    public virtual DbSet<EnforcementMilestone> EnforcementMilestones { get; set; }

    public virtual DbSet<EnforcementOrderReviewDetail> EnforcementOrderReviewDetails { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventAssignee> EventAssignees { get; set; }

    public virtual DbSet<EventAssigneeHistory> EventAssigneeHistories { get; set; }

    public virtual DbSet<EventAttendee> EventAttendees { get; set; }

    public virtual DbSet<EventConfiguration> EventConfigurations { get; set; }

    public virtual DbSet<EventHistory> EventHistories { get; set; }

    public virtual DbSet<EventNote> EventNotes { get; set; }

    public virtual DbSet<EventReminder> EventReminders { get; set; }

    public virtual DbSet<ExistingRetrofitImportantDateMapping> ExistingRetrofitImportantDateMappings { get; set; }

    public virtual DbSet<Extension> Extensions { get; set; }

    public virtual DbSet<FairHousing> FairHousings { get; set; }

    public virtual DbSet<FhpropertyAssociatedAccount> FhpropertyAssociatedAccounts { get; set; }

    public virtual DbSet<Field> Fields { get; set; }

    public virtual DbSet<FloorPlanBathroomType> FloorPlanBathroomTypes { get; set; }

    public virtual DbSet<FloorPlanType> FloorPlanTypes { get; set; }

    public virtual DbSet<Folder> Folders { get; set; }

    public virtual DbSet<Form> Forms { get; set; }

    public virtual DbSet<FundingSource> FundingSources { get; set; }

    public virtual DbSet<Grievance> Grievances { get; set; }

    public virtual DbSet<GrievanceAppeal> GrievanceAppeals { get; set; }

    public virtual DbSet<GrievanceLog> GrievanceLogs { get; set; }

    public virtual DbSet<GrievanceLog1> GrievanceLogs1 { get; set; }

    public virtual DbSet<GrievanceType> GrievanceTypes { get; set; }

    public virtual DbSet<HotlineCount> HotlineCounts { get; set; }

    public virtual DbSet<Hrmapplication> Hrmapplications { get; set; }

    public virtual DbSet<HrmapplicationAdditionalQuestion> HrmapplicationAdditionalQuestions { get; set; }

    public virtual DbSet<HrmapplicationLog> HrmapplicationLogs { get; set; }

    public virtual DbSet<ImpersonatedUserActivityDetail> ImpersonatedUserActivityDetails { get; set; }

    public virtual DbSet<ImpersonatedUserLoginDetail> ImpersonatedUserLoginDetails { get; set; }

    public virtual DbSet<ImportProject> ImportProjects { get; set; }

    public virtual DbSet<ImportProject1> ImportProjects1 { get; set; }

    public virtual DbSet<ImportantDate> ImportantDates { get; set; }

    public virtual DbSet<Inspection> Inspections { get; set; }

    public virtual DbSet<InspectionDetail> InspectionDetails { get; set; }

    public virtual DbSet<InspectionHistory> InspectionHistories { get; set; }

    public virtual DbSet<InspectionNotification> InspectionNotifications { get; set; }

    public virtual DbSet<InspectionScheduled> InspectionScheduleds { get; set; }

    public virtual DbSet<JsonConfigMaster> JsonConfigMasters { get; set; }

    public virtual DbSet<LacountyServicePlanningArea> LacountyServicePlanningAreas { get; set; }

    public virtual DbSet<LaserviceArea2012> LaserviceArea2012s { get; set; }

    public virtual DbSet<Level> Levels { get; set; }

    public virtual DbSet<LinksDisplayConfig> LinksDisplayConfigs { get; set; }

    public virtual DbSet<LinksImage> LinksImages { get; set; }

    public virtual DbSet<LinksLinkDetail> LinksLinkDetails { get; set; }

    public virtual DbSet<LinksLog> LinksLogs { get; set; }

    public virtual DbSet<LinksTracking> LinksTrackings { get; set; }

    public virtual DbSet<Listing> Listings { get; set; }

    public virtual DbSet<ListingSnap> ListingSnaps { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<LookupMaster> LookupMasters { get; set; }

    public virtual DbSet<Lupbldg> Lupbldgs { get; set; }

    public virtual DbSet<LutAccessibilityComplianceStatus> LutAccessibilityComplianceStatuses { get; set; }

    public virtual DbSet<LutAccessibleUnitFeature> LutAccessibleUnitFeatures { get; set; }

    public virtual DbSet<LutAccountTypeCategory> LutAccountTypeCategories { get; set; }

    public virtual DbSet<LutAffirmativeMarketingOutreach> LutAffirmativeMarketingOutreaches { get; set; }

    public virtual DbSet<LutAhupscore> LutAhupscores { get; set; }

    public virtual DbSet<LutAltContactType> LutAltContactTypes { get; set; }

    public virtual DbSet<LutAmi> LutAmis { get; set; }

    public virtual DbSet<LutApplicableAccessibilityStandard> LutApplicableAccessibilityStandards { get; set; }

    public virtual DbSet<LutApplicationDeclineReason> LutApplicationDeclineReasons { get; set; }

    public virtual DbSet<LutApplicationType> LutApplicationTypes { get; set; }

    public virtual DbSet<LutAssociatedRole> LutAssociatedRoles { get; set; }

    public virtual DbSet<LutBatchStatus> LutBatchStatuses { get; set; }

    public virtual DbSet<LutBatchType> LutBatchTypes { get; set; }

    public virtual DbSet<LutBathroomType> LutBathroomTypes { get; set; }

    public virtual DbSet<LutBathroomTypeOption> LutBathroomTypeOptions { get; set; }

    public virtual DbSet<LutBuildingType> LutBuildingTypes { get; set; }

    public virtual DbSet<LutCallType> LutCallTypes { get; set; }

    public virtual DbSet<LutCapchecklistItem> LutCapchecklistItems { get; set; }

    public virtual DbSet<LutCapchecklistSubItem> LutCapchecklistSubItems { get; set; }

    public virtual DbSet<LutCapcloseReason> LutCapcloseReasons { get; set; }

    public virtual DbSet<LutCaseReferralType> LutCaseReferralTypes { get; set; }

    public virtual DbSet<LutCertificateType> LutCertificateTypes { get; set; }

    public virtual DbSet<LutCestype> LutCestypes { get; set; }

    public virtual DbSet<LutChangeRole> LutChangeRoles { get; set; }

    public virtual DbSet<LutCloseReason> LutCloseReasons { get; set; }

    public virtual DbSet<LutComplianceStatus> LutComplianceStatuses { get; set; }

    public virtual DbSet<LutConstructionType> LutConstructionTypes { get; set; }

    public virtual DbSet<LutContactType> LutContactTypes { get; set; }

    public virtual DbSet<LutContractorType> LutContractorTypes { get; set; }

    public virtual DbSet<LutCourseType> LutCourseTypes { get; set; }

    public virtual DbSet<LutDeniedConsentUserType> LutDeniedConsentUserTypes { get; set; }

    public virtual DbSet<LutDepartment> LutDepartments { get; set; }

    public virtual DbSet<LutDeterminationStatus> LutDeterminationStatuses { get; set; }

    public virtual DbSet<LutDevelopmentCategory> LutDevelopmentCategories { get; set; }

    public virtual DbSet<LutDistance> LutDistances { get; set; }

    public virtual DbSet<LutDistanceType> LutDistanceTypes { get; set; }

    public virtual DbSet<LutDocumentAttribute> LutDocumentAttributes { get; set; }

    public virtual DbSet<LutDocumentCategory> LutDocumentCategories { get; set; }

    public virtual DbSet<LutDocumentTag> LutDocumentTags { get; set; }

    public virtual DbSet<LutEapfeature> LutEapfeatures { get; set; }

    public virtual DbSet<LutEcrequestType> LutEcrequestTypes { get; set; }

    public virtual DbSet<LutEctype> LutEctypes { get; set; }

    public virtual DbSet<LutEventReminderType> LutEventReminderTypes { get; set; }

    public virtual DbSet<LutExternalGroup> LutExternalGroups { get; set; }

    public virtual DbSet<LutFeature> LutFeatures { get; set; }

    public virtual DbSet<LutFhacfiledSource> LutFhacfiledSources { get; set; }

    public virtual DbSet<LutFhastandard> LutFhastandards { get; set; }

    public virtual DbSet<LutFhatype> LutFhatypes { get; set; }

    public virtual DbSet<LutFixedFloatingUnit> LutFixedFloatingUnits { get; set; }

    public virtual DbSet<LutFollowUpType> LutFollowUpTypes { get; set; }

    public virtual DbSet<LutGmcheckList> LutGmcheckLists { get; set; }

    public virtual DbSet<LutGrievanceDetermination> LutGrievanceDeterminations { get; set; }

    public virtual DbSet<LutGrievanceDeterminationStatus> LutGrievanceDeterminationStatuses { get; set; }

    public virtual DbSet<LutGrievanceDeterminationTitle> LutGrievanceDeterminationTitles { get; set; }

    public virtual DbSet<LutGrievanceLogType> LutGrievanceLogTypes { get; set; }

    public virtual DbSet<LutGrievanceMilestone> LutGrievanceMilestones { get; set; }

    public virtual DbSet<LutGrievanceQuestion> LutGrievanceQuestions { get; set; }

    public virtual DbSet<LutGrievanceReferralAgency> LutGrievanceReferralAgencies { get; set; }

    public virtual DbSet<LutGrievanceSource> LutGrievanceSources { get; set; }

    public virtual DbSet<LutGrievanceStatus> LutGrievanceStatuses { get; set; }

    public virtual DbSet<LutGrievanceSubQuestion> LutGrievanceSubQuestions { get; set; }

    public virtual DbSet<LutGrievanceSubmitType> LutGrievanceSubmitTypes { get; set; }

    public virtual DbSet<LutGrievanceType> LutGrievanceTypes { get; set; }

    public virtual DbSet<LutGrievantType> LutGrievantTypes { get; set; }

    public virtual DbSet<LutHousingType> LutHousingTypes { get; set; }

    public virtual DbSet<LutHudfairHousingActDesignManual> LutHudfairHousingActDesignManuals { get; set; }

    public virtual DbSet<LutImportantDate> LutImportantDates { get; set; }

    public virtual DbSet<LutInspectionStatus> LutInspectionStatuses { get; set; }

    public virtual DbSet<LutInspectionType> LutInspectionTypes { get; set; }

    public virtual DbSet<LutLanguage> LutLanguages { get; set; }

    public virtual DbSet<LutLanguageLine> LutLanguageLines { get; set; }

    public virtual DbSet<LutLanguageTranslation> LutLanguageTranslations { get; set; }

    public virtual DbSet<LutLcmdetermination> LutLcmdeterminations { get; set; }

    public virtual DbSet<LutLeaseAddendumNotExecuteReason> LutLeaseAddendumNotExecuteReasons { get; set; }

    public virtual DbSet<LutLegalEntityType> LutLegalEntityTypes { get; set; }

    public virtual DbSet<LutListingType> LutListingTypes { get; set; }

    public virtual DbSet<LutLocationCategory> LutLocationCategories { get; set; }

    public virtual DbSet<LutLocationType> LutLocationTypes { get; set; }

    public virtual DbSet<LutLotteryApplnAvailMethod> LutLotteryApplnAvailMethods { get; set; }

    public virtual DbSet<LutLotterySubmitMethod> LutLotterySubmitMethods { get; set; }

    public virtual DbSet<LutMailType> LutMailTypes { get; set; }

    public virtual DbSet<LutMileageEntryType> LutMileageEntryTypes { get; set; }

    public virtual DbSet<LutMultiSelectOption> LutMultiSelectOptions { get; set; }

    public virtual DbSet<LutMultiSelectOptionsGroup> LutMultiSelectOptionsGroups { get; set; }

    public virtual DbSet<LutNacrecommendation> LutNacrecommendations { get; set; }

    public virtual DbSet<LutNeighborhood> LutNeighborhoods { get; set; }

    public virtual DbSet<LutNeighborhoodCouncil> LutNeighborhoodCouncils { get; set; }

    public virtual DbSet<LutNoticeType> LutNoticeTypes { get; set; }

    public virtual DbSet<LutOccupancyReason> LutOccupancyReasons { get; set; }

    public virtual DbSet<LutOccupancyStatus> LutOccupancyStatuses { get; set; }

    public virtual DbSet<LutOutOfScopeType> LutOutOfScopeTypes { get; set; }

    public virtual DbSet<LutOutcome> LutOutcomes { get; set; }

    public virtual DbSet<LutOutreachType> LutOutreachTypes { get; set; }

    public virtual DbSet<LutParkingType> LutParkingTypes { get; set; }

    public virtual DbSet<LutPhoneType> LutPhoneTypes { get; set; }

    public virtual DbSet<LutPhoneType1> LutPhoneTypes1 { get; set; }

    public virtual DbSet<LutPmpprojType> LutPmpprojTypes { get; set; }

    public virtual DbSet<LutPolicyReviewReportLanguage> LutPolicyReviewReportLanguages { get; set; }

    public virtual DbSet<LutPreDir> LutPreDirs { get; set; }

    public virtual DbSet<LutProgram> LutPrograms { get; set; }

    public virtual DbSet<LutProgramCycle> LutProgramCycles { get; set; }

    public virtual DbSet<LutProjSource> LutProjSources { get; set; }

    public virtual DbSet<LutProjectFund> LutProjectFunds { get; set; }

    public virtual DbSet<LutProjectSiteQuestion> LutProjectSiteQuestions { get; set; }

    public virtual DbSet<LutProjectSiteStatus> LutProjectSiteStatuses { get; set; }

    public virtual DbSet<LutProjectSiteStatusDisplayName> LutProjectSiteStatusDisplayNames { get; set; }

    public virtual DbSet<LutPropAttribute> LutPropAttributes { get; set; }

    public virtual DbSet<LutQrcertifyTerm> LutQrcertifyTerms { get; set; }

    public virtual DbSet<LutRacategory> LutRacategories { get; set; }

    public virtual DbSet<LutRarequestType> LutRarequestTypes { get; set; }

    public virtual DbSet<LutRasubCategory> LutRasubCategories { get; set; }

    public virtual DbSet<LutReasonDeterminationNotProvidedSooner> LutReasonDeterminationNotProvidedSooners { get; set; }

    public virtual DbSet<LutReasonTenantNotTransferredSooner> LutReasonTenantNotTransferredSooners { get; set; }

    public virtual DbSet<LutReferenceType> LutReferenceTypes { get; set; }

    public virtual DbSet<LutRelatedEntity> LutRelatedEntities { get; set; }

    public virtual DbSet<LutRenderType> LutRenderTypes { get; set; }

    public virtual DbSet<LutRentalSubsidy> LutRentalSubsidies { get; set; }

    public virtual DbSet<LutReviewReportItem> LutReviewReportItems { get; set; }

    public virtual DbSet<LutReviewReportSubItem> LutReviewReportSubItems { get; set; }

    public virtual DbSet<LutScopeItem> LutScopeItems { get; set; }

    public virtual DbSet<LutServiceRequestType> LutServiceRequestTypes { get; set; }

    public virtual DbSet<LutSignatureTitle> LutSignatureTitles { get; set; }

    public virtual DbSet<LutSiteSurveyGroup> LutSiteSurveyGroups { get; set; }

    public virtual DbSet<LutState> LutStates { get; set; }

    public virtual DbSet<LutState1> LutStates1 { get; set; }

    public virtual DbSet<LutStopWorkOrderReasonType> LutStopWorkOrderReasonTypes { get; set; }

    public virtual DbSet<LutStreetPrefix> LutStreetPrefixes { get; set; }

    public virtual DbSet<LutStreetPrefix1> LutStreetPrefixes1 { get; set; }

    public virtual DbSet<LutStreetSuffix> LutStreetSuffixes { get; set; }

    public virtual DbSet<LutStreetSuffix1> LutStreetSuffixes1 { get; set; }

    public virtual DbSet<LutStreetType> LutStreetTypes { get; set; }

    public virtual DbSet<LutStructureType> LutStructureTypes { get; set; }

    public virtual DbSet<LutStructureType1> LutStructureTypes1 { get; set; }

    public virtual DbSet<LutTargetAudience> LutTargetAudiences { get; set; }

    public virtual DbSet<LutTemplate> LutTemplates { get; set; }

    public virtual DbSet<LutTemplate1> LutTemplates1 { get; set; }

    public virtual DbSet<LutTenantSelectedFrom> LutTenantSelectedFroms { get; set; }

    public virtual DbSet<LutTotalBathroom> LutTotalBathrooms { get; set; }

    public virtual DbSet<LutTotalBedroom> LutTotalBedrooms { get; set; }

    public virtual DbSet<LutTrainingSessionStatus> LutTrainingSessionStatuses { get; set; }

    public virtual DbSet<LutTransferWaitListReason> LutTransferWaitListReasons { get; set; }

    public virtual DbSet<LutTypeofProject> LutTypeofProjects { get; set; }

    public virtual DbSet<LutUnitAccessibiltyType> LutUnitAccessibiltyTypes { get; set; }

    public virtual DbSet<LutUnitType> LutUnitTypes { get; set; }

    public virtual DbSet<LutUpcomingUnitVacancy> LutUpcomingUnitVacancies { get; set; }

    public virtual DbSet<LutUserType> LutUserTypes { get; set; }

    public virtual DbSet<LutViolation> LutViolations { get; set; }

    public virtual DbSet<LutViolationCategory> LutViolationCategories { get; set; }

    public virtual DbSet<LutViolationChecklist> LutViolationChecklists { get; set; }

    public virtual DbSet<LutViolationCode> LutViolationCodes { get; set; }

    public virtual DbSet<LutViolationCodeType> LutViolationCodeTypes { get; set; }

    public virtual DbSet<LutViolationLocation> LutViolationLocations { get; set; }

    public virtual DbSet<LutWithdrawReason> LutWithdrawReasons { get; set; }

    public virtual DbSet<LutWorkLogType> LutWorkLogTypes { get; set; }

    public virtual DbSet<LutWorkLogType1> LutWorkLogTypes1 { get; set; }

    public virtual DbSet<Lutcaplanguage> Lutcaplanguages { get; set; }

    public virtual DbSet<Neighborhood> Neighborhoods { get; set; }

    public virtual DbSet<NeighborhoodCouncil> NeighborhoodCouncils { get; set; }

    public virtual DbSet<NewStaffContactInfo> NewStaffContactInfos { get; set; }

    public virtual DbSet<NewsDisplayConfig> NewsDisplayConfigs { get; set; }

    public virtual DbSet<NewsNewsDetail> NewsNewsDetails { get; set; }

    public virtual DbSet<NonCoveredProjectSite> NonCoveredProjectSites { get; set; }

    public virtual DbSet<Notice> Notices { get; set; }

    public virtual DbSet<NoticeOfObligation> NoticeOfObligations { get; set; }

    public virtual DbSet<NotificationLog> NotificationLogs { get; set; }

    public virtual DbSet<NotificationSchema> NotificationSchemas { get; set; }

    public virtual DbSet<NotificationSource> NotificationSources { get; set; }

    public virtual DbSet<NotificationTemplate> NotificationTemplates { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<OrganizationAddress> OrganizationAddresses { get; set; }

    public virtual DbSet<OutreachAndAffimativeMarketing> OutreachAndAffimativeMarketings { get; set; }

    public virtual DbSet<PcmstoPncSyncLog> PcmstoPncSyncLogs { get; set; }

    public virtual DbSet<PhoneLog> PhoneLogs { get; set; }

    public virtual DbSet<Pmp> Pmps { get; set; }

    public virtual DbSet<PmpaddnlMarketingEffort> PmpaddnlMarketingEfforts { get; set; }

    public virtual DbSet<PmpaddnlMarketingEffortSnap> PmpaddnlMarketingEffortSnaps { get; set; }

    public virtual DbSet<Pmpagency> Pmpagencies { get; set; }

    public virtual DbSet<PmpagencySnap> PmpagencySnaps { get; set; }

    public virtual DbSet<Pmplog> Pmplogs { get; set; }

    public virtual DbSet<PmpoutreachAndAffimativeMarketingSnap> PmpoutreachAndAffimativeMarketingSnaps { get; set; }

    public virtual DbSet<PmpoutreachOrganisation> PmpoutreachOrganisations { get; set; }

    public virtual DbSet<PmpoutreachOrganisationSnap> PmpoutreachOrganisationSnaps { get; set; }

    public virtual DbSet<PmpprojectSiteSnap> PmpprojectSiteSnaps { get; set; }

    public virtual DbSet<PmppshclientServingOrganization> PmppshclientServingOrganizations { get; set; }

    public virtual DbSet<PmppshclientServingOrganizationSnap> PmppshclientServingOrganizationSnaps { get; set; }

    public virtual DbSet<PmpsiteAddressSnap> PmpsiteAddressSnaps { get; set; }

    public virtual DbSet<Pmpsnap> Pmpsnaps { get; set; }

    public virtual DbSet<PmpunitAttributeSnap> PmpunitAttributeSnaps { get; set; }

    public virtual DbSet<PmpunitInfoSummarySnap> PmpunitInfoSummarySnaps { get; set; }

    public virtual DbSet<PmpunitSnap> PmpunitSnaps { get; set; }

    public virtual DbSet<PolicyComplianceDetail> PolicyComplianceDetails { get; set; }

    public virtual DbSet<PolicyComplianceReminder> PolicyComplianceReminders { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<ProjectAttribute> ProjectAttributes { get; set; }

    public virtual DbSet<ProjectAttributeLog> ProjectAttributeLogs { get; set; }

    public virtual DbSet<ProjectLog> ProjectLogs { get; set; }

    public virtual DbSet<ProjectSite> ProjectSites { get; set; }

    public virtual DbSet<ProjectSite10252023> ProjectSite10252023s { get; set; }

    public virtual DbSet<ProjectSiteAdditionalQuestion> ProjectSiteAdditionalQuestions { get; set; }

    public virtual DbSet<ProjectSiteAdditionalQuestionsSnap> ProjectSiteAdditionalQuestionsSnaps { get; set; }

    public virtual DbSet<ProjectSiteAttribute> ProjectSiteAttributes { get; set; }

    public virtual DbSet<ProjectSiteAttributeLog> ProjectSiteAttributeLogs { get; set; }

    public virtual DbSet<ProjectSiteAttributeSnap> ProjectSiteAttributeSnaps { get; set; }

    public virtual DbSet<ProjectSiteFutureWaitList> ProjectSiteFutureWaitLists { get; set; }

    public virtual DbSet<ProjectSiteLog> ProjectSiteLogs { get; set; }

    public virtual DbSet<ProjectSiteMarketingFlyer> ProjectSiteMarketingFlyers { get; set; }

    public virtual DbSet<ProjectSiteMarketingFlyerSnap> ProjectSiteMarketingFlyerSnaps { get; set; }

    public virtual DbSet<ProjectSiteNoChangeReport> ProjectSiteNoChangeReports { get; set; }

    public virtual DbSet<ProjectSiteSnap> ProjectSiteSnaps { get; set; }

    public virtual DbSet<ProjectSiteSnapLog> ProjectSiteSnapLogs { get; set; }

    public virtual DbSet<ProjectSiteUpcomingUnitVacancy> ProjectSiteUpcomingUnitVacancies { get; set; }

    public virtual DbSet<ProjectWorkLog> ProjectWorkLogs { get; set; }

    public virtual DbSet<PropAttribute> PropAttributes { get; set; }

    public virtual DbSet<PropSnapshot> PropSnapshots { get; set; }

    public virtual DbSet<PropSnapshotTemp> PropSnapshotTemps { get; set; }

    public virtual DbSet<PropSnapshotTempAfter> PropSnapshotTempAfters { get; set; }

    public virtual DbSet<PropertyAccountContactSnapShot> PropertyAccountContactSnapShots { get; set; }

    public virtual DbSet<PropertyAccountContactSnapShot1> PropertyAccountContactSnapShots1 { get; set; }

    public virtual DbSet<QrassnGrievanceTypeQuestion> QrassnGrievanceTypeQuestions { get; set; }

    public virtual DbSet<QrassnGrievanceTypeSubQuestion> QrassnGrievanceTypeSubQuestions { get; set; }

    public virtual DbSet<QrautransferWaitList> QrautransferWaitLists { get; set; }

    public virtual DbSet<QrauwaitList> QrauwaitLists { get; set; }

    public virtual DbSet<Qrconfiguration> Qrconfigurations { get; set; }

    public virtual DbSet<QreffectiveCommunication> QreffectiveCommunications { get; set; }

    public virtual DbSet<QrfairHousing> QrfairHousings { get; set; }

    public virtual DbSet<QrgrievanceLog> QrgrievanceLogs { get; set; }

    public virtual DbSet<QrnewStaffContactInfo> QrnewStaffContactInfos { get; set; }

    public virtual DbSet<QroccupancyUnit> QroccupancyUnits { get; set; }

    public virtual DbSet<QrprojectSiteFutureWaitList> QrprojectSiteFutureWaitLists { get; set; }

    public virtual DbSet<QrprojectSiteNoChangeReport> QrprojectSiteNoChangeReports { get; set; }

    public virtual DbSet<QrprojectSiteUpcomingUnitVacancy> QrprojectSiteUpcomingUnitVacancies { get; set; }

    public virtual DbSet<QrpropertyAssociatedAccount> QrpropertyAssociatedAccounts { get; set; }

    public virtual DbSet<QrreasonableAccommodation> QrreasonableAccommodations { get; set; }

    public virtual DbSet<QrupcomingUnitVacancy> QrupcomingUnitVacancies { get; set; }

    public virtual DbSet<QrutilizationSurvey> QrutilizationSurveys { get; set; }

    public virtual DbSet<QuarterlyReport> QuarterlyReports { get; set; }

    public virtual DbSet<RandomUser> RandomUsers { get; set; }

    public virtual DbSet<ReasonableAccommodation> ReasonableAccommodations { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<Replacementapn> Replacementapns { get; set; }

    public virtual DbSet<ReviewListingLog> ReviewListingLogs { get; set; }

    public virtual DbSet<ReviewPmplog> ReviewPmplogs { get; set; }

    public virtual DbSet<ReviewPmplogSnap> ReviewPmplogSnaps { get; set; }

    public virtual DbSet<ReviewReportDetail> ReviewReportDetails { get; set; }

    public virtual DbSet<ReviewReportItem> ReviewReportItems { get; set; }

    public virtual DbSet<RoleMaster> RoleMasters { get; set; }

    public virtual DbSet<ServiceRequest> ServiceRequests { get; set; }

    public virtual DbSet<ServiceRequestContact> ServiceRequestContacts { get; set; }

    public virtual DbSet<ServiceRequestGmcheckList> ServiceRequestGmcheckLists { get; set; }

    public virtual DbSet<SiteAddress> SiteAddresses { get; set; }

    public virtual DbSet<SiteAddressLog> SiteAddressLogs { get; set; }

    public virtual DbSet<SiteAssociatedAssessorsParcelNumber> SiteAssociatedAssessorsParcelNumbers { get; set; }

    public virtual DbSet<SpdetailViewColumnConfig> SpdetailViewColumnConfigs { get; set; }

    public virtual DbSet<SpdetailViewDisplayConfig> SpdetailViewDisplayConfigs { get; set; }

    public virtual DbSet<SpgridViewColumnConfig> SpgridViewColumnConfigs { get; set; }

    public virtual DbSet<SpgridViewDisplayConfig> SpgridViewDisplayConfigs { get; set; }

    public virtual DbSet<SpgroupViewColumnConfig> SpgroupViewColumnConfigs { get; set; }

    public virtual DbSet<SpgroupViewDisplayConfig> SpgroupViewDisplayConfigs { get; set; }

    public virtual DbSet<SpmatrixViewDisplayConfig> SpmatrixViewDisplayConfigs { get; set; }

    public virtual DbSet<SpviewDbconfig> SpviewDbconfigs { get; set; }

    public virtual DbSet<SpviewSpconfig> SpviewSpconfigs { get; set; }

    public virtual DbSet<Structure> Structures { get; set; }

    public virtual DbSet<StructureAssociatedAssessorsParcelNumber> StructureAssociatedAssessorsParcelNumbers { get; set; }

    public virtual DbSet<StructureAttribute> StructureAttributes { get; set; }

    public virtual DbSet<StructureAttributeLog> StructureAttributeLogs { get; set; }

    public virtual DbSet<StructureAttributeTemp> StructureAttributeTemps { get; set; }

    public virtual DbSet<StructureAttributeTempAfter> StructureAttributeTempAfters { get; set; }

    public virtual DbSet<StructureLog> StructureLogs { get; set; }

    public virtual DbSet<StructureTemp> StructureTemps { get; set; }

    public virtual DbSet<StructureTempAfter> StructureTempAfters { get; set; }

    public virtual DbSet<StructureUnitInformation> StructureUnitInformations { get; set; }

    public virtual DbSet<SubmissionErrorLog> SubmissionErrorLogs { get; set; }

    public virtual DbSet<Subscription> Subscriptions { get; set; }

    public virtual DbSet<SurveyReport> SurveyReports { get; set; }

    public virtual DbSet<Svcarea2012> Svcarea2012s { get; set; }

    public virtual DbSet<Svcarea201210252023> Svcarea201210252023s { get; set; }

    public virtual DbSet<TContactIdentifier> TContactIdentifiers { get; set; }

    public virtual DbSet<TabControlViewMap> TabControlViewMaps { get; set; }

    public virtual DbSet<TabMaster> TabMasters { get; set; }

    public virtual DbSet<TassnPropContact> TassnPropContacts { get; set; }

    public virtual DbSet<Tcaselog> Tcaselogs { get; set; }

    public virtual DbSet<TeamManagement> TeamManagements { get; set; }

    public virtual DbSet<TempAcHpcertifiedProperty> TempAcHpcertifiedProperties { get; set; }

    public virtual DbSet<TempPrefHouseId> TempPrefHouseIds { get; set; }

    public virtual DbSet<Tempdocstatus> Tempdocstatuses { get; set; }

    public virtual DbSet<TemplateDetail> TemplateDetails { get; set; }

    public virtual DbSet<TemplateMaster> TemplateMasters { get; set; }

    public virtual DbSet<TppangelenoUser> TppangelenoUsers { get; set; }

    public virtual DbSet<Tqr2fairHousingBatch1> Tqr2fairHousingBatch1s { get; set; }

    public virtual DbSet<Tqr2serviceRequestBatch1> Tqr2serviceRequestBatch1s { get; set; }

    public virtual DbSet<TqrCorrectionNote> TqrCorrectionNotes { get; set; }

    public virtual DbSet<Trainer> Trainers { get; set; }

    public virtual DbSet<TrainingHistory> TrainingHistories { get; set; }

    public virtual DbSet<TrainingHistory20211122> TrainingHistory20211122s { get; set; }

    public virtual DbSet<TrainingRegistry> TrainingRegistries { get; set; }

    public virtual DbSet<TrainingSession> TrainingSessions { get; set; }

    public virtual DbSet<TrainingSessionTrainer> TrainingSessionTrainers { get; set; }

    public virtual DbSet<Unit> Units { get; set; }

    public virtual DbSet<UnitAttribute> UnitAttributes { get; set; }

    public virtual DbSet<UnitAttributeLog> UnitAttributeLogs { get; set; }

    public virtual DbSet<UnitBathroomType> UnitBathroomTypes { get; set; }

    public virtual DbSet<UnitLog> UnitLogs { get; set; }

    public virtual DbSet<UnitSnap> UnitSnaps { get; set; }

    public virtual DbSet<UpcomingUnitVacancy> UpcomingUnitVacancies { get; set; }

    public virtual DbSet<UserSearchCriterion> UserSearchCriteria { get; set; }

    public virtual DbSet<ViewConfig> ViewConfigs { get; set; }

    public virtual DbSet<Violation> Violations { get; set; }

    public virtual DbSet<VwAahrdefaultContact> VwAahrdefaultContacts { get; set; }

    public virtual DbSet<VwAahrgisfeature> VwAahrgisfeatures { get; set; }

    public virtual DbSet<VwAahrpropertiesToGetLadbspermit> VwAahrpropertiesToGetLadbspermits { get; set; }

    public virtual DbSet<VwAahrpublicContact> VwAahrpublicContacts { get; set; }

    public virtual DbSet<VwAcHpdataForHhh> VwAcHpdataForHhhs { get; set; }

    public virtual DbSet<VwAccessLog> VwAccessLogs { get; set; }

    public virtual DbSet<VwAffordableApplicationCloseDateNotification> VwAffordableApplicationCloseDateNotifications { get; set; }

    public virtual DbSet<VwAllPropertyList> VwAllPropertyLists { get; set; }

    public virtual DbSet<VwAllPropertyPolicyAnalyst> VwAllPropertyPolicyAnalysts { get; set; }

    public virtual DbSet<VwAllPropertyPolicyAnalyst8118> VwAllPropertyPolicyAnalyst8118s { get; set; }

    public virtual DbSet<VwAllPurportedUnitsDetail> VwAllPurportedUnitsDetails { get; set; }

    public virtual DbSet<VwApplication> VwApplications { get; set; }

    public virtual DbSet<VwApplicationUser> VwApplicationUsers { get; set; }

    public virtual DbSet<VwAspNetRole> VwAspNetRoles { get; set; }

    public virtual DbSet<VwAspNetUser> VwAspNetUsers { get; set; }

    public virtual DbSet<VwAspNetUserRole> VwAspNetUserRoles { get; set; }

    public virtual DbSet<VwCaseLog> VwCaseLogs { get; set; }

    public virtual DbSet<VwCcallPropertyList> VwCcallPropertyLists { get; set; }

    public virtual DbSet<VwCcprojectSiteUnitSummaryAll> VwCcprojectSiteUnitSummaryAlls { get; set; }

    public virtual DbSet<VwComment> VwComments { get; set; }

    public virtual DbSet<VwConstructionAllProject> VwConstructionAllProjects { get; set; }

    public virtual DbSet<VwCoveredPropertyList> VwCoveredPropertyLists { get; set; }

    public virtual DbSet<VwCoveredPropertyList1> VwCoveredPropertyLists1 { get; set; }

    public virtual DbSet<VwDmsdocument> VwDmsdocuments { get; set; }

    public virtual DbSet<VwGeoCounilDistrict> VwGeoCounilDistricts { get; set; }

    public virtual DbSet<VwHcidaahpapplicationUser> VwHcidaahpapplicationUsers { get; set; }

    public virtual DbSet<VwHousingApplication> VwHousingApplications { get; set; }

    public virtual DbSet<VwManageAccount> VwManageAccounts { get; set; }

    public virtual DbSet<VwOlapAllProperty> VwOlapAllProperties { get; set; }

    public virtual DbSet<VwOlapCertifiedUnitDetail> VwOlapCertifiedUnitDetails { get; set; }

    public virtual DbSet<VwOlapConstructionDetail> VwOlapConstructionDetails { get; set; }

    public virtual DbSet<VwOlapContactDetail> VwOlapContactDetails { get; set; }

    public virtual DbSet<VwOlapDocumentDetail> VwOlapDocumentDetails { get; set; }

    public virtual DbSet<VwOlapGrievance> VwOlapGrievances { get; set; }

    public virtual DbSet<VwOlapHimscontactInfo> VwOlapHimscontactInfos { get; set; }

    public virtual DbSet<VwOlapHimscovenant> VwOlapHimscovenants { get; set; }

    public virtual DbSet<VwOlapHimsmilestone> VwOlapHimsmilestones { get; set; }

    public virtual DbSet<VwOlapHimsparticipantInfo> VwOlapHimsparticipantInfos { get; set; }

    public virtual DbSet<VwOlapHimsunitInfo> VwOlapHimsunitInfos { get; set; }

    public virtual DbSet<VwOlapMasterDataBySite> VwOlapMasterDataBySites { get; set; }

    public virtual DbSet<VwOlapPmpdetail> VwOlapPmpdetails { get; set; }

    public virtual DbSet<VwOlapPmpdetailsUpdated> VwOlapPmpdetailsUpdateds { get; set; }

    public virtual DbSet<VwOlapPolicyCaseDetail> VwOlapPolicyCaseDetails { get; set; }

    public virtual DbSet<VwOlapProjectDetail> VwOlapProjectDetails { get; set; }

    public virtual DbSet<VwOlapProjectDetailsUpdated> VwOlapProjectDetailsUpdateds { get; set; }

    public virtual DbSet<VwOlapPurportedUnitDetail> VwOlapPurportedUnitDetails { get; set; }

    public virtual DbSet<VwOlapQrautransferWaitList> VwOlapQrautransferWaitLists { get; set; }

    public virtual DbSet<VwOlapQrauwaitList> VwOlapQrauwaitLists { get; set; }

    public virtual DbSet<VwOlapQrauwaitListAggProjSiteCount> VwOlapQrauwaitListAggProjSiteCounts { get; set; }

    public virtual DbSet<VwOlapQreffectiveCommunication> VwOlapQreffectiveCommunications { get; set; }

    public virtual DbSet<VwOlapQrgrievanceLog> VwOlapQrgrievanceLogs { get; set; }

    public virtual DbSet<VwOlapQroccupancyUnit> VwOlapQroccupancyUnits { get; set; }

    public virtual DbSet<VwOlapQrreasonableAccommodation> VwOlapQrreasonableAccommodations { get; set; }

    public virtual DbSet<VwOlapQrupcomingUnitVacancy> VwOlapQrupcomingUnitVacancies { get; set; }

    public virtual DbSet<VwOlapQuarterlyReport> VwOlapQuarterlyReports { get; set; }

    public virtual DbSet<VwOlapQuarterlyReportMaster> VwOlapQuarterlyReportMasters { get; set; }

    public virtual DbSet<VwOlapStructureDetail> VwOlapStructureDetails { get; set; }

    public virtual DbSet<VwOlapTrainingDetail> VwOlapTrainingDetails { get; set; }

    public virtual DbSet<VwOlapUnitDetail> VwOlapUnitDetails { get; set; }

    public virtual DbSet<VwPcmsgroupMember> VwPcmsgroupMembers { get; set; }

    public virtual DbSet<VwProjectAttributeLog> VwProjectAttributeLogs { get; set; }

    public virtual DbSet<VwProjectLog> VwProjectLogs { get; set; }

    public virtual DbSet<VwProjectSiteAttributeLog> VwProjectSiteAttributeLogs { get; set; }

    public virtual DbSet<VwProjectSiteLog> VwProjectSiteLogs { get; set; }

    public virtual DbSet<VwProjectSitePrimaryContact> VwProjectSitePrimaryContacts { get; set; }

    public virtual DbSet<VwProjectSiteUnitActualCnt> VwProjectSiteUnitActualCnts { get; set; }

    public virtual DbSet<VwProjectSiteUnitActualCnt1> VwProjectSiteUnitActualCnts1 { get; set; }

    public virtual DbSet<VwProjectSiteUnitSummary> VwProjectSiteUnitSummaries { get; set; }

    public virtual DbSet<VwProjectSiteUnitSummary1> VwProjectSiteUnitSummaries1 { get; set; }

    public virtual DbSet<VwProjectSiteUnitSummaryAll> VwProjectSiteUnitSummaryAlls { get; set; }

    public virtual DbSet<VwPropertyContact> VwPropertyContacts { get; set; }

    public virtual DbSet<VwPropertyContactdetail> VwPropertyContactdetails { get; set; }

    public virtual DbSet<VwPropertySearch> VwPropertySearches { get; set; }

    public virtual DbSet<VwSrsummary> VwSrsummaries { get; set; }

    public virtual DbSet<VwStructureAttributeLog> VwStructureAttributeLogs { get; set; }

    public virtual DbSet<VwStructureLog> VwStructureLogs { get; set; }

    public virtual DbSet<VwTrainingCertificate> VwTrainingCertificates { get; set; }

    public virtual DbSet<VwUnitAttributeLog> VwUnitAttributeLogs { get; set; }

    public virtual DbSet<VwUnitLog> VwUnitLogs { get; set; }

    public virtual DbSet<VwWaitListCloseDateNotification> VwWaitListCloseDateNotifications { get; set; }

    public virtual DbSet<WarrantDetail> WarrantDetails { get; set; }

    public virtual DbSet<WfAction> WfActions { get; set; }

    public virtual DbSet<WfActionView> WfActionViews { get; set; }

    public virtual DbSet<WfActionViewPermission> WfActionViewPermissions { get; set; }

    public virtual DbSet<WfCaseCondition> WfCaseConditions { get; set; }

    public virtual DbSet<WfDefinition> WfDefinitions { get; set; }

    public virtual DbSet<WfState> WfStates { get; set; }

    public virtual DbSet<WflogDisplayConfig> WflogDisplayConfigs { get; set; }

    public virtual DbSet<WfnavigationDisplayConfig> WfnavigationDisplayConfigs { get; set; }

    public virtual DbSet<WfstateFlag> WfstateFlags { get; set; }

    public virtual DbSet<WorkExtension> WorkExtensions { get; set; }

    public virtual DbSet<WorkLog> WorkLogs { get; set; }

    public virtual DbSet<WorkOrder> WorkOrders { get; set; }

    public virtual DbSet<WsdetailViewColumnConfig> WsdetailViewColumnConfigs { get; set; }

    public virtual DbSet<WsdetailViewDisplayConfig> WsdetailViewDisplayConfigs { get; set; }

    public virtual DbSet<WsgridViewColumnConfig> WsgridViewColumnConfigs { get; set; }

    public virtual DbSet<WsgridViewDisplayConfig> WsgridViewDisplayConfigs { get; set; }

    public virtual DbSet<WsviewWsconfig> WsviewWsconfigs { get; set; }

    public virtual DbSet<WsviewWstype> WsviewWstypes { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=43devdb10;Encrypt=False;Trust Server Certificate=true;initial catalog=AAHRLocal;persist security info=True;user id=appACHP;password=BDpwD7@cHP;multipleactiveresultsets=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AI");

        modelBuilder.Entity<AcHpapn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AcHPAPN");

            entity.Property(e => e.Apn).HasColumnName("apn");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NewApn).HasColumnName("NewAPN");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
        });

        modelBuilder.Entity<AcHppropertyManagementPlan>(entity =>
        {
            entity.HasKey(e => e.PropertyManagementPlanId).HasName("PkPropertyManagementPlanSession");

            entity.ToTable("AcHPPropertyManagementPlan", "AAHR");

            entity.HasIndex(e => e.RowId, "UcPropertyManagementPlanSession_RowID").IsUnique();

            entity.Property(e => e.PropertyManagementPlanId).HasColumnName("PropertyManagementPlanID");
            entity.Property(e => e.AchpaffirmativeMarketingDate)
                .HasColumnType("datetime")
                .HasColumnName("ACHPAffirmativeMarketingDate");
            entity.Property(e => e.Achpcertification)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACHPCertification");
            entity.Property(e => e.AchpcertificationDate)
                .HasColumnType("datetime")
                .HasColumnName("ACHPCertificationDate");
            entity.Property(e => e.AchpmarketingDocumentsDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ACHPMarketingDocumentsDueDate");
            entity.Property(e => e.AchpmarketingDocumentsReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("ACHPMarketingDocumentsReceivedDate");
            entity.Property(e => e.AchppreliminaryCertification)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ACHPPreliminaryCertification");
            entity.Property(e => e.AchppreliminaryCertificationDate)
                .HasColumnType("datetime")
                .HasColumnName("ACHPPreliminaryCertificationDate");
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.OccupancyDate).HasColumnType("datetime");
            entity.Property(e => e.OmaffirmativeMarketingDate)
                .HasColumnType("datetime")
                .HasColumnName("OMAffirmativeMarketingDate");
            entity.Property(e => e.Omcertification)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("OMCertification");
            entity.Property(e => e.OmcertificationDate)
                .HasColumnType("datetime")
                .HasColumnName("OMCertificationDate");
            entity.Property(e => e.OmpreliminaryCertification)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OMPreliminaryCertification");
            entity.Property(e => e.OmpreliminaryCertificationDate)
                .HasColumnType("datetime")
                .HasColumnName("OMPreliminaryCertificationDate");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.RefAcHpcaseId).HasColumnName("RefAcHPCaseID");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");

            entity.HasOne(d => d.Case).WithMany(p => p.AcHppropertyManagementPlans)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FkPropertyManagementPlan_Case");

            entity.HasOne(d => d.Project).WithMany(p => p.AcHppropertyManagementPlans)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkPropertyManagementPlan_PncProject");
        });

        modelBuilder.Entity<AccessLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AccessLog", "IDM");

            entity.Property(e => e.AccessLogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AccessLogID");
            entity.Property(e => e.AppKey)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LastLogOn).HasColumnType("datetime");
            entity.Property(e => e.LogonData).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LogonStatus)
                .HasMaxLength(10)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<AccountDeactivation>(entity =>
        {
            entity.HasKey(e => e.AccountDeactivationId).HasName("PK_AAHR.AccountDeactivation");

            entity.ToTable("AccountDeactivation", "AAHR", tb => tb.HasTrigger("trg_AccountDeactivationLog"));

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateRequestedForDeactive).HasColumnType("datetime");
            entity.Property(e => e.DateRequestedForReactivate).HasColumnType("datetime");
            entity.Property(e => e.Idmusename).HasColumnName("IDMUsename");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<AccountDeactivationLog>(entity =>
        {
            entity.HasKey(e => e.AccountDeactivationLogId).HasName("PK_AAHR.AccountDeactivationLog");

            entity.ToTable("AccountDeactivationLog", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateRequestedForDeactive).HasColumnType("datetime");
            entity.Property(e => e.DateRequestedForReactivate).HasColumnType("datetime");
            entity.Property(e => e.Idmusename).HasColumnName("IDMUsename");
            entity.Property(e => e.LogCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<AdvanceSearchQuery>(entity =>
        {
            entity.HasKey(e => e.SearchQueryId);

            entity.ToTable("AdvanceSearchQuery", "IMS");

            entity.Property(e => e.SearchQueryId).HasColumnName("SearchQueryID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SearchQueryJson).HasColumnName("SearchQueryJSON");
            entity.Property(e => e.SearchQueryName).HasMaxLength(100);
        });

        modelBuilder.Entity<AffordableOnlyOwner>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AffordableOnlyOwner");

            entity.Property(e => e.AdaptiveReUse)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Adaptive re-use");
            entity.Property(e => e.AduList)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("ADU LIST");
            entity.Property(e => e.Apn).HasColumnName("APN");
            entity.Property(e => e.ApnStatus)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("APN Status");
            entity.Property(e => e.BillToCityStateZip)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Bill To City State Zip");
            entity.Property(e => e.BillToLastUpdatedOn).HasColumnName("Bill To Last Updated On");
            entity.Property(e => e.BillToName)
                .HasMaxLength(125)
                .IsUnicode(false)
                .HasColumnName("Bill To Name");
            entity.Property(e => e.BillToStreetAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Bill To Street Address");
            entity.Property(e => e.BillingAddressSource)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Billing Address Source");
            entity.Property(e => e.BimsBillingContactCityStateZip)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BIMS Billing Contact City State Zip");
            entity.Property(e => e.BimsBillingContactDate).HasColumnName("BIMS Billing Contact Date");
            entity.Property(e => e.BimsBillingContactName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BIMS Billing Contact Name");
            entity.Property(e => e.BimsBillingContactStreetAddress)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BIMS Billing Contact Street Address");
            entity.Property(e => e.Cd).HasColumnName("CD");
            entity.Property(e => e.ChangesSincePreviousJob)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Changes Since Previous Job");
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.EStatement)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("eStatement");
            entity.Property(e => e.EllisUnits).HasColumnName("Ellis Units");
            entity.Property(e => e.ExemptionsCommercialRso).HasColumnName("Exemptions Commercial RSO");
            entity.Property(e => e.ExemptionsCommercialScep).HasColumnName("Exemptions Commercial SCEP");
            entity.Property(e => e.ExemptionsConditionalRso).HasColumnName("Exemptions Conditional RSO");
            entity.Property(e => e.ExemptionsConditionalScep).HasColumnName("Exemptions Conditional SCEP");
            entity.Property(e => e.ExemptionsPermanentRso).HasColumnName("Exemptions Permanent RSO");
            entity.Property(e => e.ExemptionsPermanentScep).HasColumnName("Exemptions Permanent SCEP");
            entity.Property(e => e.ExemptionsRecognizedRso).HasColumnName("Exemptions Recognized RSO");
            entity.Property(e => e.ExemptionsRecognizedScep).HasColumnName("Exemptions Recognized SCEP");
            entity.Property(e => e.GovernmentOwnership)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Government Ownership");
            entity.Property(e => e.HomeownerExemption).HasColumnName("Homeowner Exemption");
            entity.Property(e => e.JobDateAndTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("Job Date And Time");
            entity.Property(e => e.LandUseCodeBestSource)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Land Use Code Best Source");
            entity.Property(e => e.LandUseCodeBestValue)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Land Use Code Best Value");
            entity.Property(e => e.LandUseCodeLahdValue)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Land Use Code LAHD Value");
            entity.Property(e => e.LandUseCodeLupamsValue)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Land Use Code LUPAMS Value");
            entity.Property(e => e.LegalDescription)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Legal Description");
            entity.Property(e => e.LupamsOwnerCityStateZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LUPAMS Owner City State Zip");
            entity.Property(e => e.LupamsOwnerName)
                .HasMaxLength(130)
                .IsUnicode(false)
                .HasColumnName("LUPAMS Owner Name");
            entity.Property(e => e.LupamsOwnerStreetAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LUPAMS Owner Street Address");
            entity.Property(e => e.LupamsRecordingSaleDate).HasColumnName("LUPAMS Recording/Sale Date");
            entity.Property(e => e.LutSrcSysCd)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.MailAddressId).HasColumnName("MailAddressID");
            entity.Property(e => e.OwnerNameBest)
                .HasMaxLength(130)
                .IsUnicode(false)
                .HasColumnName("Owner Name Best");
            entity.Property(e => e.OwnerOccupied)
                .HasMaxLength(14)
                .IsUnicode(false)
                .HasColumnName("Owner Occupied");
            entity.Property(e => e.PropertyCityStateZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Property City State Zip");
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("Property Description");
            entity.Property(e => e.PropertyEligibilityCategoryCurrYear)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Property Eligibility Category Curr Year");
            entity.Property(e => e.PropertyEligibilityCategoryNextYear)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Property Eligibility Category Next Year");
            entity.Property(e => e.PropertyStreetAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Property Street Address");
            entity.Property(e => e.ResidentialHotel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Residential Hotel");
            entity.Property(e => e.RsoUnitsEligible).HasColumnName("RSO Units Eligible");
            entity.Property(e => e.ScepUnitsEligible).HasColumnName("SCEP Units Eligible");
            entity.Property(e => e.ServiceDate).HasColumnType("datetime");
            entity.Property(e => e.TruncatedOwnerName)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("Truncated Owner Name");
            entity.Property(e => e.UnitsTotalBestSource)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Units Total Best Source");
            entity.Property(e => e.UnitsTotalBestValue).HasColumnName("Units Total Best Value");
            entity.Property(e => e.UnitsTotalLahdValue).HasColumnName("Units Total LAHD Value");
            entity.Property(e => e.UnitsTotalLupamsValue).HasColumnName("Units Total LUPAMS Value");
            entity.Property(e => e.VendorOwnerCityStateZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vendor Owner City State Zip");
            entity.Property(e => e.VendorOwnerName)
                .HasMaxLength(125)
                .IsUnicode(false)
                .HasColumnName("Vendor Owner Name");
            entity.Property(e => e.VendorOwnerStreetAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vendor Owner Street Address");
            entity.Property(e => e.VendorRecordType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vendor Record Type");
            entity.Property(e => e.VendorRecordingDate).HasColumnName("Vendor Recording Date");
            entity.Property(e => e.VendorSaleDate).HasColumnName("Vendor Sale Date");
            entity.Property(e => e.YearBuiltBestSource)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Year Built Best Source");
            entity.Property(e => e.YearBuiltBestValue).HasColumnName("Year Built Best Value");
            entity.Property(e => e.YearBuiltLahdValue).HasColumnName("Year Built LAHD Value");
            entity.Property(e => e.YearBuiltLupamsValue).HasColumnName("Year Built LUPAMS Value");
        });

        modelBuilder.Entity<AkasiteAddressSnap>(entity =>
        {
            entity.HasKey(e => e.AkasiteAddressSnapId).HasName("PK__AKASiteA__0F886B10B62EC417");

            entity.ToTable("AKASiteAddressSnap", "Listing");

            entity.Property(e => e.AkasiteAddressSnapId).HasColumnName("AKASiteAddressSnapID");
            entity.Property(e => e.AddressLine1).HasMaxLength(100);
            entity.Property(e => e.AddressLine2).HasMaxLength(100);
            entity.Property(e => e.Apn).HasColumnName("APN");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.PostDirCd).HasMaxLength(50);
            entity.Property(e => e.PreDirCd).HasMaxLength(50);
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");
            entity.Property(e => e.RefSiteAddressId).HasColumnName("RefSiteAddressID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetName).HasMaxLength(100);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Zip).HasMaxLength(5);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.AkasiteAddressSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AKASiteAd__Proje__5B9D5239");
        });

        modelBuilder.Entity<Allapn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("allapn");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateRhdetermination).HasColumnName("DateRHDetermination");
            entity.Property(e => e.LutEllisTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LutModReasonCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LutModVerifiedCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LutResidHotelTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropDesc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.RhtransientUnitCnt).HasColumnName("RHTransientUnitCnt");
            entity.Property(e => e.RhunitCnt).HasColumnName("RHUnitCnt");
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.UseCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<Apn>(entity =>
        {
            entity.ToTable("APN", "PnC");

            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.Apn1)
                .HasMaxLength(40)
                .HasColumnName("APN");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefApnid).HasColumnName("RefAPNID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasMany(d => d.SiteAddresses).WithMany(p => p.Apns)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnApnsiteAddress",
                    r => r.HasOne<SiteAddress>().WithMany()
                        .HasForeignKey("SiteAddressId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnAPNSiteAddress_SiteAddress"),
                    l => l.HasOne<Apn>().WithMany()
                        .HasForeignKey("Apnid")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnAPNSiteAddress_APN"),
                    j =>
                    {
                        j.HasKey("Apnid", "SiteAddressId");
                        j.ToTable("AssnAPNSiteAddress", "PnC");
                        j.IndexerProperty<int>("Apnid").HasColumnName("APNID");
                        j.IndexerProperty<int>("SiteAddressId").HasColumnName("SiteAddressID");
                    });
        });

        modelBuilder.Entity<Apnpin>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("APNPIN");

            entity.Property(e => e.Apn)
                .HasMaxLength(12)
                .HasColumnName("APN");
            entity.Property(e => e.Pin)
                .HasMaxLength(50)
                .HasColumnName("PIN");
        });

        modelBuilder.Entity<AppConfig>(entity =>
        {
            entity.ToTable("AppConfig", "CC");

            entity.Property(e => e.AppConfigId).HasColumnName("AppConfigID");
            entity.Property(e => e.ApplicationId).HasColumnName("ApplicationID");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasOne(d => d.Application).WithMany(p => p.AppConfigs)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AppConfig_ApplicationMaster");
        });

        modelBuilder.Entity<ApplicationMaster>(entity =>
        {
            entity.ToTable("ApplicationMaster", "CC", tb => tb.HasComment("This table holds information about various application that intends to use Common Controls."));

            entity.HasIndex(e => e.Name, "IX_ApplicationMasters_Name");

            entity.Property(e => e.ApplicationGuid).HasColumnName("ApplicationGUID");
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasMany(d => d.Applications).WithMany(p => p.ModuleApplicatinos)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnApplicationModule",
                    r => r.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnApplicationModule_ApplicationMaster_Parent"),
                    l => l.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ModuleApplicatinoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnApplicationModule_ApplicationMaster_Module"),
                    j =>
                    {
                        j.HasKey("ApplicationId", "ModuleApplicatinoId");
                        j.ToTable("AssnApplicationModule", "CC");
                    });

            entity.HasMany(d => d.CaseTypes).WithMany(p => p.ApplicationMasters)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnCaseTypeApplication",
                    r => r.HasOne<CaseType>().WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCaseTypeApplication_CaseType"),
                    l => l.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ApplicationMasterId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCaseTypeApplication_ApplicationMaster"),
                    j =>
                    {
                        j.HasKey("ApplicationMasterId", "CaseTypeId");
                        j.ToTable("AssnCaseTypeApplication", "CMS");
                    });

            entity.HasMany(d => d.ModuleApplicatinos).WithMany(p => p.Applications)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnApplicationModule",
                    r => r.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ModuleApplicatinoId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnApplicationModule_ApplicationMaster_Module"),
                    l => l.HasOne<ApplicationMaster>().WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnApplicationModule_ApplicationMaster_Parent"),
                    j =>
                    {
                        j.HasKey("ApplicationId", "ModuleApplicatinoId");
                        j.ToTable("AssnApplicationModule", "CC");
                    });
        });

        modelBuilder.Entity<AssnActionSchemaTemplate>(entity =>
        {
            entity.HasKey(e => new { e.ActionId, e.SchemaId, e.TemplateId });

            entity.ToTable("AssnActionSchemaTemplate", "CC");

            entity.HasOne(d => d.Action).WithMany(p => p.AssnActionSchemaTemplates)
                .HasForeignKey(d => d.ActionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnActionSchemaTemp_WA");

            entity.HasOne(d => d.Schema).WithMany(p => p.AssnActionSchemaTemplates)
                .HasForeignKey(d => d.SchemaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnActionSchemaTemp_NS");

            entity.HasOne(d => d.Template).WithMany(p => p.AssnActionSchemaTemplates)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnActionSchemaTempNT");
        });

        modelBuilder.Entity<AssnApplicationDeclineReason>(entity =>
        {
            entity.ToTable("AssnApplicationDeclineReason", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HrmapplicationId).HasColumnName("HRMApplicationId");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Text).HasMaxLength(1000);

            entity.HasOne(d => d.LutApplicationDeclineReason).WithMany(p => p.AssnApplicationDeclineReasons)
                .HasForeignKey(d => d.LutApplicationDeclineReasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnApplicationDeclineReason_LutApplicationDeclineReason");
        });

        modelBuilder.Entity<AssnBackgroundCheck>(entity =>
        {
            entity.ToTable("AssnBackgroundCheck", "AAHR");

            entity.Property(e => e.AssnBackgroundCheckId).HasColumnName("AssnBackgroundCheckID");
            entity.Property(e => e.BackgroundCheckId).HasColumnName("BackgroundCheckID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapShotId).HasColumnName("PropSnapShotID");

            entity.HasOne(d => d.BackgroundCheck).WithMany(p => p.AssnBackgroundChecks)
                .HasForeignKey(d => d.BackgroundCheckId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnBackgroundCheck_BackgroundCheck");

            entity.HasOne(d => d.PropSnapShot).WithMany(p => p.AssnBackgroundChecks)
                .HasForeignKey(d => d.PropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnBackgroundCheck_PropSnapshot");
        });

        modelBuilder.Entity<AssnBgcnonCoveredProperty>(entity =>
        {
            entity.HasKey(e => e.AssnBgcnonCoveredPropertyId).HasName("PK_AssnBGNonCoveredProperty");

            entity.ToTable("AssnBGCNonCoveredProperty", "AAHR");

            entity.Property(e => e.AssnBgcnonCoveredPropertyId).HasColumnName("AssnBGCNonCoveredPropertyID");
            entity.Property(e => e.BackgroundCheckId).HasColumnName("BackgroundCheckID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.NonCoveredProjectSiteId).HasColumnName("NonCoveredProjectSiteID");

            entity.HasOne(d => d.BackgroundCheck).WithMany(p => p.AssnBgcnonCoveredProperties)
                .HasForeignKey(d => d.BackgroundCheckId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnBGNonCoveredProperty_BackgroundCheck");

            entity.HasOne(d => d.NonCoveredProjectSite).WithMany(p => p.AssnBgcnonCoveredProperties)
                .HasForeignKey(d => d.NonCoveredProjectSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnBGNonCoveredProperty_NonCoveredProjectSite");
        });

        modelBuilder.Entity<AssnBidScopeOfWork>(entity =>
        {
            entity.HasKey(e => e.AssnBidScopeOfWorkId).HasName("PK_ScopeOfWork");

            entity.ToTable("AssnBidScopeOfWork", "AAHPCC");

            entity.Property(e => e.AssnBidScopeOfWorkId).HasColumnName("AssnBidScopeOfWorkID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BidPackageId).HasColumnName("BidPackageID");
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Location).IsUnicode(false);
            entity.Property(e => e.LutScopeItemId).HasColumnName("LutScopeItemID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.BidPackage).WithMany(p => p.AssnBidScopeOfWorks)
                .HasForeignKey(d => d.BidPackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScopeOfWork_BidPackage");

            entity.HasOne(d => d.LutScopeItem).WithMany(p => p.AssnBidScopeOfWorks)
                .HasForeignKey(d => d.LutScopeItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScopeOfWork_LutScopeOfWork");
        });

        modelBuilder.Entity<AssnCaseProjectSiteFolder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnCaseProjectSiteFolder", "AAHR");

            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FolderId)
                .HasMaxLength(100)
                .HasColumnName("FolderID");
            entity.Property(e => e.FolderJson).HasColumnName("FolderJSON");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");

            entity.HasOne(d => d.Case).WithMany()
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnCaseProjectSiteFolder_Case");

            entity.HasOne(d => d.Project).WithMany()
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnCaseProjectSiteFolder_Project");

            entity.HasOne(d => d.ProjectSite).WithMany()
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_AssnCaseProjectSiteFolder_ProjectSite");
        });

        modelBuilder.Entity<AssnComment>(entity =>
        {
            entity.HasKey(e => new { e.CommentId, e.ReferenceId, e.ReferenceType });

            entity.ToTable("AssnComment", "CC");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.ReferenceId)
                .HasMaxLength(64)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ReferenceType).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Comment).WithMany(p => p.AssnComments)
                .HasForeignKey(d => d.CommentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnComment_Comment");
        });

        modelBuilder.Entity<AssnContactContact>(entity =>
        {
            entity.ToTable("AssnContactContact", "PnC");

            entity.Property(e => e.AssnContactContactId).HasColumnName("AssnContactContactID");
            entity.Property(e => e.AssociationType).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PrimaryContactId).HasColumnName("PrimaryContactID");
            entity.Property(e => e.SecondaryContactId).HasColumnName("SecondaryContactID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.PrimaryContact).WithMany(p => p.AssnContactContactPrimaryContacts)
                .HasForeignKey(d => d.PrimaryContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnContactContact_ContactIdentifier");

            entity.HasOne(d => d.SecondaryContact).WithMany(p => p.AssnContactContactSecondaryContacts)
                .HasForeignKey(d => d.SecondaryContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnContactContact_ContactIdentifier1");
        });

        modelBuilder.Entity<AssnCoursePrerequisiteCourse>(entity =>
        {
            entity.HasKey(e => e.AssnCourseCourseId).HasName("PkAssnCoursePrerequisiteCourse");

            entity.ToTable("AssnCoursePrerequisiteCourse", "TRN");

            entity.Property(e => e.AssnCourseCourseId).HasColumnName("AssnCourseCourseID");
            entity.Property(e => e.CourseId).HasColumnName("CourseID");
            entity.Property(e => e.PrerequisiteCourseId).HasColumnName("PrerequisiteCourseID");

            entity.HasOne(d => d.Course).WithMany(p => p.AssnCoursePrerequisiteCourseCourses)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Course_Course");

            entity.HasOne(d => d.PrerequisiteCourse).WithMany(p => p.AssnCoursePrerequisiteCoursePrerequisiteCourses)
                .HasForeignKey(d => d.PrerequisiteCourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrerequisiteCourse_Course");
        });

        modelBuilder.Entity<AssnCourseTrainer>(entity =>
        {
            entity.HasKey(e => e.AssnCourseTrainerId).HasName("PkAssnCourseTrainer");

            entity.ToTable("AssnCourseTrainer", "TRN", tb => tb.HasComment("Association table between Course and Trainer\r\nwho is eligible to provide training for the course"));

            entity.HasIndex(e => new { e.CourseId, e.TrainerId }, "UC_AssnCourseTrainer_CourseID_TrainerID").IsUnique();

            entity.HasIndex(e => e.RowId, "UcAssnCourseTrainer_RowID").IsUnique();

            entity.Property(e => e.AssnCourseTrainerId)
                .HasComment("Primary Key Identity column for Associate table.")
                .HasColumnName("AssnCourseTrainerID");
            entity.Property(e => e.AccountId)
                .HasComment("Obsolete field.  Initial design system will keep trainer under Account Profile table.")
                .HasColumnName("AccountID");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasComment("Internal comment");
            entity.Property(e => e.CourseId)
                .HasComment("FK of Course table")
                .HasColumnName("CourseID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Who created associate record");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("when was the associate record created")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasComment("1 = Deleted relationship between trainer and course.  Default = 0");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last person modified for the record");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last update date for the record")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique row ID in system")
                .HasColumnName("RowID");
            entity.Property(e => e.TrainerCourseBackground)
                .IsUnicode(false)
                .HasComment("Notes for about Trainer backgroup related the particular course");
            entity.Property(e => e.TrainerId)
                .HasComment("FK for the Trainer table")
                .HasColumnName("TrainerID");

            entity.HasOne(d => d.Trainer).WithMany(p => p.AssnCourseTrainers)
                .HasForeignKey(d => d.TrainerId)
                .HasConstraintName("FK_AssnCourseTrainer_Trainer");
        });

        modelBuilder.Entity<AssnDocument>(entity =>
        {
            entity.HasKey(e => e.AssnDocumentId).HasName("PK_AssnDocument_1");

            entity.ToTable("AssnDocument", "DMS");

            entity.Property(e => e.AssnDocumentId).HasColumnName("AssnDocumentID");
            entity.Property(e => e.AssociationType).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.ReferenceId)
                .HasMaxLength(64)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ReferenceType).HasMaxLength(20);

            entity.HasOne(d => d.Document).WithMany(p => p.AssnDocuments)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnDocument_Document");
        });

        modelBuilder.Entity<AssnDocumentSubCategoryStatus>(entity =>
        {
            entity.ToTable("AssnDocumentSubCategoryStatus", "AAHPCC");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);

            entity.HasOne(d => d.DocumentStatus).WithMany(p => p.AssnDocumentSubCategoryStatusDocumentStatuses)
                .HasForeignKey(d => d.DocumentStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnDocumentSubCategoryStatus_LutDocumentCategory1");

            entity.HasOne(d => d.SubCategory).WithMany(p => p.AssnDocumentSubCategoryStatusSubCategories)
                .HasForeignKey(d => d.SubCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnDocumentSubCategoryStatus_LutDocumentCategory");
        });

        modelBuilder.Entity<AssnFairHousingCertifyTerm>(entity =>
        {
            entity.HasKey(e => e.AssnFairHousingCertifyTermsId);

            entity.ToTable("AssnFairHousingCertifyTerms", "AAHR");

            entity.Property(e => e.AssnFairHousingCertifyTermsId).HasColumnName("AssnFairHousingCertifyTermsID");
            entity.Property(e => e.FairHousingId).HasColumnName("FairHousingID");
            entity.Property(e => e.LutQrcertifyTermsId).HasColumnName("LutQRCertifyTermsID");

            entity.HasOne(d => d.FairHousing).WithMany(p => p.AssnFairHousingCertifyTerms)
                .HasForeignKey(d => d.FairHousingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFairHousingCertifyTerms_FairHousing");

            entity.HasOne(d => d.LutQrcertifyTerms).WithMany(p => p.AssnFairHousingCertifyTerms)
                .HasForeignKey(d => d.LutQrcertifyTermsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFairHousingCertifyTerms_LutQRCertifyTerms");
        });

        modelBuilder.Entity<AssnFhacfiledDate>(entity =>
        {
            entity.ToTable("AssnFHACFiledDate", "AAHR");

            entity.Property(e => e.AssnFhacfiledDateId).HasColumnName("AssnFHACFiledDateID");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FairHousingId).HasColumnName("FairHousingID");
            entity.Property(e => e.FhacfiledDate).HasColumnName("FHACFiledDate");
            entity.Property(e => e.LutFhacfiledSourceId).HasColumnName("LutFHACFiledSourceID");

            entity.HasOne(d => d.FairHousing).WithMany(p => p.AssnFhacfiledDates)
                .HasForeignKey(d => d.FairHousingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFHACFiledDate_FairHousing");

            entity.HasOne(d => d.LutFhacfiledSource).WithMany(p => p.AssnFhacfiledDates)
                .HasForeignKey(d => d.LutFhacfiledSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFHACFiledDate_LutFHACFiledSource");
        });

        modelBuilder.Entity<AssnFolder>(entity =>
        {
            entity.ToTable("AssnFolder", "DMS");

            entity.Property(e => e.AssnFolderId).HasColumnName("AssnFolderID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FolderId).HasColumnName("FolderID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ReferenceId)
                .HasMaxLength(128)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ReferenceType).HasMaxLength(40);

            entity.HasOne(d => d.Folder).WithMany(p => p.AssnFolders)
                .HasForeignKey(d => d.FolderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFolder_Folder");
        });

        modelBuilder.Entity<AssnFolderDocument>(entity =>
        {
            entity.ToTable("AssnFolderDocument", "DMS");

            entity.Property(e => e.AssnFolderDocumentId).HasColumnName("AssnFolderDocumentID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.FolderId).HasColumnName("FolderID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Document).WithMany(p => p.AssnFolderDocuments)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnFolderDocument_Document");
        });

        modelBuilder.Entity<AssnGrievanceMilestonesDate>(entity =>
        {
            entity.HasKey(e => new { e.GrievanceId, e.LutGrievanceMilestonesId, e.MilestoneDate }).HasName("PK_GrievanceMilestonesDate");

            entity.ToTable("AssnGrievanceMilestonesDate", "GRV");

            entity.Property(e => e.GrievanceId).HasColumnName("GrievanceID");
            entity.Property(e => e.LutGrievanceMilestonesId).HasColumnName("LutGrievanceMilestonesID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Grievance).WithMany(p => p.AssnGrievanceMilestonesDates)
                .HasForeignKey(d => d.GrievanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnGrievMiles__Grievance");

            entity.HasOne(d => d.LutGrievanceMilestones).WithMany(p => p.AssnGrievanceMilestonesDates)
                .HasForeignKey(d => d.LutGrievanceMilestonesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnGrievMiles__LutGrievMiles");
        });

        modelBuilder.Entity<AssnGrievanceTypeMultiSelectOption>(entity =>
        {
            entity.HasKey(e => new { e.GrievanceTypeId, e.LutMultiSelectOptionsId });

            entity.ToTable("AssnGrievanceTypeMultiSelectOptions", "GRT");

            entity.Property(e => e.GrievanceTypeId).HasColumnName("GrievanceTypeID");
            entity.Property(e => e.LutMultiSelectOptionsId).HasColumnName("LutMultiSelectOptionsID");
            entity.Property(e => e.MoreDetails).IsUnicode(false);

            entity.HasOne(d => d.GrievanceType).WithMany(p => p.AssnGrievanceTypeMultiSelectOptions)
                .HasForeignKey(d => d.GrievanceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnGrievanceTypeMultiSelectOptions__GrievanceType");

            entity.HasOne(d => d.LutMultiSelectOptions).WithMany(p => p.AssnGrievanceTypeMultiSelectOptions)
                .HasForeignKey(d => d.LutMultiSelectOptionsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnGrievanceTypeMultiSelectOptions__LutMultiSelectOptionsID");
        });

        modelBuilder.Entity<AssnGrievanceTypeQuestion>(entity =>
        {
            entity.HasKey(e => e.AssnGrievanceTypeQuestionId).HasName("PK__AssnGrie__96911A349586D136");

            entity.ToTable("AssnGrievanceTypeQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.GrievanceLog).WithMany(p => p.AssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.GrievanceLogId)
                .HasConstraintName("FK__AssnGriev__Griev__564E8D37");

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.AssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__AssnGriev__LutGr__546644C5");

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.AssnGrievanceTypeQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__AssnGriev__LutGr__555A68FE");
        });

        modelBuilder.Entity<AssnGrievanceTypeSubQuestion>(entity =>
        {
            entity.HasKey(e => e.AssnGrievanceTypeSubQuestionId).HasName("PK__AssnGrie__DF0ABDF6A0E4E5E8");

            entity.ToTable("AssnGrievanceTypeSubQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmployeOrTenantName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeOrTenantDescription)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeTitleOrUnitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.GrievanceLog).WithMany(p => p.AssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.GrievanceLogId)
                .HasConstraintName("FK__AssnGriev__Griev__5A1F1E1B");

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.AssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__AssnGriev__LutGr__5742B170");

            entity.HasOne(d => d.LutGrievanceSubQuestion).WithMany(p => p.AssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceSubQuestionId)
                .HasConstraintName("FK__AssnGriev__LutGr__5836D5A9");

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.AssnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__AssnGriev__LutGr__592AF9E2");
        });

        modelBuilder.Entity<AssnHrmapplicationPropQuestion>(entity =>
        {
            entity.HasKey(e => e.AssnHrmapplicationPropQuestion1);

            entity.ToTable("AssnHRMApplicationPropQuestion", "AAHR");

            entity.Property(e => e.AssnHrmapplicationPropQuestion1).HasColumnName("AssnHRMApplicationPropQuestion");
            entity.Property(e => e.Answer).HasMaxLength(1000);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HrmapplicationId).HasColumnName("HRMApplicationId");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");

            entity.HasOne(d => d.Hrmapplication).WithMany(p => p.AssnHrmapplicationPropQuestions)
                .HasForeignKey(d => d.HrmapplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnHRMApplicationPropQuestion_HRMApplication");

            entity.HasOne(d => d.LutProjectSiteQuestion).WithMany(p => p.AssnHrmapplicationPropQuestions)
                .HasForeignKey(d => d.LutProjectSiteQuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnHRMApplicationPropQuestion_LutProjectSiteQuestion");
        });

        modelBuilder.Entity<AssnInspectionViolation>(entity =>
        {
            entity.HasKey(e => new { e.InspectionId, e.ViolationId });

            entity.ToTable("AssnInspectionViolation", "IMS");

            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.ViolationId).HasColumnName("ViolationID");
            entity.Property(e => e.Operation).HasMaxLength(20);

            entity.HasOne(d => d.Inspection).WithMany(p => p.AssnInspectionViolations)
                .HasForeignKey(d => d.InspectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnInspectionViolation_Inspection");

            entity.HasOne(d => d.Violation).WithMany(p => p.AssnInspectionViolations)
                .HasForeignKey(d => d.ViolationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnInspectionViolation_Violation1");
        });

        modelBuilder.Entity<AssnLocationCategoryLocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnLocationCategoryLocation", "IMS");

            entity.Property(e => e.LutLocationCategoryId).HasColumnName("LutLocationCategoryID");
            entity.Property(e => e.LutViolationLocationId).HasColumnName("LutViolationLocationID");

            entity.HasOne(d => d.LutLocationCategory).WithMany()
                .HasForeignKey(d => d.LutLocationCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMS.AssnLocationViolationCategory_LutLocationViolationCategory");

            entity.HasOne(d => d.LutViolationLocation).WithMany()
                .HasForeignKey(d => d.LutViolationLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IMS.AssnLocationViolationCategory_LutViolationLocation");
        });

        modelBuilder.Entity<AssnLutDistanceTypeSnap>(entity =>
        {
            entity.HasKey(e => e.AssnDistanceTypeSnapId).HasName("PK__AssnLutD__7F26C60D3C568A2B");

            entity.ToTable("AssnLutDistanceTypeSnap", "Listing");

            entity.Property(e => e.AssnDistanceTypeSnapId).HasColumnName("AssnDistanceTypeSnapID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutDistanceId).HasColumnName("LutDistanceID");
            entity.Property(e => e.LutDistanceTypeId).HasColumnName("LutDistanceTypeID");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.AssnLutDistanceTypeSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnLutDi__Proje__5E79BEE4");
        });

        modelBuilder.Entity<AssnOrganizationContact>(entity =>
        {
            entity.ToTable("AssnOrganizationContact", "PnC");

            entity.Property(e => e.AssnOrganizationContactId).HasColumnName("AssnOrganizationContactID");
            entity.Property(e => e.AssociationType).HasMaxLength(20);
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.AssnOrganizationContacts)
                .HasForeignKey(d => d.ContactIdentifierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnOrganizationContact_ContactIdentifier");

            entity.HasOne(d => d.Organization).WithMany(p => p.AssnOrganizationContacts)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnOrganizationContact_Organization");
        });

        modelBuilder.Entity<AssnOutreachTargetAudience>(entity =>
        {
            entity.HasKey(e => e.AssnTargetAudienceId).HasName("PK_Table_1");

            entity.ToTable("AssnOutreachTargetAudience", "AAHR");

            entity.Property(e => e.AssnTargetAudienceId).HasColumnName("AssnTargetAudienceID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutTargetAudienceId).HasColumnName("LutTargetAudienceID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OutreachId).HasColumnName("OutreachID");

            entity.HasOne(d => d.LutTargetAudience).WithMany(p => p.AssnOutreachTargetAudiences)
                .HasForeignKey(d => d.LutTargetAudienceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnOutreachTargetAudience_LutTargetAudience");

            entity.HasOne(d => d.Outreach).WithMany(p => p.AssnOutreachTargetAudiences)
                .HasForeignKey(d => d.OutreachId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnOutreachTargetAudience_OutreachAndAffimativeMarketing");
        });

        modelBuilder.Entity<AssnPmpagency>(entity =>
        {
            entity.ToTable("AssnPMPAgency", "AAHR");

            entity.Property(e => e.AssnPmpagencyId).HasColumnName("AssnPMPAgencyID");
            entity.Property(e => e.PmpagencyId).HasColumnName("PMPAgencyID");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");

            entity.HasOne(d => d.Pmpagency).WithMany(p => p.AssnPmpagencies)
                .HasForeignKey(d => d.PmpagencyId)
                .HasConstraintName("FK_AssnPMPAgency_PMPAgency");

            entity.HasOne(d => d.Pmp).WithMany(p => p.AssnPmpagencies)
                .HasForeignKey(d => d.Pmpid)
                .HasConstraintName("FK_AssnPMPAgency_PMP");
        });

        modelBuilder.Entity<AssnPmpagencySnap>(entity =>
        {
            entity.ToTable("AssnPMPAgencySnap", "PMP");

            entity.Property(e => e.AssnPmpagencySnapId).HasColumnName("AssnPMPAgencySnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.PmpagencyId).HasColumnName("PMPAgencyID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmpagencySnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPAgencySnap_PMPSnap");
        });

        modelBuilder.Entity<AssnPmplotteryApplnAvailMethod>(entity =>
        {
            entity.ToTable("AssnPMPLotteryApplnAvailMethod", "AAHR");

            entity.Property(e => e.AssnPmplotteryApplnAvailMethodId).HasColumnName("AssnPMPLotteryApplnAvailMethodID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutLotteryApplnAvailMethodId).HasColumnName("LutLotteryApplnAvailMethodID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");

            entity.HasOne(d => d.LutLotteryApplnAvailMethod).WithMany(p => p.AssnPmplotteryApplnAvailMethods)
                .HasForeignKey(d => d.LutLotteryApplnAvailMethodId)
                .HasConstraintName("FK_AssnPMPLotteryApplnAvailMethod_LutLotteryApplnAvailMethod");

            entity.HasOne(d => d.Pmp).WithMany(p => p.AssnPmplotteryApplnAvailMethods)
                .HasForeignKey(d => d.Pmpid)
                .HasConstraintName("FK_AssnPMPLotteryApplnAvailMethod_PMP");
        });

        modelBuilder.Entity<AssnPmplotteryApplnAvailMethodSnap>(entity =>
        {
            entity.ToTable("AssnPMPLotteryApplnAvailMethodSnap", "PMP");

            entity.Property(e => e.AssnPmplotteryApplnAvailMethodSnapId).HasColumnName("AssnPMPLotteryApplnAvailMethodSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutLotteryApplnAvailMethodId).HasColumnName("LutLotteryApplnAvailMethodID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.LutLotteryApplnAvailMethod).WithMany(p => p.AssnPmplotteryApplnAvailMethodSnaps)
                .HasForeignKey(d => d.LutLotteryApplnAvailMethodId)
                .HasConstraintName("FK_AssnPMPLotteryApplnAvailMethodSnap_LutLotteryApplnAvailMethod");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmplotteryApplnAvailMethodSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .HasConstraintName("FK_AssnPMPLotteryApplnAvailMethodSnap_PMPSnap");
        });

        modelBuilder.Entity<AssnPmplotterySubmitMethod>(entity =>
        {
            entity.ToTable("AssnPMPLotterySubmitMethod", "AAHR");

            entity.Property(e => e.AssnPmplotterySubmitMethodId).HasColumnName("AssnPMPLotterySubmitMethodID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutLotterySubmitMethodId).HasColumnName("LutLotterySubmitMethodID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");

            entity.HasOne(d => d.LutLotterySubmitMethod).WithMany(p => p.AssnPmplotterySubmitMethods)
                .HasForeignKey(d => d.LutLotterySubmitMethodId)
                .HasConstraintName("FK_AssnPMPLotterySubmitMethod_LutLotterySubmitMethod");

            entity.HasOne(d => d.Pmp).WithMany(p => p.AssnPmplotterySubmitMethods)
                .HasForeignKey(d => d.Pmpid)
                .HasConstraintName("FK_AssnPMPLotterySubmitMethod_PMP");
        });

        modelBuilder.Entity<AssnPmplotterySubmitMethodSnap>(entity =>
        {
            entity.ToTable("AssnPMPLotterySubmitMethodSnap", "PMP");

            entity.Property(e => e.AssnPmplotterySubmitMethodSnapId).HasColumnName("AssnPMPLotterySubmitMethodSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutLotterySubmitMethodId).HasColumnName("LutLotterySubmitMethodID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.LutLotterySubmitMethod).WithMany(p => p.AssnPmplotterySubmitMethodSnaps)
                .HasForeignKey(d => d.LutLotterySubmitMethodId)
                .HasConstraintName("FK_AssnPMPLotterySubmitMethodSnap_LutLotterySubmitMethod");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmplotterySubmitMethodSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .HasConstraintName("FK_AssnPMPLotterySubmitMethodSnap_PMPSnap");
        });

        modelBuilder.Entity<AssnPmpoutreachTargetAudienceSnap>(entity =>
        {
            entity.HasKey(e => e.AssnPmptargetAudienceSnapId).HasName("PK_AssnPMPTargetAudienceSnap");

            entity.ToTable("AssnPMPOutreachTargetAudienceSnap", "PMP");

            entity.Property(e => e.AssnPmptargetAudienceSnapId).HasColumnName("AssnPMPTargetAudienceSnapID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutTargetAudienceId).HasColumnName("LutTargetAudienceID");
            entity.Property(e => e.OutreachId).HasColumnName("OutreachID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.LutTargetAudience).WithMany(p => p.AssnPmpoutreachTargetAudienceSnaps)
                .HasForeignKey(d => d.LutTargetAudienceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPTargetAudienceSnap_LutTargetAudience");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmpoutreachTargetAudienceSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPTargetAudienceSnap_PMPSnap");
        });

        modelBuilder.Entity<AssnPmpprojSiteAccessibleUnitFeatureSnap>(entity =>
        {
            entity.ToTable("AssnPMPProjSiteAccessibleUnitFeatureSnap", "PMP");

            entity.Property(e => e.AssnPmpprojSiteAccessibleUnitFeatureSnapId).HasColumnName("AssnPMPProjSiteAccessibleUnitFeatureSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.LutAccessibleUnitFeatureId).HasColumnName("LutAccessibleUnitFeatureID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");

            entity.HasOne(d => d.LutAccessibleUnitFeature).WithMany(p => p.AssnPmpprojSiteAccessibleUnitFeatureSnaps)
                .HasForeignKey(d => d.LutAccessibleUnitFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjSiteAccessibleUnitFeatureSnap_LutAccessibleUnitFeature");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmpprojSiteAccessibleUnitFeatureSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjSiteAccessibleUnitFeatureSnap_PMPSnap");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPmpprojSiteAccessibleUnitFeatureSnaps)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjSiteAccessibleUnitFeatureSnap_ProjectSiteAttribute");
        });

        modelBuilder.Entity<AssnPmpprojTypeSiteAttr>(entity =>
        {
            entity.ToTable("AssnPMPProjTypeSiteAttr", "AAHR");

            entity.Property(e => e.AssnPmpprojTypeSiteAttrId).HasColumnName("AssnPMPProjTypeSiteAttrID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutPmpprojTypeId).HasColumnName("LutPMPProjTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");

            entity.HasOne(d => d.LutPmpprojType).WithMany(p => p.AssnPmpprojTypeSiteAttrs)
                .HasForeignKey(d => d.LutPmpprojTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttr_LutPMPProjType");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPmpprojTypeSiteAttrs)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttr_AssnPMPProjTypeSiteAttr");
        });

        modelBuilder.Entity<AssnPmpprojTypeSiteAttrSnap>(entity =>
        {
            entity.ToTable("AssnPMPProjTypeSiteAttrSnap", "PMP");

            entity.Property(e => e.AssnPmpprojTypeSiteAttrSnapId).HasColumnName("AssnPMPProjTypeSiteAttrSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutPmpprojTypeId).HasColumnName("LutPMPProjTypeID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");

            entity.HasOne(d => d.LutPmpprojType).WithMany(p => p.AssnPmpprojTypeSiteAttrSnaps)
                .HasForeignKey(d => d.LutPmpprojTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttrSnap_LutPMPProjType");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmpprojTypeSiteAttrSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttrSnap_PMPSnap");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPmpprojTypeSiteAttrSnaps)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPProjTypeSiteAttrSnap_ProjectSiteAttribute");
        });

        modelBuilder.Entity<AssnPmpscatteredSite>(entity =>
        {
            entity.ToTable("AssnPMPScatteredSite", "AAHR");

            entity.Property(e => e.AssnPmpscatteredSiteId).HasColumnName("AssnPMPScatteredSiteID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");

            entity.HasOne(d => d.Pmp).WithMany(p => p.AssnPmpscatteredSites)
                .HasForeignKey(d => d.Pmpid)
                .HasConstraintName("FK_AssnPMPScatteredSite_PMP");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.AssnPmpscatteredSites)
                .HasForeignKey(d => d.PropSnapshotId)
                .HasConstraintName("FK_AssnPMPScatteredSite_PropSnapshot");
        });

        modelBuilder.Entity<AssnPmpscatteredSiteSnap>(entity =>
        {
            entity.ToTable("AssnPMPScatteredSiteSnap", "PMP");

            entity.Property(e => e.AssnPmpscatteredSiteSnapId).HasColumnName("AssnPMPScatteredSiteSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmpscatteredSiteSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .HasConstraintName("FK_AssnPMPScatteredSiteSnap_PMPSnap");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.AssnPmpscatteredSiteSnaps)
                .HasForeignKey(d => d.PropSnapshotId)
                .HasConstraintName("FK_AssnPMPScatteredSiteSnap_PropSnapshot");
        });

        modelBuilder.Entity<AssnPmpsitesOutreach>(entity =>
        {
            entity.ToTable("AssnPMPSitesOutreach", "AAHR");

            entity.Property(e => e.AssnPmpsitesOutreachId).HasColumnName("AssnPMPSitesOutreachID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OutreachId).HasColumnName("OutreachID");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");
            entity.Property(e => e.PropsnapshotId).HasColumnName("PropsnapshotID");

            entity.HasOne(d => d.Outreach).WithMany(p => p.AssnPmpsitesOutreaches)
                .HasForeignKey(d => d.OutreachId)
                .HasConstraintName("FK_AssnPMPSitesOutreach_OutreachAndAffimativeMarketing");

            entity.HasOne(d => d.Pmp).WithMany(p => p.AssnPmpsitesOutreaches)
                .HasForeignKey(d => d.Pmpid)
                .HasConstraintName("FK_AssnPMPSitesOutreach_PMP");

            entity.HasOne(d => d.Propsnapshot).WithMany(p => p.AssnPmpsitesOutreaches)
                .HasForeignKey(d => d.PropsnapshotId)
                .HasConstraintName("FK_AssnPMPSitesOutreach_PropSnapshot");
        });

        modelBuilder.Entity<AssnPmpsitesOutreachSnap>(entity =>
        {
            entity.ToTable("AssnPMPSitesOutreachSnap", "PMP");

            entity.Property(e => e.AssnPmpsitesOutreachSnapId).HasColumnName("AssnPMPSitesOutreachSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.OutreachId).HasColumnName("OutreachID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.PropsnapshotId).HasColumnName("PropsnapshotID");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmpsitesOutreachSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPSitesOutreachSnap_PMPSnap");

            entity.HasOne(d => d.Propsnapshot).WithMany(p => p.AssnPmpsitesOutreachSnaps)
                .HasForeignKey(d => d.PropsnapshotId)
                .HasConstraintName("FK_AssnPMPSitesOutreachSnap_PropSnapshot");
        });

        modelBuilder.Entity<AssnPmpunitFeatureSnap>(entity =>
        {
            entity.HasKey(e => e.AssnPmpunitFeatureSnapId).HasName("PK_AssnUnitFeatureSnap");

            entity.ToTable("AssnPMPUnitFeatureSnap", "PMP");

            entity.Property(e => e.AssnPmpunitFeatureSnapId).HasColumnName("AssnPMPUnitFeatureSnapID");
            entity.Property(e => e.AssnUnitFeatureId).HasColumnName("AssnUnitFeatureID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutFeatureId).HasColumnName("LutFeatureID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");

            entity.HasOne(d => d.LutFeature).WithMany(p => p.AssnPmpunitFeatureSnaps)
                .HasForeignKey(d => d.LutFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPUnitFeatureSnap_LutFeature");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.AssnPmpunitFeatureSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPMPUnitFeatureSnap_PMPSnap");
        });

        modelBuilder.Entity<AssnProblemCase>(entity =>
        {
            entity.ToTable("AssnProblemCase", "CMS");

            entity.Property(e => e.AssnProblemCaseId).HasColumnName("AssnProblemCaseID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CommentCategory)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Case).WithMany(p => p.AssnProblemCases)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnUserProblemCase_Case");
        });

        modelBuilder.Entity<AssnProjSiteAccessibleUnitFeature>(entity =>
        {
            entity.ToTable("AssnProjSiteAccessibleUnitFeature", "AAHR");

            entity.Property(e => e.AssnProjSiteAccessibleUnitFeatureId).HasColumnName("AssnProjSiteAccessibleUnitFeatureID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.LutAccessibleUnitFeatureId).HasColumnName("LutAccessibleUnitFeatureID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");

            entity.HasOne(d => d.LutAccessibleUnitFeature).WithMany(p => p.AssnProjSiteAccessibleUnitFeatures)
                .HasForeignKey(d => d.LutAccessibleUnitFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnProjSiteAccessibleUnitFeature_LutAccessibleUnitFeature");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnProjSiteAccessibleUnitFeatures)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnProjSiteAccessibleUnitFeature_ProjectSiteAttribute");
        });

        modelBuilder.Entity<AssnProjectSiteApn>(entity =>
        {
            entity.HasKey(e => e.AssnProjectSiteApnid).HasName("PK__AssnProj__ACA8E470D8D17F7D");

            entity.ToTable("AssnProjectSiteAPN", "PnC");

            entity.Property(e => e.AssnProjectSiteApnid).HasColumnName("AssnProjectSiteAPNID");
            entity.Property(e => e.Apnno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APNNo");
            entity.Property(e => e.IsAcHp).HasColumnName("IsAcHP");
            entity.Property(e => e.IsHims).HasColumnName("IsHIMS");
        });

        modelBuilder.Entity<AssnProjectSiteFeatureSnap>(entity =>
        {
            entity.HasKey(e => e.AssnProjectSitefeatureSnapId).HasName("PK__AssnProj__9848F9163C28053E");

            entity.ToTable("AssnProjectSiteFeatureSnap", "Listing");

            entity.Property(e => e.AssnProjectSitefeatureSnapId).HasColumnName("AssnProjectSitefeatureSnapID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutFeatureId).HasColumnName("LutFeatureID");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.AssnProjectSiteFeatureSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnProje__Proje__61562B8F");
        });

        modelBuilder.Entity<AssnProjectSiteQuestion>(entity =>
        {
            entity.HasKey(e => e.AssnProjectSiteQuestionId).HasName("PK_AssnListingQuestion");

            entity.ToTable("AssnProjectSiteQuestion", "AAHR");

            entity.Property(e => e.AssnProjectSiteQuestionId).HasColumnName("AssnProjectSiteQuestionID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutProjectSiteQuestionId).HasColumnName("LutProjectSiteQuestionID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");

            entity.HasOne(d => d.LutProjectSiteQuestion).WithMany(p => p.AssnProjectSiteQuestions)
                .HasForeignKey(d => d.LutProjectSiteQuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingQuestion_LutListingQuestion");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnProjectSiteQuestions)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingQuestion_Listing");
        });

        modelBuilder.Entity<AssnProjectSiteReference>(entity =>
        {
            entity.ToTable("AssnProjectSiteReference", "AAHR");

            entity.Property(e => e.AssnProjectSiteReferenceId).HasColumnName("AssnProjectSiteReferenceID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSIteID");
            entity.Property(e => e.RefNumber)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.AssnProjectSiteReferences)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_AssnProjectSiteReference_ProjectSite");

            entity.HasOne(d => d.ReferenceTypeNavigation).WithMany(p => p.AssnProjectSiteReferences)
                .HasForeignKey(d => d.ReferenceType)
                .HasConstraintName("FK_AssnProjectSiteReference_LutReferenceType");
        });

        modelBuilder.Entity<AssnPropContact>(entity =>
        {
            entity.HasKey(e => e.AssnPropContactId).HasName("PK__AssnProp__762C52D97421C856");

            entity.ToTable("AssnPropContact", "PnC", tb => tb.HasTrigger("trg_AssnPropContactLog"));

            entity.HasIndex(e => new { e.ProjectSiteId, e.IsPrimaryAssnType }, "NCI_AssnPropContact");

            entity.Property(e => e.AssnPropContactId).HasColumnName("AssnPropContactID");
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierType).HasMaxLength(50);
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.AssnPropContacts)
                .HasForeignKey(d => d.ContactIdentifierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPropContact_ContactIdentifier");

            entity.HasOne(d => d.LutContactType).WithMany(p => p.AssnPropContacts)
                .HasForeignKey(d => d.LutContactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPropContact_LutContactType");
        });

        modelBuilder.Entity<AssnPropContactLog>(entity =>
        {
            entity.HasKey(e => e.AssnPropContactLogId).HasName("PK__AssnProp__E01856C0ED590910");

            entity.ToTable("AssnPropContactLog", "AAHR");

            entity.Property(e => e.AssnPropContactLogId).HasColumnName("AssnPropContactLogID");
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.AssnPropContactId).HasColumnName("AssnPropContactID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierType).HasMaxLength(50);
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
        });

        modelBuilder.Entity<AssnPropUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnPropUser");

            entity.Property(e => e.AssociatedFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AssociatedTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AssociationType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Idmuser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDMUser");
            entity.Property(e => e.IsDeleted)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutPropDistrictId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LutPropDistrictID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReviewRequired)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssnPropertyAccountContactSnapShot>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnPropertyAccountContactSnapShot");

            entity.HasIndex(e => e.CaptureDate, "IDX_AssnPropertyAccountContactSnapShot_CaptureDate").IsDescending();

            entity.HasIndex(e => e.ProjectSiteId, "IDX_AssnPropertyAccountContactSnapShot_ProjectSiteID");

            entity.HasIndex(e => new { e.CaptureDate, e.ContactId }, "IX_AssnPropertyAccountContactSnapShot_CaptureDate_ContactID").IsDescending(true, false);

            entity.HasIndex(e => e.ContactId, "IX_AssnPropertyAccountContactSnapShot_ContactID");

            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.LinkType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
        });

        modelBuilder.Entity<AssnPropertyAccountContactSnapShot1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnPropertyAccountContactSnapShot", "DPT");

            entity.Property(e => e.Attribute).IsUnicode(false);
            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.LinkType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
        });

        modelBuilder.Entity<AssnPropertyDistance>(entity =>
        {
            entity.HasKey(e => new { e.ProjectSiteAttributeId, e.LutDistanceTypeId, e.LutDistanceId }).HasName("PK_AssnListingDistance");

            entity.ToTable("AssnPropertyDistance", "AAHR");

            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");
            entity.Property(e => e.LutDistanceTypeId).HasColumnName("LutDistanceTypeID");
            entity.Property(e => e.LutDistanceId).HasColumnName("LutDistanceID");

            entity.HasOne(d => d.LutDistance).WithMany(p => p.AssnPropertyDistances)
                .HasForeignKey(d => d.LutDistanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingDistance_LutDistance");

            entity.HasOne(d => d.LutDistanceType).WithMany(p => p.AssnPropertyDistances)
                .HasForeignKey(d => d.LutDistanceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingDistance_LutDistanceType");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPropertyDistances)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingDistance_Listing");
        });

        modelBuilder.Entity<AssnPropertyDistrict>(entity =>
        {
            entity.HasKey(e => new { e.PropSnapshotId, e.LutPropertyDistrictId });

            entity.ToTable("AssnPropertyDistrict", "PnC");

            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.LutPropertyDistrictId).HasColumnName("LutPropertyDistrictID");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.AssnPropertyDistricts)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnPropertyDistrict_PropSnapshot");
        });

        modelBuilder.Entity<AssnPropertyFeature>(entity =>
        {
            entity.HasKey(e => e.AssnPropertyFeatureId).HasName("PK_AssnListingFeature");

            entity.ToTable("AssnPropertyFeature", "AAHR");

            entity.Property(e => e.AssnPropertyFeatureId).HasColumnName("AssnPropertyFeatureID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutFeatureId).HasColumnName("LutFeatureID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");

            entity.HasOne(d => d.LutFeature).WithMany(p => p.AssnPropertyFeatures)
                .HasForeignKey(d => d.LutFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingFeature_LutListingFeature");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.AssnPropertyFeatures)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingFeature_Listing");
        });

        modelBuilder.Entity<AssnPropertyUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnPropertyUser");

            entity.Property(e => e.AssociatedFrom)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AssociatedTo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AssociationType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Idmuser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IDMUser");
            entity.Property(e => e.LutPropertyDistrictId).HasColumnName("LutPropertyDistrictID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AssnPropertyUser1>(entity =>
        {
            entity.HasKey(e => new { e.PropertyIdentifierId, e.Idmuser });

            entity.ToTable("AssnPropertyUser", "PnC");

            entity.Property(e => e.PropertyIdentifierId).HasColumnName("PropertyIdentifierID");
            entity.Property(e => e.Idmuser)
                .HasMaxLength(150)
                .HasColumnName("IDMUser");
        });

        modelBuilder.Entity<AssnQrfairHousingCertifyTerm>(entity =>
        {
            entity.HasKey(e => e.AssnQrfairHousingCertifyTermsId);

            entity.ToTable("AssnQRFairHousingCertifyTerms", "AAHR");

            entity.Property(e => e.AssnQrfairHousingCertifyTermsId).HasColumnName("AssnQRFairHousingCertifyTermsID");
            entity.Property(e => e.LutQrcertifyTermsId).HasColumnName("LutQRCertifyTermsID");
            entity.Property(e => e.QrfairHousingId).HasColumnName("QRFairHousingID");

            entity.HasOne(d => d.LutQrcertifyTerms).WithMany(p => p.AssnQrfairHousingCertifyTerms)
                .HasForeignKey(d => d.LutQrcertifyTermsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRFairHousingCertifyTerms_LutQRCertifyTerms");

            entity.HasOne(d => d.QrfairHousing).WithMany(p => p.AssnQrfairHousingCertifyTerms)
                .HasForeignKey(d => d.QrfairHousingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRFairHousingCertifyTerms_QRFairHousing");
        });

        modelBuilder.Entity<AssnQrfhacfiledDate>(entity =>
        {
            entity.ToTable("AssnQRFHACFiledDate", "AAHR");

            entity.Property(e => e.AssnQrfhacfiledDateId).HasColumnName("AssnQRFHACFiledDateID");
            entity.Property(e => e.FhacfiledDate).HasColumnName("FHACFiledDate");
            entity.Property(e => e.LutFhacfiledSourceId).HasColumnName("LutFHACFiledSourceID");
            entity.Property(e => e.QrfairHousingId).HasColumnName("QRFairHousingID");

            entity.HasOne(d => d.LutFhacfiledSource).WithMany(p => p.AssnQrfhacfiledDates)
                .HasForeignKey(d => d.LutFhacfiledSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRFHACFiledDate_LutFHACFiledSource");

            entity.HasOne(d => d.QrfairHousing).WithMany(p => p.AssnQrfhacfiledDates)
                .HasForeignKey(d => d.QrfairHousingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRFHACFiledDate_QRFairHousing");
        });

        modelBuilder.Entity<AssnQrrentalSubsidy>(entity =>
        {
            entity.ToTable("AssnQRRentalSubsidy", "AAHR");

            entity.Property(e => e.AssnQrrentalSubsidyId).HasColumnName("AssnQRRentalSubsidyID");
            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.QroccupancyUnitId).HasColumnName("QROccupancyUnitID");

            entity.HasOne(d => d.LutRentalSubsidy).WithMany(p => p.AssnQrrentalSubsidies)
                .HasForeignKey(d => d.LutRentalSubsidyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRRentalSubsidy_LutRentalSubsidy");

            entity.HasOne(d => d.QroccupancyUnit).WithMany(p => p.AssnQrrentalSubsidies)
                .HasForeignKey(d => d.QroccupancyUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnQRRentalSubsidy_QROccupancyUnit");
        });

        modelBuilder.Entity<AssnRentalSubsidy>(entity =>
        {
            entity.ToTable("AssnRentalSubsidy", "AAHR");

            entity.Property(e => e.AssnRentalSubsidyId).HasColumnName("AssnRentalSubsidyID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
        });

        modelBuilder.Entity<AssnRentalSubsidySnap>(entity =>
        {
            entity.HasKey(e => e.AssnRentalSubsidySnapId).HasName("PK__AssnRent__1F378C54A8677C5F");

            entity.ToTable("AssnRentalSubsidySnap", "Listing");

            entity.Property(e => e.AssnRentalSubsidySnapId).HasColumnName("AssnRentalSubsidySnapID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");
            entity.Property(e => e.UnitSnapId).HasColumnName("UnitSnapID");

            entity.HasOne(d => d.UnitSnap).WithMany(p => p.AssnRentalSubsidySnaps)
                .HasForeignKey(d => d.UnitSnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnRenta__UnitS__670F04E5");
        });

        modelBuilder.Entity<AssnScopeViolation>(entity =>
        {
            entity.HasKey(e => e.AssnScopeViolationId).HasName("PK_ViolationInformation");

            entity.ToTable("AssnScopeViolation", "AAHPCC");

            entity.Property(e => e.AssnScopeViolationId).HasColumnName("AssnScopeViolationID");
            entity.Property(e => e.AssnBidScopeOfWorkId).HasColumnName("AssnBidScopeOfWorkID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ViolationId).HasColumnName("ViolationID");

            entity.HasOne(d => d.AssnBidScopeOfWork).WithMany(p => p.AssnScopeViolations)
                .HasForeignKey(d => d.AssnBidScopeOfWorkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnScopeViolation_AssnBidScopeOfWork");

            entity.HasOne(d => d.Violation).WithMany(p => p.AssnScopeViolations)
                .HasForeignKey(d => d.ViolationId)
                .HasConstraintName("FK_AssnScopeViolation_Violation");
        });

        modelBuilder.Entity<AssnServiceRequestPropSnapshotTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnServiceRequestPropSnapshot_temp");

            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
        });

        modelBuilder.Entity<AssnServiceRequestPropSnapshotTempAfter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssnServiceRequestPropSnapshot_tempAfter");

            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
        });

        modelBuilder.Entity<AssnServiceRequestTypeViolation>(entity =>
        {
            entity.HasKey(e => new { e.LutServiceRequestTypeId, e.LutViolationCategoryId, e.LutViolationId });

            entity.ToTable("AssnServiceRequestTypeViolation", "IMS");

            entity.Property(e => e.LutServiceRequestTypeId).HasColumnName("LutServiceRequestTypeID");
            entity.Property(e => e.LutViolationCategoryId).HasColumnName("LutViolationCategoryID");
            entity.Property(e => e.LutViolationId).HasColumnName("LutViolationID");

            entity.HasOne(d => d.LutServiceRequestType).WithMany(p => p.AssnServiceRequestTypeViolations)
                .HasForeignKey(d => d.LutServiceRequestTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestTypeViolation_LutServiceRequestType");

            entity.HasOne(d => d.LutViolationCategory).WithMany(p => p.AssnServiceRequestTypeViolations)
                .HasForeignKey(d => d.LutViolationCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestTypeViolation_LutViolationCategory");

            entity.HasOne(d => d.LutViolation).WithMany(p => p.AssnServiceRequestTypeViolations)
                .HasForeignKey(d => d.LutViolationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestTypeViolation_LutViolation");
        });

        modelBuilder.Entity<AssnSrcapchecklistItemStatus>(entity =>
        {
            entity.ToTable("AssnSRCAPChecklistItemStatus", "CAP");

            entity.Property(e => e.AssnSrcapchecklistItemStatusId).HasColumnName("AssnSRCAPChecklistItemStatusID");
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.ComplianceDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsCompliantBeforeCap).HasColumnName("IsCompliantBeforeCAP");
            entity.Property(e => e.LutCapchecklistItemId).HasColumnName("LutCAPChecklistItemId");
            entity.Property(e => e.LutCapchecklistSubItemId).HasColumnName("LutCAPChecklistSubItemId");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.LutCapchecklistItem).WithMany(p => p.AssnSrcapchecklistItemStatuses)
                .HasForeignKey(d => d.LutCapchecklistItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnSRCAPChecklistItemStatus_LutCAPChecklistItem");

            entity.HasOne(d => d.LutCapchecklistSubItem).WithMany(p => p.AssnSrcapchecklistItemStatuses)
                .HasForeignKey(d => d.LutCapchecklistSubItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnSRCAPChecklistItemStatus_LutCAPChecklistSubItem");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.AssnSrcapchecklistItemStatuses)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnSRCAPChecklistItemStatus_ServiceRequest");
        });

        modelBuilder.Entity<AssnSrreviewReportItemStatus>(entity =>
        {
            entity.HasKey(e => e.AssnServiceRequestReviewReportId).HasName("PK_AssnServiceRequestReviewReport");

            entity.ToTable("AssnSRReviewReportItemStatus", "AAHPPC");

            entity.Property(e => e.AssnServiceRequestReviewReportId).HasColumnName("AssnServiceRequestReviewReportID");
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutReviewReportItemId).HasColumnName("LutReviewReportItemID");
            entity.Property(e => e.LutReviewReportSubItemId).HasColumnName("LutReviewReportSubItemID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.LutReviewReportItem).WithMany(p => p.AssnSrreviewReportItemStatuses)
                .HasForeignKey(d => d.LutReviewReportItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestReviewReport_LutReviewReportItem");

            entity.HasOne(d => d.LutReviewReportSubItem).WithMany(p => p.AssnSrreviewReportItemStatuses)
                .HasForeignKey(d => d.LutReviewReportSubItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestReviewReport_LutReviewReportSubItem");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.AssnSrreviewReportItemStatuses)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnServiceRequestReviewReport_ServiceRequest");
        });

        modelBuilder.Entity<AssnTeamManagementUser>(entity =>
        {
            entity.HasKey(e => new { e.TeamManagementId, e.UserId });

            entity.ToTable("AssnTeamManagementUser", "AAHR");

            entity.HasOne(d => d.TeamManagement).WithMany(p => p.AssnTeamManagementUsers)
                .HasForeignKey(d => d.TeamManagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnTeamManagementUser_TeamManagement");
        });

        modelBuilder.Entity<AssnTeamManagementUser1>(entity =>
        {
            entity.HasKey(e => new { e.TeamManagementId, e.UserId });

            entity.ToTable("AssnTeamManagementUser", "CC");
        });

        modelBuilder.Entity<AssnTrainingRegistryProjectSite>(entity =>
        {
            entity.HasKey(e => e.AssnTrainingRegistryProjectSiteId).HasName("PK__AssnTrai__2F3DBC4082320C03");

            entity.ToTable("AssnTrainingRegistryProjectSite", "TRN");

            entity.Property(e => e.AssnTrainingRegistryProjectSiteId).HasColumnName("AssnTrainingRegistryProjectSiteID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.TrainingRegistryId).HasColumnName("TrainingRegistryID");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.AssnTrainingRegistryProjectSites)
                .HasForeignKey(d => d.ProjectSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnTrainingRegistryProjectSite_ProjectSite");

            entity.HasOne(d => d.TrainingRegistry).WithMany(p => p.AssnTrainingRegistryProjectSites)
                .HasForeignKey(d => d.TrainingRegistryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnTrainingRegistryProjectSite_TrainingRegistry");
        });

        modelBuilder.Entity<AssnUnitFeature>(entity =>
        {
            entity.HasKey(e => e.AssnUnitFeatureId).HasName("PK_AssnListingUnitFeature");

            entity.ToTable("AssnUnitFeature", "AAHR");

            entity.Property(e => e.AssnUnitFeatureId).HasColumnName("AssnUnitFeatureID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutFeatureId).HasColumnName("LutFeatureID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");

            entity.HasOne(d => d.LutFeature).WithMany(p => p.AssnUnitFeatures)
                .HasForeignKey(d => d.LutFeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingUnitFeature_LutListingFeature");

            entity.HasOne(d => d.UnitAttribute).WithMany(p => p.AssnUnitFeatures)
                .HasForeignKey(d => d.UnitAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnListingUnitFeature_ListingUnit");
        });

        modelBuilder.Entity<AssnUnitFeatureSnap>(entity =>
        {
            entity.HasKey(e => e.AssnUnitFeatureSnapId).HasName("PK__AssnUnit__A449A97635EA5033");

            entity.ToTable("AssnUnitFeatureSnap", "Listing");

            entity.Property(e => e.AssnUnitFeatureSnapId).HasColumnName("AssnUnitFeatureSnapID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutFeatureId).HasColumnName("LutFeatureID");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");
            entity.Property(e => e.UnitSnapId).HasColumnName("UnitSnapID");

            entity.HasOne(d => d.UnitSnap).WithMany(p => p.AssnUnitFeatureSnaps)
                .HasForeignKey(d => d.UnitSnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AssnUnitf__UnitS__69EB7190");
        });

        modelBuilder.Entity<AssnUserContractor>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_AssnUserIDContractor");

            entity.ToTable("AssnUserContractor", "IMS");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.AddressLine1).HasMaxLength(500);
            entity.Property(e => e.AddressLine2).HasMaxLength(500);
            entity.Property(e => e.ContractorName).HasMaxLength(100);
            entity.Property(e => e.DateAffectCert).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.License).HasMaxLength(50);
            entity.Property(e => e.PhoneNo).HasMaxLength(50);
        });

        modelBuilder.Entity<AssnUserFavouriteCase>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.CaseId });

            entity.ToTable("AssnUserFavouriteCase", "CMS");

            entity.Property(e => e.UserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CaseId).HasColumnName("CaseID");

            entity.HasOne(d => d.Case).WithMany(p => p.AssnUserFavouriteCases)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnUserFavouriteCase_Case");
        });

        modelBuilder.Entity<AssnUserPropertyFavouriteCase>(entity =>
        {
            entity.HasKey(e => new { e.UserName, e.PropSnapshotId });

            entity.ToTable("AssnUserPropertyFavouriteCase", "PnC");

            entity.Property(e => e.UserName).HasMaxLength(100);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.AssnUserPropertyFavouriteCases)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnUserPropertyFavouriteCase_PropSnapshot");
        });

        modelBuilder.Entity<AssnViolationProgram>(entity =>
        {
            entity.HasKey(e => new { e.LutViolationId, e.ApplicationGuid });

            entity.ToTable("AssnViolationProgram", "IMS");

            entity.Property(e => e.LutViolationId).HasColumnName("LutViolationID");
            entity.Property(e => e.ApplicationGuid).HasColumnName("ApplicationGUID");

            entity.HasOne(d => d.LutViolation).WithMany(p => p.AssnViolationPrograms)
                .HasForeignKey(d => d.LutViolationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnViolationProgram_LutViolation");
        });

        modelBuilder.Entity<AssnWalkInApplicationDeclineReason>(entity =>
        {
            entity.ToTable("AssnWalkInApplicationDeclineReason", "AAHR");

            entity.HasIndex(e => e.AuwaitListId, "IDX_AUWID");

            entity.Property(e => e.AssnWalkInApplicationDeclineReasonId).HasColumnName("AssnWalkInApplicationDeclineReasonID");
            entity.Property(e => e.AuwaitListId).HasColumnName("AUWaitListID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutApplicationDeclineReasonId).HasColumnName("LutApplicationDeclineReasonID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Text).HasMaxLength(1000);

            entity.HasOne(d => d.AuwaitList).WithMany(p => p.AssnWalkInApplicationDeclineReasons)
                .HasForeignKey(d => d.AuwaitListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnWalkInApplicationDeclineReason_AUWaitList");

            entity.HasOne(d => d.LutApplicationDeclineReason).WithMany(p => p.AssnWalkInApplicationDeclineReasons)
                .HasForeignKey(d => d.LutApplicationDeclineReasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnWalkInApplicationDeclineReason_LutApplicationDeclineReason");
        });

        modelBuilder.Entity<AuditVisitDetail>(entity =>
        {
            entity.ToTable("AuditVisitDetail", "AAHPPC", tb => tb.HasComment("Policy compliance schedule meeting location and type"));

            entity.Property(e => e.AuditVisitDetailId).HasColumnName("AuditVisitDetailID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CaseLogId).HasColumnName("CaseLogID");
            entity.Property(e => e.Comments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ContactHistoryId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ContactHistoryID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LocationAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.ScheduleDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.VisitLocation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VisitType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.AuditVisitDetails)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AuditVisitDetail_Case");

            entity.HasOne(d => d.CaseLog).WithMany(p => p.AuditVisitDetails)
                .HasForeignKey(d => d.CaseLogId)
                .HasConstraintName("FK_AuditVisitDetail_CaseLog");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.AuditVisitDetails)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_AuditVisitDetail_ServiceRequest");
        });

        modelBuilder.Entity<AutransferWaitList>(entity =>
        {
            entity.ToTable("AUTransferWaitList", "AAHR");

            entity.Property(e => e.AutransferWaitListId).HasColumnName("AUTransferWaitListID");
            entity.Property(e => e.AccessibilieWaitListDate).HasColumnType("datetime");
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.Autwlnumber)
                .HasMaxLength(20)
                .HasColumnName("AUTWLNumber");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentUnitProjectSiteId).HasColumnName("CurrentUnitProjectSiteID");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.DateRarmrequestPlacedOnRarmlog)
                .HasColumnType("datetime")
                .HasColumnName("DateRARMRequestPlacedOnRARMLog");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsPreviousAuwaitList).HasColumnName("IsPreviousAUWaitList");
            entity.Property(e => e.IsTenantRequestRarmpendingTransfer).HasColumnName("IsTenantRequestRARMPendingTransfer");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutReasonDeterminationNotProvidedSoonerId).HasColumnName("LutReasonDeterminationNotProvidedSoonerID");
            entity.Property(e => e.LutReasonTenantNotTransferredSoonerId).HasColumnName("LutReasonTenantNotTransferredSoonerID");
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.LutTransferWaitListReasonId).HasColumnName("LutTransferWaitListReasonID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MoveInProjectSiteId).HasColumnName("MoveInProjectSiteID");
            entity.Property(e => e.MoveInUnitPropSnapShotId).HasColumnName("MoveInUnitPropSnapShotID");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.ReasonDate).HasColumnType("datetime");
            entity.Property(e => e.TransferRequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.CurrentUnitProjectSite).WithMany(p => p.AutransferWaitListCurrentUnitProjectSites)
                .HasForeignKey(d => d.CurrentUnitProjectSiteId)
                .HasConstraintName("FK_AUTransferWaitList_ProjectSite1");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.AutransferWaitListCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotId)
                .HasConstraintName("FK_AUTransferWaitList_PropSnapshot");

            entity.HasOne(d => d.LutReasonDeterminationNotProvidedSooner).WithMany(p => p.AutransferWaitLists)
                .HasForeignKey(d => d.LutReasonDeterminationNotProvidedSoonerId)
                .HasConstraintName("FK_AUTransferWaitList_LutReasonDeterminationNotProvidedSooner");

            entity.HasOne(d => d.LutReasonTenantNotTransferredSooner).WithMany(p => p.AutransferWaitLists)
                .HasForeignKey(d => d.LutReasonTenantNotTransferredSoonerId)
                .HasConstraintName("FK_AUTransferWaitList_LutReasonTenantNotTransferredSooner");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.AutransferWaitLists)
                .HasForeignKey(d => d.LutTotalBathroomId)
                .HasConstraintName("FK_AUTransferWaitList_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.AutransferWaitLists)
                .HasForeignKey(d => d.LutTotalBedroomId)
                .HasConstraintName("FK_AUTransferWaitList_LutTotalBedrooms");

            entity.HasOne(d => d.LutTransferWaitListReason).WithMany(p => p.AutransferWaitLists)
                .HasForeignKey(d => d.LutTransferWaitListReasonId)
                .HasConstraintName("FK_AUTransferWaitList_LutTransferWaitListReason");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.AutransferWaitLists)
                .HasForeignKey(d => d.LutUnitTypeId)
                .HasConstraintName("FK_AUTransferWaitList_QRLutUnitType");

            entity.HasOne(d => d.MoveInProjectSite).WithMany(p => p.AutransferWaitListMoveInProjectSites)
                .HasForeignKey(d => d.MoveInProjectSiteId)
                .HasConstraintName("FK_AUTransferWaitList_ProjectSite");

            entity.HasOne(d => d.MoveInUnitPropSnapShot).WithMany(p => p.AutransferWaitListMoveInUnitPropSnapShots)
                .HasForeignKey(d => d.MoveInUnitPropSnapShotId)
                .HasConstraintName("FK_AUTransferWaitList_MoveInPropSnapshot");
        });

        modelBuilder.Entity<AuwaitList>(entity =>
        {
            entity.ToTable("AUWaitList", "AAHR", tb => tb.HasTrigger("trgAUWaitList"));

            entity.Property(e => e.AuwaitListId).HasColumnName("AUWaitListID");
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.ApplicantMovedUnit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDateTime).HasColumnType("datetime");
            entity.Property(e => e.AuwaitListNumber)
                .HasMaxLength(50)
                .HasColumnName("AUWaitListNumber");
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeclinedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeclinedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HrmapplicationId).HasColumnName("HRMApplicationID");
            entity.Property(e => e.IsTenantMadeRa).HasColumnName("IsTenantMadeRA");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutApplicationTypeId).HasColumnName("LutApplicationTypeID");
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MoveInUnitProjectSiteId).HasColumnName("MoveInUnitProjectSiteID");
            entity.Property(e => e.MoveInUnitPropSnapShotId).HasColumnName("MoveInUnitPropSnapShotID");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.NatureOfRarequests)
                .IsUnicode(false)
                .HasColumnName("NatureOfRARequests");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.TenantAutransferDate)
                .HasColumnType("datetime")
                .HasColumnName("TenantAUTransferDate");
            entity.Property(e => e.TenantMadeRadate)
                .HasColumnType("datetime")
                .HasColumnName("TenantMadeRADate");
            entity.Property(e => e.WaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Hrmapplication).WithMany(p => p.AuwaitLists)
                .HasForeignKey(d => d.HrmapplicationId)
                .HasConstraintName("FK_AUWaitList_HRMApplication");

            entity.HasOne(d => d.LutApplicationType).WithMany(p => p.AuwaitLists)
                .HasForeignKey(d => d.LutApplicationTypeId)
                .HasConstraintName("FK_AUWaitList_LutApplicationType");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.AuwaitLists)
                .HasForeignKey(d => d.LutTotalBathroomId)
                .HasConstraintName("FK_AUWaitList_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.AuwaitLists)
                .HasForeignKey(d => d.LutTotalBedroomId)
                .HasConstraintName("FK_AUWaitList_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.AuwaitLists)
                .HasForeignKey(d => d.LutUnitTypeId)
                .HasConstraintName("FK_AUWaitList_QRLutUnitType");

            entity.HasOne(d => d.MoveInUnitProjectSite).WithMany(p => p.AuwaitLists)
                .HasForeignKey(d => d.MoveInUnitProjectSiteId)
                .HasConstraintName("FK_AUWaitList_ProjectSite");

            entity.HasOne(d => d.MoveInUnitPropSnapShot).WithMany(p => p.AuwaitListMoveInUnitPropSnapShots)
                .HasForeignKey(d => d.MoveInUnitPropSnapShotId)
                .HasConstraintName("FK_AUWaitList_MoveInPropSnapshot");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.AuwaitListProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .HasConstraintName("FK_AUWaitList_PropSnapshot");
        });

        modelBuilder.Entity<AwardBidPackage>(entity =>
        {
            entity.ToTable("AwardBidPackage", "AAHPCC");

            entity.Property(e => e.AwardBidPackageId).HasColumnName("AwardBidPackageID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BidPackageId).HasColumnName("BidPackageID");
            entity.Property(e => e.Comments)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContractorUsername)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAward).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectCommencementDate).HasColumnType("datetime");

            entity.HasOne(d => d.BidPackage).WithMany(p => p.AwardBidPackages)
                .HasForeignKey(d => d.BidPackageId)
                .HasConstraintName("FK_AwardBidPackage_BidPackage");
        });

        modelBuilder.Entity<BackgroundCheck>(entity =>
        {
            entity.ToTable("BackgroundCheck", "AAHR");

            entity.Property(e => e.BackgroundCheckId).HasColumnName("BackgroundCheckID");
            entity.Property(e => e.Bgccomment)
                .HasMaxLength(500)
                .HasColumnName("BGCComment");
            entity.Property(e => e.BgcsentDate).HasColumnName("BGCSentDate");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DeveloperPropMgmt).HasMaxLength(500);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LutFollowUpTypeId).HasColumnName("LutFollowUpTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RequestorName).HasMaxLength(50);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.LutFollowUpType).WithMany(p => p.BackgroundChecks)
                .HasForeignKey(d => d.LutFollowUpTypeId)
                .HasConstraintName("FK_BackgroundCheck_LutFollowUpType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.BackgroundChecks)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BackgroundCheck_ServiceRequest");
        });

        modelBuilder.Entity<BackgroundCheckReport>(entity =>
        {
            entity.ToTable("BackgroundCheckReport", "AAHR");

            entity.Property(e => e.BackgroundCheckReportId).HasColumnName("BackgroundCheckReportID");
            entity.Property(e => e.AdoptionNcomplianceSelfCertification)
                .HasMaxLength(100)
                .HasColumnName("AdoptionNComplianceSelfCertification");
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.AssignedAnalyst).HasMaxLength(100);
            entity.Property(e => e.AssignedAnalystEmail).HasMaxLength(100);
            entity.Property(e => e.AssignedAnalystFullName).HasMaxLength(100);
            entity.Property(e => e.AssistanceAnimalRefundLog).HasMaxLength(100);
            entity.Property(e => e.BackgroundCheckId).HasColumnName("BackgroundCheckID");
            entity.Property(e => e.ConventionalUnitWaitingList).HasMaxLength(100);
            entity.Property(e => e.DeveloperPortfolio).HasMaxLength(500);
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HimsConstructionPercent).HasColumnName("HIMsConstructionPercent");
            entity.Property(e => e.IsOccupied).HasMaxLength(50);
            entity.Property(e => e.LastQuarterlyReport).HasMaxLength(100);
            entity.Property(e => e.Lfhtaadacoordinator)
                .HasMaxLength(100)
                .HasColumnName("LFHTAADACoordinator");
            entity.Property(e => e.LfhtagrievanceCoordinator)
                .HasMaxLength(100)
                .HasColumnName("LFHTAGrievanceCoordinator");
            entity.Property(e => e.Lfhtaowner)
                .HasMaxLength(100)
                .HasColumnName("LFHTAOwner");
            entity.Property(e => e.LfhtapropertyManager)
                .HasMaxLength(100)
                .HasColumnName("LFHTAPropertyManager");
            entity.Property(e => e.LfhtaregionalManager)
                .HasMaxLength(100)
                .HasColumnName("LFHTARegionalManager");
            entity.Property(e => e.PolicyComplianceReviewDate).HasMaxLength(100);
            entity.Property(e => e.PostingRequirements).HasMaxLength(100);
            entity.Property(e => e.PropMgmtCompany).HasMaxLength(500);
            entity.Property(e => e.PropertyManagementPlan).HasMaxLength(100);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.RegistryPropertyListing).HasMaxLength(100);
            entity.Property(e => e.RevisedPoliciesDistribution).HasMaxLength(100);
            entity.Property(e => e.Vcareceipt)
                .HasMaxLength(100)
                .HasColumnName("VCAReceipt");
            entity.Property(e => e.VcautilizationSurvey)
                .HasMaxLength(100)
                .HasColumnName("VCAUtilizationSurvey");

            entity.HasOne(d => d.BackgroundCheck).WithMany(p => p.BackgroundCheckReports)
                .HasForeignKey(d => d.BackgroundCheckId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BackgroundCheckReport_BackgroundCheck");
        });

        modelBuilder.Entity<BackupCase>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("backup_Case", "CMS");

            entity.Property(e => e.AssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("AssigneeID");
            entity.Property(e => e.AssigneeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AutoNextAction)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AutoStautsModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.CaseId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CaseID");
            entity.Property(e => e.CaseTypeId).HasColumnName("CaseTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Summary).HasMaxLength(500);
        });

        modelBuilder.Entity<BackupCaseLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("backup_CaseLog", "CMS");

            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CaseLogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CaseLogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FromState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastAssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("LastAssigneeID");
            entity.Property(e => e.LastAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NewAssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("NewAssigneeID");
            entity.Property(e => e.NewAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ToState)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BatchJob>(entity =>
        {
            entity.HasKey(e => e.BatchJobId).HasName("PkBatchJob");

            entity.ToTable("BatchJob", "AAHR");

            entity.HasIndex(e => e.RowId, "UcBatchJob_RowID").IsUnique();

            entity.Property(e => e.BatchJobId).HasColumnName("BatchJobID");
            entity.Property(e => e.BatchNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComputedColumnSql("(right(concat('0000000000',CONVERT([varchar](10),[BatchJobID])),(10)))", false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.LutBatchStatusId).HasColumnName("LutBatchStatusID");
            entity.Property(e => e.LutBatchTypeId).HasColumnName("LutBatchTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.OutputName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");

            entity.HasOne(d => d.LutBatchStatus).WithMany(p => p.BatchJobs)
                .HasForeignKey(d => d.LutBatchStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkBatchJob_LutBatchStatus");

            entity.HasOne(d => d.LutBatchType).WithMany(p => p.BatchJobs)
                .HasForeignKey(d => d.LutBatchTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkBatchJob_LutBatchType");
        });

        modelBuilder.Entity<BatchJobDetail>(entity =>
        {
            entity.HasKey(e => e.BatchJobDetailId).HasName("PkBatchJobDetail");

            entity.ToTable("BatchJobDetail", "AAHR", tb => tb.HasTrigger("trBatchJobDetailLog"));

            entity.HasIndex(e => e.RowId, "UcBatchJobDetail_RowID").IsUnique();

            entity.Property(e => e.BatchJobDetailId).HasColumnName("BatchJobDetailID");
            entity.Property(e => e.BatchJobId).HasColumnName("BatchJobID");
            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DocTemplateId).HasColumnName("DocTemplateID");
            entity.Property(e => e.DocumentEntityId).HasColumnName("DocumentEntityID");
            entity.Property(e => e.LutBatchStatusId).HasColumnName("LutBatchStatusID");
            entity.Property(e => e.MailToAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.MailToEmail).IsUnicode(false);
            entity.Property(e => e.MailToFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MailToLastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.NotificationLogsId).HasColumnName("NotificationLogsID");
            entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");
            entity.Property(e => e.OutputName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OwnerContactHistoryId).HasColumnName("OwnerContactHistoryID");
            entity.Property(e => e.PmcontactHistoryId).HasColumnName("PMContactHistoryID");
            entity.Property(e => e.ProjUniqueId).HasColumnName("ProjUniqueID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.RefKeyName1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyName2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyName3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue3)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");

            entity.HasOne(d => d.BatchJob).WithMany(p => p.BatchJobDetails)
                .HasForeignKey(d => d.BatchJobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkBatchJobDetail_BatchJob");

            entity.HasOne(d => d.LutBatchStatus).WithMany(p => p.BatchJobDetails)
                .HasForeignKey(d => d.LutBatchStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkBatchJobDetail_LutBatchStatus");

            entity.HasOne(d => d.NotificationLogs).WithMany(p => p.BatchJobDetails)
                .HasForeignKey(d => d.NotificationLogsId)
                .HasConstraintName("FK_BatchJobDetail_NotificationLogs");

            entity.HasOne(d => d.NotificationTemplate).WithMany(p => p.BatchJobDetails)
                .HasForeignKey(d => d.NotificationTemplateId)
                .HasConstraintName("FkBatchJobDetail_NotificationTemplate");
        });

        modelBuilder.Entity<BatchJobDetailLog>(entity =>
        {
            entity.HasKey(e => e.BatchJobDetailLogId).HasName("PkBatchJobDetailLog");

            entity.ToTable("BatchJobDetailLog", "AAHR");

            entity.HasIndex(e => e.RowId, "UcBatchJobDetailLog_RowID").IsUnique();

            entity.Property(e => e.BatchJobDetailLogId).HasColumnName("BatchJobDetailLogID");
            entity.Property(e => e.BatchJobDetailId).HasColumnName("BatchJobDetailID");
            entity.Property(e => e.BatchJobId).HasColumnName("BatchJobID");
            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocTemplateId).HasColumnName("DocTemplateID");
            entity.Property(e => e.DocumentEntityId).HasColumnName("DocumentEntityID");
            entity.Property(e => e.LogApp)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValueSql("(app_name())");
            entity.Property(e => e.LogBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.LogHost)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("(host_name())");
            entity.Property(e => e.LogOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutBatchStatusId).HasColumnName("LutBatchStatusID");
            entity.Property(e => e.MailToAddress)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.MailToEmail).IsUnicode(false);
            entity.Property(e => e.MailToFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MailToLastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.NotificationLogsId).HasColumnName("NotificationLogsID");
            entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");
            entity.Property(e => e.OutputName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OwnerContactHistoryId).HasColumnName("OwnerContactHistoryID");
            entity.Property(e => e.PmcontactHistoryId).HasColumnName("PMContactHistoryID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.RefKeyName1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyName2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefKeyValue2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<BidPackage>(entity =>
        {
            entity.ToTable("BidPackage", "AAHPCC");

            entity.Property(e => e.BidPackageId).HasColumnName("BidPackageID");
            entity.Property(e => e.BidPackageServiceRequestId).HasColumnName("BidPackageServiceRequestID");
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.ContactIdentifierId)
                .HasComment("Contact associated with Site Service Request")
                .HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EstimatedBond).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EstimatedContractTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EstimatedPermit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LutContractorTypeId).HasColumnName("LutContractorTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Overhead).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Rcsphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RCSPhone");
            entity.Property(e => e.Rcsusername)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RCSUsername");
            entity.Property(e => e.RetrofitScopeCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SiteCaseServiceRequestId).HasColumnName("SiteCaseServiceRequestID");
            entity.Property(e => e.TypeOfBuildingConstruction)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.BidPackageServiceRequest).WithMany(p => p.BidPackageBidPackageServiceRequests)
                .HasForeignKey(d => d.BidPackageServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BidPackage_ServiceRequest");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.BidPackages)
                .HasForeignKey(d => d.ContactIdentifierId)
                .HasConstraintName("FK_BidPackage_ContactIdentifier");

            entity.HasOne(d => d.LutContractorType).WithMany(p => p.BidPackages)
                .HasForeignKey(d => d.LutContractorTypeId)
                .HasConstraintName("FK_BidPackage_LutContractorType");

            entity.HasOne(d => d.SiteCaseServiceRequest).WithMany(p => p.BidPackageSiteCaseServiceRequests)
                .HasForeignKey(d => d.SiteCaseServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BidPackage_ServiceRequest1");
        });

        modelBuilder.Entity<CannedNote>(entity =>
        {
            entity.HasKey(e => e.CannedNoteId).HasName("PK_LutCannedNote");

            entity.ToTable("CannedNote", "IMS");

            entity.Property(e => e.CannedNoteId).HasColumnName("CannedNoteID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutViolationId).HasColumnName("LutViolationID");
            entity.Property(e => e.LutViolationLocationId).HasColumnName("LutViolationLocationID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Note).IsUnicode(false);

            entity.HasOne(d => d.LutViolation).WithMany(p => p.CannedNotes)
                .HasForeignKey(d => d.LutViolationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CannedNote_LutViolation");

            entity.HasOne(d => d.LutViolationLocation).WithMany(p => p.CannedNotes)
                .HasForeignKey(d => d.LutViolationLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CannedNote_LutViolationLocation");
        });

        modelBuilder.Entity<Capdetail>(entity =>
        {
            entity.HasKey(e => e.CapdetailsId);

            entity.ToTable("CAPDetails", "CAP");

            entity.Property(e => e.CapdetailsId).HasColumnName("CAPDetailsID");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.CapclosureDate)
                .HasColumnType("datetime")
                .HasColumnName("CAPClosureDate");
            entity.Property(e => e.CapcompliedDate)
                .HasColumnType("datetime")
                .HasColumnName("CAPCompliedDate");
            entity.Property(e => e.CapcurrentStatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CAPCurrentStatus");
            entity.Property(e => e.CapdueDate)
                .HasColumnType("datetime")
                .HasColumnName("CAPDueDate");
            entity.Property(e => e.CapissueDate)
                .HasColumnType("datetime")
                .HasColumnName("CAPIssueDate");
            entity.Property(e => e.CapreceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("CAPReceivedDate");
            entity.Property(e => e.CapsentDate)
                .HasColumnType("datetime")
                .HasColumnName("CAPSentDate");
            entity.Property(e => e.Capsummary)
                .IsUnicode(false)
                .HasColumnName("CAPSummary");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Iepanalyst)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IEPAnalyst");
            entity.Property(e => e.LutCapchecklistItemId).HasColumnName("LutCAPChecklistItemId");
            entity.Property(e => e.LutCapcloseReasonId).HasColumnName("LutCAPCloseReasonId");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OtherReason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Owner)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pm)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PM");
            entity.Property(e => e.PolicyAnalyst)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReportDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.LutCapchecklistItem).WithMany(p => p.Capdetails)
                .HasForeignKey(d => d.LutCapchecklistItemId)
                .HasConstraintName("FK_CAPDetails_LutCAPChecklistItem");

            entity.HasOne(d => d.LutCapcloseReason).WithMany(p => p.Capdetails)
                .HasForeignKey(d => d.LutCapcloseReasonId)
                .HasConstraintName("FK_CAPDetails_LutCAPCloseReason");

            entity.HasOne(d => d.LutWithdrawReason).WithMany(p => p.Capdetails)
                .HasForeignKey(d => d.LutWithdrawReasonId)
                .HasConstraintName("FK_CAPDetails_LutWithdrawReason");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Capdetails)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPDetails_ServiceRequest");
        });

        modelBuilder.Entity<Capextension>(entity =>
        {
            entity.ToTable("CAPExtension", "CAP");

            entity.Property(e => e.CapextensionId).HasColumnName("CAPExtensionID");
            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Capstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CAPStatus");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExtnEndDate).HasColumnType("datetime");
            entity.Property(e => e.ExtnStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrantDenyDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Reason).IsUnicode(false);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Capextensions)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPExtension_ServiceRequest");
        });

        modelBuilder.Entity<CapitemDetail>(entity =>
        {
            entity.HasKey(e => e.CapitemDetailsId);

            entity.ToTable("CAPItemDetails", "CAP");

            entity.Property(e => e.CapitemDetailsId).HasColumnName("CAPItemDetailsID");
            entity.Property(e => e.CapdetailsId).HasColumnName("CAPDetailsID");
            entity.Property(e => e.CheckListStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ComplianceRequirement).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutcaplanguageId).HasColumnName("LUTCAPLanguageID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RequiredCorrectiveAction).IsUnicode(false);

            entity.HasOne(d => d.Capdetails).WithMany(p => p.CapitemDetails)
                .HasForeignKey(d => d.CapdetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPItemDetails_CAPDetails");

            entity.HasOne(d => d.Lutcaplanguage).WithMany(p => p.CapitemDetails)
                .HasForeignKey(d => d.LutcaplanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPItemDetails_LUTCAPLanguage");
        });

        modelBuilder.Entity<Case>(entity =>
        {
            entity.ToTable("Case", "CMS", tb => tb.HasComment("Table holds cases."));

            entity.HasIndex(e => e.AssigneeId, "IDX_AssigneeId");

            entity.HasIndex(e => e.CaseTypeId, "NI_Case");

            entity.HasIndex(e => e.Status, "idx_Status");

            entity.Property(e => e.CaseId)
                .HasComment("Primary key of the table")
                .HasColumnName("CaseID");
            entity.Property(e => e.AssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("User ID from IDM.")
                .HasColumnName("AssigneeID");
            entity.Property(e => e.AssigneeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("User ID from IDM.");
            entity.Property(e => e.AutoNextAction)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AutoRemainingDays).HasComputedColumnSql("([AutoMaxStatusDays]-datediff(day,[AutoStautsModifiedOn],getdate()))", false);
            entity.Property(e => e.AutoStautsModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.CaseTypeId)
                .HasComment("Case Type Id")
                .HasColumnName("CaseTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("WorkLog Description");
            entity.Property(e => e.DueDays).HasComputedColumnSql("([MaxStatusDays]-datediff(day,[StatusModifiedOn],getdate()))", false);
            entity.Property(e => e.IsTask).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasComment("Status");
            entity.Property(e => e.Summary)
                .HasMaxLength(500)
                .HasComment("WorkLog Summary");

            entity.HasOne(d => d.CaseType).WithMany(p => p.Cases)
                .HasForeignKey(d => d.CaseTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Case_CaseType");

            entity.HasMany(d => d.Comments).WithMany(p => p.Cases)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnCaseComment",
                    r => r.HasOne<CaseComment>().WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCaseComment_CaseComment"),
                    l => l.HasOne<Case>().WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCaseComment_Case"),
                    j =>
                    {
                        j.HasKey("CaseId", "CommentId");
                        j.ToTable("AssnCaseComment", "CMS");
                    });
        });

        modelBuilder.Entity<CaseComment>(entity =>
        {
            entity.HasKey(e => e.CommentId);

            entity.ToTable("CaseComment", "CMS");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");

            entity.HasMany(d => d.CaseLogs).WithMany(p => p.Comments)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnCommentCaseLog",
                    r => r.HasOne<CaseLog>().WithMany()
                        .HasForeignKey("CaseLogId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCommentCaseLog_CaseLog"),
                    l => l.HasOne<CaseComment>().WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnCommentCaseLog_CaseComment"),
                    j =>
                    {
                        j.HasKey("CommentId", "CaseLogId");
                        j.ToTable("AssnCommentCaseLog", "CMS");
                        j.IndexerProperty<int>("CommentId").HasColumnName("CommentID");
                        j.IndexerProperty<int>("CaseLogId")
                            .HasComment("Primary key of the table")
                            .HasColumnName("CaseLogID");
                    });
        });

        modelBuilder.Entity<CaseLog>(entity =>
        {
            entity.ToTable("CaseLog", "CMS", tb =>
                {
                    tb.HasTrigger("trg_AutoLock");
                    tb.HasTrigger("trg_WorkFlowAction");
                });

            entity.Property(e => e.CaseLogId)
                .HasComment("Primary key of the table")
                .HasColumnName("CaseLogID");
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Action taken");
            entity.Property(e => e.CaseComment).HasComment("Comment by user");
            entity.Property(e => e.CaseId)
                .HasComment("Case Id")
                .HasColumnName("CaseID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.FromState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Previous State");
            entity.Property(e => e.LastAssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("Last Assignee Id")
                .HasColumnName("LastAssigneeID");
            entity.Property(e => e.LastAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Last Assignee Id");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.NewAssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("New Assignee Id")
                .HasColumnName("NewAssigneeID");
            entity.Property(e => e.NewAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("New Assignee Id");
            entity.Property(e => e.ToState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("New State");
            entity.Property(e => e.WorkLog).HasComment("WorkLog Created By");

            entity.HasOne(d => d.Case).WithMany(p => p.CaseLogs)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseLog_Case");
        });

        modelBuilder.Entity<CaseType>(entity =>
        {
            entity.ToTable("CaseType", "CMS");

            entity.HasIndex(e => e.Type, "IX_CaseType_Type");

            entity.Property(e => e.CaseTypeId)
                .HasComment("Primary key of the table")
                .HasColumnName("CaseTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Description");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete flag");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .HasComment("Type");
            entity.Property(e => e.WfDefinitionId)
                .HasComment("Work flow Definition")
                .HasColumnName("WfDefinitionID");

            entity.HasOne(d => d.WfDefinition).WithMany(p => p.CaseTypes)
                .HasForeignKey(d => d.WfDefinitionId)
                .HasConstraintName("FK_CaseType_WF_Definition");
        });

        modelBuilder.Entity<CaseWatcher>(entity =>
        {
            entity.HasKey(e => new { e.CaseId, e.WatcherId }).HasName("PK_CaseAssignee");

            entity.ToTable("CaseWatcher", "CMS");

            entity.Property(e => e.CaseId)
                .HasComment("Primary key of the table")
                .HasColumnName("CaseID");
            entity.Property(e => e.WatcherId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("User ID from IDM.")
                .HasColumnName("WatcherID");

            entity.HasOne(d => d.Case).WithMany(p => p.CaseWatchers)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CaseWatcher_Case");
        });

        modelBuilder.Entity<Ccdetail>(entity =>
        {
            entity.HasKey(e => e.CcdetailsId);

            entity.ToTable("CCDetails", "AAHPCC");

            entity.Property(e => e.CcdetailsId).HasColumnName("CCDetailsID");
            entity.Property(e => e.CloseReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateCityCertifiedCsa).HasColumnName("DateCityCertifiedCSA");
            entity.Property(e => e.DateCityCertifiedVca).HasColumnName("DateCityCertifiedVCA");
            entity.Property(e => e.DateNacissuedVerificationCsa).HasColumnName("DateNACIssuedVerificationCSA");
            entity.Property(e => e.DateNacissuedVerificationVca).HasColumnName("DateNACIssuedVerificationVCA");
            entity.Property(e => e.IsPmpavailable).HasColumnName("IsPMPAvailable");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NacInspectionReason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Ccdetails)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_CCDetails_ServiceRequest");
        });

        modelBuilder.Entity<Ccrisdiagram>(entity =>
        {
            entity.HasKey(e => e.DiagramId).HasName("PK__CCRISdia__C2B05B616636CBAC");

            entity.ToTable("CCRISdiagrams");

            entity.Property(e => e.DiagramId).HasColumnName("diagram_id");
            entity.Property(e => e.Definition).HasColumnName("definition");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.PrincipalId).HasColumnName("principal_id");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.CertificateId).HasName("PkCertificate");

            entity.ToTable("Certificate", "AAHR", tb => tb.HasComment("Keep policy certification issue and expiration information.  More certification will be add to this table when further development"));

            entity.HasIndex(e => e.RowId, "UcCertificate_RowID").IsUnique();

            entity.Property(e => e.CertificateId).HasColumnName("CertificateID");
            entity.Property(e => e.AchpProjectId).HasColumnName("AchpProjectID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CertificationNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.FirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LutCertificateTypeId).HasColumnName("LutCertificateTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Title).HasMaxLength(50);

            entity.HasOne(d => d.Case).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FkCertificate_CaseID");

            entity.HasOne(d => d.LutCertificateType).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.LutCertificateTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkCertificate_LutCertificateType");

            entity.HasOne(d => d.Organization).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FkCertificate_OrganizationID");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_Certificate_ServiceRequestID");
        });

        modelBuilder.Entity<CfgDocument>(entity =>
        {
            entity.ToTable("CfgDocument", "TMS", tb => tb.HasComment("TMS Document Config table"));

            entity.HasIndex(e => e.RowId, "UcCfgDocument_RowID").IsUnique();

            entity.Property(e => e.CfgDocumentId)
                .HasComment("Primary Key Identity column for the CfgDocument table")
                .HasColumnName("CfgDocumentID");
            entity.Property(e => e.CfgNextRunId)
                .HasComment("Running number configuration")
                .HasColumnName("CfgNextRunID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("TMS Document Name");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<CfgNextRun>(entity =>
        {
            entity.HasKey(e => e.CfgNextRunId).HasName("PkCfgNextRun");

            entity.ToTable("CfgNextRun", tb => tb.HasComment("Config table to control number generation in system."));

            entity.HasIndex(e => e.RowId, "UcCfgNextRun_RowID").IsUnique();

            entity.Property(e => e.CfgNextRunId)
                .HasComment("Primary Key Identity column for the CfgNextRun table")
                .HasColumnName("CfgNextRunID");
            entity.Property(e => e.ConcatString)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("formula for the generate result");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Description for this record");
            entity.Property(e => e.EndNum).HasComment("End range for the seq number end");
            entity.Property(e => e.LastNum).HasComment("last generate number the sequence");
            entity.Property(e => e.LastNumBeforeReset).HasComment("the number before resent the sequence");
            entity.Property(e => e.LastResetYymmdd)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("The date that the sequence reset")
                .HasColumnName("LastResetYYMMDD");
            entity.Property(e => e.MatchSubString)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("formula use for computer logic");
            entity.Property(e => e.NumLen).HasComment("len for the number, use for put leading Zero");
            entity.Property(e => e.Prefix)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Generate Number prefix");
            entity.Property(e => e.PrefixSubString)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("use for program logic the length for the pass in paramater");
            entity.Property(e => e.ResetCycle)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ResetSeq)
                .HasDefaultValue(false)
                .HasComment("if reset sequence, what will be the starting number");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in system")
                .HasColumnName("RowID");
            entity.Property(e => e.SeqField)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SeqName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("The name of the sequence number set being use");
            entity.Property(e => e.SeqTable)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SeqType).HasComment("Type of how generate seq number");
            entity.Property(e => e.SeqUid)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("SeqUID");
            entity.Property(e => e.StartNum).HasComment("Start range for the seq number start");
            entity.Property(e => e.Suffix)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Generate Number suffix");
            entity.Property(e => e.TargetField)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.ToTable("Comment", "CC");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Jsonattribute).HasColumnName("JSONAttribute");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Role).HasMaxLength(50);
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
        });

        modelBuilder.Entity<ContactIdentifier>(entity =>
        {
            entity.ToTable("ContactIdentifier", "PnC", tb =>
                {
                    tb.HasTrigger("trgContactNameChangeLog");
                    tb.HasTrigger("trg_ContactIdentifierLog");
                });

            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.AltContactReferenceId).HasColumnName("AltContactReferenceID");
            entity.Property(e => e.Apn)
                .HasMaxLength(50)
                .HasColumnName("apn");
            entity.Property(e => e.BusinessLicense).HasMaxLength(100);
            entity.Property(e => e.CensoredName).HasMaxLength(150);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email2).HasMaxLength(200);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(401)
                .HasComputedColumnSql("(((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([UnitNo]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([State]+' ',''))+isnull([City]+' ',''))+[Zip])", false);
            entity.Property(e => e.Hmisno).HasColumnName("HMISNo");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(50)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.IsclarityHmissystem).HasColumnName("ISClarityHMISSystem");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseValidFrom).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidTo).HasColumnType("datetime");
            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Phone_Ext");
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneFax).HasMaxLength(50);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.PictureMain).HasMaxLength(200);
            entity.Property(e => e.PictureThumbnail).HasMaxLength(200);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferredContactMethod).HasMaxLength(20);
            entity.Property(e => e.RefContactId).HasColumnName("RefContactID");
            entity.Property(e => e.Salutation).HasMaxLength(20);
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);

            entity.HasOne(d => d.LutPhoneTypeCdNavigation).WithMany(p => p.ContactIdentifiers)
                .HasForeignKey(d => d.LutPhoneTypeCd)
                .HasConstraintName("FK_ContactIdentifier_LutPhoneType");

            entity.HasOne(d => d.PostDirCdNavigation).WithMany(p => p.ContactIdentifiers)
                .HasForeignKey(d => d.PostDirCd)
                .HasConstraintName("FK_ContactIdentifier_LutStreetSuffix");

            entity.HasOne(d => d.PreDirCdNavigation).WithMany(p => p.ContactIdentifiers)
                .HasForeignKey(d => d.PreDirCd)
                .HasConstraintName("FK_ContactIdentifier_LutStreetPrefix");
        });

        modelBuilder.Entity<ContactIdentifierLog>(entity =>
        {
            entity.ToTable("ContactIdentifierLog", "PnC");

            entity.Property(e => e.ContactIdentifierLogId).HasColumnName("ContactIdentifierLogID");
            entity.Property(e => e.AltContactReferenceId).HasColumnName("AltContactReferenceID");
            entity.Property(e => e.Apn)
                .HasMaxLength(50)
                .HasColumnName("apn");
            entity.Property(e => e.BusinessLicense).HasMaxLength(100);
            entity.Property(e => e.CensoredName).HasMaxLength(150);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email2).HasMaxLength(200);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Hmisno).HasColumnName("HMISNo");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(50)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.IsclarityHmissystem).HasColumnName("ISClarityHMISSystem");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseValidFrom).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidTo).HasColumnType("datetime");
            entity.Property(e => e.LogCreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Phone_Ext");
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneFax).HasMaxLength(50);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.PictureMain).HasMaxLength(200);
            entity.Property(e => e.PictureThumbnail).HasMaxLength(200);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferredContactMethod).HasMaxLength(20);
            entity.Property(e => e.RefContactId).HasColumnName("RefContactID");
            entity.Property(e => e.Salutation).HasMaxLength(20);
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<ContactNameChangeLog>(entity =>
        {
            entity.ToTable("ContactNameChangeLog", "PnC");

            entity.Property(e => e.ContactNameChangeLogId).HasColumnName("ContactNameChangeLogID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.NewFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewLastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewMiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OldFirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OldLastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OldMiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.ContactNameChangeLogs)
                .HasForeignKey(d => d.ContactIdentifierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContactNameChangeLog_ContactIdentifier");
        });

        modelBuilder.Entity<ControlMaster>(entity =>
        {
            entity.ToTable("ControlMaster", "CC", tb => tb.HasComment("This table holds list of all the controls available in Common Control library. Any new control must be added to this table."));

            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Controller)
                .HasMaxLength(50)
                .HasComment("Name of MVC controller for this control. The name should match exactly as in code. This property will be used to call controller of this Control whereever needed.");
            entity.Property(e => e.Description).HasComment("Description of control");
            entity.Property(e => e.ManageAction)
                .HasMaxLength(50)
                .HasComment("Name of Action registered with controller which will return the top level manage/configuration view for this control.  The name should match exactly as in code.");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasComment("Name of control");
            entity.Property(e => e.NoConfigText)
                .HasMaxLength(500)
                .HasComment("Text message to be displayed if no display configuration is done.");
            entity.Property(e => e.RenderAction)
                .HasMaxLength(50)
                .HasComment("Name of Action registered with controller which will return the render view.  The name should match exactly as in code.");
        });

        modelBuilder.Entity<ControlViewMaster>(entity =>
        {
            entity.ToTable("ControlViewMaster", "CC", tb => tb.HasComment("This table holds information about different view configuration for all the controls. Every entry is an unique view which can be rendered on any tab."));

            entity.Property(e => e.Id).HasComment("Primary Key of the table.");
            entity.Property(e => e.Comments).HasMaxLength(500);
            entity.Property(e => e.ControlId).HasComment("Control ID connects to Control Master. ");
            entity.Property(e => e.DisplayName)
                .HasMaxLength(50)
                .HasComment("Name or title to be displayed during rendering of this control. If not specified, blank title will be displayed.");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasComment("This Name will be in sync with specific control's View Config Name. This is a redundnat field copied explicitly to make Tab & View Config assignment easy.");
            entity.Property(e => e.SpdetailDisplayConfigId).HasColumnName("SPDetailDisplayConfigId");
            entity.Property(e => e.SpgridDisplayConfigId).HasColumnName("SPGridDisplayConfigId");
            entity.Property(e => e.SpgroupDisplayConfigId).HasColumnName("SPGroupDisplayConfigId");
            entity.Property(e => e.SpmatrixDisplayConfigId).HasColumnName("SPMatrixDisplayConfigId");
            entity.Property(e => e.WflogDisplayConfigId).HasColumnName("WFLogDisplayConfigId");
            entity.Property(e => e.WfnavigationDisplayConfigId).HasColumnName("WFNavigationDisplayConfigId");
            entity.Property(e => e.WsdetailDisplayConfigId).HasColumnName("WSDetailDisplayConfigId");
            entity.Property(e => e.WsgridViewDisplayConfigId).HasColumnName("WSGridViewDisplayConfigId");

            entity.HasOne(d => d.Control).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.ControlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ControlViewMaster_ControlMaster");

            entity.HasOne(d => d.CustomDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.CustomDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_C_D");

            entity.HasOne(d => d.LinkDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.LinkDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_Links_DC");

            entity.HasOne(d => d.NewsDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.NewsDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_News_DC");

            entity.HasOne(d => d.SpdetailDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.SpdetailDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_SPDV_DC");

            entity.HasOne(d => d.SpgridDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.SpgridDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_SPGV_DC");

            entity.HasOne(d => d.SpgroupDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.SpgroupDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_SPGroupView_DisplayConfig");

            entity.HasOne(d => d.SpmatrixDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.SpmatrixDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_SPMV_DC");

            entity.HasOne(d => d.WflogDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.WflogDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_WFLog_DC");

            entity.HasOne(d => d.WfnavigationDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.WfnavigationDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_WFN_DC");

            entity.HasOne(d => d.WsdetailDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.WsdetailDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_WSDetailView_DisplayConfig");

            entity.HasOne(d => d.WsgridViewDisplayConfig).WithMany(p => p.ControlViewMasters)
                .HasForeignKey(d => d.WsgridViewDisplayConfigId)
                .HasConstraintName("FK_ControlViewMaster_WSGridView_DisplayConfig");
        });

        modelBuilder.Entity<CorrectionNote>(entity =>
        {
            entity.HasKey(e => e.CorrectionNotesId);

            entity.ToTable("CorrectionNotes", "AAHR");

            entity.Property(e => e.CorrectionNotesId).HasColumnName("CorrectionNotesID");
            entity.Property(e => e.CorrectionNote1).HasColumnName("CorrectionNote");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.IsAcHp).HasColumnName("IsAcHP");
            entity.Property(e => e.IsSubmittedByOpm).HasColumnName("IsSubmittedByOPM");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.Section)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.CorrectionNotes)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CorrectionNotes_PropSnapshot");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.CorrectionNotes)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_CorrectionNotes_ServiceRequest");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CourseId).HasName("PkCourse");

            entity.ToTable("Course", "TRN", tb => tb.HasComment("AcHP course for training"));

            entity.HasIndex(e => e.CourseCode, "UC_Course_CourseCode").IsUnique();

            entity.HasIndex(e => e.RowId, "UcCourse_RowID").IsUnique();

            entity.Property(e => e.CourseId)
                .HasComment("Primary Key Identity column for the Course table")
                .HasColumnName("CourseID");
            entity.Property(e => e.CourseCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("an unquie code for the course");
            entity.Property(e => e.CourseDetail)
                .IsUnicode(false)
                .HasComment("The detail about the course");
            entity.Property(e => e.CourseName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Course Name");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.EndActiveDate)
                .HasComment("the date retire the course")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.LutAudienceCd)
                .HasComment("From inital design , do not use.")
                .HasColumnName("LutAudienceCD");
            entity.Property(e => e.LutCourseTypeId).HasColumnName("LutCourseTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
            entity.Property(e => e.StartActiveDate)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Course start provide since")
                .HasColumnType("datetime");

            entity.HasOne(d => d.LutCourseType).WithMany(p => p.Courses)
                .HasForeignKey(d => d.LutCourseTypeId)
                .HasConstraintName("FK_Course_LutCourseType");
        });

        modelBuilder.Entity<CustomDisplayConfig>(entity =>
        {
            entity.ToTable("Custom_DisplayConfig", "CC");

            entity.Property(e => e.Action).HasMaxLength(50);
            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Controller).HasMaxLength(50);
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.Parameters).HasMaxLength(500);
        });

        modelBuilder.Entity<DocTemplate>(entity =>
        {
            entity.HasKey(e => e.DocTemplateId).HasName("PkDocTemplate");

            entity.ToTable("DocTemplate", "TMS", tb => tb.HasComment("TMS document word Template table"));

            entity.HasIndex(e => e.RowId, "UcDocTemplate_RowID").IsUnique();

            entity.Property(e => e.DocTemplateId)
                .HasComment("Primary Key Identity column for the DocTemplate table")
                .HasColumnName("DocTemplateID");
            entity.Property(e => e.CfgDocumentId)
                .HasComment("Type of TMS document")
                .HasColumnName("CfgDocumentID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.EffectiveDate)
                .HasDefaultValueSql("(getdate())")
                .HasComment("form effective date")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpireDate)
                .HasComment("form expire date")
                .HasColumnType("datetime");
            entity.Property(e => e.FlgDeleted).HasComment("delete flag");
            entity.Property(e => e.FormTemplate)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Uploaded MS Word template");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.ToTable("Document", "DMS");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DocumentTemplateId).HasColumnName("DocumentTemplateID");
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.FileSize).HasMaxLength(20);
            entity.Property(e => e.Link).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OtherDocumentType).HasMaxLength(200);
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");

            entity.HasOne(d => d.DocumentTemplate).WithMany(p => p.Documents)
                .HasForeignKey(d => d.DocumentTemplateId)
                .HasConstraintName("FK_Document_DocumentTemplate");
        });

        modelBuilder.Entity<DocumentEntity>(entity =>
        {
            entity.HasKey(e => e.DocumentEntityId).HasName("PkDocumentEntity");

            entity.ToTable("DocumentEntity", "TMS", tb => tb.HasComment("Generate document value (xml)"));

            entity.HasIndex(e => e.RowId, "UcDocumentEntity_RowID").IsUnique();

            entity.Property(e => e.DocumentEntityId)
                .HasComment("Primary Key Identity column for the DocumentEntity table")
                .HasColumnName("DocumentEntityID");
            entity.Property(e => e.CaseId)
                .HasComment("CMS Case ID if workflow applied")
                .HasColumnName("CaseID");
            entity.Property(e => e.CaseLogId).HasColumnName("CaseLogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.DocTemplateId)
                .HasComment("Template being use when generate the record")
                .HasColumnName("DocTemplateID");
            entity.Property(e => e.DocumentEntity1)
                .HasComment("add data for the docuemnt stored in xml")
                .HasColumnType("xml")
                .HasColumnName("DocumentEntity");
            entity.Property(e => e.DocumentNum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Document Number for the document");
            entity.Property(e => e.IsCurrent)
                .HasDefaultValue(true)
                .HasComment("1 = the latest version of document.  0 = old version");
            entity.Property(e => e.IsDeleted).HasComment("1 = the record mark as deleted");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");

            entity.HasOne(d => d.Case).WithMany(p => p.DocumentEntities)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FkDocumentEntity_Case");

            entity.HasOne(d => d.DocTemplate).WithMany(p => p.DocumentEntities)
                .HasForeignKey(d => d.DocTemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkDocTemplate_DocumentEntity");
        });

        modelBuilder.Entity<DocumentTemplate>(entity =>
        {
            entity.ToTable("DocumentTemplate", "DMS");

            entity.Property(e => e.DocumentTemplateId).HasColumnName("DocumentTemplateID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.ExpireDate).HasColumnType("datetime");
            entity.Property(e => e.LutTemplateId).HasColumnName("LutTemplateID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Tmsname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TMSName");

            entity.HasOne(d => d.LutTemplate).WithMany(p => p.DocumentTemplates)
                .HasForeignKey(d => d.LutTemplateId)
                .HasConstraintName("FK_DocumentTemplate_LutTemplate");
        });

        modelBuilder.Entity<DocumentsConfig>(entity =>
        {
            entity.ToTable("DocumentsConfig", "AAHR", tb => tb.HasComment("Documents config table"));

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DisplayName).IsUnicode(false);
            entity.Property(e => e.DivToRefresh).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsEditable).HasDefaultValue(true);
            entity.Property(e => e.IsObsolate).HasDefaultValue(false);
            entity.Property(e => e.IsUploadMultiple).HasDefaultValue(true);
            entity.Property(e => e.Name).IsUnicode(false);
        });

        modelBuilder.Entity<DrawRequest>(entity =>
        {
            entity.ToTable("DrawRequest", "AAHPCC");

            entity.Property(e => e.DrawRequestId).HasColumnName("DrawRequestID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BidPackageId).HasColumnName("BidPackageID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.BidPackage).WithMany(p => p.DrawRequests)
                .HasForeignKey(d => d.BidPackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DrawRequest_BidPackage1");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.DrawRequests)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DrawRequest_ServiceRequest");

            entity.HasMany(d => d.AssnScopeViolations).WithMany(p => p.DrawRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnDrawRequestScopeViolation",
                    r => r.HasOne<AssnScopeViolation>().WithMany()
                        .HasForeignKey("AssnScopeViolationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnDrawRequestAssnScopeViolation_AssnScopeViolation"),
                    l => l.HasOne<DrawRequest>().WithMany()
                        .HasForeignKey("DrawRequestId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnDrawRequestAssnScopeViolation_DrawRequest"),
                    j =>
                    {
                        j.HasKey("DrawRequestId", "AssnScopeViolationId");
                        j.ToTable("AssnDrawRequestScopeViolation", "AAHPCC");
                        j.IndexerProperty<int>("DrawRequestId").HasColumnName("DrawRequestID");
                        j.IndexerProperty<int>("AssnScopeViolationId").HasColumnName("AssnScopeViolationID");
                    });
        });

        modelBuilder.Entity<EffectiveCommunication>(entity =>
        {
            entity.HasKey(e => e.EffectiveCommunicationId).HasName("PK_EffectiveCommunication_1");

            entity.ToTable("EffectiveCommunication", "AAHR", tb => tb.HasTrigger("trgEffectiveCommunicationNumber"));

            entity.Property(e => e.EffectiveCommunicationId).HasColumnName("EffectiveCommunicationID");
            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfWithdrawal).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.EffectiveCommunicationNumber).HasMaxLength(50);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutDeterminationStatusId).HasColumnName("LutDeterminationStatusID");
            entity.Property(e => e.LutEcrequestTypeId).HasColumnName("LutECRequestTypeID");
            entity.Property(e => e.LutEctypeId).HasColumnName("LutECTypeID");
            entity.Property(e => e.LutLanguageId).HasColumnName("LutLanguageID");
            entity.Property(e => e.LutLanguageTranslationId).HasColumnName("LutLanguageTranslationID");
            entity.Property(e => e.LutUserTypeId).HasColumnName("LutUserTypeID");
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate1).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate2).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate3).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate4).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.UnitProjectSiteId).HasColumnName("UnitProjectSiteID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutDeterminationStatusId)
                .HasConstraintName("FK_EffectiveCommunication_LutDeterminationStatus");

            entity.HasOne(d => d.LutEcrequestType).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutEcrequestTypeId)
                .HasConstraintName("FK_EffectiveCommunication_LutECRequestType");

            entity.HasOne(d => d.LutEctype).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutEctypeId)
                .HasConstraintName("FK_EffectiveCommunication_LutECType");

            entity.HasOne(d => d.LutLanguage).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutLanguageId)
                .HasConstraintName("FK_EffectiveCommunication_LutLanguage");

            entity.HasOne(d => d.LutLanguageTranslation).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutLanguageTranslationId)
                .HasConstraintName("FK_EffectiveCommunication_LutLanguageTranslation");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.LutUserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EffectiveCommunication_LutUserType");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.UnitProjectSiteId)
                .HasConstraintName("FK_EffectiveCommunication_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.EffectiveCommunications)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_EffectiveCommunication_PropSnapshot");
        });

        modelBuilder.Entity<EmailLog>(entity =>
        {
            entity.ToTable("EmailLog", "AAHR");

            entity.Property(e => e.EmailLogId).HasColumnName("EmailLogID");
            entity.Property(e => e.AdditionalPhoneNo).HasMaxLength(50);
            entity.Property(e => e.CallerType).HasMaxLength(500);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.EmailerName).HasMaxLength(500);
            entity.Property(e => e.LutMailTypeId).HasColumnName("LutMailTypeID");
            entity.Property(e => e.LutOutcomeId).HasColumnName("LutOutcomeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherMailType).HasMaxLength(500);
            entity.Property(e => e.PhoneNo).HasMaxLength(50);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ResponderId).HasColumnName("ResponderID");

            entity.HasOne(d => d.LutMailType).WithMany(p => p.EmailLogs)
                .HasForeignKey(d => d.LutMailTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailLog_LutMailType");

            entity.HasOne(d => d.LutOutcome).WithMany(p => p.EmailLogs)
                .HasForeignKey(d => d.LutOutcomeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailLog_LutOutcome");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.EmailLogs)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_EmailLog_ProjectSite");
        });

        modelBuilder.Entity<EmailNotification>(entity =>
        {
            entity.ToTable("EmailNotification", "CC");

            entity.Property(e => e.EmailNotificationId).HasColumnName("EmailNotificationID");
            entity.Property(e => e.Action).HasMaxLength(1000);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierId).HasColumnName("IdentifierID");
            entity.Property(e => e.IsSendInstantly).HasDefaultValue(false);
            entity.Property(e => e.MailBcc).HasColumnName("MailBCC");
            entity.Property(e => e.MailCc).HasColumnName("MailCC");
            entity.Property(e => e.SentOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmailSyncLog>(entity =>
        {
            entity.ToTable("EmailSyncLog", "CC");

            entity.Property(e => e.EmailSyncLogId).HasColumnName("EmailSyncLogID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierId).HasColumnName("IdentifierID");
            entity.Property(e => e.IdentifierType).HasMaxLength(50);
            entity.Property(e => e.MailType).HasMaxLength(100);
        });

        modelBuilder.Entity<EnforcementMilestone>(entity =>
        {
            entity.HasKey(e => e.EnforcementMilestoneId).HasName("PK__Enforcem__50879D9A3F5B3B88");

            entity.ToTable("EnforcementMilestones", "ENF");

            entity.Property(e => e.EnforcementMilestoneId).HasColumnName("EnforcementMilestoneID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CommentsConcerningEnforcement).HasMaxLength(200);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DatePolicyCertificationReIssued).HasColumnName("DatePolicyCertificationRe-Issued");
            entity.Property(e => e.DeliveryConfirmationInformation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherCloseReason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Rcapcorrections)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RCAPCorrections");
            entity.Property(e => e.ResponsibleCityStaff)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubsequentActions)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.EnforcementMilestones)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FK__EnfMilestone__Case");

            entity.HasOne(d => d.LutCloseReason).WithMany(p => p.EnforcementMilestones)
                .HasForeignKey(d => d.LutCloseReasonId)
                .HasConstraintName("FK_EnforcementMilestones_LutCloseReason");
        });

        modelBuilder.Entity<EnforcementOrderReviewDetail>(entity =>
        {
            entity.HasKey(e => e.EnforcementOrderReviewDetailId).HasName("PK__Enforcem__053004A6FEB54B6C");

            entity.ToTable("EnforcementOrderReviewDetail", "ENF");

            entity.Property(e => e.EnforcementOrderReviewDetailId).HasColumnName("EnforcementOrderReviewDetailID");
            entity.Property(e => e.CapissuedDate).HasColumnName("CAPIssuedDate");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutTemplateId).HasColumnName("LutTemplateID");
            entity.Property(e => e.LutWithdrawReasonId).HasColumnName("LutWithdrawReasonID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrderToComplyObligation).IsUnicode(false);
            entity.Property(e => e.RecorderNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.LutTemplate).WithMany(p => p.EnforcementOrderReviewDetails)
                .HasForeignKey(d => d.LutTemplateId)
                .HasConstraintName("FK_EnforcementComplyOrderDetail_LutTemplate");

            entity.HasOne(d => d.LutWithdrawReason).WithMany(p => p.EnforcementOrderReviewDetails)
                .HasForeignKey(d => d.LutWithdrawReasonId)
                .HasConstraintName("FK__Enforceme__LutWi__5FC2E8D8");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.EnforcementOrderReviewDetails)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_EnforcementComplyOrderDetail_ServiceRequest");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK_Schedular");

            entity.ToTable("Event", "EMS");

            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EndOn).HasColumnType("datetime");
            entity.Property(e => e.EventLocation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ReferenceApn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ReferenceAPN");
            entity.Property(e => e.ReferenceId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ReferenceStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StartOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Summary)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EventAssignee>(entity =>
        {
            entity.HasKey(e => new { e.EventId, e.AssigneeName });

            entity.ToTable("EventAssignee", "EMS");

            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.AssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Event).WithMany(p => p.EventAssignees)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventAssignee_Event1");
        });

        modelBuilder.Entity<EventAssigneeHistory>(entity =>
        {
            entity.HasKey(e => new { e.EventHistoryId, e.AssigneeName });

            entity.ToTable("EventAssigneeHistory", "EMS");

            entity.Property(e => e.EventHistoryId).HasColumnName("EventHistoryID");
            entity.Property(e => e.AssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.EventHistory).WithMany(p => p.EventAssigneeHistories)
                .HasForeignKey(d => d.EventHistoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventAssigneeHistory_EventHistory");
        });

        modelBuilder.Entity<EventAttendee>(entity =>
        {
            entity.HasKey(e => new { e.EventId, e.AttendeeName }).HasName("PK_ScheduleAttendee");

            entity.ToTable("EventAttendee", "EMS");

            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.AttendeeName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Event).WithMany(p => p.EventAttendees)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventAttendee_Event");
        });

        modelBuilder.Entity<EventConfiguration>(entity =>
        {
            entity.ToTable("EventConfiguration", "EMS");

            entity.Property(e => e.ConfigType).HasMaxLength(200);
        });

        modelBuilder.Entity<EventHistory>(entity =>
        {
            entity.HasKey(e => e.EventHistoryId).HasName("PK_SchedularHistory");

            entity.ToTable("EventHistory", "EMS");

            entity.Property(e => e.EventHistoryId).HasColumnName("EventHistoryID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.EventEndOn).HasColumnType("datetime");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.EventStartOn).HasColumnType("datetime");
            entity.Property(e => e.EventStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Event).WithMany(p => p.EventHistories)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventHistory_Event");
        });

        modelBuilder.Entity<EventNote>(entity =>
        {
            entity.HasKey(e => e.EventNoteId).HasName("PK_ScheduleNote");

            entity.ToTable("EventNote", "EMS");

            entity.Property(e => e.EventNoteId).HasColumnName("EventNoteID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.NoteDescription).IsUnicode(false);

            entity.HasOne(d => d.Event).WithMany(p => p.EventNotes)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventNote_Event");
        });

        modelBuilder.Entity<EventReminder>(entity =>
        {
            entity.HasKey(e => e.EventReminderId).HasName("PK_ScheduleReminder");

            entity.ToTable("EventReminder", "EMS");

            entity.Property(e => e.EventReminderId).HasColumnName("EventReminderID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.LutEventReminderTypeId).HasColumnName("LutEventReminderTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationTemplateId).HasColumnName("NotificationTemplateID");
            entity.Property(e => e.ReminderTime).HasColumnType("datetime");

            entity.HasOne(d => d.Event).WithMany(p => p.EventReminders)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventReminder_Event");

            entity.HasOne(d => d.LutEventReminderType).WithMany(p => p.EventReminders)
                .HasForeignKey(d => d.LutEventReminderTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EventReminder_LutEventReminderType");
        });

        modelBuilder.Entity<ExistingRetrofitImportantDateMapping>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ExistingRetrofitImportantDateMapping", "AAHPCC");

            entity.Property(e => e.ExistingImportantDateId).HasColumnName("ExistingImportantDateID");
            entity.Property(e => e.RetrofitImportantDateId).HasColumnName("RetrofitImportantDateID");
        });

        modelBuilder.Entity<Extension>(entity =>
        {
            entity.HasKey(e => e.ExtensionId).HasName("PK_Extension_1");

            entity.ToTable("Extension");

            entity.Property(e => e.ExtensionId).HasColumnName("ExtensionID");
            entity.Property(e => e.ApprovedDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PreferredDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.Inspection).WithMany(p => p.Extensions)
                .HasForeignKey(d => d.InspectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Extension_Inspection");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Extensions)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Extension_ServiceRequest");
        });

        modelBuilder.Entity<FairHousing>(entity =>
        {
            entity.ToTable("FairHousing", "AAHR");

            entity.Property(e => e.FairHousingId).HasColumnName("FairHousingID");
            entity.Property(e => e.AccountNlinkPropertyDate).HasColumnName("AccountNLinkPropertyDate");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Fhorganization).HasColumnName("FHOrganization");
            entity.Property(e => e.IsAwareOfAnyFhac).HasColumnName("IsAwareOfAnyFHAC");
            entity.Property(e => e.IsOpmrequiredNewPropMgmtStaffToAttendAnnualFh).HasColumnName("IsOPMRequiredNewPropMgmtStaffToAttendAnnualFH");
            entity.Property(e => e.IsOpmrequiredNewPropMgmtStaffToCreateAahraccount).HasColumnName("IsOPMRequiredNewPropMgmtStaffToCreateAAHRAccount");
            entity.Property(e => e.LegalOwnerName).HasMaxLength(300);
            entity.Property(e => e.LutSignatureTitleId).HasColumnName("LutSignatureTitleID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherFhacfiledSource).HasColumnName("OtherFHACFiledSource");
            entity.Property(e => e.OwnerEmail).HasMaxLength(100);
            entity.Property(e => e.OwnerPhone).HasMaxLength(30);
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .HasColumnName("PMEmail");
            entity.Property(e => e.Pmname)
                .HasMaxLength(300)
                .HasColumnName("PMName");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(30)
                .HasColumnName("PMPhone");
            entity.Property(e => e.ProjectSitePropSnapShotId).HasColumnName("ProjectSitePropSnapShotID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.QrbeginDate).HasColumnName("QRBeginDate");
            entity.Property(e => e.QrendDate).HasColumnName("QREndDate");
            entity.Property(e => e.SignerName).HasMaxLength(300);
            entity.Property(e => e.TotalFullyAccessibleHvunit).HasColumnName("TotalFullyAccessibleHVUnit");
            entity.Property(e => e.TotalTenantsOccupiedAuwithoutNeed).HasColumnName("TotalTenantsOccupiedAUWithoutNeed");
            entity.Property(e => e.TotalVacantAuthisQuarter).HasColumnName("TotalVacantAUThisQuarter");

            entity.HasOne(d => d.LutSignatureTitle).WithMany(p => p.FairHousings)
                .HasForeignKey(d => d.LutSignatureTitleId)
                .HasConstraintName("FK_FairHousing_LutSignatureTitle");

            entity.HasOne(d => d.ProjectSitePropSnapShot).WithMany(p => p.FairHousings)
                .HasForeignKey(d => d.ProjectSitePropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FairHousing_PropSnapshot");
        });

        modelBuilder.Entity<FhpropertyAssociatedAccount>(entity =>
        {
            entity.HasKey(e => e.FhpropertyAssociatedAccountsId);

            entity.ToTable("FHPropertyAssociatedAccounts", "AAHR");

            entity.Property(e => e.FhpropertyAssociatedAccountsId)
                .ValueGeneratedNever()
                .HasColumnName("FHPropertyAssociatedAccountsID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FairHousingId).HasColumnName("FairHousingID");
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.NextEnrolledFhtrainingDate).HasColumnName("NextEnrolledFHTrainingDate");
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.ProjectSitePropSnapShotId).HasColumnName("ProjectSitePropSnapShotID");

            entity.HasOne(d => d.FairHousing).WithMany(p => p.FhpropertyAssociatedAccounts)
                .HasForeignKey(d => d.FairHousingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FHPropertyAssociatedAccounts_FairHousing");

            entity.HasOne(d => d.LutContactType).WithMany(p => p.FhpropertyAssociatedAccounts)
                .HasForeignKey(d => d.LutContactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FHPropertyAssociatedAccounts_LutContactType");

            entity.HasOne(d => d.ProjectSitePropSnapShot).WithMany(p => p.FhpropertyAssociatedAccounts)
                .HasForeignKey(d => d.ProjectSitePropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FHPropertyAssociatedAccounts_PropSnapshot");
        });

        modelBuilder.Entity<Field>(entity =>
        {
            entity.HasKey(e => e.FieldId).HasName("PK_DF_FieldMaster");

            entity.ToTable("Field", "DF");

            entity.Property(e => e.Calculation).IsUnicode(false);
            entity.Property(e => e.ConditionOnField).IsUnicode(false);
            entity.Property(e => e.ConditionalHideShowField).HasMaxLength(250);
            entity.Property(e => e.ConditionalHideShowOperator).HasMaxLength(100);
            entity.Property(e => e.ConditionalHideShowValue).HasMaxLength(100);
            entity.Property(e => e.ConditionalOperator)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConditionalValue).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DataTextField)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DataValueField)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.DependentOn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DependentSource)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FieldHtml).IsUnicode(false);
            entity.Property(e => e.FieldJson).HasColumnName("FieldJSON");
            entity.Property(e => e.FieldLabel)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FooterType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormSectionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HelpText).IsUnicode(false);
            entity.Property(e => e.InputDirection)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsJson).HasColumnName("IsJSON");
            entity.Property(e => e.LookupColumn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LookupTable)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MappingColumn)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MappingTable)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MatchColumn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.ParentStyle).IsUnicode(false);
            entity.Property(e => e.Pattern)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PatternType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Placeholder)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.RowId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ShowSessionValue).HasDefaultValue(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UniqueId).IsUnicode(false);

            entity.HasOne(d => d.Form).WithMany(p => p.Fields)
                .HasForeignKey(d => d.FormId)
                .HasConstraintName("FK_Field_Form");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_DF_Field_DF_Field");

            entity.HasOne(d => d.Reference).WithMany(p => p.InverseReference)
                .HasForeignKey(d => d.ReferenceId)
                .HasConstraintName("FK_DF_Field_DF_Field1");
        });

        modelBuilder.Entity<FloorPlanBathroomType>(entity =>
        {
            entity.HasKey(e => e.FloorPlanBathroomTypeId).HasName("PK__FloorPla__D1FE6BF6ADAC1FBD");

            entity.ToTable("FloorPlanBathroomType", "AAHR");

            entity.Property(e => e.FloorPlanBathroomTypeId).HasColumnName("FloorPlanBathroomTypeID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FloorPlanTypeId).HasColumnName("FloorPlanTypeID");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LutBathroomTypeId).HasColumnName("LutBathroomTypeID");
            entity.Property(e => e.LutBathroomTypeOptionId).HasColumnName("LutBathroomTypeOptionID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<FloorPlanType>(entity =>
        {
            entity.HasKey(e => e.FloorPlanTypeId).HasName("PK__FloorPla__30B449D2E44A4845");

            entity.ToTable("FloorPlanTypes", "AAHR");

            entity.Property(e => e.FloorPlanTypeId).HasColumnName("FloorPlanTypeID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropsnapShotId).HasColumnName("PropsnapShotID");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
        });

        modelBuilder.Entity<Folder>(entity =>
        {
            entity.ToTable("Folder", "DMS");

            entity.Property(e => e.Comment).HasMaxLength(255);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Form>(entity =>
        {
            entity.HasKey(e => e.FormId).HasName("PK_DF_FormMaster");

            entity.ToTable("Form", "DF");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FormName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FormType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GetApiUrl)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostApiUrl)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PredefinedPostColumn).IsUnicode(false);
            entity.Property(e => e.RedirectPage)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RowId).HasDefaultValueSql("(newid())");

            entity.HasOne(d => d.ApplicationMaster).WithMany(p => p.Forms)
                .HasForeignKey(d => d.ApplicationMasterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Form_ApplicationMaster");

            entity.HasOne(d => d.LutRelatedEntity).WithMany(p => p.Forms)
                .HasForeignKey(d => d.LutRelatedEntityId)
                .HasConstraintName("FK_Form_LutRelatedEntity");

            entity.HasMany(d => d.CaseTypes).WithMany(p => p.Forms)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnFormCaseType",
                    r => r.HasOne<CaseType>().WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnFormTypeCaseType_CaseType"),
                    l => l.HasOne<Form>().WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnFormCaseType_Form"),
                    j =>
                    {
                        j.HasKey("FormId", "CaseTypeId").HasName("PK_AssnFormTypeCaseType");
                        j.ToTable("AssnFormCaseType", "DF");
                    });
        });

        modelBuilder.Entity<FundingSource>(entity =>
        {
            entity.ToTable("FundingSource", "PnC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.FundingSourceName).HasMaxLength(100);
            entity.Property(e => e.HvUnit).HasColumnName("HV_Unit");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MuUnit).HasColumnName("MU_Unit");

            entity.HasOne(d => d.Document).WithMany(p => p.FundingSources)
                .HasForeignKey(d => d.DocumentId)
                .HasConstraintName("FK_FundingSource_Document");
        });

        modelBuilder.Entity<Grievance>(entity =>
        {
            entity.HasKey(e => e.GrievanceId).HasName("PkGrievance");

            entity.ToTable("Grievance", "GRV");

            entity.HasIndex(e => e.RowId, "UcGrievance_RowID").IsUnique();

            entity.Property(e => e.GrievanceId).HasColumnName("GrievanceID");
            entity.Property(e => e.AcHpemployeeId).HasColumnName("AcHPEmployeeID");
            entity.Property(e => e.AcHpemployeeName)
                .HasMaxLength(200)
                .HasColumnName("AcHPEmployeeName");
            entity.Property(e => e.AcHpemployeeUserName)
                .HasMaxLength(200)
                .HasColumnName("AcHPEmployeeUserName");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateOfDetermination).HasColumnType("datetime");
            entity.Property(e => e.FiledDatesCacivilRightsDept)
                .IsUnicode(false)
                .HasColumnName("FiledDatesCACivilRightsDept");
            entity.Property(e => e.FiledDatesCourt).IsUnicode(false);
            entity.Property(e => e.FiledDatesDeptOfFairEmplAndHousing).IsUnicode(false);
            entity.Property(e => e.FiledDatesFairHousingOrg).IsUnicode(false);
            entity.Property(e => e.FiledDatesHud)
                .IsUnicode(false)
                .HasColumnName("FiledDatesHUD");
            entity.Property(e => e.FiledDatesOther).IsUnicode(false);
            entity.Property(e => e.FiledDescOfOther).IsUnicode(false);
            entity.Property(e => e.FiledNameOfCourt).IsUnicode(false);
            entity.Property(e => e.FiledNameOfOrg).IsUnicode(false);
            entity.Property(e => e.GrievantAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressLutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("GrievantAddressLutPreDirCD");
            entity.Property(e => e.GrievantAddressLutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("GrievantAddressLutStateCD");
            entity.Property(e => e.GrievantAddressLutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("GrievantAddressLutStreetTypeCD");
            entity.Property(e => e.GrievantAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAltLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GrievantAltLutPhoneTypeCD");
            entity.Property(e => e.GrievantAltPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantLanguage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantPreferredContactMethodOther)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantPrimaryLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GrievantPrimaryLutPhoneTypeCD");
            entity.Property(e => e.GrievantPrimaryPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressLutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IncidentAddressLutPreDirCD");
            entity.Property(e => e.IncidentAddressLutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IncidentAddressLutStateCD");
            entity.Property(e => e.IncidentAddressLutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("IncidentAddressLutStreetTypeCD");
            entity.Property(e => e.IncidentAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsFiledWithCacivilRightsDept).HasColumnName("IsFiledWithCACivilRightsDept");
            entity.Property(e => e.IsFiledWithHud).HasColumnName("IsFiledWithHUD");
            entity.Property(e => e.IsGrievantAddressPobox).HasColumnName("IsGrievantAddressPOBox");
            entity.Property(e => e.IsGrievantPreferredContactTty).HasColumnName("IsGrievantPreferredContactTTY");
            entity.Property(e => e.IsGrievantPreferredContactUsmail).HasColumnName("IsGrievantPreferredContactUSMail");
            entity.Property(e => e.IsPreparerAddressPobox).HasColumnName("IsPreparerAddressPOBox");
            entity.Property(e => e.IsPreparerPreferredContactTty).HasColumnName("IsPreparerPreferredContactTTY");
            entity.Property(e => e.IsPreparerPreferredContactUsmail).HasColumnName("IsPreparerPreferredContactUSMail");
            entity.Property(e => e.IsUnknownRelatedGrievanceQrgrievanceLogId).HasColumnName("IsUnknownRelatedGrievanceQRGrievanceLogID");
            entity.Property(e => e.LutGrievanceDeterminationId).HasColumnName("LutGrievanceDeterminationID");
            entity.Property(e => e.LutGrievanceReferralAgencyId).HasColumnName("LutGrievanceReferralAgencyID");
            entity.Property(e => e.LutGrievanceSourceId).HasColumnName("LutGrievanceSourceID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PreparerAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressLutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PreparerAddressLutPreDirCD");
            entity.Property(e => e.PreparerAddressLutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PreparerAddressLutStateCD");
            entity.Property(e => e.PreparerAddressLutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("PreparerAddressLutStreetTypeCD");
            entity.Property(e => e.PreparerAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAltLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PreparerAltLutPhoneTypeCD");
            entity.Property(e => e.PreparerAltPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerPreferredContactMethodOther)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerPrimaryLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PreparerPrimaryLutPhoneTypeCD");
            entity.Property(e => e.PreparerPrimaryPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerRelationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.RelatedGrievanceFiledDate).HasColumnType("datetime");
            entity.Property(e => e.RelatedGrievanceQrgrievanceLogId)
                .IsUnicode(false)
                .HasColumnName("RelatedGrievanceQRGrievanceLogID");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.LutGrievanceDetermination).WithMany(p => p.Grievances)
                .HasForeignKey(d => d.LutGrievanceDeterminationId)
                .HasConstraintName("FK_Grievance_LutGrievanceDetermination");

            entity.HasOne(d => d.LutGrievanceReferralAgency).WithMany(p => p.GrievancesNavigation)
                .HasForeignKey(d => d.LutGrievanceReferralAgencyId)
                .HasConstraintName("FK_Grievance_LutGrievanceReferralAgency");

            entity.HasOne(d => d.LutGrievanceSource).WithMany(p => p.Grievances)
                .HasForeignKey(d => d.LutGrievanceSourceId)
                .HasConstraintName("FkGrievance_LutGrievanceSource");

            entity.HasMany(d => d.LutGrievanceReferralAgencies).WithMany(p => p.Grievances)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnGrievanceReferralAgency",
                    r => r.HasOne<LutGrievanceReferralAgency>().WithMany()
                        .HasForeignKey("LutGrievanceReferralAgencyId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnGrievanceReferralAgency_LutGrievanceReferralAgency"),
                    l => l.HasOne<Grievance>().WithMany()
                        .HasForeignKey("GrievanceId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnGrievanceReferralAgency_Grievance"),
                    j =>
                    {
                        j.HasKey("GrievanceId", "LutGrievanceReferralAgencyId").HasName("PK_GrievanceReferralAgency");
                        j.ToTable("AssnGrievanceReferralAgency", "GRV");
                        j.IndexerProperty<int>("GrievanceId").HasColumnName("GrievanceID");
                        j.IndexerProperty<int>("LutGrievanceReferralAgencyId").HasColumnName("LutGrievanceReferralAgencyID");
                    });
        });

        modelBuilder.Entity<GrievanceAppeal>(entity =>
        {
            entity.HasKey(e => e.GrievanceAppealId).HasName("PkGrievanceAppeal");

            entity.ToTable("GrievanceAppeal", "GRA");

            entity.HasIndex(e => e.RowId, "UcGrievanceAppeal_RowID").IsUnique();

            entity.Property(e => e.GrievanceAppealId).HasColumnName("GrievanceAppealID");
            entity.Property(e => e.AcHpemployeeId).HasColumnName("AcHPEmployeeID");
            entity.Property(e => e.AcHpemployeeName)
                .HasMaxLength(200)
                .HasColumnName("AcHPEmployeeName");
            entity.Property(e => e.AcHpemployeeUserName)
                .HasMaxLength(200)
                .HasColumnName("AcHPEmployeeUserName");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GrievantAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressLutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("GrievantAddressLutPreDirCD");
            entity.Property(e => e.GrievantAddressLutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("GrievantAddressLutStateCD");
            entity.Property(e => e.GrievantAddressLutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("GrievantAddressLutStreetTypeCD");
            entity.Property(e => e.GrievantAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.GrievantAltLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GrievantAltLutPhoneTypeCD");
            entity.Property(e => e.GrievantAltPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievantFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantLanguage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantPreferredContactMethodOther)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrievantPrimaryLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GrievantPrimaryLutPhoneTypeCD");
            entity.Property(e => e.GrievantPrimaryPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressLutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IncidentAddressLutPreDirCD");
            entity.Property(e => e.IncidentAddressLutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IncidentAddressLutStateCD");
            entity.Property(e => e.IncidentAddressLutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("IncidentAddressLutStreetTypeCD");
            entity.Property(e => e.IncidentAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IncidentAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IncidentLocationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsGrievanceAgainstLahd).HasColumnName("IsGrievanceAgainstLAHD");
            entity.Property(e => e.IsGrievanceAgainstOwnerPm).HasColumnName("IsGrievanceAgainstOwnerPM");
            entity.Property(e => e.IsGrievantAddressPobox).HasColumnName("IsGrievantAddressPOBox");
            entity.Property(e => e.IsGrievantPreferredContactTty).HasColumnName("IsGrievantPreferredContactTTY");
            entity.Property(e => e.IsGrievantPreferredContactUsmail).HasColumnName("IsGrievantPreferredContactUSMail");
            entity.Property(e => e.IsPreparerAddressPobox).HasColumnName("IsPreparerAddressPOBox");
            entity.Property(e => e.IsPreparerPreferredContactTty).HasColumnName("IsPreparerPreferredContactTTY");
            entity.Property(e => e.IsPreparerPreferredContactUsmail).HasColumnName("IsPreparerPreferredContactUSMail");
            entity.Property(e => e.LutGrievanceAppealSourceId).HasColumnName("LutGrievanceAppealSourceID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PreparerAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressLutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PreparerAddressLutPreDirCD");
            entity.Property(e => e.PreparerAddressLutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PreparerAddressLutStateCD");
            entity.Property(e => e.PreparerAddressLutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("PreparerAddressLutStreetTypeCD");
            entity.Property(e => e.PreparerAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PreparerAltLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PreparerAltLutPhoneTypeCD");
            entity.Property(e => e.PreparerAltPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreparerFirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerLastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerPreferredContactMethodOther)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerPrimaryLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PreparerPrimaryLutPhoneTypeCD");
            entity.Property(e => e.PreparerPrimaryPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreparerRelationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.LutGrievanceAppealSource).WithMany(p => p.GrievanceAppeals)
                .HasForeignKey(d => d.LutGrievanceAppealSourceId)
                .HasConstraintName("FkGrievanceAppeal_LutGrievanceAppealSource");

            entity.HasMany(d => d.LutGrievanceReferralAgencies).WithMany(p => p.GrievanceAppeals)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnGrievanceAppealReferralAgency",
                    r => r.HasOne<LutGrievanceReferralAgency>().WithMany()
                        .HasForeignKey("LutGrievanceReferralAgencyId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnGrievanceAppealReferralAgency_LutGrievanceReferralAgency"),
                    l => l.HasOne<GrievanceAppeal>().WithMany()
                        .HasForeignKey("GrievanceAppealId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnGrievanceAppealReferralAgency_GrievanceAppeal"),
                    j =>
                    {
                        j.HasKey("GrievanceAppealId", "LutGrievanceReferralAgencyId").HasName("PK_GrievanceAppealReferralAgency");
                        j.ToTable("AssnGrievanceAppealReferralAgency", "GRA");
                        j.IndexerProperty<int>("GrievanceAppealId").HasColumnName("GrievanceAppealID");
                        j.IndexerProperty<int>("LutGrievanceReferralAgencyId").HasColumnName("LutGrievanceReferralAgencyID");
                    });
        });

        modelBuilder.Entity<GrievanceLog>(entity =>
        {
            entity.ToTable("GrievanceLog", "AAHR", tb => tb.HasTrigger("trgGrievanceLogNumber"));

            entity.Property(e => e.GrievanceLogId).HasColumnName("GrievanceLogID");
            entity.Property(e => e.AnticipatedDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicantAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DecisionPendingDate).HasColumnType("datetime");
            entity.Property(e => e.DecisionProvidedDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDetail).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationName).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationPhone).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationTitleOther).IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceDetail).IsUnicode(false);
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.ImplementationDelayReason).IsUnicode(false);
            entity.Property(e => e.ImplementationInformation).IsUnicode(false);
            entity.Property(e => e.IsHcidlacompliantFiled).HasColumnName("IsHCIDLACompliantFiled");
            entity.Property(e => e.IsHudcompliantFiled).HasColumnName("IsHUDCompliantFiled");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutDeterminationStatusId).HasColumnName("LutDeterminationStatusID");
            entity.Property(e => e.LutDevelopmentCategoryId).HasColumnName("LutDevelopmentCategoryID");
            entity.Property(e => e.LutFinalDeterminationTitleId).HasColumnName("LutFinalDeterminationTitleID");
            entity.Property(e => e.LutGrievanceStatusId).HasColumnName("LutGrievanceStatusID");
            entity.Property(e => e.LutGrievanceSubmitTypeId).HasColumnName("LutGrievanceSubmitTypeID");
            entity.Property(e => e.LutUserTypeId).HasColumnName("LutUserTypeID");
            entity.Property(e => e.MeetingManagerName).IsUnicode(false);
            entity.Property(e => e.MeetingManagerTitle).IsUnicode(false);
            entity.Property(e => e.MeetingRequestDate).HasColumnType("datetime");
            entity.Property(e => e.MeetingScheduledDate).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PendingStatusDescription).IsUnicode(false);
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.RecordsProvidedDate).HasColumnType("datetime");
            entity.Property(e => e.RecordsRequestDate).HasColumnType("datetime");
            entity.Property(e => e.UnitProjectSiteId).HasColumnName("UnitProjectSiteID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalReason).IsUnicode(false);

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutDeterminationStatusId)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceDeterminationStatus");

            entity.HasOne(d => d.LutDevelopmentCategory).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutDevelopmentCategoryId)
                .HasConstraintName("FK_GrievanceLog_LutDevelopmentCategory");

            entity.HasOne(d => d.LutFinalDeterminationTitle).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutFinalDeterminationTitleId)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceDeterminationTitle");

            entity.HasOne(d => d.LutGrievanceStatus).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutGrievanceStatusId)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceStatus");

            entity.HasOne(d => d.LutGrievanceSubmitType).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutGrievanceSubmitTypeId)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceSubmitType");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.LutUserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrievanceLog_LutUserType");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.GrievanceLogProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .HasConstraintName("FK_GrievanceLog_PropSnapshot");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.GrievanceLogs)
                .HasForeignKey(d => d.UnitProjectSiteId)
                .HasConstraintName("FK_GrievanceLog_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.GrievanceLogUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_GrievanceLog_TenantPropSnapshot");
        });

        modelBuilder.Entity<GrievanceLog1>(entity =>
        {
            entity.HasKey(e => e.GrievanceLogId).HasName("PkGrievanceLog");

            entity.ToTable("GrievanceLog", "GRV");

            entity.Property(e => e.GrievanceLogId).HasColumnName("GrievanceLogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GrievanceId).HasColumnName("GrievanceID");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LogText).IsUnicode(false);
            entity.Property(e => e.LutGrievanceLogTypeId).HasColumnName("LutGrievanceLogTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Grievance).WithMany(p => p.GrievanceLog1s)
                .HasForeignKey(d => d.GrievanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrievanceLog_Grievance");

            entity.HasOne(d => d.LutGrievanceLogType).WithMany(p => p.GrievanceLog1s)
                .HasForeignKey(d => d.LutGrievanceLogTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrievanceLog_LutGrievanceLogTypeID");
        });

        modelBuilder.Entity<GrievanceType>(entity =>
        {
            entity.HasKey(e => e.GrievanceTypeId).HasName("PkGrievanceType");

            entity.ToTable("GrievanceType", "GRT");

            entity.HasIndex(e => e.RowId, "UcGrievanceType_RowID").IsUnique();

            entity.Property(e => e.GrievanceTypeId).HasColumnName("GrievanceTypeID");
            entity.Property(e => e.AssistanceAnimalNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EffectiveCommNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.EffectiveCommQrid)
                .IsUnicode(false)
                .HasColumnName("EffectiveCommQRID");
            entity.Property(e => e.EffectiveCommRequestDate).HasColumnType("datetime");
            entity.Property(e => e.EvictionNoticeDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceId).HasColumnName("GrievanceID");
            entity.Property(e => e.GrievantTypeOther).IsUnicode(false);
            entity.Property(e => e.HarasserAgentEmpDetails).IsUnicode(false);
            entity.Property(e => e.HarasserAgentEmpName).IsUnicode(false);
            entity.Property(e => e.HarasserAgentEmpTitle).IsUnicode(false);
            entity.Property(e => e.HarasserEmployeeDetails).IsUnicode(false);
            entity.Property(e => e.HarasserEmployeeName).IsUnicode(false);
            entity.Property(e => e.HarasserEmployeeTitle).IsUnicode(false);
            entity.Property(e => e.HarasserOtherDetails).IsUnicode(false);
            entity.Property(e => e.HarasserTenantDetails).IsUnicode(false);
            entity.Property(e => e.HarasserTenantName).IsUnicode(false);
            entity.Property(e => e.HarasserUnitNumber).IsUnicode(false);
            entity.Property(e => e.IsUnknownEffectiveCommQrid).HasColumnName("IsUnknownEffectiveCommQRID");
            entity.Property(e => e.IsUnknownReasonableAccmQrid).HasColumnName("IsUnknownReasonableAccmQRID");
            entity.Property(e => e.IsUnknownReasonableModfQrid).HasColumnName("IsUnknownReasonableModfQRID");
            entity.Property(e => e.LanguageAccessDetails).IsUnicode(false);
            entity.Property(e => e.LutGrievantTypeId).HasColumnName("LutGrievantTypeID");
            entity.Property(e => e.MaintenanceRelatedToDisabilityDetails).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NoiseTenantName).IsUnicode(false);
            entity.Property(e => e.NoiseUnitNumberOrCommonArea).IsUnicode(false);
            entity.Property(e => e.OtherBasisDetails).IsUnicode(false);
            entity.Property(e => e.PropertyDecisionDate).HasColumnType("datetime");
            entity.Property(e => e.PropertyFollowedProceduresDetails).IsUnicode(false);
            entity.Property(e => e.PropertyGrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.QrgrievanceLogDate)
                .HasColumnType("datetime")
                .HasColumnName("QRGrievanceLogDate");
            entity.Property(e => e.ReasonableAccmNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonableAccmOtherIssues).IsUnicode(false);
            entity.Property(e => e.ReasonableAccmQrid)
                .IsUnicode(false)
                .HasColumnName("ReasonableAccmQRID");
            entity.Property(e => e.ReasonableAccmRequestDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonableModfNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.ReasonableModfOtherIssues).IsUnicode(false);
            entity.Property(e => e.ReasonableModfQrid)
                .IsUnicode(false)
                .HasColumnName("ReasonableModfQRID");
            entity.Property(e => e.ReasonableModfRequestDate).HasColumnType("datetime");
            entity.Property(e => e.RentalAppNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.RentalAppSubmitDate).HasColumnType("datetime");
            entity.Property(e => e.RetrofitRelocationDetails).IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.WaitingLstNotifiedDenyDate).HasColumnType("datetime");
            entity.Property(e => e.WaitingLstRequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.Grievance).WithMany(p => p.GrievanceTypes)
                .HasForeignKey(d => d.GrievanceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrievanceType_Grievance");

            entity.HasOne(d => d.LutGrievantType).WithMany(p => p.GrievanceTypes)
                .HasForeignKey(d => d.LutGrievantTypeId)
                .HasConstraintName("FK_GrievanceType_LutGrievantType");
        });

        modelBuilder.Entity<HotlineCount>(entity =>
        {
            entity.HasKey(e => e.HotlineCountId).HasName("PK__HotlineC__513AFD3E1294F1D0");

            entity.ToTable("HotlineCount", "AAHR");

            entity.Property(e => e.HotlineCountId).HasColumnName("HotlineCountID");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Hrmapplication>(entity =>
        {
            entity.HasKey(e => e.HrmapplicationId).HasName("PkHRMApplication");

            entity.ToTable("HRMApplication", "AAHR", tb =>
                {
                    tb.HasTrigger("trgInsertAUWaitList");
                    tb.HasTrigger("trgUpdateAUWaitList");
                    tb.HasTrigger("trg_HRMApplicationLog");
                });

            entity.HasIndex(e => e.ApplicationNumber, "IX_HRMApplicationNumber").IsUnique();

            entity.Property(e => e.HrmapplicationId).HasColumnName("HRMApplicationID");
            entity.Property(e => e.AltArea)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AltLutPhoneTypeCD");
            entity.Property(e => e.AltPhone)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPrefix)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltTrunk)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CancelReasonId).HasColumnName("CancelReasonID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ConventionalWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(401)
                .HasComputedColumnSql("(((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([UnitNo]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([State]+' ',''))+isnull([City]+' ',''))+[Zip])", false);
            entity.Property(e => e.HacontactIndentifierId).HasColumnName("HAContactIndentifierId");
            entity.Property(e => e.Hmisnumber).HasColumnName("HMISNumber");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IncomeHousehold).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsDeclined).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ListingId).HasColumnName("ListingID");
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.LutTotalBathroomsId).HasColumnName("LutTotalBathroomsID");
            entity.Property(e => e.LutTotalBedroomsId).HasColumnName("LutTotalBedroomsID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferContactMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReasonableAccommodations).HasMaxLength(2000);
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.SubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnSubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WaitListDate).HasColumnType("datetime");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.HrmapplicationContactIdentifiers)
                .HasForeignKey(d => d.ContactIdentifierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMApplication_ContactIdentifier");

            entity.HasOne(d => d.HacontactIndentifier).WithMany(p => p.HrmapplicationHacontactIndentifiers)
                .HasForeignKey(d => d.HacontactIndentifierId)
                .HasConstraintName("FK_HRMApplication_HAContactIdentifier");

            entity.HasOne(d => d.Listing).WithMany(p => p.Hrmapplications)
                .HasForeignKey(d => d.ListingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMApplication_Listing");

            entity.HasOne(d => d.ListingSnap).WithMany(p => p.Hrmapplications)
                .HasForeignKey(d => d.ListingSnapId)
                .HasConstraintName("FK_HRMApplication_ListingSnap");

            entity.HasOne(d => d.LutContactType).WithMany(p => p.Hrmapplications)
                .HasForeignKey(d => d.LutContactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMApplication_LutContactType");

            entity.HasOne(d => d.LutTotalBathrooms).WithMany(p => p.Hrmapplications)
                .HasForeignKey(d => d.LutTotalBathroomsId)
                .HasConstraintName("FK_HRMApplication_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedrooms).WithMany(p => p.Hrmapplications)
                .HasForeignKey(d => d.LutTotalBedroomsId)
                .HasConstraintName("FK_HRMApplication_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.Hrmapplications)
                .HasForeignKey(d => d.LutUnitTypeId)
                .HasConstraintName("FK_HRMApplication_LutUnitType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Hrmapplications)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HRMApplication_ServiceRequest");
        });

        modelBuilder.Entity<HrmapplicationAdditionalQuestion>(entity =>
        {
            entity.HasKey(e => e.HrmapplicationAddQuestionId);

            entity.ToTable("HRMApplicationAdditionalQuestions", "AAHR");

            entity.Property(e => e.HrmapplicationAddQuestionId).HasColumnName("HRMApplicationAddQuestionId");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HrmapplicationId).HasColumnName("HRMApplicationId");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Hrmapplication).WithMany(p => p.HrmapplicationAdditionalQuestions)
                .HasForeignKey(d => d.HrmapplicationId)
                .HasConstraintName("FK_HRMApplicationAdditionalQuestions_HRMApplication");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.HrmapplicationAdditionalQuestions)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .HasConstraintName("FK_HRMApplicationAdditionalQuestions_ProjectSiteSnap");
        });

        modelBuilder.Entity<HrmapplicationLog>(entity =>
        {
            entity.ToTable("HRMApplicationLog", "AAHR");

            entity.Property(e => e.HrmapplicationLogId).HasColumnName("HRMApplicationLogID");
            entity.Property(e => e.AltArea)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AltLutPhoneTypeCD");
            entity.Property(e => e.AltPhone)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPrefix)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltTrunk)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CancelReasonId).HasColumnName("CancelReasonID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ConventionalWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(300)
                .HasComputedColumnSql("((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([State]+' ',''))+isnull([City]+' ',''))+[Zip])", false);
            entity.Property(e => e.HacontactIndentifierId).HasColumnName("HAContactIndentifierId");
            entity.Property(e => e.Hmisnumber).HasColumnName("HMISNumber");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.HrmapplicationId).HasColumnName("HRMApplicationID");
            entity.Property(e => e.IncomeHousehold).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IsDeclined).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ListingId).HasColumnName("ListingID");
            entity.Property(e => e.LogCreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.LutTotalBathroomsId).HasColumnName("LutTotalBathroomsID");
            entity.Property(e => e.LutTotalBedroomsId).HasColumnName("LutTotalBedroomsID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferContactMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReasonableAccommodations).HasMaxLength(2000);
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.SubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnSubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WaitListDate).HasColumnType("datetime");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ImpersonatedUserActivityDetail>(entity =>
        {
            entity.HasKey(e => e.ImpersonatedUserActivityDetailsId).HasName("PK__Imperson__F5B1B59AACAC505E");

            entity.ToTable("ImpersonatedUserActivityDetails", "IDM");

            entity.Property(e => e.Action).HasMaxLength(255);
            entity.Property(e => e.ActionName).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(255);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ImpersonatedUserName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(255);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProcedureName).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(255);
        });

        modelBuilder.Entity<ImpersonatedUserLoginDetail>(entity =>
        {
            entity.HasKey(e => e.ImpersonatedUserLoginDetailsId).HasName("PK__Imperson__13D979678D89A3C3");

            entity.ToTable("ImpersonatedUserLoginDetails", "IDM");

            entity.Property(e => e.CreatedBy).HasMaxLength(255);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ImpersonatedFromUserName).HasMaxLength(255);
            entity.Property(e => e.ImpersonatedUserLoginTime).HasColumnType("datetime");
            entity.Property(e => e.ImpersonatedUserLogoutTime).HasColumnType("datetime");
            entity.Property(e => e.ImpersonatedUserName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(255);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImportProject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ImportPr__3214EC27A4D12B26");

            entity.ToTable("ImportProject", "AAHPCC");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Attributes)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Cestype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CESType");
            entity.Property(e => e.City)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupImport)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.LutProjSourceCd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LutProjSourceCD");
            entity.Property(e => e.LutProjectFundId).HasColumnName("LutProjectFundID");
            entity.Property(e => e.LutProjectSiteStatusId).HasColumnName("LutProjectSiteStatusID");
            entity.Property(e => e.LutTypeofProjectId).HasColumnName("LutTypeofProjectID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Prefix)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("prefix");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.SettlementAddress).IsUnicode(false);
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .HasDefaultValue("ACHP");
            entity.Property(e => e.SourceRefId)
                .HasDefaultValue(0)
                .HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.YearEnd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ImportProject1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ImportPr__3214EC27A4D12B26");

            entity.ToTable("ImportProject");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Attributes)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Cestype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CESType");
            entity.Property(e => e.City)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupImport)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.LutProjSourceCd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LutProjSourceCD");
            entity.Property(e => e.LutProjectFundId).HasColumnName("LutProjectFundID");
            entity.Property(e => e.LutProjectSiteStatusId).HasColumnName("LutProjectSiteStatusID");
            entity.Property(e => e.LutTypeofProjectId).HasColumnName("LutTypeofProjectID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Neighborhood).HasMaxLength(500);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.Prefix)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("prefix");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Region).HasMaxLength(500);
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .HasDefaultValue("ACHP");
            entity.Property(e => e.SourceRefId)
                .HasDefaultValue(0)
                .HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ImportantDate>(entity =>
        {
            entity.ToTable("ImportantDate", "AAHPCC");

            entity.Property(e => e.ImportantDateId).HasColumnName("ImportantDateID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.LutImportantDateId).HasColumnName("LutImportantDateID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.LutImportantDate).WithMany(p => p.ImportantDates)
                .HasForeignKey(d => d.LutImportantDateId)
                .HasConstraintName("FK_ImportantDate_LutImportantDate");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.ImportantDates)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_ImportantDate_ServiceRequest");
        });

        modelBuilder.Entity<Inspection>(entity =>
        {
            entity.ToTable("Inspection", "IMS", tb => tb.HasComment("Table holds Inspections."));

            entity.HasIndex(e => e.MainInspectionId, "IX_Inspection_MainInspectionID");

            entity.HasIndex(e => e.ServiceRequestId, "IX_Inspection_ServiceRequestID_PropSnapshotID");

            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.InspectedEndOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedStartOn).HasColumnType("datetime");
            entity.Property(e => e.InspectionResult).HasMaxLength(100);
            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.LutInspectionTypeId).HasColumnName("LutInspectionTypeID");
            entity.Property(e => e.MainInspectionId).HasColumnName("MainInspectionID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");

            entity.HasOne(d => d.Location).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_Inspection_Location");

            entity.HasOne(d => d.LutInspectionType).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.LutInspectionTypeId)
                .HasConstraintName("FK_Inspection_LutInspectionType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.PropSnapshotId)
                .HasConstraintName("FK_Inspection_PropSnapshot");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Inspections)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Inspection_BrushCase");
        });

        modelBuilder.Entity<InspectionDetail>(entity =>
        {
            entity.ToTable("InspectionDetail");

            entity.Property(e => e.InspectionDetailId).HasColumnName("InspectionDetailID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedEndOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedStartOn).HasColumnType("datetime");
            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.InspectionResult).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
        });

        modelBuilder.Entity<InspectionHistory>(entity =>
        {
            entity.ToTable("InspectionHistory", "IMS", tb => tb.HasComment("Table holds Inspection Request History."));

            entity.Property(e => e.InspectionHistoryId).HasColumnName("InspectionHistoryID");
            entity.Property(e => e.CaseLogId).HasComment("Primary key of the table");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.InspectedEndOn).HasColumnType("datetime");
            entity.Property(e => e.InspectedStartOn).HasColumnType("datetime");
            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.LutCancelReasonId).HasColumnName("LutCancelReasonID");
            entity.Property(e => e.LutScheduleReasonId).HasColumnName("LutScheduleReasonID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.ScheduledEndOn).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStartOn).HasColumnType("datetime");

            entity.HasOne(d => d.Inspection).WithMany(p => p.InspectionHistories)
                .HasForeignKey(d => d.InspectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionHistory_Inspection");

            entity.HasOne(d => d.InspectionNavigation).WithMany(p => p.InspectionHistories)
                .HasForeignKey(d => d.InspectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionRequestHistory_InspectionRequest");
        });

        modelBuilder.Entity<InspectionNotification>(entity =>
        {
            entity.ToTable("InspectionNotification", "IMS", tb => tb.HasComment("Table holds Inspection Notification."));

            entity.Property(e => e.InspectionNotificationId).HasColumnName("InspectionNotificationID");
            entity.Property(e => e.AssignedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.InspectorUserName).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Inspection).WithMany(p => p.InspectionNotifications)
                .HasForeignKey(d => d.InspectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionNotification_Inspection");

            entity.HasOne(d => d.InspectionNavigation).WithMany(p => p.InspectionNotifications)
                .HasForeignKey(d => d.InspectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionNotification_InspectionRequest");
        });

        modelBuilder.Entity<InspectionScheduled>(entity =>
        {
            entity.HasKey(e => e.InspectionRequestId).HasName("PK_InspectionRequest");

            entity.ToTable("InspectionScheduled", "IMS", tb => tb.HasComment("Table holds Inspection Requests."));

            entity.Property(e => e.InspectionRequestId).HasColumnName("InspectionRequestID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutInspectionTypeId).HasColumnName("LutInspectionTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ScheduledEndOn).HasColumnType("datetime");
            entity.Property(e => e.ScheduledOn).HasColumnType("datetime");
            entity.Property(e => e.ScheduledStartOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");

            entity.HasOne(d => d.Case).WithMany(p => p.InspectionScheduleds)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionRequest_Case");

            entity.HasOne(d => d.LutInspectionType).WithMany(p => p.InspectionScheduleds)
                .HasForeignKey(d => d.LutInspectionTypeId)
                .HasConstraintName("FK_InspectionRequest_LutInspectionType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.InspectionScheduleds)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InspectionRequest_ServiceRequest");
        });

        modelBuilder.Entity<JsonConfigMaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__JsonConf__3214EC275B8B0454");

            entity.ToTable("JsonConfigMaster", "CC");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Category).HasMaxLength(100);
            entity.Property(e => e.Identifier).HasMaxLength(100);
        });

        modelBuilder.Entity<LacountyServicePlanningArea>(entity =>
        {
            entity.ToTable("LACountyServicePlanningArea", "AAHR");

            entity.Property(e => e.LacountyServicePlanningAreaId).HasColumnName("LACountyServicePlanningAreaID");
            entity.Property(e => e.Attribute).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GeoJsonCoordinates).IsUnicode(false);
            entity.Property(e => e.GeoJsonGeometryType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.ServiceArea)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Spa).HasColumnName("SPA");
            entity.Property(e => e.SpafullName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SPAFullName");
            entity.Property(e => e.Spaname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SPAName");
            entity.Property(e => e.Wkt)
                .IsUnicode(false)
                .HasColumnName("WKT");
            entity.Property(e => e.Year)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LaserviceArea2012>(entity =>
        {
            entity.HasKey(e => e.Objectid1).HasName("PK__LAServic__E458E6E755D2F753");

            entity.ToTable("LAServiceArea2012");

            entity.Property(e => e.Objectid1).HasColumnName("OBJECTID_1");
            entity.Property(e => e.Abbv)
                .HasMaxLength(5)
                .HasColumnName("ABBV");
            entity.Property(e => e.Label)
                .HasMaxLength(3)
                .HasColumnName("LABEL");
            entity.Property(e => e.Objectid).HasColumnName("OBJECTID");
            entity.Property(e => e.ShapeStare)
                .HasColumnType("numeric(18, 15)")
                .HasColumnName("ShapeSTAre");
            entity.Property(e => e.ShapeStlen)
                .HasColumnType("numeric(18, 15)")
                .HasColumnName("ShapeSTLen");
            entity.Property(e => e.Spa2012).HasColumnName("SPA_2012");
            entity.Property(e => e.SpaName)
                .HasMaxLength(15)
                .HasColumnName("SPA_NAME");
        });

        modelBuilder.Entity<Level>(entity =>
        {
            entity.HasKey(e => e.LevelId).HasName("PK_Floor");

            entity.ToTable("Level", "PnC");

            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Floor)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FloorType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefFloorId).HasColumnName("RefFloorID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Status).HasMaxLength(1);
            entity.Property(e => e.StructureId).HasColumnName("StructureID");

            entity.HasOne(d => d.Structure).WithMany(p => p.Levels)
                .HasForeignKey(d => d.StructureId)
                .HasConstraintName("FK_Level_Structure");
        });

        modelBuilder.Entity<LinksDisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DisplayConfiguration");

            entity.ToTable("Links_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.DisplayOption)
                .HasMaxLength(10)
                .HasComment("This filed is used to store how do you display active links.(Horizontal or Verticle)");
            entity.Property(e => e.ImageId).HasComment("This field is reference to Files table ImageID.");
            entity.Property(e => e.IsDisplayFavouriteLinks)
                .HasDefaultValue(false)
                .HasComment("This field is used to store if true then favorite links active. Links which is most clickable in this website.");
            entity.Property(e => e.IsDisplayIcon)
                .HasDefaultValue(false)
                .HasComment("This field is used to store display icon before link.");
            entity.Property(e => e.IsDisplaySameIcon)
                .HasDefaultValue(false)
                .HasComment("This field is used to store if true then icon type active. Use same or different icon for each link.");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.NoOfLinkToDisplay).HasComment("This field is used to store how many links you want to display.");

            entity.HasOne(d => d.Image).WithMany(p => p.LinksDisplayConfigs)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_Links_DisplayConfLImg");
        });

        modelBuilder.Entity<LinksImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Images");

            entity.ToTable("Links_Images", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.Height).HasComment("This field is used to store icon Image height.");
            entity.Property(e => e.ImageName)
                .HasMaxLength(50)
                .HasComment("This field is used to store icon Image name.");
            entity.Property(e => e.Width).HasComment("This field is used to store icon Image width.");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_Links_Images_Links_Images1");
        });

        modelBuilder.Entity<LinksLinkDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Links");

            entity.ToTable("Links_LinkDetails", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.Address).HasComment("This field is used to store Link address(Url).");
            entity.Property(e => e.ImageId).HasComment("This field is reference to Files table ImageID.");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasComment("This field is used for active or inactive the link.");
            entity.Property(e => e.IsLogEnabled)
                .HasDefaultValue(false)
                .HasComment("This field is used to store if true then keep logactivity of this link.");
            entity.Property(e => e.IsOpenNewWindow)
                .HasDefaultValue(true)
                .HasComment("This field is used to store if true then always open the link in new window.");
            entity.Property(e => e.IsTrackingEnabled)
                .HasDefaultValue(false)
                .HasComment("This field is used to store if true then track how many times hit the link.");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Parameter)
                .HasMaxLength(500)
                .HasComment("This field is used to store passed paramater string to Link Address.");
            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .HasComment("This filed is used to store Link type (Url or Page).");
            entity.Property(e => e.ViewOrder).HasComment("This field is used to store number representing the position in the list for this link.");

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.LinksLinkDetails)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Links_LinkDetails_Links_DC");

            entity.HasOne(d => d.Image).WithMany(p => p.LinksLinkDetails)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_Links_LinkDetails_LI");
        });

        modelBuilder.Entity<LinksLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_LinkLog");

            entity.ToTable("Links_Log", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.ClickDate)
                .HasComment("This field is used to store date and time when user click the link.")
                .HasColumnType("datetime");
            entity.Property(e => e.LinkTrackingId).HasComment("This field is reference to LinkTracking table LinkTrackingID");
            entity.Property(e => e.UserId).HasComment("This field is used to store userID, who was click the link. ");

            entity.HasOne(d => d.LinkTracking).WithMany(p => p.LinksLogs)
                .HasForeignKey(d => d.LinkTrackingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Links_Log_Links_Tracking1");
        });

        modelBuilder.Entity<LinksTracking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_LinkTracking");

            entity.ToTable("Links_Tracking", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.Clicks).HasComment("This field is used to store how many hits on this link.");
            entity.Property(e => e.LastClick)
                .HasComment("This field is used to store when this link hit at last time.")
                .HasColumnType("datetime");
            entity.Property(e => e.LinkDetailsId).HasComment("This field is reference to Links table LinkID.");

            entity.HasOne(d => d.LinkDetails).WithMany(p => p.LinksTrackings)
                .HasForeignKey(d => d.LinkDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Links_Tracking_Links_LD");
        });

        modelBuilder.Entity<Listing>(entity =>
        {
            entity.HasKey(e => e.ListingId).HasName("PK_Listing_1");

            entity.ToTable("Listing", "AAHR");

            entity.Property(e => e.ListingId).HasColumnName("ListingID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ListingTypeId).HasColumnName("ListingTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.ListingType).WithMany(p => p.Listings)
                .HasForeignKey(d => d.ListingTypeId)
                .HasConstraintName("FK_Listing_LutListingType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.Listings)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Listing_PropSnapshot");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Listings)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Listing_ServiceRequest1");
        });

        modelBuilder.Entity<ListingSnap>(entity =>
        {
            entity.HasKey(e => e.ListingSnapId).HasName("PK__ListingS__D89C159D8D0AFDFC");

            entity.ToTable("ListingSnap", "Listing");

            entity.Property(e => e.ListingSnapId).HasColumnName("ListingSnapID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ListingId).HasColumnName("ListingID");
            entity.Property(e => e.ListingTypeId).HasColumnName("ListingTypeID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.LocationId).HasName("PK_Room");

            entity.ToTable("Location", "PnC");

            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Description)
                .HasMaxLength(7500)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.Label)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LutLocationTypeId).HasColumnName("LutLocationTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");

            entity.HasOne(d => d.Apn).WithMany(p => p.Locations)
                .HasForeignKey(d => d.Apnid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Location_APN");

            entity.HasOne(d => d.Level).WithMany(p => p.Locations)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_Location_Level");

            entity.HasOne(d => d.LutLocationType).WithMany(p => p.Locations)
                .HasForeignKey(d => d.LutLocationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Location_LutLocationType");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.Locations)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_Location_ProjectSite");

            entity.HasOne(d => d.Structure).WithMany(p => p.Locations)
                .HasForeignKey(d => d.StructureId)
                .HasConstraintName("FK_Location_Structure");

            entity.HasOne(d => d.Unit).WithMany(p => p.Locations)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_Location_Unit");
        });

        modelBuilder.Entity<LookupMaster>(entity =>
        {
            entity.ToTable("LookupMaster", "CC");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.SchemaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasMany(d => d.Roles).WithMany(p => p.LookupMasters)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnLookupRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnLookupRole_RoleMaster"),
                    l => l.HasOne<LookupMaster>().WithMany()
                        .HasForeignKey("LookupMasterId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnLookupRole_LookupMaster"),
                    j =>
                    {
                        j.HasKey("LookupMasterId", "RoleId");
                        j.ToTable("AssnLookupRole", "CC");
                    });
        });

        modelBuilder.Entity<Lupbldg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("lupbldg");

            entity.Property(e => e.BldgClassShpTxt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.BldgDsgnTypCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.BldgSubPartNbr)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LupSysUserId)
                .HasMaxLength(8)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("LupSysUserID");
            entity.Property(e => e.LupTimestmp).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<LutAccessibilityComplianceStatus>(entity =>
        {
            entity.ToTable("LutAccessibilityComplianceStatus", "AAHR");

            entity.Property(e => e.AccessibilityComplianceStatus)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutAccessibleUnitFeature>(entity =>
        {
            entity.ToTable("LutAccessibleUnitFeature", "AAHR");

            entity.Property(e => e.LutAccessibleUnitFeatureId).HasColumnName("LutAccessibleUnitFeatureID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SpecialNoteRequired).HasDefaultValue(false);
        });

        modelBuilder.Entity<LutAccountTypeCategory>(entity =>
        {
            entity.HasKey(e => e.LutAccountTypeCategoryId).HasName("PkLutAccountTypeCategoryID");

            entity.ToTable("LutAccountTypeCategory", "TRN", tb => tb.HasComment("Account type category"));

            entity.HasIndex(e => e.RowId, "UcLutAccountTypeCategory_RowID").IsUnique();

            entity.Property(e => e.LutAccountTypeCategoryId)
                .ValueGeneratedNever()
                .HasComment("Primary Key Identity column for the LutAccountTypeCategory table")
                .HasColumnName("LutAccountTypeCategoryID");
            entity.Property(e => e.Category)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("short description for the recrod");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("long description for the record");
            entity.Property(e => e.IsDeleted).HasComment("1 = record mark as deleted");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<LutAffirmativeMarketingOutreach>(entity =>
        {
            entity.ToTable("LutAffirmativeMarketingOutreach", "AAHR");

            entity.Property(e => e.LutAffirmativeMarketingOutreachId).HasColumnName("LutAffirmativeMarketingOutreachID");
            entity.Property(e => e.ContactFirstName)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.ContactLastName)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Email)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.TypeOfResource)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<LutAhupscore>(entity =>
        {
            entity.HasKey(e => e.LutAhupscoreId).HasName("PK__LutAHUPS__D64FDF198B05ACC9");

            entity.ToTable("LutAHUPScore", "AAHR");

            entity.Property(e => e.LutAhupscoreId).HasColumnName("LutAHUPScoreID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutAltContactType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LutAltContactType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutAltContactTypeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("LutAltContactTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PreferContactType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutAmi>(entity =>
        {
            entity.ToTable("LutAMI", "PnC");

            entity.Property(e => e.LutAmiid).HasColumnName("LutAMIID");
            entity.Property(e => e.Ami)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AMI");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutApplicableAccessibilityStandard>(entity =>
        {
            entity.HasKey(e => e.LutApplicableAccessibilityStandardId).HasName("PK__tmp_ms_x__76866F9D4432C1F6");

            entity.ToTable("LutApplicableAccessibilityStandards", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Key)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutApplicationDeclineReason>(entity =>
        {
            entity.ToTable("LutApplicationDeclineReason", "AAHR");

            entity.Property(e => e.LutApplicationDeclineReasonId).HasColumnName("LutApplicationDeclineReasonID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeclineReason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutApplicationType>(entity =>
        {
            entity.ToTable("LutApplicationType", "AAHR");

            entity.Property(e => e.LutApplicationTypeId).HasColumnName("LutApplicationTypeID");
            entity.Property(e => e.ApplicationType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutAssociatedRole>(entity =>
        {
            entity.ToTable("LutAssociatedRole", "AAHR");

            entity.Property(e => e.LutAssociatedRoleId).HasColumnName("LutAssociatedRoleID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RoleName).HasMaxLength(50);
        });

        modelBuilder.Entity<LutBatchStatus>(entity =>
        {
            entity.HasKey(e => e.LutBatchStatusId).HasName("PkLutBatchStatus");

            entity.ToTable("LutBatchStatus", "AAHR");

            entity.HasIndex(e => e.RowId, "UcLutBatchStatus_RowID").IsUnique();

            entity.Property(e => e.LutBatchStatusId)
                .ValueGeneratedNever()
                .HasColumnName("LutBatchStatusID");
            entity.Property(e => e.BatchApp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BatchStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExternStateCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<LutBatchType>(entity =>
        {
            entity.ToTable("LutBatchType", "AAHR");

            entity.HasIndex(e => e.RowId, "UcLutBatchType_RowID").IsUnique();

            entity.Property(e => e.LutBatchTypeId).HasColumnName("LutBatchTypeID");
            entity.Property(e => e.BatchType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<LutBathroomType>(entity =>
        {
            entity.HasKey(e => e.LutBathroomTypeId).HasName("PK__LutBathr__7F8886E18BBD5ECC");

            entity.ToTable("LutBathroomType", "AAHR");

            entity.Property(e => e.LutBathroomTypeId).HasColumnName("LutBathroomTypeID");
            entity.Property(e => e.CreatedBy).HasMaxLength(200);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutBathroomTypeOption>(entity =>
        {
            entity.HasKey(e => e.LutBathroomTypeOptionId).HasName("PK__LutBathr__DF6D11E6509FA306");

            entity.ToTable("LutBathroomTypeOption", "AAHR");

            entity.Property(e => e.LutBathroomTypeOptionId).HasColumnName("LutBathroomTypeOptionID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutBuildingType>(entity =>
        {
            entity.HasKey(e => e.LutBuildingTypeId).HasName("PK__LutBuild__7D70217C2B385E5E");

            entity.ToTable("LutBuildingType", "AAHPCC");

            entity.Property(e => e.LutBuildingTypeId).HasColumnName("LutBuildingTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutCallType>(entity =>
        {
            entity.ToTable("LutCallType", "AAHR");

            entity.Property(e => e.LutCallTypeId).HasColumnName("LutCallTypeID");
            entity.Property(e => e.CallType).HasMaxLength(100);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutCapchecklistItem>(entity =>
        {
            entity.ToTable("LutCAPChecklistItem", "CAP");

            entity.Property(e => e.LutCapchecklistItemId).HasColumnName("LutCAPChecklistItemId");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObselete).HasDefaultValue(false);
            entity.Property(e => e.Item)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutCapchecklistSubItem>(entity =>
        {
            entity.ToTable("LutCAPChecklistSubItem", "CAP");

            entity.Property(e => e.LutCapchecklistSubItemId).HasColumnName("LutCAPChecklistSubItemId");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DmssubCategory)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DMSSubCategory");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObselete).HasDefaultValue(false);
            entity.Property(e => e.LutCapchecklistItemId).HasColumnName("LutCAPChecklistItemId");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SubItem).IsUnicode(false);

            entity.HasOne(d => d.LutCapchecklistItem).WithMany(p => p.LutCapchecklistSubItems)
                .HasForeignKey(d => d.LutCapchecklistItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutCAPChecklistSubItem_LutCAPChecklistItem");
        });

        modelBuilder.Entity<LutCapcloseReason>(entity =>
        {
            entity.HasKey(e => e.LutCapcloseReasonId).HasName("PK__LutCAPCl__B364CE538A9612F4");

            entity.ToTable("LutCAPCloseReason", "CAP");

            entity.Property(e => e.LutCapcloseReasonId).HasColumnName("LutCAPCloseReasonId");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutCaseReferralType>(entity =>
        {
            entity.ToTable("LutCaseReferralType", "CMS");

            entity.Property(e => e.LutCaseReferralTypeId).HasColumnName("LutCaseReferralTypeID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutCertificateType>(entity =>
        {
            entity.HasKey(e => e.LutCertificateTypeId).HasName("PkLutCertificateType");

            entity.ToTable("LutCertificateType", "AAHR", tb => tb.HasComment("Lookup table for the type of certification"));

            entity.HasIndex(e => e.RowId, "UcLutCertificateType_RowID").IsUnique();

            entity.Property(e => e.LutCertificateTypeId).HasColumnName("LutCertificateTypeID");
            entity.Property(e => e.Comment)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.ComplianceType)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<LutCestype>(entity =>
        {
            entity.ToTable("LutCESType", "PnC");

            entity.HasIndex(e => e.RowId, "UcLutCESType_RowID").IsUnique();

            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.Cestype)
                .HasMaxLength(500)
                .HasColumnName("CESType");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayText).HasMaxLength(500);
            entity.Property(e => e.DisplayTextPublic).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<LutChangeRole>(entity =>
        {
            entity.ToTable("LutChangeRole", "AAHR");

            entity.Property(e => e.LutChangeRoleId).HasColumnName("LutChangeRoleID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RoleName).HasMaxLength(50);
        });

        modelBuilder.Entity<LutCloseReason>(entity =>
        {
            entity.HasKey(e => e.LutCloseReasonId).HasName("PK__LutClose__C3CC72758F773CFF");

            entity.ToTable("LutCloseReason", "ENF");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutComplianceStatus>(entity =>
        {
            entity.ToTable("LutComplianceStatus", "IMS");

            entity.Property(e => e.LutComplianceStatusId).HasColumnName("LutComplianceStatusID");
            entity.Property(e => e.ComplianceStatus).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutConstructionType>(entity =>
        {
            entity.ToTable("LutConstructionType", "AAHR");

            entity.Property(e => e.LutConstructionTypeId).HasColumnName("LutConstructionTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolete).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutContactType>(entity =>
        {
            entity.ToTable("LutContactType", "PnC");

            entity.HasIndex(e => e.ContactType, "idx_ContactType");

            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.LutContactTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LutContactTypeCD");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutContractorType>(entity =>
        {
            entity.ToTable("LutContractorType", "AAHPCC");

            entity.Property(e => e.LutContractorTypeId)
                .ValueGeneratedNever()
                .HasColumnName("LutContractorTypeID");
            entity.Property(e => e.ContractorType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolete).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutCourseType>(entity =>
        {
            entity.HasKey(e => e.LutCourseTypeId).HasName("PK_TRN.LutCourseType");

            entity.ToTable("LutCourseType", "TRN");

            entity.Property(e => e.LutCourseTypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<LutDeniedConsentUserType>(entity =>
        {
            entity.ToTable("LutDeniedConsentUserType", "IMS");

            entity.Property(e => e.LutDeniedConsentUserTypeId).HasColumnName("LutDeniedConsentUserTypeID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutDepartment>(entity =>
        {
            entity.HasKey(e => e.LutDepartmentId).HasName("PK__LutDepar__38A7ED787641C970");

            entity.ToTable("LutDepartment", "AAHR");

            entity.Property(e => e.LutDepartmentId).HasColumnName("LutDepartmentID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDeterminationStatus>(entity =>
        {
            entity.ToTable("LutDeterminationStatus", "AAHR");

            entity.Property(e => e.LutDeterminationStatusId).HasColumnName("LutDeterminationStatusID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDevelopmentCategory>(entity =>
        {
            entity.ToTable("LutDevelopmentCategory", "AAHR");

            entity.Property(e => e.LutDevelopmentCategoryId).HasColumnName("LutDevelopmentCategoryID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DevelopmentCategory).HasMaxLength(100);
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDistance>(entity =>
        {
            entity.ToTable("LutDistance", "AAHR");

            entity.Property(e => e.LutDistanceId).HasColumnName("LutDistanceID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Distance)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDistanceType>(entity =>
        {
            entity.ToTable("LutDistanceType", "AAHR");

            entity.Property(e => e.LutDistanceTypeId).HasColumnName("LutDistanceTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DistanceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDocumentAttribute>(entity =>
        {
            entity.ToTable("LutDocumentAttribute", "DMS");

            entity.Property(e => e.AttributeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AttributeValue)
                .HasComment("Comma seperated possible value for the attribute")
                .HasColumnType("ntext");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutDocumentCategory>(entity =>
        {
            entity.HasKey(e => e.LutDocumentCategoryId).HasName("PkLutDocumentCategory");

            entity.ToTable("LutDocumentCategory", "DMS", tb => tb.HasComment("document category use for DMS"));

            entity.HasIndex(e => e.RowId, "UcLutDocumentCategory_RowID").IsUnique();

            entity.Property(e => e.LutDocumentCategoryId)
                .HasComment("Primary Key Identity column for the LutDocumentCategory table")
                .HasColumnName("LutDocumentCategoryID");
            entity.Property(e => e.AccessRole)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Main category for the document");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Description for the record");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.ReferenceKey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("the main key used for this main and sub category");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
            entity.Property(e => e.SubCategory)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("sub-cateogorty for the document");
        });

        modelBuilder.Entity<LutDocumentTag>(entity =>
        {
            entity.ToTable("LutDocumentTag", "DMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentTag)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocumentTagCd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutEapfeature>(entity =>
        {
            entity.ToTable("LutEAPFeature", "AAHR");

            entity.Property(e => e.LutEapfeatureId).HasColumnName("LutEAPFeatureID");
            entity.Property(e => e.CreatedBy).IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Eapfeature)
                .IsUnicode(false)
                .HasColumnName("EAPFeature");
            entity.Property(e => e.ModifiedBy).IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectType).IsUnicode(false);
            entity.Property(e => e.TableType).IsUnicode(false);
        });

        modelBuilder.Entity<LutEcrequestType>(entity =>
        {
            entity.ToTable("LutECRequestType", "AAHR");

            entity.Property(e => e.LutEcrequestTypeId).HasColumnName("LutECRequestTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EcrequestType)
                .HasMaxLength(100)
                .HasColumnName("ECRequestType");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutEctype>(entity =>
        {
            entity.ToTable("LutECType", "AAHR");

            entity.Property(e => e.LutEctypeId).HasColumnName("LutECTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Ectype)
                .HasMaxLength(1000)
                .HasColumnName("ECType");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LutEcrequestTypeId).HasColumnName("LutECRequestTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.LutEcrequestType).WithMany(p => p.LutEctypes)
                .HasForeignKey(d => d.LutEcrequestTypeId)
                .HasConstraintName("FK_LutECType_LutECRequestType");
        });

        modelBuilder.Entity<LutEventReminderType>(entity =>
        {
            entity.HasKey(e => e.LutEventReminderTypeId).HasName("PK_LutScheduleReminderType");

            entity.ToTable("LutEventReminderType", "EMS");

            entity.Property(e => e.LutEventReminderTypeId).HasColumnName("LutEventReminderTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.EventReminderType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutExternalGroup>(entity =>
        {
            entity.HasKey(e => e.LutExternalGroupId).HasName("PK__tmp_ms_x__974B8F4914FD13B7");

            entity.ToTable("LutExternalGroups", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutFeature>(entity =>
        {
            entity.HasKey(e => e.LutFeatureId).HasName("PK_LutListingFeature");

            entity.ToTable("LutFeature", "AAHR");

            entity.Property(e => e.LutFeatureId).HasColumnName("LutFeatureID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Feature)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FeatureArea)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutFhacfiledSource>(entity =>
        {
            entity.ToTable("LutFHACFiledSource", "AAHR");

            entity.Property(e => e.LutFhacfiledSourceId).HasColumnName("LutFHACFiledSourceID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FhacfiledSource)
                .HasMaxLength(100)
                .HasColumnName("FHACFiledSource");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutFhastandard>(entity =>
        {
            entity.HasKey(e => e.LutFhastandardId).HasName("PK__LutFHASt__D23A82ABD3EB1DB0");

            entity.ToTable("LutFHAStandards", "AAHR");

            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(300)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutFhatype>(entity =>
        {
            entity.HasKey(e => e.LutFhatypeId).HasName("PK__LutFHATy__A28421956386C05F");

            entity.ToTable("LutFHAType", "AAHR");

            entity.Property(e => e.LutFhatypeId).HasColumnName("LutFHATypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutFixedFloatingUnit>(entity =>
        {
            entity.ToTable("LutFixedFloatingUnit", "AAHR");

            entity.Property(e => e.LutFixedFloatingUnitId).HasColumnName("LutFixedFloatingUnitID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutFollowUpType>(entity =>
        {
            entity.ToTable("LutFollowUpType", "AAHR");

            entity.Property(e => e.LutFollowUpTypeId).HasColumnName("LutFollowUpTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FollowUpType).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGmcheckList>(entity =>
        {
            entity.ToTable("LutGMCheckList", "IMS");

            entity.Property(e => e.LutGmcheckListId).HasColumnName("LutGMCheckListID");
            entity.Property(e => e.ApplicationGuid).HasColumnName("ApplicationGUID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Question).IsUnicode(false);
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutGrievanceDetermination>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceDeterminationId).HasName("PK__LutGriev__EEAE9B02F0E29547");

            entity.ToTable("LutGrievanceDetermination", "GRV");

            entity.Property(e => e.LutGrievanceDeterminationId).HasColumnName("LutGrievanceDeterminationID");
            entity.Property(e => e.DeterminationStatus).IsUnicode(false);
        });

        modelBuilder.Entity<LutGrievanceDeterminationStatus>(entity =>
        {
            entity.ToTable("LutGrievanceDeterminationStatus", "AAHR");

            entity.Property(e => e.LutGrievanceDeterminationStatusId).HasColumnName("LutGrievanceDeterminationStatusID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceDeterminationTitle>(entity =>
        {
            entity.ToTable("LutGrievanceDeterminationTitle", "AAHR");

            entity.Property(e => e.LutGrievanceDeterminationTitleId).HasColumnName("LutGrievanceDeterminationTitleID");
            entity.Property(e => e.OptionText).IsUnicode(false);
        });

        modelBuilder.Entity<LutGrievanceLogType>(entity =>
        {
            entity.ToTable("LutGrievanceLogType", "GRV");

            entity.Property(e => e.LutGrievanceLogTypeId).HasColumnName("LutGrievanceLogTypeID");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
        });

        modelBuilder.Entity<LutGrievanceMilestone>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceMilestonesId).HasName("PK__LutGriev__EDC54478AD9D99A6");

            entity.ToTable("LutGrievanceMilestones", "GRV");

            entity.Property(e => e.LutGrievanceMilestonesId).HasColumnName("LutGrievanceMilestonesID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.MilestoneName).HasMaxLength(300);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceQuestion>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceQuestionId).HasName("PK__LutGriev__3CAF27A909824FE7");

            entity.ToTable("LutGrievanceQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldTypeValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Question)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Tooltip)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.LutGrievanceQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__LutGrieva__LutGr__1AA482DB");
        });

        modelBuilder.Entity<LutGrievanceReferralAgency>(entity =>
        {
            entity.ToTable("LutGrievanceReferralAgency", "GRV");

            entity.Property(e => e.LutGrievanceReferralAgencyId).HasColumnName("LutGrievanceReferralAgencyID");
            entity.Property(e => e.AgencyName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceSource>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceSourceId).HasName("PkLutGrievanceSource");

            entity.ToTable("LutGrievanceSource", "GRV");

            entity.Property(e => e.LutGrievanceSourceId).HasColumnName("LutGrievanceSourceID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceStatus>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceStatusId).HasName("PK_LutGrivenaceStatus");

            entity.ToTable("LutGrievanceStatus", "AAHR");

            entity.Property(e => e.LutGrievanceStatusId).HasColumnName("LutGrievanceStatusID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GrievanceStatus).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceSubQuestion>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceSubQuestionId).HasName("PK__LutGriev__7A750576E0640679");

            entity.ToTable("LutGrievanceSubQuestion", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DependantFieldJson).IsUnicode(false);
            entity.Property(e => e.FieldType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SubQuestion)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubQuestionHeader)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.LutGrievanceSubQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__LutGrieva__LutGr__1E7513BF");
        });

        modelBuilder.Entity<LutGrievanceSubmitType>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceSubmitTypeId).HasName("PK_LutGrivenaceSubmitType");

            entity.ToTable("LutGrievanceSubmitType", "AAHR");

            entity.Property(e => e.LutGrievanceSubmitTypeId).HasColumnName("LutGrievanceSubmitTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.GrievanceSubmitType).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievanceType>(entity =>
        {
            entity.HasKey(e => e.LutGrievanceTypeId).HasName("PK__LutGriev__E473A3F4105D95A5");

            entity.ToTable("LutGrievanceType", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.GrievanceType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutGrievantType>(entity =>
        {
            entity.HasKey(e => e.LutGrievantTypeId).HasName("PK__LutGrievantType");

            entity.ToTable("LutGrievantType", "GRT");

            entity.Property(e => e.LutGrievantTypeId).HasColumnName("LutGrievantTypeID");
            entity.Property(e => e.OptionText).IsUnicode(false);
        });

        modelBuilder.Entity<LutHousingType>(entity =>
        {
            entity.ToTable("LutHousingType", "AAHR");

            entity.Property(e => e.LutHousingTypeId).HasColumnName("LutHousingTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HousingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutHudfairHousingActDesignManual>(entity =>
        {
            entity.HasKey(e => e.LutHudfairHousingActDesignManualId).HasName("PK__LutHUDFa__9B4968CA54A85B43");

            entity.ToTable("LutHUDFairHousingActDesignManual", "AAHR");

            entity.Property(e => e.LutHudfairHousingActDesignManualId).HasColumnName("LutHUDFairHousingActDesignManualId");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutImportantDate>(entity =>
        {
            entity.ToTable("LutImportantDate", "AAHPCC");

            entity.Property(e => e.LutImportantDateId).HasColumnName("LutImportantDateID");
            entity.Property(e => e.ActionId).HasColumnName("ActionID");
            entity.Property(e => e.CaseTypeId).HasColumnName("CaseTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EventDisplayName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.EventName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Action).WithMany(p => p.LutImportantDates)
                .HasForeignKey(d => d.ActionId)
                .HasConstraintName("FK_LutImportantDate_WF_Action");

            entity.HasOne(d => d.CaseType).WithMany(p => p.LutImportantDates)
                .HasForeignKey(d => d.CaseTypeId)
                .HasConstraintName("FK_LutImportantDate_CaseType");
        });

        modelBuilder.Entity<LutInspectionStatus>(entity =>
        {
            entity.ToTable("LutInspectionStatus", "IMS");

            entity.Property(e => e.LutInspectionStatusId).HasColumnName("LutInspectionStatusID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.InspectionStatus).HasMaxLength(50);
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutInspectionType>(entity =>
        {
            entity.ToTable("LutInspectionType", "IMS", tb => tb.HasComment("Look up table for Inspection Type."));

            entity.Property(e => e.LutInspectionTypeId).HasColumnName("LutInspectionTypeID");
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LutLanguage>(entity =>
        {
            entity.HasKey(e => e.LutLanguageId).HasName("PK_Language");

            entity.ToTable("LutLanguage", "AAHR");

            entity.Property(e => e.LutLanguageId).HasColumnName("LutLanguageID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Language).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLanguageLine>(entity =>
        {
            entity.ToTable("LutLanguageLine", "AAHR");

            entity.Property(e => e.LutLanguageLineId).HasColumnName("LutLanguageLineID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LanguageLine).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLanguageTranslation>(entity =>
        {
            entity.HasKey(e => e.LutLanguageTranslationId).HasName("PK_LanguageTranslation");

            entity.ToTable("LutLanguageTranslation", "AAHR");

            entity.Property(e => e.LutLanguageTranslationId).HasColumnName("LutLanguageTranslationID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LanguageTranslation).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLcmdetermination>(entity =>
        {
            entity.HasKey(e => e.LutLcmdeterminationId).HasName("PK__LutLCMDe__951C165D87E24D43");

            entity.ToTable("LutLCMDeterminations", "AAHR");

            entity.Property(e => e.LutLcmdeterminationId).HasColumnName("LutLCMDeterminationId");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LcmdeterminationType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LCMDeterminationType");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLeaseAddendumNotExecuteReason>(entity =>
        {
            entity.ToTable("LutLeaseAddendumNotExecuteReason", "AAHR");

            entity.Property(e => e.LutLeaseAddendumNotExecuteReasonId).HasColumnName("LutLeaseAddendumNotExecuteReasonID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LeaseAddendumNotExecuteReason).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLegalEntityType>(entity =>
        {
            entity.HasKey(e => e.LutLegalEntityTypeId).HasName("PK_LegalEntityType");

            entity.ToTable("LutLegalEntityType", "AAHR");

            entity.Property(e => e.LutLegalEntityTypeId).HasColumnName("LutLegalEntityTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.LegalEntityType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutListingType>(entity =>
        {
            entity.ToTable("LutListingType", "AAHR");

            entity.Property(e => e.LutListingTypeId).HasColumnName("LutListingTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ListingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutLocationCategory>(entity =>
        {
            entity.HasKey(e => e.LutLocationCategoryId).HasName("PK_LutLocationViolationCategory");

            entity.ToTable("LutLocationCategory", "IMS");

            entity.Property(e => e.LutLocationCategoryId).HasColumnName("LutLocationCategoryID");
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutLocationType>(entity =>
        {
            entity.ToTable("LutLocationType", "PnC");

            entity.Property(e => e.LutLocationTypeId)
                .ValueGeneratedNever()
                .HasColumnName("LutLocationTypeID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutLotteryApplnAvailMethod>(entity =>
        {
            entity.ToTable("LutLotteryApplnAvailMethod", "AAHR");

            entity.Property(e => e.LutLotteryApplnAvailMethodId).HasColumnName("LutLotteryApplnAvailMethodID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SpecialNoteRequired).HasDefaultValue(false);
        });

        modelBuilder.Entity<LutLotterySubmitMethod>(entity =>
        {
            entity.ToTable("LutLotterySubmitMethod", "AAHR");

            entity.Property(e => e.LutLotterySubmitMethodId).HasColumnName("LutLotterySubmitMethodID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SpecialNoteRequired).HasDefaultValue(false);
        });

        modelBuilder.Entity<LutMailType>(entity =>
        {
            entity.ToTable("LutMailType", "AAHR");

            entity.Property(e => e.LutMailTypeId).HasColumnName("LutMailTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.MailType).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutMileageEntryType>(entity =>
        {
            entity.ToTable("LutMileageEntryType", "IMS");

            entity.Property(e => e.LutMileageEntryTypeId).HasColumnName("LutMileageEntryTypeID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutMultiSelectOption>(entity =>
        {
            entity.HasKey(e => e.LutMultiSelectOptionsId).HasName("PK__LutMultiSelectOptions");

            entity.ToTable("LutMultiSelectOptions", "GRT");

            entity.Property(e => e.LutMultiSelectOptionsId).HasColumnName("LutMultiSelectOptionsID");
            entity.Property(e => e.LutMultiSelectOptionsGroupId).HasColumnName("LutMultiSelectOptionsGroupID");
            entity.Property(e => e.OptionText).IsUnicode(false);

            entity.HasOne(d => d.LutMultiSelectOptionsGroup).WithMany(p => p.LutMultiSelectOptions)
                .HasForeignKey(d => d.LutMultiSelectOptionsGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LutMultiSelectOptions__LutMultiSelectOptionsGroupID");
        });

        modelBuilder.Entity<LutMultiSelectOptionsGroup>(entity =>
        {
            entity.HasKey(e => e.LutMultiSelectOptionsGroupId).HasName("PK__LutMultiSelectOptionsGroup");

            entity.ToTable("LutMultiSelectOptionsGroup", "GRT");

            entity.Property(e => e.LutMultiSelectOptionsGroupId).HasColumnName("LutMultiSelectOptionsGroupID");
            entity.Property(e => e.OptionGroupName).IsUnicode(false);
        });

        modelBuilder.Entity<LutNacrecommendation>(entity =>
        {
            entity.ToTable("LutNACRecommendation", "AAHR");

            entity.Property(e => e.LutNacrecommendationId).HasColumnName("LutNACRecommendationID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutNeighborhood>(entity =>
        {
            entity.HasKey(e => e.NeighborhoodId).HasName("PK_Neighborhood");

            entity.ToTable("LutNeighborhood", "AAHR");

            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.GeoJsonCoordinates).IsUnicode(false);
            entity.Property(e => e.GeoJsonGeometryType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParentNeighborhoodId).HasColumnName("ParentNeighborhoodID");
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Wkt)
                .IsUnicode(false)
                .HasColumnName("WKT");
        });

        modelBuilder.Entity<LutNeighborhoodCouncil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LutNeighborhoodCouncil", "AAHR");

            entity.Property(e => e.Coordinates)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("coordinates");
            entity.Property(e => e.EmpowerlaUrl)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FolderPath)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GeometryType)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LayerYearDescription)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(2)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NeighborhoodCouncilName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Wkt)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("WKT");
        });

        modelBuilder.Entity<LutNoticeType>(entity =>
        {
            entity.ToTable("LutNoticeType", "IMS");

            entity.Property(e => e.LutNoticeTypeId).HasColumnName("LutNoticeTypeID");
            entity.Property(e => e.Code).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<LutOccupancyReason>(entity =>
        {
            entity.ToTable("LutOccupancyReason", "AAHR");

            entity.Property(e => e.LutOccupancyReasonId).HasColumnName("LutOccupancyReasonID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OccupancyReason).HasMaxLength(50);
        });

        modelBuilder.Entity<LutOccupancyStatus>(entity =>
        {
            entity.HasKey(e => e.LutOccupancyStatusId).HasName("PK__LutOccup__A7FE2B2219469170");

            entity.ToTable("LutOccupancyStatus", "PnC");

            entity.Property(e => e.LutOccupancyStatusId).HasColumnName("LutOccupancyStatusID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutOutOfScopeType>(entity =>
        {
            entity.ToTable("LutOutOfScopeType", "IMS");

            entity.Property(e => e.LutOutOfScopeTypeId).HasColumnName("LutOutOfScopeTypeID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutOutcome>(entity =>
        {
            entity.ToTable("LutOutcome", "AAHR");

            entity.Property(e => e.LutOutcomeId).HasColumnName("LutOutcomeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Outcome).HasMaxLength(100);
        });

        modelBuilder.Entity<LutOutreachType>(entity =>
        {
            entity.HasKey(e => e.LutOutreachTypeId).HasName("PK__LutOutre__D07441DA91EEDF76");

            entity.ToTable("LutOutreachType", "AAHR");

            entity.Property(e => e.LutOutreachTypeId).HasColumnName("LutOutreachTypeID");
            entity.Property(e => e.CreatedBy).HasMaxLength(200);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutParkingType>(entity =>
        {
            entity.ToTable("LutParkingType", "AAHR");

            entity.Property(e => e.LutParkingTypeId).HasColumnName("LutParkingTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ParkingType)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutPhoneType>(entity =>
        {
            entity.HasKey(e => e.LutPhoneTypeCd);

            entity.ToTable("LutPhoneType", "AAHR");

            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutPhoneType1>(entity =>
        {
            entity.HasKey(e => e.LutPhoneTypeCd);

            entity.ToTable("LutPhoneType", "PnC");

            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutPmpprojType>(entity =>
        {
            entity.ToTable("LutPMPProjType", "AAHR");

            entity.Property(e => e.LutPmpprojTypeId).HasColumnName("LutPMPProjTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.SpecialNoteRequired).HasDefaultValue(false);
        });

        modelBuilder.Entity<LutPolicyReviewReportLanguage>(entity =>
        {
            entity.HasKey(e => e.LutReviewReportLanguageId).HasName("PK_LutPolicyReviewReport");

            entity.ToTable("LutPolicyReviewReportLanguage", "AAHPPC");

            entity.Property(e => e.LutReviewReportLanguageId).HasColumnName("LutReviewReportLanguageID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("system");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ReportLanguage).IsUnicode(false);
            entity.Property(e => e.ReviewReportItemId).HasColumnName("ReviewReportItemID");
            entity.Property(e => e.TemplateIdentifier).IsUnicode(false);

            entity.HasOne(d => d.ReviewReportItem).WithMany(p => p.LutPolicyReviewReportLanguages)
                .HasForeignKey(d => d.ReviewReportItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutPolicyReviewReportLanguage_LutReviewReportItem");
        });

        modelBuilder.Entity<LutPreDir>(entity =>
        {
            entity.HasKey(e => e.LutPreDirCd).HasName("PkLutPreDirCD");

            entity.ToTable("LutPreDir", "AAHR");

            entity.Property(e => e.LutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("LutPreDirCD");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutProgram>(entity =>
        {
            entity.HasKey(e => e.ProgramId);

            entity.ToTable("LutProgram", "IMS");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(150);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LutProgramCycle>(entity =>
        {
            entity.ToTable("LutProgramCycle", "IMS");

            entity.Property(e => e.LutProgramCycleId).HasColumnName("LutProgramCycleID");
            entity.Property(e => e.ApplicationGuid).HasColumnName("ApplicationGUID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LutProjSource>(entity =>
        {
            entity.HasKey(e => e.LutProjSourceCd).HasName("PkLutProjSource");

            entity.ToTable("LutProjSource", "PnC", tb => tb.HasComment("Lookup table for PnCProject.\r\nSourec of PnC Project"));

            entity.HasIndex(e => e.RowId, "UcLutProjSource_RowID").IsUnique();

            entity.Property(e => e.LutProjSourceCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Primary Key Identity column for the LutProjSource table.  A code represent source of PnC Project")
                .HasColumnName("LutProjSourceCD");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Description for LutProjSourceCD");
            entity.Property(e => e.Exhibit)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Exhibit from settlement agreement");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.LongCode)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("long form for the code");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderSeq).HasComment("Sequence for report sorting");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
            entity.Property(e => e.Saversion)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("The settlement agreement version number")
                .HasColumnName("SAVersion");
            entity.Property(e => e.ShortCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Short form for the code");
        });

        modelBuilder.Entity<LutProjectFund>(entity =>
        {
            entity.ToTable("LutProjectFund", "PnC");

            entity.Property(e => e.LutProjectFundId).HasColumnName("LutProjectFundID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FundCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FundDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsPrefix).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutProjectSiteQuestion>(entity =>
        {
            entity.HasKey(e => e.LutProjectSiteQuestionId).HasName("PK_LutListingQuestion");

            entity.ToTable("LutProjectSiteQuestion", "AAHR");

            entity.Property(e => e.LutProjectSiteQuestionId).HasColumnName("LutProjectSiteQuestionID");
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutProjectSiteStatus>(entity =>
        {
            entity.ToTable("LutProjectSiteStatus", "AAHR");

            entity.Property(e => e.LutProjectSiteStatusId)
                .HasComment("Primary Key Identity column for the Holiday table")
                .HasColumnName("LutProjectSiteStatusID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Description of status")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IsCoveredProperty).HasComment("1 = is covered property");
            entity.Property(e => e.IsDeleted).HasComment("1 = record mark as deleted");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<LutProjectSiteStatusDisplayName>(entity =>
        {
            entity.HasKey(e => e.LutProjectSiteStatusDisplayNameId).HasName("PK_PnC.ProjectSiteStatusDisplayName");

            entity.ToTable("LutProjectSiteStatusDisplayName", "PnC");

            entity.Property(e => e.LutProjectSiteStatusDisplayNameId).HasColumnName("LutProjectSiteStatusDisplayNameID");
            entity.Property(e => e.DisplayIconColor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DisplayName).IsUnicode(false);
            entity.Property(e => e.ProjectSiteStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutPropAttribute>(entity =>
        {
            entity.ToTable("LutPropAttribute", "PnC");

            entity.Property(e => e.LutPropAttributeId).HasColumnName("LutPropAttributeID");
            entity.Property(e => e.FlagType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<LutQrcertifyTerm>(entity =>
        {
            entity.HasKey(e => e.LutQrcertifyTermsId);

            entity.ToTable("LutQRCertifyTerms", "AAHR");

            entity.Property(e => e.LutQrcertifyTermsId).HasColumnName("LutQRCertifyTermsID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsAcceptMandatory).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsMandatory).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.QrcertifyTerms).HasColumnName("QRCertifyTerms");
        });

        modelBuilder.Entity<LutRacategory>(entity =>
        {
            entity.ToTable("LutRACategory", "AAHR");

            entity.Property(e => e.LutRacategoryId).HasColumnName("LutRACategoryID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LutRarequestTypeId).HasColumnName("LutRARequestTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Racategory).HasColumnName("RACategory");

            entity.HasOne(d => d.LutRarequestType).WithMany(p => p.LutRacategories)
                .HasForeignKey(d => d.LutRarequestTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutRACategory_LutRARequestType");
        });

        modelBuilder.Entity<LutRarequestType>(entity =>
        {
            entity.HasKey(e => e.LutRarequestTypeId).HasName("PK_AAHR.LutReasonableAccomondationRequestType");

            entity.ToTable("LutRARequestType", "AAHR");

            entity.Property(e => e.LutRarequestTypeId).HasColumnName("LutRARequestTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LutUserTypeId).HasColumnName("LutUserTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RarequestType)
                .HasMaxLength(100)
                .HasColumnName("RARequestType");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.LutRarequestTypes)
                .HasForeignKey(d => d.LutUserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutRARequestType_LutUserType");
        });

        modelBuilder.Entity<LutRasubCategory>(entity =>
        {
            entity.ToTable("LutRASubCategory", "AAHR");

            entity.Property(e => e.LutRasubCategoryId).HasColumnName("LutRASubCategoryID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LutRacategoryId).HasColumnName("LutRACategoryID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RasubCategory).HasColumnName("RASubCategory");

            entity.HasOne(d => d.LutRacategory).WithMany(p => p.LutRasubCategories)
                .HasForeignKey(d => d.LutRacategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutRASubCategory_LutRACategory");
        });

        modelBuilder.Entity<LutReasonDeterminationNotProvidedSooner>(entity =>
        {
            entity.ToTable("LutReasonDeterminationNotProvidedSooner", "AAHR");

            entity.Property(e => e.LutReasonDeterminationNotProvidedSoonerId).HasColumnName("LutReasonDeterminationNotProvidedSoonerID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutReasonTenantNotTransferredSooner>(entity =>
        {
            entity.ToTable("LutReasonTenantNotTransferredSooner", "AAHR");

            entity.Property(e => e.LutReasonTenantNotTransferredSoonerId).HasColumnName("LutReasonTenantNotTransferredSoonerID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutReferenceType>(entity =>
        {
            entity.ToTable("LutReferenceType", "AAHR");

            entity.Property(e => e.LutReferenceTypeId).HasColumnName("LutReferenceTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<LutRelatedEntity>(entity =>
        {
            entity.ToTable("LutRelatedEntity", "DF");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RelatedEntityName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RowId).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<LutRenderType>(entity =>
        {
            entity.ToTable("LutRenderType", "CC");

            entity.Property(e => e.LutRenderTypeId).HasColumnName("LutRenderTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RenderType).HasMaxLength(50);
        });

        modelBuilder.Entity<LutRentalSubsidy>(entity =>
        {
            entity.ToTable("LutRentalSubsidy", "AAHR");

            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RentalSubsidy).IsUnicode(false);
        });

        modelBuilder.Entity<LutReviewReportItem>(entity =>
        {
            entity.ToTable("LutReviewReportItem", "AAHPPC");

            entity.Property(e => e.LutReviewReportItemId).HasColumnName("LutReviewReportItemID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutReviewReportSubItem>(entity =>
        {
            entity.ToTable("LutReviewReportSubItem", "AAHPPC");

            entity.Property(e => e.LutReviewReportSubItemId).HasColumnName("LutReviewReportSubItemID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.LutReviewReportItemId).HasColumnName("LutReviewReportItemID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SubItem).IsUnicode(false);

            entity.HasOne(d => d.LutReviewReportItem).WithMany(p => p.LutReviewReportSubItems)
                .HasForeignKey(d => d.LutReviewReportItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutReviewReportSubItem_LutReviewReportItem");
        });

        modelBuilder.Entity<LutScopeItem>(entity =>
        {
            entity.HasKey(e => e.LutScopeItemId).HasName("PK_LutScopeOfWork");

            entity.ToTable("LutScopeItem", "AAHPCC");

            entity.Property(e => e.LutScopeItemId).HasColumnName("LutScopeItemID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ScopeItem)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutServiceRequestType>(entity =>
        {
            entity.HasKey(e => e.LutServiceRequestTypeId).HasName("PK_LutBrushCaseType");

            entity.ToTable("LutServiceRequestType", "IMS");

            entity.Property(e => e.LutServiceRequestTypeId).HasColumnName("LutServiceRequestTypeID");
            entity.Property(e => e.ApplicationGuid).HasColumnName("ApplicationGUID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasMany(d => d.LutViolationLocations).WithMany(p => p.LutServiceRequestTypes)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnServiceRequestTypeViolationLocation",
                    r => r.HasOne<LutViolationLocation>().WithMany()
                        .HasForeignKey("LutViolationLocationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestTypeViolationLocation_LutViolationLocation"),
                    l => l.HasOne<LutServiceRequestType>().WithMany()
                        .HasForeignKey("LutServiceRequestTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestTypeViolationLocation_LutServiceRequestType"),
                    j =>
                    {
                        j.HasKey("LutServiceRequestTypeId", "LutViolationLocationId");
                        j.ToTable("AssnServiceRequestTypeViolationLocation", "IMS");
                        j.IndexerProperty<int>("LutServiceRequestTypeId").HasColumnName("LutServiceRequestTypeID");
                        j.IndexerProperty<int>("LutViolationLocationId").HasColumnName("LutViolationLocationID");
                    });
        });

        modelBuilder.Entity<LutSignatureTitle>(entity =>
        {
            entity.HasKey(e => e.LutSignatureTitleId).HasName("PK_LutSignatureTitleIDLutSignatureTitleID");

            entity.ToTable("LutSignatureTitle", "AAHR");

            entity.Property(e => e.LutSignatureTitleId).HasColumnName("LutSignatureTitleID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SignatureTitle).HasMaxLength(50);
        });

        modelBuilder.Entity<LutSiteSurveyGroup>(entity =>
        {
            entity.ToTable("LutSiteSurveyGroup", "AAHR");

            entity.Property(e => e.LutSiteSurveyGroupId).HasColumnName("LutSiteSurveyGroupID");
            entity.Property(e => e.CreatedBy).IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SiteSurveyGroup)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutState>(entity =>
        {
            entity.HasKey(e => e.LutStateCd).HasName("PkLutState");

            entity.ToTable("LutState", "AAHR");

            entity.Property(e => e.LutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutState1>(entity =>
        {
            entity.HasKey(e => e.LutStateCd).HasName("PkLutState");

            entity.ToTable("LutState", "PnC");

            entity.Property(e => e.LutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStopWorkOrderReasonType>(entity =>
        {
            entity.ToTable("LutStopWorkOrderReasonType", "IMS");

            entity.Property(e => e.LutStopWorkOrderReasonTypeId).HasColumnName("LutStopWorkOrderReasonTypeID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutStreetPrefix>(entity =>
        {
            entity.HasKey(e => e.PreDirCd);

            entity.ToTable("LutStreetPrefix", "AAHR");

            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStreetPrefix1>(entity =>
        {
            entity.HasKey(e => e.PreDirCd);

            entity.ToTable("LutStreetPrefix", "PnC");

            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStreetSuffix>(entity =>
        {
            entity.HasKey(e => e.PostDirCd);

            entity.ToTable("LutStreetSuffix", "AAHR");

            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStreetSuffix1>(entity =>
        {
            entity.HasKey(e => e.PostDirCd);

            entity.ToTable("LutStreetSuffix", "PnC");

            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStreetType>(entity =>
        {
            entity.HasKey(e => e.LutStreetTypeCd).HasName("PkLutStreetType");

            entity.ToTable("LutStreetType", "AAHR");

            entity.Property(e => e.LutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutStructureType>(entity =>
        {
            entity.HasKey(e => e.LutStructureTypeId).HasName("PK__LutStruc__F8603A52BDFFEA24");

            entity.ToTable("LutStructureType", "AAHR");

            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutStructureType1>(entity =>
        {
            entity.HasKey(e => e.LutStructureTypeId).HasName("PK_LutStructureType_1");

            entity.ToTable("LutStructureType", "PnC");

            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutTargetAudience>(entity =>
        {
            entity.ToTable("LutTargetAudience", "AAHR");

            entity.Property(e => e.LutTargetAudienceId).HasColumnName("LutTargetAudienceID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutTemplate>(entity =>
        {
            entity.ToTable("LutTemplate", "DMS");

            entity.Property(e => e.LutTemplateId).HasColumnName("LutTemplateID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DocumentType).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.SampleData).IsUnicode(false);
            entity.Property(e => e.TemplateName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutTemplate1>(entity =>
        {
            entity.HasKey(e => e.LutTemplateId).HasName("PK__LutTempl__FAF1218EC0EDC6E8");

            entity.ToTable("LutTemplate", "ENF");

            entity.Property(e => e.LutTemplateId).HasColumnName("LutTemplateID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutTenantSelectedFrom>(entity =>
        {
            entity.ToTable("LutTenantSelectedFrom", "AAHR");

            entity.Property(e => e.LutTenantSelectedFromId).HasColumnName("LutTenantSelectedFromID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.TenantSelectedFrom).HasMaxLength(50);
        });

        modelBuilder.Entity<LutTotalBathroom>(entity =>
        {
            entity.HasKey(e => e.LutTotalBathroomsId);

            entity.ToTable("LutTotalBathrooms", "AAHR");

            entity.Property(e => e.LutTotalBathroomsId).HasColumnName("LutTotalBathroomsID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutTotalBedroom>(entity =>
        {
            entity.HasKey(e => e.LutTotalBedroomsId);

            entity.ToTable("LutTotalBedrooms", "AAHR");

            entity.Property(e => e.LutTotalBedroomsId).HasColumnName("LutTotalBedroomsID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasDefaultValue("System");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<LutTrainingSessionStatus>(entity =>
        {
            entity.HasKey(e => e.LutTrainingSessionStatusId).HasName("PkLutTrainingSessionStatusID");

            entity.ToTable("LutTrainingSessionStatus", "TRN", tb => tb.HasComment("Lookup table for training session status"));

            entity.HasIndex(e => e.RowId, "UcLutTrainingSessionStatus_RowID").IsUnique();

            entity.Property(e => e.LutTrainingSessionStatusId)
                .HasComment("Primary Key Identity column for the LutTrainingSessionStatus table")
                .HasColumnName("LutTrainingSessionStatusID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Training session status");
        });

        modelBuilder.Entity<LutTransferWaitListReason>(entity =>
        {
            entity.ToTable("LutTransferWaitListReason", "AAHR");

            entity.Property(e => e.LutTransferWaitListReasonId).HasColumnName("LutTransferWaitListReasonID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutTypeofProject>(entity =>
        {
            entity.ToTable("LutTypeofProject", "PnC", tb => tb.HasComment("Type of Project from HIMS system.\r\nAll PnC Project comes from HIMS"));

            entity.HasIndex(e => e.RowId, "UcLutTypeofProject_RowID").IsUnique();

            entity.Property(e => e.LutTypeofProjectId)
                .HasComment("Primary Key Identity column for the LutTypeofProject table.  This number match HIMS")
                .HasColumnName("LutTypeofProjectID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("description about type of project");
            entity.Property(e => e.IsDeleted).HasComment("1 = the course mark as deleted in system.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
        });

        modelBuilder.Entity<LutUnitAccessibiltyType>(entity =>
        {
            entity.ToTable("LutUnitAccessibiltyType", "PnC");

            entity.Property(e => e.LutUnitAccessibiltyTypeId).HasColumnName("LutUnitAccessibiltyTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record created username.");
            entity.Property(e => e.CreatedOn)
                .HasComment("Record created date.")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsUnicode(false)
                .HasComment("Description.");
            entity.Property(e => e.IsObsolete).HasComment("Is Obsolete.");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Record modified username.");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Record modified date.")
                .HasColumnType("datetime");
            entity.Property(e => e.UnitAccessibiltyType)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutUnitType>(entity =>
        {
            entity.ToTable("LutUnitType", "AAHR");

            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutUpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("LutUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.LutUpcomingUnitVacancyId).HasColumnName("LutUpcomingUnitVacancyID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<LutUserType>(entity =>
        {
            entity.ToTable("LutUserType", "AAHR");

            entity.Property(e => e.LutUserTypeId).HasColumnName("LutUserTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAbsolute).HasDefaultValue(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UserType).HasMaxLength(50);
        });

        modelBuilder.Entity<LutViolation>(entity =>
        {
            entity.HasKey(e => e.LutViolationId).HasName("PK_Voilation");

            entity.ToTable("LutViolation", "IMS");

            entity.Property(e => e.LutViolationId).HasColumnName("LutViolationID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.EffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.Justification).IsUnicode(false);
            entity.Property(e => e.LutViolationCategoryId).HasColumnName("LutViolationCategoryID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.QuestionForm).HasMaxLength(50);
            entity.Property(e => e.QuestionNumber).HasMaxLength(50);
            entity.Property(e => e.RefViolation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remedy).HasMaxLength(50);
            entity.Property(e => e.SeverityLevelBldg)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeverityLevelProp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeverityLevelUnit)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.LutViolationCategory).WithMany(p => p.LutViolations)
                .HasForeignKey(d => d.LutViolationCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LutViolation_LutViolationCategory");

            entity.HasMany(d => d.LutLocationCategories).WithMany(p => p.LutViolations)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnViolationLocationCategory",
                    r => r.HasOne<LutLocationCategory>().WithMany()
                        .HasForeignKey("LutLocationCategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IMS.AssnViolationLocationCat_LutLocationViolationCategory"),
                    l => l.HasOne<LutViolation>().WithMany()
                        .HasForeignKey("LutViolationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnViolationLocationCategory_LutViolation"),
                    j =>
                    {
                        j.HasKey("LutViolationId", "LutLocationCategoryId");
                        j.ToTable("AssnViolationLocationCategory", "IMS");
                        j.IndexerProperty<int>("LutViolationId").HasColumnName("LutViolationID");
                    });

            entity.HasMany(d => d.LutViolationCodes).WithMany(p => p.LutViolations)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnViolationCode",
                    r => r.HasOne<LutViolationCode>().WithMany()
                        .HasForeignKey("LutViolationCodeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IMS.AssnViolationCode_IMS.LutViolationCode"),
                    l => l.HasOne<LutViolation>().WithMany()
                        .HasForeignKey("LutViolationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnViolationCode_LutViolation"),
                    j =>
                    {
                        j.HasKey("LutViolationId", "LutViolationCodeId");
                        j.ToTable("AssnViolationCode", "IMS");
                        j.IndexerProperty<int>("LutViolationId").HasColumnName("LutViolationID");
                    });

            entity.HasMany(d => d.LutViolationLocations).WithMany(p => p.LutViolations)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnViolationLocation",
                    r => r.HasOne<LutViolationLocation>().WithMany()
                        .HasForeignKey("LutViolationLocationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnViolationLocation_LutViolationLocation"),
                    l => l.HasOne<LutViolation>().WithMany()
                        .HasForeignKey("LutViolationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnViolationLocation_LutViolation"),
                    j =>
                    {
                        j.HasKey("LutViolationId", "LutViolationLocationId");
                        j.ToTable("AssnViolationLocation", "IMS");
                        j.IndexerProperty<int>("LutViolationId").HasColumnName("LutViolationID");
                        j.IndexerProperty<int>("LutViolationLocationId").HasColumnName("LutViolationLocationID");
                    });
        });

        modelBuilder.Entity<LutViolationCategory>(entity =>
        {
            entity.ToTable("LutViolationCategory", "IMS", tb => tb.HasComment("Violation Category like Electrical, Mechanical etc"));

            entity.Property(e => e.LutViolationCategoryId).HasColumnName("LutViolationCategoryID");
            entity.Property(e => e.Code).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutViolationChecklist>(entity =>
        {
            entity.ToTable("LutViolationChecklist", "IMS");

            entity.Property(e => e.LutViolationChecklistId).HasColumnName("LutViolationChecklistID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(1000);
        });

        modelBuilder.Entity<LutViolationCode>(entity =>
        {
            entity.HasKey(e => e.LutViolationCodeId).HasName("PK_IMS.LutViolationCode");

            entity.ToTable("LutViolationCode", "IMS");

            entity.Property(e => e.LutViolationCodeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);

            entity.HasOne(d => d.LutViolationCodeType).WithMany(p => p.LutViolationCodes)
                .HasForeignKey(d => d.LutViolationCodeTypeId)
                .HasConstraintName("FK_IMS.LutViolationCode_IMS.LutViolationCodeType");
        });

        modelBuilder.Entity<LutViolationCodeType>(entity =>
        {
            entity.HasKey(e => e.LutViolationCodeTypeId).HasName("PK_IMS.LutViolationCodeType");

            entity.ToTable("LutViolationCodeType", "IMS");

            entity.Property(e => e.LutViolationCodeTypeId).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<LutViolationLocation>(entity =>
        {
            entity.ToTable("LutViolationLocation", "IMS", tb => tb.HasComment("Violation Location - Kitchen, Living Room etc"));

            entity.Property(e => e.LutViolationLocationId).HasColumnName("LutViolationLocationID");
            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created by which user");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.IsObsolete).HasComment("Obsolete yes or no");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified by which user");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Modified on which datetime")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutWithdrawReason>(entity =>
        {
            entity.HasKey(e => e.LutWithdrawReasonId).HasName("PK__LutWithd__3710ECFAB0F858C9");

            entity.ToTable("LutWithdrawReason", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.WithdrawReason)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutWorkLogType>(entity =>
        {
            entity.HasKey(e => e.LutWorkLogTypeId).HasName("PkLutWorkLogTypeID");

            entity.ToTable("LutWorkLogType", "AAHR");

            entity.HasIndex(e => e.RowId, "UcLutWorkLogType_RowID").IsUnique();

            entity.Property(e => e.LutWorkLogTypeId).HasColumnName("LutWorkLogTypeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.WorkLogType)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LutWorkLogType1>(entity =>
        {
            entity.HasKey(e => e.LutWorkLogTypeId);

            entity.ToTable("LutWorkLogType", "IMS");

            entity.Property(e => e.LutWorkLogTypeId).HasColumnName("LutWorkLogTypeID");
            entity.Property(e => e.Code).HasMaxLength(20);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Lutcaplanguage>(entity =>
        {
            entity.ToTable("LUTCAPLanguage", "CAP");

            entity.Property(e => e.LutcaplanguageId).HasColumnName("LUTCAPLanguageID");
            entity.Property(e => e.ComplianceItemHeader).IsUnicode(false);
            entity.Property(e => e.ComplianceRequirement).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsObselete).HasDefaultValue(false);
            entity.Property(e => e.LutCapchecklistItemId)
                .HasDefaultValue(1)
                .HasColumnName("LutCAPChecklistItemID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RequiredCorrectiveAction).IsUnicode(false);

            entity.HasOne(d => d.LutCapchecklistItem).WithMany(p => p.Lutcaplanguages)
                .HasForeignKey(d => d.LutCapchecklistItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LUTCAPLanguage_LutCAPChecklistItem");
        });

        modelBuilder.Entity<Neighborhood>(entity =>
        {
            entity.ToTable("Neighborhood", "PnC");

            entity.Property(e => e.NeighborhoodId)
                .ValueGeneratedNever()
                .HasComment("Primary Key Identity column for the Neighborhood table")
                .HasColumnName("NeighborhoodID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.GeoJsonCoordinates)
                .IsUnicode(false)
                .HasComment("Geographic Json cooridantes");
            entity.Property(e => e.GeoJsonGeometryType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Geographic Json type");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of Neighborhood or Region");
            entity.Property(e => e.NeighborhoodNumber).HasComment("1 Sorting sequence for Region");
            entity.Property(e => e.ParentNeighborhoodId)
                .HasComment("Neighborhood belongs to which region")
                .HasColumnName("ParentNeighborhoodID");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("N = Neighborhood, R = Region");
            entity.Property(e => e.Wkt)
                .IsUnicode(false)
                .HasComment("Well know text for the geometry")
                .HasColumnName("WKT");
        });

        modelBuilder.Entity<NeighborhoodCouncil>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NeighborhoodCouncil", "AAHR");

            entity.Property(e => e.Coordinates)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("coordinates");
            entity.Property(e => e.EmpowerlaUrl)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FolderPath)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GeometryType)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LayerInfo)
                .HasMaxLength(34)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.NeighborhoodCouncilName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Source)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Wkt)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("WKT");
        });

        modelBuilder.Entity<NewStaffContactInfo>(entity =>
        {
            entity.ToTable("NewStaffContactInfo", "AAHR");

            entity.Property(e => e.NewStaffContactInfoId).HasColumnName("NewStaffContactInfoID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.LutAssociatedRoleId).HasColumnName("LutAssociatedRoleID");
            entity.Property(e => e.LutChangeRoleId).HasColumnName("LutChangeRoleID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.ProjSitePropSnapshotId).HasColumnName("ProjSitePropSnapshotID");
            entity.Property(e => e.Title).HasMaxLength(100);

            entity.HasOne(d => d.LutAssociatedRole).WithMany(p => p.NewStaffContactInfos)
                .HasForeignKey(d => d.LutAssociatedRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NewStaffContactInfo_LutAssociatedRole");

            entity.HasOne(d => d.LutChangeRole).WithMany(p => p.NewStaffContactInfos)
                .HasForeignKey(d => d.LutChangeRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NewStaffContactInfo_LutChangeRole");

            entity.HasOne(d => d.ProjSitePropSnapshot).WithMany(p => p.NewStaffContactInfos)
                .HasForeignKey(d => d.ProjSitePropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NewStaffContactInfo_PropSnapshot");
        });

        modelBuilder.Entity<NewsDisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_News_DisplayConfiguration");

            entity.ToTable("News_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.DateToDisplay).HasMaxLength(50);
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<NewsNewsDetail>(entity =>
        {
            entity.ToTable("News_NewsDetails", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.PublishDate).HasColumnType("datetime");
            entity.Property(e => e.SubmittedDate).HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(256);

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.NewsNewsDetails)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_News_NewsDetails_News_DC");
        });

        modelBuilder.Entity<NonCoveredProjectSite>(entity =>
        {
            entity.ToTable("NonCoveredProjectSite", "AAHR");

            entity.Property(e => e.NonCoveredProjectSiteId).HasColumnName("NonCoveredProjectSiteID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.DeveloperPortfolio).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
        });

        modelBuilder.Entity<Notice>(entity =>
        {
            entity.ToTable("Notice", "IMS");

            entity.Property(e => e.NoticeId).HasColumnName("NoticeID");
            entity.Property(e => e.ApprovedBy).HasMaxLength(50);
            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutNoticeTypeId).HasColumnName("LutNoticeTypeID");
            entity.Property(e => e.MailAddressLine1).HasMaxLength(500);
            entity.Property(e => e.MailAddressLine2).HasMaxLength(500);
            entity.Property(e => e.MailTrackingNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NoticeUrl)
                .HasMaxLength(200)
                .HasColumnName("NoticeURL");
            entity.Property(e => e.RecipientName).HasMaxLength(200);
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.Notices)
                .HasForeignKey(d => d.ContactIdentifierId)
                .HasConstraintName("FK_Notice_ContactIdentifier");

            entity.HasOne(d => d.LutNoticeType).WithMany(p => p.Notices)
                .HasForeignKey(d => d.LutNoticeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Notice_LutNoticeType");

            entity.HasMany(d => d.Violations).WithMany(p => p.Notices)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnNoticeViolation",
                    r => r.HasOne<Violation>().WithMany()
                        .HasForeignKey("ViolationId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnNoticeViolation_Violation"),
                    l => l.HasOne<Notice>().WithMany()
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnNoticeViolation_Notice"),
                    j =>
                    {
                        j.HasKey("NoticeId", "ViolationId");
                        j.ToTable("AssnNoticeViolation", "IMS");
                        j.IndexerProperty<int>("NoticeId").HasColumnName("NoticeID");
                        j.IndexerProperty<int>("ViolationId").HasColumnName("ViolationID");
                    });
        });

        modelBuilder.Entity<NoticeOfObligation>(entity =>
        {
            entity.ToTable("NoticeOfObligation", "CAP");

            entity.Property(e => e.NoticeOfObligationId).HasColumnName("NoticeOfObligationID");
            entity.Property(e => e.BestContact1Address)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1CityStateZip)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1Company)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1Email)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1FullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact1Title)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2Address)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2CityStateZip)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2Company)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2Email)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2FullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BestContact2Title)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CcemailIds)
                .IsUnicode(false)
                .HasColumnName("CCEMailIds");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LupamAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LupamCompany)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LupamEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LupamFullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LupamTitle)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Nobtype)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NOBType");
            entity.Property(e => e.NocDate).HasColumnType("datetime");
            entity.Property(e => e.OwnerAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCityStateZip)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompany)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerFullName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerTitle)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Pmemail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PMEmail");
            entity.Property(e => e.PmfullName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PMFullName");
            entity.Property(e => e.RegulatoryAgreementExecDate).HasColumnType("datetime");
            entity.Property(e => e.SelfCertAdpotionDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.ToEmailIds)
                .IsUnicode(false)
                .HasColumnName("ToEMailIds");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.NoticeOfObligations)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NoticeOfObligation_ServiceRequest");
        });

        modelBuilder.Entity<NotificationLog>(entity =>
        {
            entity.ToTable("NotificationLogs", "CC");

            entity.Property(e => e.Action).HasMaxLength(500);
            entity.Property(e => e.MailBcc).HasColumnName("MailBCC");
            entity.Property(e => e.MailCc).HasColumnName("MailCC");
            entity.Property(e => e.RefrenceType).HasMaxLength(100);
            entity.Property(e => e.SentOn).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<NotificationSchema>(entity =>
        {
            entity.ToTable("NotificationSchema", "CC");

            entity.Property(e => e.Type).HasMaxLength(100);
        });

        modelBuilder.Entity<NotificationSource>(entity =>
        {
            entity.ToTable("NotificationSource", "CC");

            entity.Property(e => e.CredentialName).HasMaxLength(50);
            entity.Property(e => e.CredentialPwd).HasMaxLength(50);
            entity.Property(e => e.FromEmailId).HasMaxLength(150);
            entity.Property(e => e.Host).HasMaxLength(50);
        });

        modelBuilder.Entity<NotificationTemplate>(entity =>
        {
            entity.ToTable("NotificationTemplate", "CC");

            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Organization>(entity =>
        {
            entity.ToTable("Organization", "PnC");

            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.AreaServed)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BusinessLicense).HasMaxLength(100);
            entity.Property(e => e.CensoredName).HasMaxLength(150);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Email1).HasMaxLength(200);
            entity.Property(e => e.Email2).HasMaxLength(200);
            entity.Property(e => e.EmailDomain)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(50)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.LegalName).HasMaxLength(150);
            entity.Property(e => e.LicenseValidFrom).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidTo).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(150);
            entity.Property(e => e.Phone1).HasMaxLength(50);
            entity.Property(e => e.Phone2).HasMaxLength(50);
            entity.Property(e => e.PhoneFax).HasMaxLength(50);
            entity.Property(e => e.PictureMain).HasMaxLength(200);
            entity.Property(e => e.PictureThumbnail).HasMaxLength(200);
            entity.Property(e => e.ServiceProvided)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.Tty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TTY");
            entity.Property(e => e.WebSite)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<OrganizationAddress>(entity =>
        {
            entity.ToTable("OrganizationAddress", "PnC");

            entity.Property(e => e.OrganizationAddressId).HasColumnName("OrganizationAddressID");
            entity.Property(e => e.AddressLine1).HasMaxLength(100);
            entity.Property(e => e.AddressLine2).HasMaxLength(100);
            entity.Property(e => e.AddressType).HasMaxLength(20);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(463)
                .HasComputedColumnSql("((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([State]+' ',''))+isnull([City]+' ',''))+[Zip])", false);
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.Latitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Longitude).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.PostDirCd).HasMaxLength(50);
            entity.Property(e => e.PreDirCd).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName).HasMaxLength(100);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.UnitNo).HasMaxLength(20);
            entity.Property(e => e.Zip).HasMaxLength(5);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);

            entity.HasOne(d => d.Organization).WithMany(p => p.OrganizationAddresses)
                .HasForeignKey(d => d.OrganizationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrganizationAddress_Organization");
        });

        modelBuilder.Entity<OutreachAndAffimativeMarketing>(entity =>
        {
            entity.HasKey(e => e.OutreachId);

            entity.ToTable("OutreachAndAffimativeMarketing", "AAHR");

            entity.Property(e => e.OutreachId).HasColumnName("OutreachID");
            entity.Property(e => e.ContactName).HasMaxLength(500);
            entity.Property(e => e.ContactPhone).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfOutreach).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName).HasMaxLength(500);
            entity.Property(e => e.OutreachType).IsUnicode(false);
            entity.Property(e => e.PartyForDistrubution).IsUnicode(false);
        });

        modelBuilder.Entity<PcmstoPncSyncLog>(entity =>
        {
            entity.HasKey(e => e.SyncLogId).HasName("PK_AAHR.AuditTrail");

            entity.ToTable("PCMStoPncSyncLog", "AAHR");

            entity.Property(e => e.SyncLogId).HasColumnName("SyncLogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("system");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IdentifierId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IdentifierID");
            entity.Property(e => e.IdentifierJson)
                .IsUnicode(false)
                .HasColumnName("IdentifierJSON");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("system");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
        });

        modelBuilder.Entity<PhoneLog>(entity =>
        {
            entity.ToTable("PhoneLog", "AAHR");

            entity.Property(e => e.PhoneLogId).HasColumnName("PhoneLogID");
            entity.Property(e => e.AdditionalPhoneNo).HasMaxLength(50);
            entity.Property(e => e.CallerName).HasMaxLength(500);
            entity.Property(e => e.CallerType).HasMaxLength(500);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.LutCallTypeId).HasColumnName("LutCallTypeID");
            entity.Property(e => e.LutLanguageLineId).HasColumnName("LutLanguageLineID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherCallType).HasMaxLength(500);
            entity.Property(e => e.PhoneNo).HasMaxLength(50);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ResponderId).HasColumnName("ResponderID");

            entity.HasOne(d => d.LutCallType).WithMany(p => p.PhoneLogs)
                .HasForeignKey(d => d.LutCallTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhoneLog_LutCallType");

            entity.HasOne(d => d.LutLanguageLine).WithMany(p => p.PhoneLogs)
                .HasForeignKey(d => d.LutLanguageLineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhoneLog_LutLanguageLine");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.PhoneLogs)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_PhoneLog_ProjectSite");
        });

        modelBuilder.Entity<Pmp>(entity =>
        {
            entity.ToTable("PMP", "AAHR", tb => tb.HasTrigger("trg_PMPLog"));

            entity.Property(e => e.Pmpid).HasColumnName("PMPID");
            entity.Property(e => e.AuthSignatoryName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfAckCertificate).HasColumnType("datetime");
            entity.Property(e => e.EntityContactEmail).HasMaxLength(100);
            entity.Property(e => e.EntityContactPhone).HasMaxLength(20);
            entity.Property(e => e.EntityContactPhoneExt).HasMaxLength(20);
            entity.Property(e => e.FinalCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.IsComplyLahsaces).HasColumnName("IsComplyLAHSACES");
            entity.Property(e => e.IsCwlnoPlanAffirmativeMarketing).HasColumnName("IsCWLNoPlanAffirmativeMarketing");
            entity.Property(e => e.IsProjectUseUha).HasColumnName("IsProjectUseUHA");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.LutConstructionTypeId).HasColumnName("LutConstructionTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PreliminaryCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ReturningTenantOccupyAus).HasColumnName("ReturningTenantOccupyAUs");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.SignatoryPersonTitle)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.WaitListDescForHopwa).HasColumnName("WaitListDescForHOPWA");

            entity.HasOne(d => d.LutLegalEntityType).WithMany(p => p.Pmps)
                .HasForeignKey(d => d.LutLegalEntityTypeId)
                .HasConstraintName("FK_PMP_LutLegalEntityType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Pmps)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMP_ServiceRequest");
        });

        modelBuilder.Entity<PmpaddnlMarketingEffort>(entity =>
        {
            entity.ToTable("PMPAddnlMarketingEffort", "AAHR");

            entity.Property(e => e.PmpaddnlMarketingEffortId).HasColumnName("PMPAddnlMarketingEffortID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LeaseUpBannerParty).IsUnicode(false);
            entity.Property(e => e.LeaseUpBannerPostDate).HasColumnType("datetime");
            entity.Property(e => e.LeaseUpPhoneLineParty).IsUnicode(false);
            entity.Property(e => e.LeaseUpPhoneLinePostDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherName).IsUnicode(false);
            entity.Property(e => e.OtherPostedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherResponsibleParty).IsUnicode(false);
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");

            entity.HasOne(d => d.Pmp).WithMany(p => p.PmpaddnlMarketingEfforts)
                .HasForeignKey(d => d.Pmpid)
                .HasConstraintName("FK_PMPAddnlMarketingEffort_PMP");
        });

        modelBuilder.Entity<PmpaddnlMarketingEffortSnap>(entity =>
        {
            entity.ToTable("PMPAddnlMarketingEffortSnap", "PMP");

            entity.Property(e => e.PmpaddnlMarketingEffortSnapId).HasColumnName("PMPAddnlMarketingEffortSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LeaseUpBannerParty).IsUnicode(false);
            entity.Property(e => e.LeaseUpBannerPostDate).HasColumnType("datetime");
            entity.Property(e => e.LeaseUpPhoneLineParty).IsUnicode(false);
            entity.Property(e => e.LeaseUpPhoneLinePostDate).HasColumnType("datetime");
            entity.Property(e => e.OtherName).IsUnicode(false);
            entity.Property(e => e.OtherPostedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherResponsibleParty).IsUnicode(false);
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmpaddnlMarketingEffortSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPAddnlMarketingEffortSnap_PMPSnap");
        });

        modelBuilder.Entity<Pmpagency>(entity =>
        {
            entity.ToTable("PMPAgency", "AAHR");

            entity.Property(e => e.PmpagencyId).HasColumnName("PMPAgencyID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PmpagencyAddress).HasColumnName("PMPAgencyAddress");
            entity.Property(e => e.PmpagencyContactName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PMPAgencyContactName");
            entity.Property(e => e.PmpagencyEmail)
                .HasMaxLength(100)
                .HasColumnName("PMPAgencyEmail");
            entity.Property(e => e.PmpagencyName)
                .IsUnicode(false)
                .HasColumnName("PMPAgencyName");
            entity.Property(e => e.PmpagencyPhoneNumber)
                .HasMaxLength(50)
                .HasColumnName("PMPAgencyPhoneNumber");
        });

        modelBuilder.Entity<PmpagencySnap>(entity =>
        {
            entity.ToTable("PMPAgencySnap", "PMP");

            entity.Property(e => e.PmpagencySnapId).HasColumnName("PMPAgencySnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.PmpagencyAddress).HasColumnName("PMPAgencyAddress");
            entity.Property(e => e.PmpagencyContactName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("PMPAgencyContactName");
            entity.Property(e => e.PmpagencyEmail)
                .HasMaxLength(100)
                .HasColumnName("PMPAgencyEmail");
            entity.Property(e => e.PmpagencyId).HasColumnName("PMPAgencyID");
            entity.Property(e => e.PmpagencyName)
                .IsUnicode(false)
                .HasColumnName("PMPAgencyName");
            entity.Property(e => e.PmpagencyPhoneNumber)
                .HasMaxLength(50)
                .HasColumnName("PMPAgencyPhoneNumber");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmpagencySnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPAgencySnap_PMPSnap");
        });

        modelBuilder.Entity<Pmplog>(entity =>
        {
            entity.ToTable("PMPLog", "AAHR");

            entity.Property(e => e.PmplogId).HasColumnName("PMPLogId");
            entity.Property(e => e.AuthSignatoryName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfAckCertificate).HasColumnType("datetime");
            entity.Property(e => e.EntityContactEmail).HasMaxLength(100);
            entity.Property(e => e.EntityContactPhone).HasMaxLength(20);
            entity.Property(e => e.FinalCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.IsCwlnoPlanAffirmativeMarketing).HasColumnName("IsCWLNoPlanAffirmativeMarketing");
            entity.Property(e => e.IsProjectUseUha).HasColumnName("IsProjectUseUHA");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.LutConstructionTypeId).HasColumnName("LutConstructionTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");
            entity.Property(e => e.PreliminaryCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ReturningTenantOccupyAus).HasColumnName("ReturningTenantOccupyAUs");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.SignatoryPersonTitle)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.WaitListDescForHopwa).HasColumnName("WaitListDescForHOPWA");
        });

        modelBuilder.Entity<PmpoutreachAndAffimativeMarketingSnap>(entity =>
        {
            entity.HasKey(e => e.OutreachSnapId).HasName("PK_PMPOutreachAndAffimativeMarketing");

            entity.ToTable("PMPOutreachAndAffimativeMarketingSnap", "PMP");

            entity.Property(e => e.OutreachSnapId).HasColumnName("OutreachSnapID");
            entity.Property(e => e.ContactName).HasMaxLength(500);
            entity.Property(e => e.ContactPhone).HasMaxLength(20);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfOutreach).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName).HasMaxLength(500);
            entity.Property(e => e.OutreachId).HasColumnName("OutreachID");
            entity.Property(e => e.OutreachType).IsUnicode(false);
            entity.Property(e => e.PartyForDistrubution).IsUnicode(false);
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmpoutreachAndAffimativeMarketingSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPOutreachAndAffimativeMarketingSnap_PMPSnap");
        });

        modelBuilder.Entity<PmpoutreachOrganisation>(entity =>
        {
            entity.ToTable("PMPOutreachOrganisation", "AAHR");

            entity.Property(e => e.PmpoutreachOrganisationId).HasColumnName("PMPOutreachOrganisationID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganisationId).HasColumnName("OrganisationID");
            entity.Property(e => e.OtherOutreachType).IsUnicode(false);
            entity.Property(e => e.OutreachDate).HasColumnType("datetime");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");

            entity.HasOne(d => d.Organisation).WithMany(p => p.PmpoutreachOrganisations)
                .HasForeignKey(d => d.OrganisationId)
                .HasConstraintName("FK_PMPOutreachOrganisation_Organization");

            entity.HasOne(d => d.OutreachType).WithMany(p => p.PmpoutreachOrganisations)
                .HasForeignKey(d => d.OutreachTypeId)
                .HasConstraintName("FK_PMPOutreachOrganisation_LutOutreachType");

            entity.HasOne(d => d.Pmp).WithMany(p => p.PmpoutreachOrganisations)
                .HasForeignKey(d => d.Pmpid)
                .HasConstraintName("FK_PMPOutreachOrganisation_PMP");
        });

        modelBuilder.Entity<PmpoutreachOrganisationSnap>(entity =>
        {
            entity.ToTable("PMPOutreachOrganisationSnap", "PMP");

            entity.Property(e => e.PmpoutreachOrganisationSnapId).HasColumnName("PMPOutreachOrganisationSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutOutreachTypeId).HasColumnName("LutOutreachTypeID");
            entity.Property(e => e.OrganisationId).HasColumnName("OrganisationID");
            entity.Property(e => e.OtherOutreachType).IsUnicode(false);
            entity.Property(e => e.OutreachDate).HasColumnType("datetime");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.LutOutreachType).WithMany(p => p.PmpoutreachOrganisationSnaps)
                .HasForeignKey(d => d.LutOutreachTypeId)
                .HasConstraintName("FK_PMPOutreachOrganisationSnap_LutOutreachType");

            entity.HasOne(d => d.Organisation).WithMany(p => p.PmpoutreachOrganisationSnaps)
                .HasForeignKey(d => d.OrganisationId)
                .HasConstraintName("FK_PMPOutreachOrganisationSnap_Organization");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmpoutreachOrganisationSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .HasConstraintName("FK_PMPOutreachOrganisationSnap_PMPSnap");
        });

        modelBuilder.Entity<PmpprojectSiteSnap>(entity =>
        {
            entity.ToTable("PMPProjectSiteSnap", "PMP");

            entity.Property(e => e.PmpprojectSiteSnapId).HasColumnName("PMPProjectSiteSnapID");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("ConstructionHVRatio");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsAccessibleAffordable).HasDefaultValue(false);
            entity.Property(e => e.IsAffordable).HasDefaultValue(false);
            entity.Property(e => e.IsCovered).HasDefaultValue(false);
            entity.Property(e => e.IsTenantReferredUnit).HasComment("For HACLA property");
            entity.Property(e => e.IsWillAuwlopen).HasColumnName("IsWillAUWLOpen");
            entity.Property(e => e.LacountyServicePlanningAreaId).HasColumnName("LACountyServicePlanningAreaID");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.LutOccupancyStatusId).HasColumnName("LutOccupancyStatusID");
            entity.Property(e => e.LutProjectSiteStatusId).HasColumnName("LutProjectSiteStatusID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.SiteNum).HasDefaultValue(0);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.LutCestype).WithMany(p => p.PmpprojectSiteSnaps)
                .HasForeignKey(d => d.LutCestypeId)
                .HasConstraintName("FK_PMPProjectSiteSnap_LutCESType");

            entity.HasOne(d => d.LutOccupancyStatus).WithMany(p => p.PmpprojectSiteSnaps)
                .HasForeignKey(d => d.LutOccupancyStatusId)
                .HasConstraintName("FK_PMPProjectSiteSnap_LutOccupancyStatus");

            entity.HasOne(d => d.LutProjectSiteStatus).WithMany(p => p.PmpprojectSiteSnaps)
                .HasForeignKey(d => d.LutProjectSiteStatusId)
                .HasConstraintName("FK_PMPProjectSiteSnap_LutProjectSiteStatus");

            entity.HasOne(d => d.Neighborhood).WithMany(p => p.PmpprojectSiteSnaps)
                .HasForeignKey(d => d.NeighborhoodId)
                .HasConstraintName("FK_PMPProjectSiteSnap_LutNeighborhood");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmpprojectSiteSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPProjectSiteSnap_PMPSnap");

            entity.HasOne(d => d.Project).WithMany(p => p.PmpprojectSiteSnaps)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK_PMPProjectSiteSnap_Project");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.PmpprojectSiteSnaps)
                .HasForeignKey(d => d.ProjectSiteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPProjectSiteSnap_ProjectSite");

            entity.HasOne(d => d.SiteAddressNavigation).WithMany(p => p.PmpprojectSiteSnaps)
                .HasForeignKey(d => d.SiteAddressId)
                .HasConstraintName("FK_PMPProjectSiteSnap_SiteAddress");
        });

        modelBuilder.Entity<PmppshclientServingOrganization>(entity =>
        {
            entity.HasKey(e => e.PmppshclientServingOrganizationId).HasName("PK__PMPPSHCl__0CD719AD8039054E");

            entity.ToTable("PMPPSHClientServingOrganization", "AAHR");

            entity.Property(e => e.PmppshclientServingOrganizationId).HasColumnName("PMPPSHClientServingOrganizationId");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Pmpid).HasColumnName("PMPId");
            entity.Property(e => e.ResourceType)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Pmp).WithMany(p => p.PmppshclientServingOrganizations)
                .HasForeignKey(d => d.Pmpid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPPSHClientServingOrganization_PMP");
        });

        modelBuilder.Entity<PmppshclientServingOrganizationSnap>(entity =>
        {
            entity.ToTable("PMPPSHClientServingOrganizationSnap", "PMP");

            entity.Property(e => e.PmppshclientServingOrganizationSnapId).HasColumnName("PMPPSHClientServingOrganizationSnapID");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.ResourceType)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmppshclientServingOrganizationSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPPSHClientServingOrganizationSnap_PMPSnap");
        });

        modelBuilder.Entity<PmpsiteAddressSnap>(entity =>
        {
            entity.ToTable("PMPSiteAddressSnap", "PMP");

            entity.Property(e => e.PmpsiteAddressSnapId).HasColumnName("PMPSiteAddressSnapID");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .HasComputedColumnSql("(ltrim(rtrim(replace(replace((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([City]+' ',''))+isnull([State]+' ',''))+[Zip],'  ',' '),'  ',' '))))", false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Pin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PIN");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.RefSiteAddressId).HasColumnName("RefSiteAddressID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ZipSuffix)
                .HasMaxLength(4)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmpsiteAddressSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPSiteAddressSnap_PMPSnap");
        });

        modelBuilder.Entity<Pmpsnap>(entity =>
        {
            entity.HasKey(e => e.PmpsnapId).HasName("PK_PMPSnap_1");

            entity.ToTable("PMPSnap", "PMP");

            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.AuthSignatoryName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfAckCertificate).HasColumnType("datetime");
            entity.Property(e => e.EntityContactEmail).HasMaxLength(100);
            entity.Property(e => e.EntityContactPhone).HasMaxLength(20);
            entity.Property(e => e.EntityContactPhoneExt).HasMaxLength(20);
            entity.Property(e => e.FinalCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.IsComplyLahsaces).HasColumnName("IsComplyLAHSACES");
            entity.Property(e => e.IsCwlnoPlanAffirmativeMarketing).HasColumnName("IsCWLNoPlanAffirmativeMarketing");
            entity.Property(e => e.IsProjectUseUha).HasColumnName("IsProjectUseUHA");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.LutConstructionTypeId).HasColumnName("LutConstructionTypeID");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");
            entity.Property(e => e.PreliminaryCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ReturningTenantOccupyAus).HasColumnName("ReturningTenantOccupyAUs");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.SignatoryPersonTitle)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.WaitListDescForHopwa).HasColumnName("WaitListDescForHOPWA");

            entity.HasOne(d => d.LutCestype).WithMany(p => p.Pmpsnaps)
                .HasForeignKey(d => d.LutCestypeId)
                .HasConstraintName("FK_PMPSnap_LutCESType");

            entity.HasOne(d => d.LutConstructionType).WithMany(p => p.Pmpsnaps)
                .HasForeignKey(d => d.LutConstructionTypeId)
                .HasConstraintName("FK_PMPSnap_LutConstructionType");

            entity.HasOne(d => d.LutLegalEntityType).WithMany(p => p.Pmpsnaps)
                .HasForeignKey(d => d.LutLegalEntityTypeId)
                .HasConstraintName("FK_PMPSnap_LutLegalEntityType");

            entity.HasOne(d => d.Pmp).WithMany(p => p.Pmpsnaps)
                .HasForeignKey(d => d.Pmpid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPSnap_PMP1");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.Pmpsnaps)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPSnap_PropSnapshot1");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Pmpsnaps)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPSnap_ServiceRequest1");
        });

        modelBuilder.Entity<PmpunitAttributeSnap>(entity =>
        {
            entity.ToTable("PMPUnitAttributeSnap", "PMP");

            entity.Property(e => e.PmpunitAttributeSnapId).HasColumnName("PMPUnitAttributeSnapID");
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(9)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentProjSitePropSnapShotId).HasColumnName("CurrentProjSitePropSnapShotID");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FloorPlanTypeId).HasColumnName("FloorPlanTypeID");
            entity.Property(e => e.IsAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsAdaptable).HasDefaultValue(false);
            entity.Property(e => e.IsAddedToAutl).HasColumnName("IsAddedToAUTL");
            entity.Property(e => e.IsAddedToRarmlog).HasColumnName("IsAddedToRARMLog");
            entity.Property(e => e.IsAddendumSigned).HasDefaultValue(0);
            entity.Property(e => e.IsAdvisedRightToRm).HasColumnName("IsAdvisedRightToRM");
            entity.Property(e => e.IsAvailableFromAuwaitList).HasColumnName("IsAvailableFromAUWaitList");
            entity.Property(e => e.IsAvailableFromTransferAuwaitList).HasColumnName("IsAvailableFromTransferAUWaitList");
            entity.Property(e => e.IsCes)
                .HasDefaultValue(false)
                .HasColumnName("IsCES");
            entity.Property(e => e.IsCsa).HasColumnName("IsCSA");
            entity.Property(e => e.IsEnhancedAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsFullyAuneeded).HasColumnName("IsFullyAUNeeded");
            entity.Property(e => e.IsLeaseAddendumProvidedToAcHp).HasColumnName("IsLeaseAddendumProvidedToAcHP");
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.IsOccupied).HasDefaultValue(false);
            entity.Property(e => e.IsOccupiedByDisabled).HasDefaultValue(false);
            entity.Property(e => e.IsVca).HasColumnName("IsVCA");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutAmiid).HasColumnName("LutAMIID");
            entity.Property(e => e.LutEapfeatureIds1A)
                .IsUnicode(false)
                .HasColumnName("LutEAPFeatureIDs1A");
            entity.Property(e => e.LutEapfeatureIds1B)
                .IsUnicode(false)
                .HasColumnName("LutEAPFeatureIDs1B");
            entity.Property(e => e.LutEapfeatureIdsOptional)
                .IsUnicode(false)
                .HasColumnName("LutEAPFeatureIDsOptional");
            entity.Property(e => e.LutFhatypeId).HasColumnName("LutFHATypeID");
            entity.Property(e => e.LutFixedFloatingUnitId).HasColumnName("LutFixedFloatingUnitID");
            entity.Property(e => e.LutLeaseAddendumNotExecuteReasonId).HasColumnName("LutLeaseAddendumNotExecuteReasonID");
            entity.Property(e => e.LutOccupancyReasonId).HasColumnName("LutOccupancyReasonID");
            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.LutTenantSelectedFromId).HasColumnName("LutTenantSelectedFromID");
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.NotAddedToAutlreason).HasColumnName("NotAddedToAUTLReason");
            entity.Property(e => e.NotAddedToRarmlogReason).HasColumnName("NotAddedToRARMLogReason");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousProjSitePropSnapShotId).HasColumnName("PreviousProjSitePropSnapShotID");
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.PreviousUnitPropSnapShotId).HasColumnName("PreviousUnitPropSnapShotID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");
            entity.Property(e => e.TenantRequestedBathroomsId).HasColumnName("TenantRequestedBathroomsID");
            entity.Property(e => e.TenantRequestedBedroomsId).HasColumnName("TenantRequestedBedroomsID");
            entity.Property(e => e.TenantRequestedUnitTypeId).HasColumnName("TenantRequestedUnitTypeID");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");

            entity.HasOne(d => d.LutAmi).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutAmiid)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutAMI");

            entity.HasOne(d => d.LutFhatype).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutFhatypeId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutFHAType");

            entity.HasOne(d => d.LutFixedFloatingUnit).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutFixedFloatingUnitId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutFixedFloatingUnit");

            entity.HasOne(d => d.LutLeaseAddendumNotExecuteReason).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutLeaseAddendumNotExecuteReasonId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutLeaseAddendumNotExecuteReason");

            entity.HasOne(d => d.LutOccupancyReason).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutOccupancyReasonId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutOccupancyReason");

            entity.HasOne(d => d.LutRentalSubsidy).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutRentalSubsidyId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutRentalSubsidy");

            entity.HasOne(d => d.LutTenantSelectedFrom).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutTenantSelectedFromId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutTenantSelectedFrom");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutTotalBathroomId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutTotalBedroomId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.LutUnitTypeId)
                .HasConstraintName("FK_PMPUnitAttributeSnap_LutUnitType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitAttributeSnap_PropSnapshot");

            entity.HasOne(d => d.UnitAttribute).WithMany(p => p.PmpunitAttributeSnaps)
                .HasForeignKey(d => d.UnitAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitAttributeSnap_UnitAttribute");
        });

        modelBuilder.Entity<PmpunitInfoSummarySnap>(entity =>
        {
            entity.ToTable("PMPUnitInfoSummarySnap", "PMP");

            entity.Property(e => e.PmpunitInfoSummarySnapId).HasColumnName("PMPUnitInfoSummarySnapID");
            entity.Property(e => e.AccessibilityType).HasMaxLength(50);
            entity.Property(e => e.Ami)
                .HasMaxLength(10)
                .HasColumnName("AMI");
            entity.Property(e => e.BedRoomSize).HasMaxLength(10);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.NoOfunit).HasMaxLength(10);
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmpunitInfoSummarySnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitInfoSummarySnap_PMPSnap");
        });

        modelBuilder.Entity<PmpunitSnap>(entity =>
        {
            entity.ToTable("PMPUnitSnap", "PMP");

            entity.Property(e => e.PmpunitSnapId).HasColumnName("PMPUnitSnapID");
            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.BuildingId).HasColumnName("BuildingID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.LutUnitAccessibiltyTypeId).HasColumnName("LutUnitAccessibiltyTypeID");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.RefUnitId).HasColumnName("RefUnitID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.Apn).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.Apnid)
                .HasConstraintName("FK_PMPUnitSnap_APN");

            entity.HasOne(d => d.Level).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_PMPUnitSnap_Level");

            entity.HasOne(d => d.LutUnitAccessibiltyType).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.LutUnitAccessibiltyTypeId)
                .HasConstraintName("FK_PMPUnitSnap_LutUnitAccessibiltyType");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitSnap_PMPSnap");

            entity.HasOne(d => d.Project).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK_PMPUnitSnap_Project");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_PMPUnitSnap_ProjectSite");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitSnap_PropSnapshot");

            entity.HasOne(d => d.SiteAddress).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.SiteAddressId)
                .HasConstraintName("FK_PMPUnitSnap_SiteAddress");

            entity.HasOne(d => d.Unit).WithMany(p => p.PmpunitSnaps)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PMPUnitSnap_Unit");
        });

        modelBuilder.Entity<PolicyComplianceDetail>(entity =>
        {
            entity.HasKey(e => e.PolicyComplianceDetailId).HasName("PK_PolicyComplainceDetail");

            entity.ToTable("PolicyComplianceDetail", "AAHPPC", tb => tb.HasComment("Policy complliance detail information"));

            entity.Property(e => e.PolicyComplianceDetailId).HasColumnName("PolicyComplianceDetailID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PmcontactName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMContactName");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PropertyAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.Case).WithMany(p => p.PolicyComplianceDetails)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FK_PolicyComplianceDetail_Case");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.PolicyComplianceDetails)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_PolicyComplianceDetail_ServiceRequest");
        });

        modelBuilder.Entity<PolicyComplianceReminder>(entity =>
        {
            entity.ToTable("PolicyComplianceReminder", "AAHPPC");

            entity.Property(e => e.PolicyComplianceReminderId).HasColumnName("PolicyComplianceReminderID");
            entity.Property(e => e.CreatedBy)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifedBy)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ReminderLog).IsUnicode(false);
            entity.Property(e => e.ReminderSetBy).IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.PolicyComplianceReminders)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PolicyComplianceReminder_ServiceRequest");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.ToTable("Project", "PnC", tb => tb.HasTrigger("trg_projectlog"));

            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutProjSourceCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LutProjSourceCD");
            entity.Property(e => e.LutProjectFundId).HasColumnName("LutProjectFundID");
            entity.Property(e => e.LutTypeofProjectId).HasColumnName("LutTypeofProjectID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectStatusLabel).HasMaxLength(255);
            entity.Property(e => e.RefProjectId).HasColumnName("RefProjectID");
            entity.Property(e => e.SettlementAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.YearEnd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.LutProjSourceCdNavigation).WithMany(p => p.Projects)
                .HasForeignKey(d => d.LutProjSourceCd)
                .HasConstraintName("FK_Project_LutProjSource");

            entity.HasOne(d => d.LutProjectFund).WithMany(p => p.Projects)
                .HasForeignKey(d => d.LutProjectFundId)
                .HasConstraintName("FK_Project_LutProjectFund");

            entity.HasOne(d => d.LutTypeofProject).WithMany(p => p.Projects)
                .HasForeignKey(d => d.LutTypeofProjectId)
                .HasConstraintName("FK_Project_LutTypeofProject");
        });

        modelBuilder.Entity<ProjectAttribute>(entity =>
        {
            entity.HasKey(e => e.ProjectAttributeId).HasName("PK__tmp_ms_x__A180E8873DDCB611");

            entity.ToTable("ProjectAttribute", "AAHR", tb => tb.HasTrigger("trg_ProjectAttributeLog"));

            entity.Property(e => e.ProjectAttributeId).HasColumnName("ProjectAttributeID");
            entity.Property(e => e.AcHpassociatedAccessorParcelNumberApn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAccessorParcelNumberAPN");
            entity.Property(e => e.AcHpfileNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AcHPFileNumber");
            entity.Property(e => e.AdditionalRcs)
                .IsUnicode(false)
                .HasColumnName("AdditionalRCS");
            entity.Property(e => e.AhupproductionScheduleYear).HasColumnName("AHUPProductionScheduleYear");
            entity.Property(e => e.Ahupscore).HasColumnName("AHUPScore");
            entity.Property(e => e.AssignedRcs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AssignedRCS");
            entity.Property(e => e.AssociatedHimsnumbers)
                .IsUnicode(false)
                .HasColumnName("AssociatedHIMSNumbers");
            entity.Property(e => e.CovenantExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Eapproject).HasColumnName("EAPProject");
            entity.Property(e => e.HimsassociatedAssessorParcelNumberApn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("HIMSAssociatedAssessorParcelNumberAPN");
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.IsthisaPreCsadevelopment).HasColumnName("IsthisaPreCSADevelopment");
            entity.Property(e => e.IsthisaPreVsadevelopment).HasColumnName("IsthisaPreVSADevelopment");
            entity.Property(e => e.ListedonAhupproductionSchedule).HasColumnName("ListedonAHUPProductionSchedule");
            entity.Property(e => e.LutAhupscoreId).HasColumnName("LutAHUPScoreID");
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutFundingId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutNacRecomadationId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LutNacRecomadationID");
            entity.Property(e => e.LutSiteSurveyGroupId).HasColumnName("LutSiteSurveyGroupID");
            entity.Property(e => e.MaximumHearingandVisionCsacount).HasColumnName("MaximumHearingandVisionCSACount");
            entity.Property(e => e.MaximumHearingandVisionVcacount).HasColumnName("MaximumHearingandVisionVCACount");
            entity.Property(e => e.MaximumMobilityCsacount).HasColumnName("MaximumMobilityCSACount");
            entity.Property(e => e.MaximumMobilityVcacount).HasColumnName("MaximumMobilityVCACount");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PrimaryHimsnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PrimaryHIMSNumber");
            entity.Property(e => e.ProjectDescription).IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatusLabel).IsUnicode(false);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ResponseToRetrofitSurveyEmailContent).IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.ProjectAttributes)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectAttribute_PropSnapshot");
        });

        modelBuilder.Entity<ProjectAttributeLog>(entity =>
        {
            entity.HasKey(e => e.ProjectAttributeLogId).HasName("PK__ProjectA__2C47AFA051089AF0");

            entity.ToTable("ProjectAttributeLog", "AAHR");

            entity.Property(e => e.ProjectAttributeLogId).HasColumnName("ProjectAttributeLogID");
            entity.Property(e => e.AcHpassociatedAccessorParcelNumberApn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAccessorParcelNumberAPN");
            entity.Property(e => e.AcHpfileNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AcHPFileNumber");
            entity.Property(e => e.AhupproductionScheduleYear).HasColumnName("AHUPProductionScheduleYear");
            entity.Property(e => e.Ahupscore).HasColumnName("AHUPScore");
            entity.Property(e => e.AssignedRcs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AssignedRCS");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HimsassociatedAssessorParcelNumberApn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("HIMSAssociatedAssessorParcelNumberAPN");
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.IsthisaPreCsadevelopment).HasColumnName("IsthisaPreCSADevelopment");
            entity.Property(e => e.IsthisaPreVsadevelopment).HasColumnName("IsthisaPreVSADevelopment");
            entity.Property(e => e.ListedonAhupproductionSchedule).HasColumnName("ListedonAHUPProductionSchedule");
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutFundingId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MaximumHearingandVisionCsacount).HasColumnName("MaximumHearingandVisionCSACount");
            entity.Property(e => e.MaximumHearingandVisionVcacount).HasColumnName("MaximumHearingandVisionVCACount");
            entity.Property(e => e.MaximumMobilityCsacount).HasColumnName("MaximumMobilityCSACount");
            entity.Property(e => e.MaximumMobilityVcacount).HasColumnName("MaximumMobilityVCACount");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectAttributeId).HasColumnName("ProjectAttributeID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProjectLog>(entity =>
        {
            entity.HasKey(e => e.ProjectLogId).HasName("PK__ProjectL__4CECAC47C0924473");

            entity.ToTable("ProjectLog", "AAHR");

            entity.Property(e => e.ProjectLogId).HasColumnName("ProjectLogID");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutProjSourceCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LutProjSourceCD");
            entity.Property(e => e.LutProjectFundId).HasColumnName("LutProjectFundID");
            entity.Property(e => e.LutTypeofProjectId).HasColumnName("LutTypeofProjectID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.RefProjectId).HasColumnName("RefProjectID");
            entity.Property(e => e.SettlementAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.YearEnd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ProjectSite>(entity =>
        {
            entity.ToTable("ProjectSite", "PnC", tb => tb.HasTrigger("trg_ProjectSiteLog"));

            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("ConstructionHVRatio");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsAccessibleAffordable).HasDefaultValue(false);
            entity.Property(e => e.IsAffordable).HasDefaultValue(false);
            entity.Property(e => e.IsCovered).HasDefaultValue(false);
            entity.Property(e => e.IsTenantReferredUnit).HasComment("For HACLA property");
            entity.Property(e => e.IsWillAuwlopen).HasColumnName("IsWillAUWLOpen");
            entity.Property(e => e.LacountyServicePlanningAreaId).HasColumnName("LACountyServicePlanningAreaID");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.LutOccupancyStatusId).HasColumnName("LutOccupancyStatusID");
            entity.Property(e => e.LutProjectSiteStatusId).HasColumnName("LutProjectSiteStatusID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.SharedSiteAchpfileNumber)
                .IsUnicode(false)
                .HasColumnName("SharedSiteACHPFileNumber");
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.SiteNum).HasDefaultValue(0);
            entity.Property(e => e.SiteStatusLabel).HasMaxLength(255);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.LacountyServicePlanningArea).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.LacountyServicePlanningAreaId)
                .HasConstraintName("FK_ProjectSite_LACountyServicePlanningArea");

            entity.HasOne(d => d.LutCestype).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.LutCestypeId)
                .HasConstraintName("FK_ProjectSite_LutCESType");

            entity.HasOne(d => d.LutOccupancyStatus).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.LutOccupancyStatusId)
                .HasConstraintName("FK_ProjectSite_LutOccupancyStatus");

            entity.HasOne(d => d.LutProjectSiteStatus).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.LutProjectSiteStatusId)
                .HasConstraintName("FK_ProjectSite_LutProjectSiteStatus");

            entity.HasOne(d => d.Neighborhood).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.NeighborhoodId)
                .HasConstraintName("FK_ProjectSite_Neighborhood");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK_ProjectSite_Project");

            entity.HasOne(d => d.Region).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.RegionId)
                .HasConstraintName("FK_ProjectSite_Region");

            entity.HasOne(d => d.SiteAddressNavigation).WithMany(p => p.ProjectSites)
                .HasForeignKey(d => d.SiteAddressId)
                .HasConstraintName("FK_ProjectSite_SiteAddress");
        });

        modelBuilder.Entity<ProjectSite10252023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProjectSite_10252023", "PnC");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("ConstructionHVRatio");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.LacountyServicePlanningAreaId).HasColumnName("LACountyServicePlanningAreaID");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.LutOccupancyStatusId).HasColumnName("LutOccupancyStatusID");
            entity.Property(e => e.LutProjectSiteStatusId).HasColumnName("LutProjectSiteStatusID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<ProjectSiteAdditionalQuestion>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteAddQuestionId);

            entity.ToTable("ProjectSiteAdditionalQuestions", "AAHR", tb => tb.HasComment("To save the additional questions added by owner/pm for property which will be asked while application"));

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.ProjectSiteAdditionalQuestions)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .HasConstraintName("FK_ProjectSiteAdditionalQuestions_ProjectSiteAttribute");
        });

        modelBuilder.Entity<ProjectSiteAdditionalQuestionsSnap>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteAddQuestionSnapId);

            entity.ToTable("ProjectSiteAdditionalQuestionsSnap", "Listing", tb => tb.HasComment("To save snap for table projectSiteAddtionalQuestions when listing published"));

            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.ProjectSiteAdditionalQuestionsSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .HasConstraintName("FK_ProjectSiteAdditionalQuestionsSnap_ProjectSiteSnap");
        });

        modelBuilder.Entity<ProjectSiteAttribute>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteAttributeId).HasName("PK_Listing");

            entity.ToTable("ProjectSiteAttribute", "AAHR", tb => tb.HasTrigger("trg_ProjectSiteAttributeLog"));

            entity.HasIndex(e => e.PropSnapshotId, "NI_ProjectSiteAttribute");

            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");
            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CwlopenPriorRegistryDate)
                .HasColumnType("datetime")
                .HasColumnName("CWLOpenPriorRegistryDate");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DocSubmitDateForOutreach).HasColumnType("datetime");
            entity.Property(e => e.HearingAndVisionUnitsPercentageRequired)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HousingTypeId).HasColumnName("HousingTypeID");
            entity.Property(e => e.InitialOccupiedDate).HasColumnType("datetime");
            entity.Property(e => e.IsCwlopenPriorRegistry).HasColumnName("IsCWLOpenPriorRegistry");
            entity.Property(e => e.IsLocked).HasDefaultValue(false);
            entity.Property(e => e.Lcmdetermination).HasColumnName("LCMDetermination");
            entity.Property(e => e.LcmsurveyDates)
                .IsUnicode(false)
                .HasColumnName("LCMSurveyDates");
            entity.Property(e => e.LockComment).HasMaxLength(500);
            entity.Property(e => e.LotteryDrawOn).HasColumnType("datetime");
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutNacRecomadationId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LutNacRecomadationID");
            entity.Property(e => e.LutexternalGroupId)
                .IsUnicode(false)
                .HasColumnName("LUTExternalGroupId");
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParkingTypeId).HasColumnName("ParkingTypeID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PropertyName).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SelectedStatus).HasMaxLength(500);
            entity.Property(e => e.SeniorDesignated).IsUnicode(false);
            entity.Property(e => e.SiteDescription).IsUnicode(false);
            entity.Property(e => e.SiteStatusLabel).IsUnicode(false);
            entity.Property(e => e.Ttynumber).HasColumnName("TTYNumber");
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);

            entity.HasOne(d => d.HousingType).WithMany(p => p.ProjectSiteAttributes)
                .HasForeignKey(d => d.HousingTypeId)
                .HasConstraintName("FK_ProjectSiteAttribute_LutHousingType");

            entity.HasOne(d => d.LcmdeterminationNavigation).WithMany(p => p.ProjectSiteAttributes)
                .HasForeignKey(d => d.Lcmdetermination)
                .HasConstraintName("FK_ProjectSiteAttribute_LCMDetermination");

            entity.HasOne(d => d.ParkingType).WithMany(p => p.ProjectSiteAttributes)
                .HasForeignKey(d => d.ParkingTypeId)
                .HasConstraintName("FK_ProjectSiteAttribute_LutParkingType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.ProjectSiteAttributes)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteAttribute_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSiteAttributeLog>(entity =>
        {
            entity.HasKey(e => e.PropertyAttributeLogId).HasName("PK_PropertyAttributeLog");

            entity.ToTable("ProjectSiteAttributeLog", "AAHR");

            entity.Property(e => e.PropertyAttributeLogId).HasColumnName("PropertyAttributeLogID");
            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CanPurchaseMoreParking).HasDefaultValue(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CwlopenPriorRegistryDate)
                .HasColumnType("datetime")
                .HasColumnName("CWLOpenPriorRegistryDate");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DocSubmitDateForOutreach).HasColumnType("datetime");
            entity.Property(e => e.HearingAndVisionUnitsPercentageRequired).IsUnicode(false);
            entity.Property(e => e.HousingTypeId).HasColumnName("HousingTypeID");
            entity.Property(e => e.InitialOccupiedDate).HasColumnType("datetime");
            entity.Property(e => e.IsCwlopenPriorRegistry).HasColumnName("IsCWLOpenPriorRegistry");
            entity.Property(e => e.LotteryDrawOn).HasColumnType("datetime");
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutNacRecomadationId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LutNacRecomadationID");
            entity.Property(e => e.LutexternalGroupId)
                .IsUnicode(false)
                .HasColumnName("LUTExternalGroupId");
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParkingTypeId).HasColumnName("ParkingTypeID");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PropertyName).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SeniorDesignated).IsUnicode(false);
            entity.Property(e => e.Ttynumber).HasColumnName("TTYNumber");
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);
        });

        modelBuilder.Entity<ProjectSiteAttributeSnap>(entity =>
        {
            entity.ToTable("ProjectSiteAttributeSnap", "PMP");

            entity.Property(e => e.ProjectSiteAttributeSnapId).HasColumnName("ProjectSiteAttributeSnapID");
            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CwlopenPriorRegistryDate)
                .HasColumnType("datetime")
                .HasColumnName("CWLOpenPriorRegistryDate");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DocSubmitDateForOutreach).HasColumnType("datetime");
            entity.Property(e => e.HearingAndVisionUnitsPercentageRequired)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HousingTypeId).HasColumnName("HousingTypeID");
            entity.Property(e => e.InitialOccupiedDate).HasColumnType("datetime");
            entity.Property(e => e.IsCwlopenPriorRegistry).HasColumnName("IsCWLOpenPriorRegistry");
            entity.Property(e => e.IsLocked).HasDefaultValue(false);
            entity.Property(e => e.LockComment).HasMaxLength(500);
            entity.Property(e => e.LotteryDrawOn).HasColumnType("datetime");
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutNacRecomadationId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LutNacRecomadationID");
            entity.Property(e => e.LutexternalGroupId)
                .IsUnicode(false)
                .HasColumnName("LUTExternalGroupId");
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParkingTypeId).HasColumnName("ParkingTypeID");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PropertyName).IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SelectedStatus).HasMaxLength(500);
            entity.Property(e => e.SeniorDesignated).IsUnicode(false);
            entity.Property(e => e.SiteDescription).IsUnicode(false);
            entity.Property(e => e.Ttynumber).HasColumnName("TTYNumber");
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);

            entity.HasOne(d => d.ProjectSiteAttribute).WithMany(p => p.ProjectSiteAttributeSnaps)
                .HasForeignKey(d => d.ProjectSiteAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteAttributeSnap_ProjectSiteAttribute");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.ProjectSiteAttributeSnaps)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteAttributeSnap_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSiteFutureWaitList>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteFutureWaitListId).HasName("PK_AssnProjSiteFutureWaitList");

            entity.ToTable("ProjectSiteFutureWaitList", "AAHR");

            entity.Property(e => e.ProjectSiteFutureWaitListId).HasColumnName("ProjectSiteFutureWaitListID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsWaitListOpenInFuture).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NoOfApplicantOnCuwl).HasColumnName("NoOfApplicantOnCUWL");
            entity.Property(e => e.NoOfApplicantOnCuwlseekAh).HasColumnName("NoOfApplicantOnCUWLSeekAH");
            entity.Property(e => e.OutReachConductDate).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.PropertyStatus)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.ProjectSiteFutureWaitLists)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssnProjSiteFutureWaitList_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSiteLog>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteLogId).HasName("PK__ProjectS__7949BE5B34AD12E2");

            entity.ToTable("ProjectSiteLog", "AAHR");

            entity.Property(e => e.ProjectSiteLogId).HasColumnName("ProjectSiteLogID");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("ConstructionHVRatio");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsWillAuwlopen).HasColumnName("IsWillAUWLOpen");
            entity.Property(e => e.LacountyServicePlanningAreaId).HasColumnName("LACountyServicePlanningAreaID");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.LutOccupancyStatusId).HasColumnName("LutOccupancyStatusID");
            entity.Property(e => e.LutProjectSiteStatusId).HasColumnName("LutProjectSiteStatusID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<ProjectSiteMarketingFlyer>(entity =>
        {
            entity.HasKey(e => e.MarketingFlyerId);

            entity.ToTable("ProjectSiteMarketingFlyer", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FaxNumber).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PmcompanyName).HasColumnName("PMCompanyName");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.ProjectSiteMarketingFlyers)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_ProjectSiteMarketingFlyer_ProjectSite");
        });

        modelBuilder.Entity<ProjectSiteMarketingFlyerSnap>(entity =>
        {
            entity.HasKey(e => e.MarketingFlyerSnapId);

            entity.ToTable("ProjectSiteMarketingFlyerSnap", "Listing");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FaxNumber).HasMaxLength(50);
            entity.Property(e => e.PmcompanyName).HasColumnName("PMCompanyName");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.ProjectSiteMarketingFlyerSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .HasConstraintName("FK_ProjectSiteMarketingFlyerSnap_ProjectSiteSnap");
        });

        modelBuilder.Entity<ProjectSiteNoChangeReport>(entity =>
        {
            entity.ToTable("ProjectSiteNoChangeReport", "AAHR");

            entity.Property(e => e.ProjectSiteNoChangeReportId).HasColumnName("ProjectSiteNoChangeReportID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsNoChangeInAutwl).HasColumnName("IsNoChangeInAUTWL");
            entity.Property(e => e.IsNoChangeInAuwl).HasColumnName("IsNoChangeInAUWL");
            entity.Property(e => e.IsNoChangeInEc).HasColumnName("IsNoChangeInEC");
            entity.Property(e => e.IsNoChangeInGl).HasColumnName("IsNoChangeInGL");
            entity.Property(e => e.IsNoChangeInOs).HasColumnName("IsNoChangeInOS");
            entity.Property(e => e.IsNoChangeInRa).HasColumnName("IsNoChangeInRA");
            entity.Property(e => e.IsNoChangeInUs).HasColumnName("IsNoChangeInUS");
            entity.Property(e => e.IsNoChangeInUuv).HasColumnName("IsNoChangeInUUV");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.ProjectSiteNoChangeReports)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteNoChangeReport_PropSnapshot");
        });

        modelBuilder.Entity<ProjectSiteSnap>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteSnapId).HasName("PK__projectS__10BFECB5388838FA");

            entity.ToTable("ProjectSiteSnap", "Listing", tb => tb.HasTrigger("trg_ProjectSiteSnapLog"));

            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");
            entity.Property(e => e.AcHpfileNumber).HasColumnName("AcHPFileNumber");
            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CloseDateReasonByOpm)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("CloseDateReasonByOPM");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CwlopenPriorRegistryDate)
                .HasColumnType("datetime")
                .HasColumnName("CWLOpenPriorRegistryDate");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.HousingTypeId).HasColumnName("HousingTypeID");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsCwlopenPriorRegistry).HasColumnName("IsCWLOpenPriorRegistry");
            entity.Property(e => e.IsWillAuwlopen).HasColumnName("IsWillAUWLOpen");
            entity.Property(e => e.ListingSnapId).HasColumnName("ListingSnapID");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeId");
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParkingTypeId).HasColumnName("ParkingTypeID");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PropertyStatus).IsUnicode(false);
            entity.Property(e => e.RefProjectId).HasColumnName("RefProjectID");
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.WaitListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);

            entity.HasOne(d => d.ListingSnap).WithMany(p => p.ProjectSiteSnaps)
                .HasForeignKey(d => d.ListingSnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__projectSi__Listi__58C0E58E");
        });

        modelBuilder.Entity<ProjectSiteSnapLog>(entity =>
        {
            entity.HasKey(e => e.ProjectSiteSnapLogId).HasName("PK__ProjectS__4D19A20FEB771378");

            entity.ToTable("ProjectSiteSnapLog", "Listing");

            entity.Property(e => e.ActionPeformed).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CloseDateReasonByOpm)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("CloseDateReasonByOPM");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LogCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");
            entity.Property(e => e.WaitListCloseDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProjectSiteUpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("ProjectSiteUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.ProjectSiteUpcomingUnitVacancyId).HasColumnName("ProjectSiteUpcomingUnitVacancyID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsUnitBecomeVacant).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.ProjectSiteUpcomingUnitVacancies)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSiteUpcomingUnitVacancy_PropSnapshot");
        });

        modelBuilder.Entity<ProjectWorkLog>(entity =>
        {
            entity.HasKey(e => e.WorkLogId).HasName("PkProjectWorkLog");

            entity.ToTable("ProjectWorkLog", "AAHR");

            entity.HasIndex(e => e.RowId, "UcProjectWorkLog_RowID").IsUnique();

            entity.Property(e => e.WorkLogId).HasColumnName("WorkLogID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.HousingAdvocateId).HasColumnName("HousingAdvocateID");
            entity.Property(e => e.LutWorkLogTypeId).HasColumnName("LutWorkLogTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ResolutionDate).HasColumnType("datetime");
            entity.Property(e => e.ResolutionMessage)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowID");
            entity.Property(e => e.WorkLog).IsUnicode(false);

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.ContactIdentifierId)
                .HasConstraintName("FkProjectWorkLog_ContactIdentifierID");

            entity.HasOne(d => d.HousingAdvocate).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.HousingAdvocateId)
                .HasConstraintName("ProjectWorkLog_HousingAdvocate");

            entity.HasOne(d => d.LutWorkLogType).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.LutWorkLogTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkProjecWorkLog_LutWorkLogType");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FkProjectWorkLog_PncProject");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.ProjectWorkLogs)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FkProjectWorkLog_PncProjectSite");
        });

        modelBuilder.Entity<PropAttribute>(entity =>
        {
            entity.HasKey(e => new { e.PropSnapshotId, e.LutPropAttributeId });

            entity.ToTable("PropAttribute", "PnC");

            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.LutPropAttributeId).HasColumnName("LutPropAttributeID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Created By");
            entity.Property(e => e.CreatedOn)
                .HasComment("Created On")
                .HasColumnType("datetime");
            entity.Property(e => e.FlagValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasComment("Modified On")
                .HasColumnType("datetime");

            entity.HasOne(d => d.LutPropAttribute).WithMany(p => p.PropAttributes)
                .HasForeignKey(d => d.LutPropAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PropAttribute_LutPropAttribute");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.PropAttributes)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PropAttribute_PropSnapshot");
        });

        modelBuilder.Entity<PropSnapshot>(entity =>
        {
            entity.HasKey(e => e.PropSnapshotId).HasName("PK_PropIdentifier");

            entity.ToTable("PropSnapshot", "PnC", tb => tb.HasTrigger("tr_Ins_PropSnapshot"));

            entity.HasIndex(e => e.IdentifierType, "IX_PropSnapshot_IdentifierType_ProjectID");

            entity.HasIndex(e => e.IdentifierType, "IX_PropSnapshot_IdentifierType_ProjectSiteID");

            entity.HasIndex(e => e.UnitId, "IX_PropSnapshot_UnitId");

            entity.HasIndex(e => new { e.IdentifierType, e.ProjectSiteId }, "NI_PropSnapshot");

            entity.HasIndex(e => e.ProjectSiteId, "NI_PropSnapshot1");

            entity.HasIndex(e => e.ProjectSiteId, "NI_PropSnapshot_UnitID");

            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierJson)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("IdentifierJSON");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");

            entity.HasOne(d => d.Apn).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.Apnid)
                .HasConstraintName("FK_PropIdentifier_APN");

            entity.HasOne(d => d.Level).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_PropSnapshot_Level");

            entity.HasOne(d => d.Location).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK_PropSnapshot_Location");

            entity.HasOne(d => d.Project).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK_PropSnapshot_Project");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_PropSnapshot_ProjectSite");

            entity.HasOne(d => d.SiteAddress).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.SiteAddressId)
                .HasConstraintName("FK_PropIdentifier_SiteAddress");

            entity.HasOne(d => d.Structure).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.StructureId)
                .HasConstraintName("FK_PropSnapshot_Structure");

            entity.HasOne(d => d.Unit).WithMany(p => p.PropSnapshots)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_PropIdentifier_Unit");
        });

        modelBuilder.Entity<PropSnapshotTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PropSnapshot_temp");

            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierJson)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("IdentifierJSON");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropSnapshotId)
                .ValueGeneratedOnAdd()
                .HasColumnName("PropSnapshotID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
        });

        modelBuilder.Entity<PropSnapshotTempAfter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PropSnapshot_tempAfter");

            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierJson)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("IdentifierJSON");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.LocationId).HasColumnName("LocationID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropSnapshotId)
                .ValueGeneratedOnAdd()
                .HasColumnName("PropSnapshotID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
        });

        modelBuilder.Entity<PropertyAccountContactSnapShot>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PropertyAccountContactSnapShot");

            entity.HasIndex(e => e.CaptureDate, "IDX_PropertyAccountContactSnapShot_CaptureDate").IsDescending();

            entity.HasIndex(e => new { e.CaptureDate, e.ContactId }, "IDX_PropertyAccountContactSnapShot_CaptureDate_ContactID").IsDescending(true, false);

            entity.HasIndex(e => e.ContactId, "IDX_PropertyAccoutContactSnapShot_ContactID");

            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Company).HasMaxLength(150);
            entity.Property(e => e.ContactCreatedBy).HasMaxLength(50);
            entity.Property(e => e.ContactCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ContactModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(50)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo).HasMaxLength(100);
            entity.Property(e => e.Zip).HasMaxLength(100);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<PropertyAccountContactSnapShot1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PropertyAccountContactSnapShot", "DPT");

            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.Company).HasMaxLength(150);
            entity.Property(e => e.ContactCreatedBy).HasMaxLength(50);
            entity.Property(e => e.ContactCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ContactModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(50)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo).HasMaxLength(100);
            entity.Property(e => e.Zip).HasMaxLength(100);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<QrassnGrievanceTypeQuestion>(entity =>
        {
            entity.HasKey(e => e.QrassnGrievanceTypeQuestionId).HasName("PK__QRAssnGr__BBD4A03699C42E4A");

            entity.ToTable("QRAssnGrievanceTypeQuestion", "AAHR");

            entity.Property(e => e.QrassnGrievanceTypeQuestionId).HasColumnName("QRAssnGrievanceTypeQuestionId");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.QrgrievanceLogId).HasColumnName("QRGrievanceLogId");

            entity.HasOne(d => d.AssnGrievanceTypeQuestion).WithMany(p => p.QrassnGrievanceTypeQuestions)
                .HasForeignKey(d => d.AssnGrievanceTypeQuestionId)
                .HasConstraintName("FK__QRAssnGri__AssnG__3F162224");

            entity.HasOne(d => d.GrievanceLog).WithMany(p => p.QrassnGrievanceTypeQuestions)
                .HasForeignKey(d => d.GrievanceLogId)
                .HasConstraintName("FK__QRAssnGri__Griev__41F28ECF");

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.QrassnGrievanceTypeQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__QRAssnGri__LutGr__400A465D");

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.QrassnGrievanceTypeQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__QRAssnGri__LutGr__40FE6A96");

            entity.HasOne(d => d.QrgrievanceLog).WithMany(p => p.QrassnGrievanceTypeQuestions)
                .HasForeignKey(d => d.QrgrievanceLogId)
                .HasConstraintName("FK__QRAssnGri__QRGri__63A88855");
        });

        modelBuilder.Entity<QrassnGrievanceTypeSubQuestion>(entity =>
        {
            entity.HasKey(e => e.QrassnGrievanceTypeSubQuestionId).HasName("PK__QRAssnGr__F715D46357776A37");

            entity.ToTable("QRAssnGrievanceTypeSubQuestion", "AAHR");

            entity.Property(e => e.QrassnGrievanceTypeSubQuestionId).HasColumnName("QRAssnGrievanceTypeSubQuestionId");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmployeOrTenantName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeOrTenantDescription)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeTitleOrUnitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FieldType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FieldValue).IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.QrgrievanceLogId).HasColumnName("QRGrievanceLogId");

            entity.HasOne(d => d.AssnGrievanceTypeSubQuestion).WithMany(p => p.QrassnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.AssnGrievanceTypeSubQuestionId)
                .HasConstraintName("FK__QRAssnGri__AssnG__45C31FB3");

            entity.HasOne(d => d.GrievanceLog).WithMany(p => p.QrassnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.GrievanceLogId)
                .HasConstraintName("FK__QRAssnGri__Griev__4993B097");

            entity.HasOne(d => d.LutGrievanceQuestion).WithMany(p => p.QrassnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceQuestionId)
                .HasConstraintName("FK__QRAssnGri__LutGr__46B743EC");

            entity.HasOne(d => d.LutGrievanceSubQuestion).WithMany(p => p.QrassnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceSubQuestionId)
                .HasConstraintName("FK__QRAssnGri__LutGr__47AB6825");

            entity.HasOne(d => d.LutGrievanceType).WithMany(p => p.QrassnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.LutGrievanceTypeId)
                .HasConstraintName("FK__QRAssnGri__LutGr__489F8C5E");

            entity.HasOne(d => d.QrgrievanceLog).WithMany(p => p.QrassnGrievanceTypeSubQuestions)
                .HasForeignKey(d => d.QrgrievanceLogId)
                .HasConstraintName("FK__QRAssnGri__QRGri__696161AB");
        });

        modelBuilder.Entity<QrautransferWaitList>(entity =>
        {
            entity.ToTable("QRAUTransferWaitList", "AAHR");

            entity.Property(e => e.QrautransferWaitListId).HasColumnName("QRAUTransferWaitListID");
            entity.Property(e => e.AccessibilieWaitListDate).HasColumnType("datetime");
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.AutransferWaitListId).HasColumnName("AUTransferWaitListID");
            entity.Property(e => e.AutransferWaitListNumber)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("AUTransferWaitListNumber");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentUnitProjectSiteId).HasColumnName("CurrentUnitProjectSiteID");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.DateRarmrequestPlacedOnRarmlog)
                .HasColumnType("datetime")
                .HasColumnName("DateRARMRequestPlacedOnRARMLog");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsPreviousAuwaitList).HasColumnName("IsPreviousAUWaitList");
            entity.Property(e => e.IsTenantRequestRarmpendingTransfer).HasColumnName("IsTenantRequestRARMPendingTransfer");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutReasonDeterminationNotProvidedSoonerId).HasColumnName("LutReasonDeterminationNotProvidedSoonerID");
            entity.Property(e => e.LutReasonTenantNotTransferredSoonerId).HasColumnName("LutReasonTenantNotTransferredSoonerID");
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.LutTransferWaitListReasonId).HasColumnName("LutTransferWaitListReasonID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MoveInProjectSiteId).HasColumnName("MoveInProjectSiteID");
            entity.Property(e => e.MoveInUnitPropSnapShotId).HasColumnName("MoveInUnitPropSnapShotID");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.ReasonDate).HasColumnType("datetime");
            entity.Property(e => e.TransferRequestDate).HasColumnType("datetime");

            entity.HasOne(d => d.AutransferWaitList).WithMany(p => p.QrautransferWaitLists)
                .HasForeignKey(d => d.AutransferWaitListId)
                .HasConstraintName("FK_QRAUTransferWaitList_AUTransferWaitList");

            entity.HasOne(d => d.CurrentUnitProjectSite).WithMany(p => p.QrautransferWaitListCurrentUnitProjectSites)
                .HasForeignKey(d => d.CurrentUnitProjectSiteId)
                .HasConstraintName("FK_QRAUTransferWaitList_ProjectSite1");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.QrautransferWaitListCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotId)
                .HasConstraintName("FK_QRAUTransferWaitList_PropSnapshot");

            entity.HasOne(d => d.LutReasonDeterminationNotProvidedSooner).WithMany(p => p.QrautransferWaitLists)
                .HasForeignKey(d => d.LutReasonDeterminationNotProvidedSoonerId)
                .HasConstraintName("FK_QRAUTransferWaitList_LutReasonDeterminationNotProvidedSooner");

            entity.HasOne(d => d.LutReasonTenantNotTransferredSooner).WithMany(p => p.QrautransferWaitLists)
                .HasForeignKey(d => d.LutReasonTenantNotTransferredSoonerId)
                .HasConstraintName("FK_QRAUTransferWaitList_LutReasonTenantNotTransferredSooner");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.QrautransferWaitLists)
                .HasForeignKey(d => d.LutTotalBathroomId)
                .HasConstraintName("FK_QRAUTransferWaitList_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.QrautransferWaitLists)
                .HasForeignKey(d => d.LutTotalBedroomId)
                .HasConstraintName("FK_QRAUTransferWaitList_LutTotalBedrooms");

            entity.HasOne(d => d.LutTransferWaitListReason).WithMany(p => p.QrautransferWaitLists)
                .HasForeignKey(d => d.LutTransferWaitListReasonId)
                .HasConstraintName("FK_QRAUTransferWaitList_LutTransferWaitListReason");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.QrautransferWaitLists)
                .HasForeignKey(d => d.LutUnitTypeId)
                .HasConstraintName("FK_QRAUTransferWaitList_QRLutUnitType");

            entity.HasOne(d => d.MoveInProjectSite).WithMany(p => p.QrautransferWaitListMoveInProjectSites)
                .HasForeignKey(d => d.MoveInProjectSiteId)
                .HasConstraintName("FK_QRAUTransferWaitList_ProjectSite");

            entity.HasOne(d => d.MoveInUnitPropSnapShot).WithMany(p => p.QrautransferWaitListMoveInUnitPropSnapShots)
                .HasForeignKey(d => d.MoveInUnitPropSnapShotId)
                .HasConstraintName("FK_QRAUTransferWaitList_MoveInPropSnapshot");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrautransferWaitLists)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRAUTransferWaitList_QuarterlyReport");
        });

        modelBuilder.Entity<QrauwaitList>(entity =>
        {
            entity.ToTable("QRAUWaitList", "AAHR");

            entity.Property(e => e.QrauwaitListId).HasColumnName("QRAUWaitListID");
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.ApplicantMovedUnit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDateTime).HasColumnType("datetime");
            entity.Property(e => e.AuwaitListId).HasColumnName("AUWaitListID");
            entity.Property(e => e.AuwaitListNumber)
                .HasMaxLength(50)
                .HasColumnName("AUWaitListNumber");
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HrmapplicationId).HasColumnName("HRMApplicationID");
            entity.Property(e => e.IsTenantMadeRa).HasColumnName("IsTenantMadeRA");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutApplicationTypeId).HasColumnName("LutApplicationTypeID");
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MoveInUnitProjectSiteId).HasColumnName("MoveInUnitProjectSiteID");
            entity.Property(e => e.MoveInUnitPropSnapShotId).HasColumnName("MoveInUnitPropSnapShotID");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.NatureOfRarequests)
                .IsUnicode(false)
                .HasColumnName("NatureOfRARequests");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.TenantAutransferDate)
                .HasColumnType("datetime")
                .HasColumnName("TenantAUTransferDate");
            entity.Property(e => e.TenantMadeRadate)
                .HasColumnType("datetime")
                .HasColumnName("TenantMadeRADate");
            entity.Property(e => e.WaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.AuwaitList).WithMany(p => p.QrauwaitLists)
                .HasForeignKey(d => d.AuwaitListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRAUWaitList_AUWaitList");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.QrauwaitListCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotId)
                .HasConstraintName("FK_QRAUWaitList_PropSnapshot");

            entity.HasOne(d => d.LutApplicationType).WithMany(p => p.QrauwaitLists)
                .HasForeignKey(d => d.LutApplicationTypeId)
                .HasConstraintName("FK_QRAUWaitList_LutApplicationType");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.QrauwaitLists)
                .HasForeignKey(d => d.LutTotalBathroomId)
                .HasConstraintName("FK_QRAUWaitList_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.QrauwaitLists)
                .HasForeignKey(d => d.LutTotalBedroomId)
                .HasConstraintName("FK_QRAUWaitList_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.QrauwaitLists)
                .HasForeignKey(d => d.LutUnitTypeId)
                .HasConstraintName("FK_QRAUWaitList_QRLutUnitType");

            entity.HasOne(d => d.MoveInUnitProjectSite).WithMany(p => p.QrauwaitLists)
                .HasForeignKey(d => d.MoveInUnitProjectSiteId)
                .HasConstraintName("FK_QRAUWaitList_ProjectSite");

            entity.HasOne(d => d.MoveInUnitPropSnapShot).WithMany(p => p.QrauwaitListMoveInUnitPropSnapShots)
                .HasForeignKey(d => d.MoveInUnitPropSnapShotId)
                .HasConstraintName("FK_QRAUWaitList_MoveInPropSnapshot");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrauwaitLists)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRAUWaitList_QuarterlyReport");
        });

        modelBuilder.Entity<Qrconfiguration>(entity =>
        {
            entity.ToTable("QRConfiguration", "AAHR");

            entity.Property(e => e.QrconfigurationId).HasColumnName("QRConfigurationID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Qrcode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("QRCode");
            entity.Property(e => e.QrsoftSubmitDay).HasColumnName("QRSoftSubmitDay");
            entity.Property(e => e.QrsoftSubmitMonth).HasColumnName("QRSoftSubmitMonth");
            entity.Property(e => e.QrstaffSubmitEndDay).HasColumnName("QRStaffSubmitEndDay");
            entity.Property(e => e.QrstaffSubmitEndMonth).HasColumnName("QRStaffSubmitEndMonth");
            entity.Property(e => e.QrsubmitEndDay).HasColumnName("QRSubmitEndDay");
            entity.Property(e => e.QrsubmitEndMonth).HasColumnName("QRSubmitEndMonth");
            entity.Property(e => e.QrsubmitStartDay).HasColumnName("QRSubmitStartDay");
            entity.Property(e => e.QrsubmitStartMonth).HasColumnName("QRSubmitStartMonth");
        });

        modelBuilder.Entity<QreffectiveCommunication>(entity =>
        {
            entity.ToTable("QREffectiveCommunication", "AAHR");

            entity.Property(e => e.QreffectiveCommunicationId).HasColumnName("QREffectiveCommunicationID");
            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfWithdrawal).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.EffectiveCommunicationId).HasColumnName("EffectiveCommunicationID");
            entity.Property(e => e.EffectiveCommunicationNumber).HasMaxLength(50);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutDeterminationStatusId).HasColumnName("LutDeterminationStatusID");
            entity.Property(e => e.LutEcrequestTypeId).HasColumnName("LutECRequestTypeID");
            entity.Property(e => e.LutEctypeId).HasColumnName("LutECTypeID");
            entity.Property(e => e.LutLanguageId).HasColumnName("LutLanguageID");
            entity.Property(e => e.LutLanguageTranslationId).HasColumnName("LutLanguageTranslationID");
            entity.Property(e => e.LutUserTypeId).HasColumnName("LutUserTypeID");
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate1).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate2).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate3).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate4).HasColumnType("datetime");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.UnitProjectSiteId).HasColumnName("UnitProjectSiteID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");

            entity.HasOne(d => d.EffectiveCommunication).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.EffectiveCommunicationId)
                .HasConstraintName("FK_QREffectiveCommunication_EffectiveCommunication");

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.LutDeterminationStatusId)
                .HasConstraintName("FK_QREffectiveCommunication_LutDeterminationStatus");

            entity.HasOne(d => d.LutEcrequestType).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.LutEcrequestTypeId)
                .HasConstraintName("FK_QREffectiveCommunication_LutECRequestType");

            entity.HasOne(d => d.LutEctype).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.LutEctypeId)
                .HasConstraintName("FK_QREffectiveCommunication_LutECType");

            entity.HasOne(d => d.LutLanguage).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.LutLanguageId)
                .HasConstraintName("FK_QREffectiveCommunication_LutLanguage");

            entity.HasOne(d => d.LutLanguageTranslation).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.LutLanguageTranslationId)
                .HasConstraintName("FK_QREffectiveCommunication_LutLanguageTranslation");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.LutUserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QREffectiveCommunication_LutUserType");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QREffectiveCommunication_QuarterlyReport");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.UnitProjectSiteId)
                .HasConstraintName("FK_QREffectiveCommunication_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QreffectiveCommunications)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_QREffectiveCommunication_PropSnapshot");
        });

        modelBuilder.Entity<QrfairHousing>(entity =>
        {
            entity.ToTable("QRFairHousing", "AAHR");

            entity.Property(e => e.QrfairHousingId).HasColumnName("QRFairHousingID");
            entity.Property(e => e.AccountNlinkPropertyDate).HasColumnName("AccountNLinkPropertyDate");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FairHousingId).HasColumnName("FairHousingID");
            entity.Property(e => e.Fhorganization).HasColumnName("FHOrganization");
            entity.Property(e => e.IsAwareOfAnyFhac).HasColumnName("IsAwareOfAnyFHAC");
            entity.Property(e => e.IsOpmrequiredNewPropMgmtStaffToAttendAnnualFh).HasColumnName("IsOPMRequiredNewPropMgmtStaffToAttendAnnualFH");
            entity.Property(e => e.IsOpmrequiredNewPropMgmtStaffToCreateAahraccount).HasColumnName("IsOPMRequiredNewPropMgmtStaffToCreateAAHRAccount");
            entity.Property(e => e.LegalOwnerName).HasMaxLength(500);
            entity.Property(e => e.LutSignatureTitleId).HasColumnName("LutSignatureTitleID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherFhacfiledSource).HasColumnName("OtherFHACFiledSource");
            entity.Property(e => e.OwnerEmail).HasMaxLength(100);
            entity.Property(e => e.OwnerPhone).HasMaxLength(30);
            entity.Property(e => e.PhoneType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .HasColumnName("PMEmail");
            entity.Property(e => e.Pmname)
                .HasMaxLength(300)
                .HasColumnName("PMName");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(30)
                .HasColumnName("PMPhone");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.QrbeginDate).HasColumnName("QRBeginDate");
            entity.Property(e => e.QrendDate).HasColumnName("QREndDate");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.SignerName).HasMaxLength(300);
            entity.Property(e => e.TotalFullyAccessibleHvunit).HasColumnName("TotalFullyAccessibleHVUnit");
            entity.Property(e => e.TotalTenantsOccupiedAuwithoutNeed).HasColumnName("TotalTenantsOccupiedAUWithoutNeed");
            entity.Property(e => e.TotalVacantAuthisQuarter).HasColumnName("TotalVacantAUThisQuarter");

            entity.HasOne(d => d.FairHousing).WithMany(p => p.QrfairHousings)
                .HasForeignKey(d => d.FairHousingId)
                .HasConstraintName("FK_QRFairHousing_FairHousing");

            entity.HasOne(d => d.LutSignatureTitle).WithMany(p => p.QrfairHousings)
                .HasForeignKey(d => d.LutSignatureTitleId)
                .HasConstraintName("FK_QRFairHousing_LutSignatureTitle");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrfairHousings)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRFairHousing_QuarterlyReport");
        });

        modelBuilder.Entity<QrgrievanceLog>(entity =>
        {
            entity.ToTable("QRGrievanceLog", "AAHR");

            entity.Property(e => e.QrgrievanceLogId).HasColumnName("QRGrievanceLogID");
            entity.Property(e => e.AnticipatedDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicantAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DecisionPendingDate).HasColumnType("datetime");
            entity.Property(e => e.DecisionProvidedDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDetail).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationName).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationPhone).IsUnicode(false);
            entity.Property(e => e.FinalDeterminationTitleOther).IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceDetail).IsUnicode(false);
            entity.Property(e => e.GrievanceLogId).HasColumnName("GrievanceLogID");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.ImplementationDelayReason).IsUnicode(false);
            entity.Property(e => e.ImplementationInformation).IsUnicode(false);
            entity.Property(e => e.IsHcidlacompliantFiled).HasColumnName("IsHCIDLACompliantFiled");
            entity.Property(e => e.IsHudcompliantFiled).HasColumnName("IsHUDCompliantFiled");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutDeterminationStatusId).HasColumnName("LutDeterminationStatusID");
            entity.Property(e => e.LutDevelopmentCategoryId).HasColumnName("LutDevelopmentCategoryID");
            entity.Property(e => e.LutFinalDeterminationTitleId).HasColumnName("LutFinalDeterminationTitleID");
            entity.Property(e => e.LutGrievanceStatusId).HasColumnName("LutGrievanceStatusID");
            entity.Property(e => e.LutGrievanceSubmitTypeId).HasColumnName("LutGrievanceSubmitTypeID");
            entity.Property(e => e.LutUserTypeId).HasColumnName("LutUserTypeID");
            entity.Property(e => e.MeetingManagerName).IsUnicode(false);
            entity.Property(e => e.MeetingManagerTitle).IsUnicode(false);
            entity.Property(e => e.MeetingRequestDate).HasColumnType("datetime");
            entity.Property(e => e.MeetingScheduledDate).HasColumnType("datetime");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PendingStatusDescription).IsUnicode(false);
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.RecordsProvidedDate).HasColumnType("datetime");
            entity.Property(e => e.RecordsRequestDate).HasColumnType("datetime");
            entity.Property(e => e.UnitProjectSiteId).HasColumnName("UnitProjectSiteID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.WithdrawalDate).HasColumnType("datetime");
            entity.Property(e => e.WithdrawalReason).IsUnicode(false);

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.QrgrievanceLogs)
                .HasForeignKey(d => d.LutDeterminationStatusId)
                .HasConstraintName("FK_QRGrievanceLog_LutGrievanceDeterminationStatus");

            entity.HasOne(d => d.LutDevelopmentCategory).WithMany(p => p.QrgrievanceLogs)
                .HasForeignKey(d => d.LutDevelopmentCategoryId)
                .HasConstraintName("FK_QRGrievanceLog_LutDevelopmentCategory");

            entity.HasOne(d => d.LutFinalDeterminationTitle).WithMany(p => p.QrgrievanceLogs)
                .HasForeignKey(d => d.LutFinalDeterminationTitleId)
                .HasConstraintName("FK_QRGrievanceLog_GrievanceLog");

            entity.HasOne(d => d.LutGrievanceStatus).WithMany(p => p.QrgrievanceLogs)
                .HasForeignKey(d => d.LutGrievanceStatusId)
                .HasConstraintName("FK_QRGrievanceLog_LutGrievanceStatus");

            entity.HasOne(d => d.LutGrievanceSubmitType).WithMany(p => p.QrgrievanceLogs)
                .HasForeignKey(d => d.LutGrievanceSubmitTypeId)
                .HasConstraintName("FK_QRGrievanceLog_LutGrievanceSubmitType");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.QrgrievanceLogs)
                .HasForeignKey(d => d.LutUserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRGrievanceLog_LutUserType");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.QrgrievanceLogProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .HasConstraintName("FK_QRGrievanceLog_PropSnapshot");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrgrievanceLogs)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRGrievanceLog_QuarterlyReport");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.QrgrievanceLogs)
                .HasForeignKey(d => d.UnitProjectSiteId)
                .HasConstraintName("FK_QRGrievanceLog_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QrgrievanceLogUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_QRGrievanceLog_TenantPropSnapshot");
        });

        modelBuilder.Entity<QrnewStaffContactInfo>(entity =>
        {
            entity.ToTable("QRNewStaffContactInfo", "AAHR");

            entity.Property(e => e.QrnewStaffContactInfoId).HasColumnName("QRNewStaffContactInfoID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.LutAssociatedRoleId).HasColumnName("LutAssociatedRoleID");
            entity.Property(e => e.LutChangeRoleId).HasColumnName("LutChangeRoleID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NewStaffContactInfoId).HasColumnName("NewStaffContactInfoID");
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.Title).HasMaxLength(100);

            entity.HasOne(d => d.LutAssociatedRole).WithMany(p => p.QrnewStaffContactInfos)
                .HasForeignKey(d => d.LutAssociatedRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRNewStaffContactInfo_LutAssociatedRole");

            entity.HasOne(d => d.LutChangeRole).WithMany(p => p.QrnewStaffContactInfos)
                .HasForeignKey(d => d.LutChangeRoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRNewStaffContactInfo_LutChangeRole");

            entity.HasOne(d => d.NewStaffContactInfo).WithMany(p => p.QrnewStaffContactInfos)
                .HasForeignKey(d => d.NewStaffContactInfoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRNewStaffContactInfo_NewStaffContactInfo");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrnewStaffContactInfos)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRNewStaffContactInfo_QuarterlyReport");
        });

        modelBuilder.Entity<QroccupancyUnit>(entity =>
        {
            entity.ToTable("QROccupancyUnit", "AAHR");

            entity.Property(e => e.QroccupancyUnitId).HasColumnName("QROccupancyUnitID");
            entity.Property(e => e.AgencyName).HasMaxLength(50);
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(9)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.BuildingId).HasColumnName("BuildingID");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentProjSitePropSnapShotId).HasColumnName("CurrentProjSitePropSnapShotID");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IsAvailabeFromAutransferList).HasColumnName("IsAvailabeFromAUTransferList");
            entity.Property(e => e.IsAvailableFromAuwaitList).HasColumnName("IsAvailableFromAUWaitList");
            entity.Property(e => e.IsCesunit).HasColumnName("IsCESUnit");
            entity.Property(e => e.IsLeaseAddendumProvidedToAcHp).HasColumnName("IsLeaseAddendumProvidedToAcHP");
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.LutAmiid).HasColumnName("LutAMIID");
            entity.Property(e => e.LutLeaseAddendumNotExecuteReasonId).HasColumnName("LutLeaseAddendumNotExecuteReasonID");
            entity.Property(e => e.LutOccupancyReasonId).HasColumnName("LutOccupancyReasonID");
            entity.Property(e => e.LutPreDirCd)
                .HasMaxLength(50)
                .HasColumnName("LutPreDirCD");
            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.LutStateCd)
                .HasMaxLength(50)
                .HasColumnName("LutStateCD");
            entity.Property(e => e.LutStreetTypeCd)
                .HasMaxLength(50)
                .HasColumnName("LutStreetTypeCD");
            entity.Property(e => e.LutTenantSelectedFromId).HasColumnName("LutTenantSelectedFromID");
            entity.Property(e => e.LutTotalBathroomsId).HasColumnName("LutTotalBathroomsID");
            entity.Property(e => e.LutTotalBedroomsId).HasColumnName("LutTotalBedroomsID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PostDirCd).HasMaxLength(50);
            entity.Property(e => e.PreviousLiveInProperty).HasMaxLength(10);
            entity.Property(e => e.PreviousProjSitePropSnapShotId).HasColumnName("PreviousProjSitePropSnapShotID");
            entity.Property(e => e.PreviousUnitPropSnapShotId).HasColumnName("PreviousUnitPropSnapShotID");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.ReferralRecipientEmail).HasMaxLength(100);
            entity.Property(e => e.ReferralRecipientPhone).HasMaxLength(30);
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.StreetName).HasMaxLength(100);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.Zip).HasMaxLength(5);

            entity.HasOne(d => d.Building).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.BuildingId)
                .HasConstraintName("FK_QROccupancyUnit_Structure");

            entity.HasOne(d => d.CurrentProjSitePropSnapShot).WithMany(p => p.QroccupancyUnitCurrentProjSitePropSnapShots)
                .HasForeignKey(d => d.CurrentProjSitePropSnapShotId)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot2");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.QroccupancyUnitCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotId)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot3");

            entity.HasOne(d => d.Level).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_QROccupancyUnit_Level");

            entity.HasOne(d => d.LutAmi).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LutAmiid)
                .HasConstraintName("FK_QROccupancyUnit_LutAMI");

            entity.HasOne(d => d.LutLeaseAddendumNotExecuteReason).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LutLeaseAddendumNotExecuteReasonId)
                .HasConstraintName("FK_QROccupancyUnit_LutLeaseAddendumNotExecuteReason");

            entity.HasOne(d => d.LutOccupancyReason).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LutOccupancyReasonId)
                .HasConstraintName("FK_QROccupancyUnit_LutOccupancyReason");

            entity.HasOne(d => d.LutRentalSubsidy).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LutRentalSubsidyId)
                .HasConstraintName("FK_QROccupancyUnit_LutRentalSubsidy");

            entity.HasOne(d => d.LutTenantSelectedFrom).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LutTenantSelectedFromId)
                .HasConstraintName("FK_QROccupancyUnit_LutTenantSelectedFrom");

            entity.HasOne(d => d.LutTotalBathrooms).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LutTotalBathroomsId)
                .HasConstraintName("FK_QROccupancyUnit_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedrooms).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LutTotalBedroomsId)
                .HasConstraintName("FK_QROccupancyUnit_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.LutUnitTypeId)
                .HasConstraintName("FK_QROccupancyUnit_QRLutUnitType");

            entity.HasOne(d => d.PreviousProjSitePropSnapShot).WithMany(p => p.QroccupancyUnitPreviousProjSitePropSnapShots)
                .HasForeignKey(d => d.PreviousProjSitePropSnapShotId)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot4");

            entity.HasOne(d => d.PreviousUnitPropSnapShot).WithMany(p => p.QroccupancyUnitPreviousUnitPropSnapShots)
                .HasForeignKey(d => d.PreviousUnitPropSnapShotId)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot1");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.QuarterlyReportId)
                .HasConstraintName("FK_QROccupancyUnit_QuarterlyReport");

            entity.HasOne(d => d.SiteAddress).WithMany(p => p.QroccupancyUnits)
                .HasForeignKey(d => d.SiteAddressId)
                .HasConstraintName("FK_QROccupancyUnit_SiteAddress");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QroccupancyUnitUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_QROccupancyUnit_PropSnapshot");
        });

        modelBuilder.Entity<QrprojectSiteFutureWaitList>(entity =>
        {
            entity.ToTable("QRProjectSiteFutureWaitList", "AAHR");

            entity.Property(e => e.QrprojectSiteFutureWaitListId).HasColumnName("QRProjectSiteFutureWaitListID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsWaitListOpenInFuture).HasDefaultValue(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NoOfApplicantOnCuwl).HasColumnName("NoOfApplicantOnCUWL");
            entity.Property(e => e.NoOfApplicantOnCuwlseekAh).HasColumnName("NoOfApplicantOnCUWLSeekAH");
            entity.Property(e => e.OutReachConductDate).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteFutureWaitListId).HasColumnName("ProjectSiteFutureWaitListID");
            entity.Property(e => e.PropertyStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");

            entity.HasOne(d => d.ProjectSiteFutureWaitList).WithMany(p => p.QrprojectSiteFutureWaitLists)
                .HasForeignKey(d => d.ProjectSiteFutureWaitListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteFutureWaitList_ProjectSiteFutureWaitList");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrprojectSiteFutureWaitLists)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteFutureWaitList_QuarterlyReport");
        });

        modelBuilder.Entity<QrprojectSiteNoChangeReport>(entity =>
        {
            entity.ToTable("QRProjectSiteNoChangeReport", "AAHR");

            entity.Property(e => e.QrprojectSiteNoChangeReportId).HasColumnName("QRProjectSiteNoChangeReportID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsNoChangeInAutwl).HasColumnName("IsNoChangeInAUTWL");
            entity.Property(e => e.IsNoChangeInAuwl).HasColumnName("IsNoChangeInAUWL");
            entity.Property(e => e.IsNoChangeInEc).HasColumnName("IsNoChangeInEC");
            entity.Property(e => e.IsNoChangeInGl).HasColumnName("IsNoChangeInGL");
            entity.Property(e => e.IsNoChangeInOs).HasColumnName("IsNoChangeInOS");
            entity.Property(e => e.IsNoChangeInRa).HasColumnName("IsNoChangeInRA");
            entity.Property(e => e.IsNoChangeInUs).HasColumnName("IsNoChangeInUS");
            entity.Property(e => e.IsNoChangeInUuv).HasColumnName("IsNoChangeInUUV");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteNoChangeReportId).HasColumnName("ProjectSiteNoChangeReportID");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");

            entity.HasOne(d => d.ProjectSiteNoChangeReport).WithMany(p => p.QrprojectSiteNoChangeReports)
                .HasForeignKey(d => d.ProjectSiteNoChangeReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteNoChangeReport_ProjectSiteNoChangeReport");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrprojectSiteNoChangeReports)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteNoChangeReport_QuarterlyReport");
        });

        modelBuilder.Entity<QrprojectSiteUpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("QRProjectSiteUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.QrprojectSiteUpcomingUnitVacancyId).HasColumnName("QRProjectSiteUpcomingUnitVacancyID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteUpcomingUnitVacancyId).HasColumnName("ProjectSiteUpcomingUnitVacancyID");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");

            entity.HasOne(d => d.ProjectSiteUpcomingUnitVacancy).WithMany(p => p.QrprojectSiteUpcomingUnitVacancies)
                .HasForeignKey(d => d.ProjectSiteUpcomingUnitVacancyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteUpcomingUnitVacancy_ProjectSiteUpcomingUnitVacancy");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrprojectSiteUpcomingUnitVacancies)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRProjectSiteUpcomingUnitVacancy_QuarterlyReport");
        });

        modelBuilder.Entity<QrpropertyAssociatedAccount>(entity =>
        {
            entity.ToTable("QRPropertyAssociatedAccount", "AAHR");

            entity.Property(e => e.QrpropertyAssociatedAccountId).HasColumnName("QRPropertyAssociatedAccountID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.QrfairHousingId).HasColumnName("QRFairHousingID");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.Role).HasMaxLength(50);
        });

        modelBuilder.Entity<QrreasonableAccommodation>(entity =>
        {
            entity.HasKey(e => e.QrreasonableAccommodationId).HasName("PK_QRReasonableAccommodationLog");

            entity.ToTable("QRReasonableAccommodation", "AAHR");

            entity.Property(e => e.QrreasonableAccommodationId).HasColumnName("QRReasonableAccommodationID");
            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateForAddInfo).HasColumnType("datetime");
            entity.Property(e => e.DateForResponse).HasColumnType("datetime");
            entity.Property(e => e.DateOfWithdrawal).HasColumnType("datetime");
            entity.Property(e => e.DateTenantPlacedOnList).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.IsNeedAuunit).HasColumnName("IsNeedAUUnit");
            entity.Property(e => e.IsOnAutransferList).HasColumnName("IsOnAUTransferList");
            entity.Property(e => e.IsOnAuwaitList).HasColumnName("IsOnAUWaitList");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutDeterminationStatusId).HasColumnName("LutDeterminationStatusID");
            entity.Property(e => e.LutRacategoryId).HasColumnName("LutRACategoryID");
            entity.Property(e => e.LutRarequestTypeId).HasColumnName("LutRARequestTypeID");
            entity.Property(e => e.LutRasubCategoryId).HasColumnName("LutRASubCategoryID");
            entity.Property(e => e.LutTotalBathroomsId).HasColumnName("LutTotalBathroomsID");
            entity.Property(e => e.LutTotalBedroomsId).HasColumnName("LutTotalBedroomsID");
            entity.Property(e => e.LutUserTypeId).HasColumnName("LutUserTypeID");
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate1).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate2).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate3).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate4).HasColumnType("datetime");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.ReasonableAccommodationId).HasColumnName("ReasonableAccommodationID");
            entity.Property(e => e.ReasonableAccommodationNumber).HasMaxLength(50);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.UnitProjectSiteId).HasColumnName("UnitProjectSiteID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.LutDeterminationStatusId)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutDeterminationStatus");

            entity.HasOne(d => d.LutRacategory).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.LutRacategoryId)
                .HasConstraintName("FK_QRReasonableAccommodation_LutRACategory");

            entity.HasOne(d => d.LutRarequestType).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.LutRarequestTypeId)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutRARequestType");

            entity.HasOne(d => d.LutRasubCategory).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.LutRasubCategoryId)
                .HasConstraintName("FK_QRReasonableAccommodation_LutRASubCategory");

            entity.HasOne(d => d.LutTotalBathrooms).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.LutTotalBathroomsId)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedrooms).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.LutTotalBedroomsId)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutTotalBedrooms");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.LutUserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRReasonableAccommodationLog_LutUserType");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRReasonableAccommodation_QuarterlyReport");

            entity.HasOne(d => d.ReasonableAccommodation).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.ReasonableAccommodationId)
                .HasConstraintName("FK_QRReasonableAccommodation_ReasonableAccommodation");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.UnitProjectSiteId)
                .HasConstraintName("FK_QRReasonableAccommodation_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QrreasonableAccommodations)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_QRReasonableAccommodationLog_PropSnapshot");
        });

        modelBuilder.Entity<QrupcomingUnitVacancy>(entity =>
        {
            entity.ToTable("QRUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.QrupcomingUnitVacancyId).HasColumnName("QRUpcomingUnitVacancyID");
            entity.Property(e => e.Auwlno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AUWLNo");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.IsQualifiedAutl).HasColumnName("IsQualifiedAUTL");
            entity.Property(e => e.IsQualifiedAuwl).HasColumnName("IsQualifiedAUWL");
            entity.Property(e => e.IsQualifiedNonPwdinAu).HasColumnName("IsQualifiedNonPWDInAU");
            entity.Property(e => e.LutUpcomingUnitVacancyId).HasColumnName("LutUpcomingUnitVacancyID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.UpcomingUnitVacancyId).HasColumnName("UpcomingUnitVacancyID");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.QrupcomingUnitVacancyCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotId)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_PropSnapshot2");

            entity.HasOne(d => d.LutUpcomingUnitVacancy).WithMany(p => p.QrupcomingUnitVacancies)
                .HasForeignKey(d => d.LutUpcomingUnitVacancyId)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_LutUpcomingUnitVacancy");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.QrupcomingUnitVacancyProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_PropSnapshot");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrupcomingUnitVacancies)
                .HasForeignKey(d => d.QuarterlyReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_QuarterlyReport");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QrupcomingUnitVacancyUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_PropSnapshot1");

            entity.HasOne(d => d.UpcomingUnitVacancy).WithMany(p => p.QrupcomingUnitVacancies)
                .HasForeignKey(d => d.UpcomingUnitVacancyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QRUpcomingUnitVacancy_UpcomingUnitVacancy");
        });

        modelBuilder.Entity<QrutilizationSurvey>(entity =>
        {
            entity.ToTable("QRUtilizationSurvey", "AAHR");

            entity.Property(e => e.QrutilizationSurveyId).HasColumnName("QRUtilizationSurveyID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAddedToAutl).HasColumnName("IsAddedToAUTL");
            entity.Property(e => e.IsAddedToRarmlog).HasColumnName("IsAddedToRARMLog");
            entity.Property(e => e.IsAdvisedRightToRm).HasColumnName("IsAdvisedRightToRM");
            entity.Property(e => e.IsFullyAuneeded).HasColumnName("IsFullyAUNeeded");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotAddedToAutlreason).HasColumnName("NotAddedToAUTLReason");
            entity.Property(e => e.NotAddedToRarmlogReason).HasColumnName("NotAddedToRARMLogReason");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.TenantRequestedBathroomsId).HasColumnName("TenantRequestedBathroomsID");
            entity.Property(e => e.TenantRequestedBedroomsId).HasColumnName("TenantRequestedBedroomsID");
            entity.Property(e => e.TenantRequestedUnitTypeId).HasColumnName("TenantRequestedUnitTypeID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");

            entity.HasOne(d => d.QuarterlyReport).WithMany(p => p.QrutilizationSurveys)
                .HasForeignKey(d => d.QuarterlyReportId)
                .HasConstraintName("FK_QRUtilizationSurvey_QuarterlyReport");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.QrutilizationSurveys)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_QRUtilizationSurvey_PropSnapshot");
        });

        modelBuilder.Entity<QuarterlyReport>(entity =>
        {
            entity.ToTable("QuarterlyReport", "AAHR");

            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapShotId).HasColumnName("PropSnapShotID");
            entity.Property(e => e.Quarter).HasMaxLength(2);
            entity.Property(e => e.ReviewedCaseLogId).HasColumnName("ReviewedCaseLogID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.SubmittedCaseLogId).HasColumnName("SubmittedCaseLogID");

            entity.HasOne(d => d.PropSnapShot).WithMany(p => p.QuarterlyReports)
                .HasForeignKey(d => d.PropSnapShotId)
                .HasConstraintName("FK_QuarterlyReport_PropSnapshot");

            entity.HasOne(d => d.ReviewedCaseLog).WithMany(p => p.QuarterlyReportReviewedCaseLogs)
                .HasForeignKey(d => d.ReviewedCaseLogId)
                .HasConstraintName("FK_QuarterlyReport_CaseLog1");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.QuarterlyReports)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_QuarterlyReport_ServiceRequest");

            entity.HasOne(d => d.SubmittedCaseLog).WithMany(p => p.QuarterlyReportSubmittedCaseLogs)
                .HasForeignKey(d => d.SubmittedCaseLogId)
                .HasConstraintName("FK_QuarterlyReport_CaseLog");
        });

        modelBuilder.Entity<RandomUser>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.LastName).HasMaxLength(50);
        });

        modelBuilder.Entity<ReasonableAccommodation>(entity =>
        {
            entity.HasKey(e => e.ReasonableAccommodationId).HasName("PK_ReasonableAccommodationLog");

            entity.ToTable("ReasonableAccommodation", "AAHR", tb => tb.HasTrigger("trgReasonableAccommodationNumber"));

            entity.Property(e => e.ReasonableAccommodationId).HasColumnName("ReasonableAccommodationID");
            entity.Property(e => e.Address).HasMaxLength(300);
            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateForAddInfo).HasColumnType("datetime");
            entity.Property(e => e.DateForResponse).HasColumnType("datetime");
            entity.Property(e => e.DateOfWithdrawal).HasColumnType("datetime");
            entity.Property(e => e.DateTenantPlacedOnList).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.IsNeedAuunit).HasColumnName("IsNeedAUUnit");
            entity.Property(e => e.IsOnAutransferList).HasColumnName("IsOnAUTransferList");
            entity.Property(e => e.IsOnAuwaitList).HasColumnName("IsOnAUWaitList");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutDeterminationStatusId).HasColumnName("LutDeterminationStatusID");
            entity.Property(e => e.LutRacategoryId).HasColumnName("LutRACategoryID");
            entity.Property(e => e.LutRarequestTypeId).HasColumnName("LutRARequestTypeID");
            entity.Property(e => e.LutRasubCategoryId).HasColumnName("LutRASubCategoryID");
            entity.Property(e => e.LutTotalBathroomsId).HasColumnName("LutTotalBathroomsID");
            entity.Property(e => e.LutTotalBedroomsId).HasColumnName("LutTotalBedroomsID");
            entity.Property(e => e.LutUserTypeId).HasColumnName("LutUserTypeID");
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate1).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate2).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate3).HasColumnType("datetime");
            entity.Property(e => e.NotificationDate4).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.ReasonableAccommodationNumber).HasMaxLength(50);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.UnitProjectSiteId).HasColumnName("UnitProjectSiteID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");

            entity.HasOne(d => d.LutDeterminationStatus).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutDeterminationStatusId)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutDeterminationStatus");

            entity.HasOne(d => d.LutRacategory).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutRacategoryId)
                .HasConstraintName("FK_ReasonableAccommodation_LutRACategory");

            entity.HasOne(d => d.LutRarequestType).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutRarequestTypeId)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutRARequestType");

            entity.HasOne(d => d.LutRasubCategory).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutRasubCategoryId)
                .HasConstraintName("FK_ReasonableAccommodation_LutRASubCategory");

            entity.HasOne(d => d.LutTotalBathrooms).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutTotalBathroomsId)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedrooms).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutTotalBedroomsId)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutTotalBedrooms");

            entity.HasOne(d => d.LutUserType).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.LutUserTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReasonableAccommodationLog_LutUserType");

            entity.HasOne(d => d.UnitProjectSite).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.UnitProjectSiteId)
                .HasConstraintName("FK_ReasonableAccommodation_ProjectSite");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.ReasonableAccommodations)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_ReasonableAccommodationLog_PropSnapshot");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.ToTable("Region", "PnC");

            entity.Property(e => e.RegionId)
                .ValueGeneratedNever()
                .HasComment("Primary Key Identity column for the Neighborhood table")
                .HasColumnName("RegionID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("('System')")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.GeoJsonCoordinates)
                .IsUnicode(false)
                .HasComment("Geographic Json cooridantes");
            entity.Property(e => e.GeoJsonGeometryType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Geographic Json type");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("System")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last Modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.ParentNeighborhoodId)
                .HasComment("Neighborhood belongs to which region")
                .HasColumnName("ParentNeighborhoodID");
            entity.Property(e => e.RegionName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Name of Neighborhood or Region");
            entity.Property(e => e.RegionNumber).HasComment("1 Sorting sequence for Region");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("N = Neighborhood, R = Region");
            entity.Property(e => e.Wkt)
                .IsUnicode(false)
                .HasComment("Well know text for the geometry")
                .HasColumnName("WKT");
        });

        modelBuilder.Entity<Replacementapn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("replacementapn");

            entity.Property(e => e.Apnid).HasColumnName("apnid");
            entity.Property(e => e.Hims)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("hims");
            entity.Property(e => e.LutSiteCd).HasColumnName("LutSiteCD");
            entity.Property(e => e.Newapnid).HasColumnName("newapnid");
        });

        modelBuilder.Entity<ReviewListingLog>(entity =>
        {
            entity.ToTable("ReviewListingLog", "AAHR");

            entity.Property(e => e.ReviewListingLogId).HasColumnName("ReviewListingLogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsAcHpstaff)
                .HasDefaultValue(false)
                .HasColumnName("IsAcHPStaff");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Status).IsUnicode(false);
        });

        modelBuilder.Entity<ReviewPmplog>(entity =>
        {
            entity.ToTable("ReviewPMPLog", "AAHR");

            entity.Property(e => e.ReviewPmplogId).HasColumnName("ReviewPMPLogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAffirmativeMarketingDoc).HasColumnType("datetime");
            entity.Property(e => e.DateFinalCertificate).HasColumnType("datetime");
            entity.Property(e => e.DatePrelimaryCertificate).HasColumnType("datetime");
            entity.Property(e => e.FinalCertGuid).HasColumnName("FinalCertGUID");
            entity.Property(e => e.FinalCertUploadByUserFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinalCertUploadByUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAcHpstaff)
                .HasDefaultValue(false)
                .HasColumnName("IsAcHPStaff");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PrelimaryCertGuid).HasColumnName("PrelimaryCertGUID");
            entity.Property(e => e.PrelimaryCertUploadByUserFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrelimaryCertUploadByUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreliminaryApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Status).IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.ReviewPmplogs)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FK_ReviewPMPLog_Case");
        });

        modelBuilder.Entity<ReviewPmplogSnap>(entity =>
        {
            entity.ToTable("ReviewPMPLogSnap", "PMP");

            entity.Property(e => e.ReviewPmplogSnapId).HasColumnName("ReviewPMPLogSnapID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAffirmativeMarketingDoc).HasColumnType("datetime");
            entity.Property(e => e.DateFinalCertificate).HasColumnType("datetime");
            entity.Property(e => e.DatePrelimaryCertificate).HasColumnType("datetime");
            entity.Property(e => e.FinalCertGuid).HasColumnName("FinalCertGUID");
            entity.Property(e => e.FinalCertUploadByUserFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinalCertUploadByUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAcHpstaff)
                .HasDefaultValue(false)
                .HasColumnName("IsAcHPStaff");
            entity.Property(e => e.PmpsnapId).HasColumnName("PMPSnapID");
            entity.Property(e => e.PrelimaryCertGuid).HasColumnName("PrelimaryCertGUID");
            entity.Property(e => e.PrelimaryCertUploadByUserFullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrelimaryCertUploadByUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PreliminaryApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Status).IsUnicode(false);

            entity.HasOne(d => d.Case).WithMany(p => p.ReviewPmplogSnaps)
                .HasForeignKey(d => d.CaseId)
                .HasConstraintName("FK_ReviewPMPLogSnap_Case");

            entity.HasOne(d => d.Pmpsnap).WithMany(p => p.ReviewPmplogSnaps)
                .HasForeignKey(d => d.PmpsnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReviewPMPLogSnap_PMPSnap");
        });

        modelBuilder.Entity<ReviewReportDetail>(entity =>
        {
            entity.ToTable("ReviewReportDetail", "AAHPPC");

            entity.Property(e => e.ReviewReportDetailId).HasColumnName("ReviewReportDetailID");
            entity.Property(e => e.Analyst)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Supervisor)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.ReviewReportDetails)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_ReviewReportDetail_ServiceRequest1");
        });

        modelBuilder.Entity<ReviewReportItem>(entity =>
        {
            entity.HasKey(e => e.ReviewReportItemId).HasName("PK_PolicyReportDetail");

            entity.ToTable("ReviewReportItem", "AAHPPC");

            entity.Property(e => e.ReviewReportItemId).HasColumnName("ReviewReportItemID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutReviewReportItemId).HasColumnName("LutReviewReportItemID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ReportLanguage).IsUnicode(false);
            entity.Property(e => e.ReviewReportDetailId).HasColumnName("ReviewReportDetailID");

            entity.HasOne(d => d.LutReviewReportItem).WithMany(p => p.ReviewReportItems)
                .HasForeignKey(d => d.LutReviewReportItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReviewReportItem_LutReviewReportItem");

            entity.HasOne(d => d.ReviewReportDetail).WithMany(p => p.ReviewReportItems)
                .HasForeignKey(d => d.ReviewReportDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReviewReportItem_ReviewReportDetail");
        });

        modelBuilder.Entity<RoleMaster>(entity =>
        {
            entity.ToTable("RoleMaster", "CC");

            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.Application).WithMany(p => p.RoleMasters)
                .HasForeignKey(d => d.ApplicationId)
                .HasConstraintName("FK_RoleMaster_AM");
        });

        modelBuilder.Entity<ServiceRequest>(entity =>
        {
            entity.HasKey(e => e.ServiceRequestId).HasName("PK_BrushCase");

            entity.ToTable("ServiceRequest", "IMS", tb => tb.HasComment("Service Request table."));

            entity.HasIndex(e => e.CaseId, "NI_unitattributeid");

            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LutComplianceStatusId).HasColumnName("LutComplianceStatusID");
            entity.Property(e => e.LutInspectionStatusId).HasColumnName("LutInspectionStatusID");
            entity.Property(e => e.LutProgramCycleId).HasColumnName("LutProgramCycleID");
            entity.Property(e => e.LutServiceRequestTypeId).HasColumnName("LutServiceRequestTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestNumber).HasMaxLength(20);
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");

            entity.HasOne(d => d.Case).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BrushCase_Case");

            entity.HasOne(d => d.LutComplianceStatus).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.LutComplianceStatusId)
                .HasConstraintName("FK_BrushCase_LutComplianceStatus");

            entity.HasOne(d => d.LutInspectionStatus).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.LutInspectionStatusId)
                .HasConstraintName("FK_BrushCase_LutInspectionStatus");

            entity.HasOne(d => d.LutProgramCycle).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.LutProgramCycleId)
                .HasConstraintName("FK_ServiceRequest_LutProgramCycle");

            entity.HasOne(d => d.LutServiceRequestType).WithMany(p => p.ServiceRequests)
                .HasForeignKey(d => d.LutServiceRequestTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequest_ServiceRequestType");

            entity.HasOne(d => d.RefServiceRequestNavigation).WithMany(p => p.InverseRefServiceRequestNavigation)
                .HasForeignKey(d => d.RefServiceRequest)
                .HasConstraintName("FK_ServiceRequest_ServiceRequest");

            entity.HasMany(d => d.Notices).WithMany(p => p.ServiceRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnServiceRequestNotice",
                    r => r.HasOne<Notice>().WithMany()
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestNotice_Notice"),
                    l => l.HasOne<ServiceRequest>().WithMany()
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestNotice_ServiceRequest"),
                    j =>
                    {
                        j.HasKey("ServiceRequestId", "NoticeId");
                        j.ToTable("AssnServiceRequestNotice", "IMS");
                        j.IndexerProperty<long>("ServiceRequestId").HasColumnName("ServiceRequestID");
                        j.IndexerProperty<int>("NoticeId").HasColumnName("NoticeID");
                    });

            entity.HasMany(d => d.PropSnapshots).WithMany(p => p.ServiceRequests)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnServiceRequestPropSnapshot",
                    r => r.HasOne<PropSnapshot>().WithMany()
                        .HasForeignKey("PropSnapshotId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestPropIdentifier_PropIdentifier"),
                    l => l.HasOne<ServiceRequest>().WithMany()
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnServiceRequestPropIdentifier_ServiceRequest"),
                    j =>
                    {
                        j.HasKey("ServiceRequestId", "PropSnapshotId").HasName("PK_AssnServiceRequestPropIdentifier");
                        j.ToTable("AssnServiceRequestPropSnapshot", "PnC");
                        j.HasIndex(new[] { "PropSnapshotId" }, "IX_AssnServiceRequestPropSnapshot_PropSnapshotID");
                        j.IndexerProperty<long>("ServiceRequestId").HasColumnName("ServiceRequestID");
                        j.IndexerProperty<int>("PropSnapshotId").HasColumnName("PropSnapshotID");
                    });
        });

        modelBuilder.Entity<ServiceRequestContact>(entity =>
        {
            entity.HasKey(e => e.ServiceRequestContactId).HasName("PK_CaseContact");

            entity.ToTable("ServiceRequestContact", "PnC");

            entity.Property(e => e.ServiceRequestContactId).HasColumnName("ServiceRequestContactID");
            entity.Property(e => e.AssociationType).HasMaxLength(20);
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsMailing).HasComment("Obsolete yes or no");
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.ServiceRequestContacts)
                .HasForeignKey(d => d.ContactIdentifierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestContact_ContactIdentifier");

            entity.HasOne(d => d.LutContactType).WithMany(p => p.ServiceRequestContacts)
                .HasForeignKey(d => d.LutContactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestContact_LutContactType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.ServiceRequestContacts)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestContact_ServiceRequest");
        });

        modelBuilder.Entity<ServiceRequestGmcheckList>(entity =>
        {
            entity.HasKey(e => e.SrgmcheckListId);

            entity.ToTable("ServiceRequestGMCheckList", "IMS");

            entity.Property(e => e.SrgmcheckListId).HasColumnName("SRGMCheckListID");
            entity.Property(e => e.Answer)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutGmcheckListId).HasColumnName("LutGMCheckListID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.LutGmcheckList).WithMany(p => p.ServiceRequestGmcheckLists)
                .HasForeignKey(d => d.LutGmcheckListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestGMCheckList_LutGMCheckList");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.ServiceRequestGmcheckLists)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ServiceRequestGMCheckList_ServiceRequest");
        });

        modelBuilder.Entity<SiteAddress>(entity =>
        {
            entity.ToTable("SiteAddress", "PnC", tb => tb.HasTrigger("trg_SiteAddressLog"));

            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.AddressLine1)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AddressLine2)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .HasComputedColumnSql("(ltrim(rtrim(replace(replace((((((((isnull([HouseNum]+' ','')+isnull([HouseFracNum]+' ',''))+isnull([PreDirCd]+' ',''))+isnull([StreetName]+' ',''))+isnull([StreetTypeCd]+' ',''))+isnull([PostDirCd]+' ',''))+isnull([City]+' ',''))+isnull([State]+' ',''))+[Zip],'  ',' '),'  ',' '))))", false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PIN");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.RefSiteAddressId).HasColumnName("RefSiteAddressID");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ZipSuffix)
                .HasMaxLength(4)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasMany(d => d.Structures).WithMany(p => p.SiteAddresses)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnSiteAddressStructure",
                    r => r.HasOne<Structure>().WithMany()
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_BuildingID_AssnBuildingID"),
                    l => l.HasOne<SiteAddress>().WithMany()
                        .HasForeignKey("SiteAddressId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_SiteAddressID_AssnSiteAddressID"),
                    j =>
                    {
                        j.HasKey("SiteAddressId", "StructureId").HasName("PK_SiteAddress_BuildingID");
                        j.ToTable("AssnSiteAddressStructure", "PnC");
                        j.IndexerProperty<int>("SiteAddressId").HasColumnName("SiteAddressID");
                        j.IndexerProperty<int>("StructureId").HasColumnName("StructureID");
                    });
        });

        modelBuilder.Entity<SiteAddressLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SiteAddressLog", "PnC");

            entity.Property(e => e.AddressLine1).HasMaxLength(100);
            entity.Property(e => e.AddressLine2).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PIN");
            entity.Property(e => e.PostDirCd).HasMaxLength(50);
            entity.Property(e => e.PreDirCd).HasMaxLength(50);
            entity.Property(e => e.RefSiteAddressId).HasColumnName("RefSiteAddressID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.SiteAddressLogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("SiteAddressLogID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName).HasMaxLength(100);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Zip).HasMaxLength(5);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<SiteAssociatedAssessorsParcelNumber>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SiteAsso__3214EC07E4A71BCF");

            entity.ToTable("SiteAssociatedAssessorsParcelNumber", "AAHR");

            entity.Property(e => e.Apnnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APNNumber");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsAcHp)
                .HasDefaultValue(false)
                .HasColumnName("IsAcHP");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("isDeleted");
            entity.Property(e => e.IsHims)
                .HasDefaultValue(false)
                .HasColumnName("IsHIMS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.SiteId).HasColumnName("SiteID");
        });

        modelBuilder.Entity<SpdetailViewColumnConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPDetailView_CC");

            entity.ToTable("SPDetailView_ColumnConfig", "CC");

            entity.Property(e => e.ColumnName).HasMaxLength(500);
            entity.Property(e => e.DisplayName).HasMaxLength(500);
            entity.Property(e => e.SpconfigId)
                .HasComment("Reference to SPView_SPConfiguration")
                .HasColumnName("SPConfigId");
            entity.Property(e => e.Target).HasMaxLength(50);

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.SpdetailViewColumnConfigs)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPDetailView_CCSPDV_DC");

            entity.HasOne(d => d.Spconfig).WithMany(p => p.SpdetailViewColumnConfigs)
                .HasForeignKey(d => d.SpconfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPDetailView_SPV_SPC");
        });

        modelBuilder.Entity<SpdetailViewDisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPView_DisplayConfig");

            entity.ToTable("SPDetailView_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.HelpText).IsUnicode(false);
            entity.Property(e => e.IsCollapsed)
                .HasDefaultValue(false)
                .HasComment("This field is used to store set SPView accrodian setting is expand or collapse.");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.NoOfViewColumns).HasComment("This field is used to store how many columns display on SPView section.");
            entity.Property(e => e.ParamNamenValue).HasComment("This field is used to store stored procedure paramater name and parameter value. ");
            entity.Property(e => e.SpconfigId)
                .HasComment("Reference to SPView_SPConfiguration")
                .HasColumnName("SPConfigId");

            entity.HasOne(d => d.Spconfig).WithMany(p => p.SpdetailViewDisplayConfigs)
                .HasForeignKey(d => d.SpconfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPDetailView_DisConfSPV_SPC");
        });

        modelBuilder.Entity<SpgridViewColumnConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPGridView_CC");

            entity.ToTable("SPGridView_ColumnConfig", "CC");

            entity.Property(e => e.ColumnName).HasMaxLength(50);
            entity.Property(e => e.DisplayName).HasMaxLength(500);
            entity.Property(e => e.SpconfigId)
                .HasComment("Reference to SPView_SPConfiguration")
                .HasColumnName("SPConfigId");
            entity.Property(e => e.Target).HasMaxLength(50);

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.SpgridViewColumnConfigs)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGridView_CC_SPGV_DC");

            entity.HasOne(d => d.Spconfig).WithMany(p => p.SpgridViewColumnConfigs)
                .HasForeignKey(d => d.SpconfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGV_CC_SPV_SPC");
        });

        modelBuilder.Entity<SpgridViewDisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SSRSTable_DispConf");

            entity.ToTable("SPGridView_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.Adajson).HasColumnName("ADAJson");
            entity.Property(e => e.IsAda)
                .HasDefaultValue(false)
                .HasColumnName("IsADA");
            entity.Property(e => e.IsCollapsed)
                .HasDefaultValue(false)
                .HasComment("This field is used to store set SPView accrodian setting is expand or collapse.");
            entity.Property(e => e.IsFilter).HasDefaultValue(false);
            entity.Property(e => e.IsPaging).HasDefaultValue(false);
            entity.Property(e => e.IsSearch).HasDefaultValue(false);
            entity.Property(e => e.LutRenderTypeId).HasColumnName("LutRenderTypeID");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.NoOfRecords).HasComment("This field is used for how many records you want to display on report.");
            entity.Property(e => e.ParamNamenValue).HasComment("This field is used to store stored procedure paramater name and parameter value. ");
            entity.Property(e => e.SpconfigId)
                .HasComment("Reference to SPView_SPConfiguration")
                .HasColumnName("SPConfigId");

            entity.HasOne(d => d.LutRenderType).WithMany(p => p.SpgridViewDisplayConfigs)
                .HasForeignKey(d => d.LutRenderTypeId)
                .HasConstraintName("FK_SPGridView_DisplayConfig_LutRenderType");

            entity.HasOne(d => d.Spconfig).WithMany(p => p.SpgridViewDisplayConfigs)
                .HasForeignKey(d => d.SpconfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGridView_DC_SPV_SPC");
        });

        modelBuilder.Entity<SpgroupViewColumnConfig>(entity =>
        {
            entity.ToTable("SPGroupView_ColumnConfig", "CC");

            entity.Property(e => e.ColumnName).HasMaxLength(50);
            entity.Property(e => e.DisplayName).HasMaxLength(50);
            entity.Property(e => e.SpconfigId).HasColumnName("SPConfigId");
            entity.Property(e => e.Target).HasMaxLength(50);

            entity.HasOne(d => d.DisplayConfig).WithMany(p => p.SpgroupViewColumnConfigs)
                .HasForeignKey(d => d.DisplayConfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGroupView_ColumnConfig_SPGroupView_DisplayConfig");

            entity.HasOne(d => d.Spconfig).WithMany(p => p.SpgroupViewColumnConfigs)
                .HasForeignKey(d => d.SpconfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGroupView_ColumnConfig_SPView_SPConfig");
        });

        modelBuilder.Entity<SpgroupViewDisplayConfig>(entity =>
        {
            entity.ToTable("SPGroupView_DisplayConfig", "CC");

            entity.Property(e => e.GroupColumnName).HasMaxLength(50);
            entity.Property(e => e.LabelColumnName).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.SpconfigId).HasColumnName("SPConfigId");
            entity.Property(e => e.ValueColumnName).HasMaxLength(50);

            entity.HasOne(d => d.Spconfig).WithMany(p => p.SpgroupViewDisplayConfigs)
                .HasForeignKey(d => d.SpconfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPGroupView_DisplayConfig_SPView_SPConfig");
        });

        modelBuilder.Entity<SpmatrixViewDisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SSRSMatrix_DC");

            entity.ToTable("SPMatrixView_DisplayConfig", "CC");

            entity.Property(e => e.Id).HasComment("DisplayConfigID is identity column.");
            entity.Property(e => e.ColumnField)
                .HasMaxLength(50)
                .HasComment("This field is used to store y coordinates column name of matrix report.");
            entity.Property(e => e.DataField)
                .HasMaxLength(50)
                .HasComment("This field stores data column whose count will be displayed in matrix.");
            entity.Property(e => e.IsCollapsed)
                .HasDefaultValue(false)
                .HasComment("This field is used to store set SPView accrodian setting is expand or collapse.");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasDefaultValue("");
            entity.Property(e => e.NoOfRecords).HasComment("This field is used to store how many records you want to display on report.");
            entity.Property(e => e.ParamNamenValue).HasComment("This field is used to store stored procedure paramater name and parameter value. ");
            entity.Property(e => e.RowField)
                .HasMaxLength(50)
                .HasComment("This field is used to store x coordinates column name of matrix report.");
            entity.Property(e => e.SpconfigId)
                .HasComment("Reference to SPView_SPConfiguration")
                .HasColumnName("SPConfigId");

            entity.HasOne(d => d.Spconfig).WithMany(p => p.SpmatrixViewDisplayConfigs)
                .HasForeignKey(d => d.SpconfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPMatrixView_DC_SPV_SPC");
        });

        modelBuilder.Entity<SpviewDbconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPView_DBConfiguration");

            entity.ToTable("SPView_DBConfig", "CC");

            entity.Property(e => e.Id).HasComment("DBConfigID is identity column.");
            entity.Property(e => e.Dbname)
                .HasMaxLength(50)
                .HasComment("This field is used to store database name.")
                .HasColumnName("DBName");
            entity.Property(e => e.Password)
                .HasMaxLength(50)
                .HasComment("This field is used to store database password.");
            entity.Property(e => e.Port)
                .HasMaxLength(10)
                .HasComment("Port.");
            entity.Property(e => e.ServerName)
                .HasMaxLength(50)
                .HasComment("This field is used to store database server name.");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .HasComment("This field is used to store database username.");
        });

        modelBuilder.Entity<SpviewSpconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPView_SPConfiguration");

            entity.ToTable("SPView_SPConfig", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.DbconfigId)
                .HasComment("Reference to SPView_DBConfiguration table")
                .HasColumnName("DBConfigId");
            entity.Property(e => e.Spname)
                .HasMaxLength(100)
                .HasComment("This field is used to store stored procedure name which is exists on selected database server.")
                .HasColumnName("SPName");

            entity.HasOne(d => d.Dbconfig).WithMany(p => p.SpviewSpconfigs)
                .HasForeignKey(d => d.DbconfigId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SPView_SPC_SPV_DBC");
        });

        modelBuilder.Entity<Structure>(entity =>
        {
            entity.HasKey(e => e.StructureId).HasName("PK_Building");

            entity.ToTable("Structure", "PnC", tb => tb.HasTrigger("trg_StructureLog"));

            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Description).HasDefaultValue("");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefBuildingId).HasColumnName("RefBuildingID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Apn).WithMany(p => p.Structures)
                .HasForeignKey(d => d.Apnid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Structure_APN");

            entity.HasOne(d => d.LutStructureType).WithMany(p => p.Structures)
                .HasForeignKey(d => d.LutStructureTypeId)
                .HasConstraintName("FK_Structure_LutStructureType");
        });

        modelBuilder.Entity<StructureAssociatedAssessorsParcelNumber>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Structur__3214EC0793AEC3D7");

            entity.ToTable("StructureAssociatedAssessorsParcelNumber", "AAHR");

            entity.Property(e => e.Apnnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APNNumber");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsDeleted)
                .HasDefaultValue(false)
                .HasColumnName("isDeleted");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
        });

        modelBuilder.Entity<StructureAttribute>(entity =>
        {
            entity.HasKey(e => e.StructureAttributeId).HasName("PK__tmp_ms_x__9B8778DE1F7985B9");

            entity.ToTable("StructureAttribute", "AAHR", tb => tb.HasTrigger("trg_StructureAttributeLog"));

            entity.Property(e => e.StructureAttributeId).HasColumnName("StructureAttributeID");
            entity.Property(e => e.AcHpassociatedApn)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAPN");
            entity.Property(e => e.BuildingDescription).IsUnicode(false);
            entity.Property(e => e.ClearedByAcHpforTco).HasColumnName("ClearedByAcHPForTCO");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DateOf1stBuildingPermitForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stCoFoforConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("DateOf1stCoFOForConversionToResidential");
            entity.Property(e => e.DateOf1stPlanCheckSubmissionForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stTco).HasColumnName("DateOf1stTCO");
            entity.Property(e => e.DateOf1stTcoforConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("DateOf1stTCOForConversionToResidential");
            entity.Property(e => e.DateOfCofOpostRetrofit).HasColumnName("DateOfCofOPostRetrofit");
            entity.Property(e => e.DateOfCurrentBuildingPermitFinaled).HasColumnType("datetime");
            entity.Property(e => e.DateOfFco)
                .HasColumnType("datetime")
                .HasColumnName("DateOfFCO");
            entity.Property(e => e.DateOfMostRecentTco).HasColumnName("DateOfMostRecentTCO");
            entity.Property(e => e.DateOmostRecentBuildingPermit).HasColumnName("DateOMostRecentBuildingPermit");
            entity.Property(e => e.DbsretrofitBuildingPermitNumber)
                .HasMaxLength(100)
                .HasColumnName("DBSRetrofitBuildingPermitNumber");
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fha11adesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FHA_11ADesignatedUnitNumbers");
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstPlanCheckSubmissionForConversionToResidential).HasMaxLength(100);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Himsapn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIMSAPN");
            entity.Property(e => e.HistoricBuildingCofOdate)
                .HasColumnType("datetime")
                .HasColumnName("HistoricBuildingCofODate");
            entity.Property(e => e.HistoricBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitIssueDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitNumber).IsUnicode(false);
            entity.Property(e => e.HistoricBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.LadbsissuedTcodate).HasColumnName("LADBSIssuedTCODate");
            entity.Property(e => e.Ladbsjson)
                .IsUnicode(false)
                .HasColumnName("LADBSjson");
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutBuildingTypeId).HasColumnName("LutBuildingTypeID");
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModificationsGrantedByLadbsunitsBuildings)
                .IsUnicode(false)
                .HasColumnName("ModificationsGrantedByLADBSUnitsBuildings");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OtherStructureType).HasMaxLength(100);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StructureId).HasColumnName("StructureID");

            entity.HasOne(d => d.LutBuildingType).WithMany(p => p.StructureAttributes)
                .HasForeignKey(d => d.LutBuildingTypeId)
                .HasConstraintName("FK_StructureAttribute_LutBuildingType");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.StructureAttributes)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StructureAttribute_PropSnapshot");
        });

        modelBuilder.Entity<StructureAttributeLog>(entity =>
        {
            entity.HasKey(e => e.StructureAttributeLogId).HasName("PK_StructureAttributeLogID");

            entity.ToTable("StructureAttributeLog", "AAHR");

            entity.Property(e => e.StructureAttributeLogId).HasColumnName("StructureAttributeLogID");
            entity.Property(e => e.AcHpassociatedApn)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAPN");
            entity.Property(e => e.BuildingDescription).IsUnicode(false);
            entity.Property(e => e.ClearedByAcHpforTco).HasColumnName("ClearedByAcHPForTCO");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DateOf1stBuildingPermitForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stCoFoforConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("DateOf1stCoFOForConversionToResidential");
            entity.Property(e => e.DateOf1stPlanCheckSubmissionForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stTco).HasColumnName("DateOf1stTCO");
            entity.Property(e => e.DateOf1stTcoforConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("DateOf1stTCOForConversionToResidential");
            entity.Property(e => e.DateOfCofOpostRetrofit).HasColumnName("DateOfCofOPostRetrofit");
            entity.Property(e => e.DateOfCurrentBuildingPermitFinaled).HasColumnType("datetime");
            entity.Property(e => e.DateOfFco)
                .HasColumnType("datetime")
                .HasColumnName("DateOfFCO");
            entity.Property(e => e.DateOfMostRecentTco).HasColumnName("DateOfMostRecentTCO");
            entity.Property(e => e.DateOmostRecentBuildingPermit).HasColumnName("DateOMostRecentBuildingPermit");
            entity.Property(e => e.DbsretrofitBuildingPermitNumber)
                .HasMaxLength(100)
                .HasColumnName("DBSRetrofitBuildingPermitNumber");
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fha11adesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FHA_11ADesignatedUnitNumbers");
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstPlanCheckSubmissionForConversionToResidential).HasMaxLength(100);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Himsapn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIMSAPN");
            entity.Property(e => e.HistoricBuildingCofOdate)
                .HasColumnType("datetime")
                .HasColumnName("HistoricBuildingCofODate");
            entity.Property(e => e.HistoricBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitIssueDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitNumber).IsUnicode(false);
            entity.Property(e => e.HistoricBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.LadbsissuedTcodate).HasColumnName("LADBSIssuedTCODate");
            entity.Property(e => e.Ladbsjson)
                .IsUnicode(false)
                .HasColumnName("LADBSjson");
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutBuildingTypeId).HasColumnName("LutBuildingTypeID");
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModificationsGrantedByLadbsunitsBuildings)
                .IsUnicode(false)
                .HasColumnName("ModificationsGrantedByLADBSUnitsBuildings");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OtherStructureType).HasMaxLength(100);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StructureAttributeId).HasColumnName("StructureAttributeID");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
        });

        modelBuilder.Entity<StructureAttributeTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StructureAttribute_temp");

            entity.Property(e => e.AcHpassociatedApn)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAPN");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DateOf1stTco).HasColumnName("DateOf1stTCO");
            entity.Property(e => e.DateOfCofOpostRetrofit).HasColumnName("DateOfCofOPostRetrofit");
            entity.Property(e => e.DateOfCurrentTco).HasColumnName("DateOfCurrentTCO");
            entity.Property(e => e.DateOfMostRecentTco).HasColumnName("DateOfMostRecentTCO");
            entity.Property(e => e.DateOmostRecentBuildingPermit).HasColumnName("DateOMostRecentBuildingPermit");
            entity.Property(e => e.DbsretrofitBuildingPermitNumber)
                .HasMaxLength(100)
                .HasColumnName("DBSRetrofitBuildingPermitNumber");
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fha11adesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FHA_11ADesignatedUnitNumbers");
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Himsapn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIMSAPN");
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StructureAttributeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("StructureAttributeID");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
        });

        modelBuilder.Entity<StructureAttributeTempAfter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StructureAttribute_tempAfter");

            entity.Property(e => e.AcHpassociatedApn)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAPN");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DateOf1stTco).HasColumnName("DateOf1stTCO");
            entity.Property(e => e.DateOfCofOpostRetrofit).HasColumnName("DateOfCofOPostRetrofit");
            entity.Property(e => e.DateOfCurrentTco).HasColumnName("DateOfCurrentTCO");
            entity.Property(e => e.DateOfMostRecentTco).HasColumnName("DateOfMostRecentTCO");
            entity.Property(e => e.DateOmostRecentBuildingPermit).HasColumnName("DateOMostRecentBuildingPermit");
            entity.Property(e => e.DbsretrofitBuildingPermitNumber)
                .HasMaxLength(100)
                .HasColumnName("DBSRetrofitBuildingPermitNumber");
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fha11adesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FHA_11ADesignatedUnitNumbers");
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Himsapn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIMSAPN");
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StructureAttributeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("StructureAttributeID");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
        });

        modelBuilder.Entity<StructureLog>(entity =>
        {
            entity.HasKey(e => e.StructureLogId).HasName("PK_StructureLogId");

            entity.ToTable("StructureLog", "AAHR");

            entity.Property(e => e.StructureLogId).HasColumnName("StructureLogID");
            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefBuildingId).HasColumnName("RefBuildingID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StructureTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Structure_temp");

            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefBuildingId).HasColumnName("RefBuildingID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureId)
                .ValueGeneratedOnAdd()
                .HasColumnName("StructureID");
            entity.Property(e => e.StructureNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StructureTempAfter>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Structure_tempAfter");

            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefBuildingId).HasColumnName("RefBuildingID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureId)
                .ValueGeneratedOnAdd()
                .HasColumnName("StructureID");
            entity.Property(e => e.StructureNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StructureUnitInformation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Structur__3214EC27851E84A1");

            entity.ToTable("StructureUnitInformation", "AAHR");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.LuttotalBedroomId).HasColumnName("LUTTotalBedroomID");
            entity.Property(e => e.LutunitType).HasColumnName("LUTUnitType");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.Total).HasDefaultValue(0);
        });

        modelBuilder.Entity<SubmissionErrorLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ListingSubmissionErrorLog");

            entity.ToTable("SubmissionErrorLog", "AAHR");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModuleName).HasMaxLength(50);
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.HasKey(e => e.SubscriptionId).HasName("PK_Subscriptions");

            entity.ToTable("Subscription", "AAHR");

            entity.Property(e => e.SubscriptionId).HasColumnName("SubscriptionID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.ContactIdentifierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Subscriptions_ContactIdentifier");
        });

        modelBuilder.Entity<SurveyReport>(entity =>
        {
            entity.HasKey(e => e.SurveyReportId).HasName("PK_AAHPCC.LCMIntake");

            entity.ToTable("SurveyReport", "AAHPCC");

            entity.Property(e => e.SurveyReportId).HasColumnName("SurveyReportID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DbscertificateOccupancyDate)
                .HasColumnType("datetime")
                .HasColumnName("DBSCertificateOccupancyDate");
            entity.Property(e => e.DbsdatePermitIssued)
                .HasColumnType("datetime")
                .HasColumnName("DBSDatePermitIssued");
            entity.Property(e => e.DbsdateSubmitToLa)
                .HasColumnType("datetime")
                .HasColumnName("DBSDateSubmitToLA");
            entity.Property(e => e.DbspermitFinalledDate)
                .HasColumnType("datetime")
                .HasColumnName("DBSPermitFinalledDate");
            entity.Property(e => e.DbsrequiresFhainspection)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DBSRequiresFHAInspection");
            entity.Property(e => e.Mob10perReqByAgreement).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.MobExisting)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MobRecommend)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NacestAccessRetrofit).HasColumnName("NACEstAccessRetrofit");
            entity.Property(e => e.NacestAccessRetrofitComAreas).HasColumnName("NACEstAccessRetrofitComAreas");
            entity.Property(e => e.NacestAccessRetrofitUnit).HasColumnName("NACEstAccessRetrofitUnit");
            entity.Property(e => e.NacinspectionDate)
                .HasColumnType("datetime")
                .HasColumnName("NACInspectionDate");
            entity.Property(e => e.NacrecomForProjectSite).HasColumnName("NACRecomForProjectSite");
            entity.Property(e => e.ParkingRequired)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PlanCheckPermitCost).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PrevailWageMaterialCostPlus30per).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ReformedAndFinalDate).HasColumnType("datetime");
            entity.Property(e => e.ReportDate).HasColumnType("datetime");
            entity.Property(e => e.ResidentialBuildingType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Srounits).HasColumnName("SROUnits");
            entity.Property(e => e.TotalCostForRetrofit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Ucf00studioUnits).HasColumnName("UCF00StudioUnits");
            entity.Property(e => e.Ucf01bedroomUnits).HasColumnName("UCF01BedroomUnits");
            entity.Property(e => e.Ucf02bedroomUnits).HasColumnName("UCF02BedroomUnits");
            entity.Property(e => e.Ucf03bedroomUnits).HasColumnName("UCF03BedroomUnits");
            entity.Property(e => e.Ucf04bedroomUnits).HasColumnName("UCF04BedroomUnits");
            entity.Property(e => e.Ucf05bedroomUnits).HasColumnName("UCF05BedroomUnits");
            entity.Property(e => e.Ucf0efficiencyUnits).HasColumnName("UCF0EfficiencyUnits");
            entity.Property(e => e.Ucf4perReqByAgreement)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("UCF4perReqByAgreement");
            entity.Property(e => e.Ucfexisting)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UCFExisting");
            entity.Property(e => e.UcfmgrUnitTypeNotVerfied).HasColumnName("UCFMgrUnitTypeNotVerfied");
            entity.Property(e => e.Ucfrecommended)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UCFRecommended");
            entity.Property(e => e.UcftotalNoOfUnits).HasColumnName("UCFTotalNoOfUnits");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.SurveyReports)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_NACIntake_ServiceRequest");
        });

        modelBuilder.Entity<Svcarea2012>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SVCAREA2012");

            entity.Property(e => e.Abbv)
                .HasMaxLength(5)
                .HasColumnName("ABBV");
            entity.Property(e => e.Label)
                .HasMaxLength(3)
                .HasColumnName("LABEL");
            entity.Property(e => e.Objectid).HasColumnName("OBJECTID");
            entity.Property(e => e.SpaName)
                .HasMaxLength(15)
                .HasColumnName("SPA_NAME");
        });

        modelBuilder.Entity<Svcarea201210252023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SVCAREA2012_10252023");

            entity.Property(e => e.Abbv)
                .HasMaxLength(5)
                .HasColumnName("ABBV");
            entity.Property(e => e.Label)
                .HasMaxLength(3)
                .HasColumnName("LABEL");
            entity.Property(e => e.Objectid).HasColumnName("OBJECTID");
            entity.Property(e => e.SpaName)
                .HasMaxLength(15)
                .HasColumnName("SPA_NAME");
        });

        modelBuilder.Entity<TContactIdentifier>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tContactIdentifier", "PnC");

            entity.Property(e => e.Apn)
                .HasMaxLength(50)
                .HasColumnName("apn");
            entity.Property(e => e.BusinessLicense).HasMaxLength(100);
            entity.Property(e => e.CensoredName).HasMaxLength(150);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactIdentifierId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email2).HasMaxLength(200);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress).HasMaxLength(300);
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(50)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LicenseValidFrom).HasColumnType("datetime");
            entity.Property(e => e.LicenseValidTo).HasColumnType("datetime");
            entity.Property(e => e.LutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneExt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Phone_Ext");
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneFax).HasMaxLength(50);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.PictureMain).HasMaxLength(200);
            entity.Property(e => e.PictureThumbnail).HasMaxLength(200);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.PreferredContactMethod).HasMaxLength(20);
            entity.Property(e => e.RefContactId).HasColumnName("RefContactID");
            entity.Property(e => e.Salutation).HasMaxLength(20);
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<TabControlViewMap>(entity =>
        {
            entity.ToTable("TabControlViewMap", "CC");

            entity.Property(e => e.Id).HasComment("Primary Key of the table.");
            entity.Property(e => e.ControlViewId).HasComment("This ID will connect to Contro View Master to fetch the associated Control with specific View Configuration.");
            entity.Property(e => e.RenderSection)
                .HasMaxLength(50)
                .HasComment("Optional Parameter to specify the locatin where control should be rendered. This should be in sync with sections on Tab.");
            entity.Property(e => e.TabId).HasComment("This ID represents Tab on which associated control will be rendered. It connects to Tab Master.");

            entity.HasOne(d => d.ControlView).WithMany(p => p.TabControlViewMaps)
                .HasForeignKey(d => d.ControlViewId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TabControlViewMap_CV");

            entity.HasOne(d => d.Tab).WithMany(p => p.TabControlViewMaps)
                .HasForeignKey(d => d.TabId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TabControlViewMap_TabMaste");

            entity.HasMany(d => d.Roles).WithMany(p => p.TabControlViews)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnTabControlRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnTabControlRole_RM"),
                    l => l.HasOne<TabControlViewMap>().WithMany()
                        .HasForeignKey("TabControlView")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnTabControlRole_TCVM"),
                    j =>
                    {
                        j.HasKey("TabControlView", "RoleId");
                        j.ToTable("AssnTabControlRole", "CC");
                    });
        });

        modelBuilder.Entity<TabMaster>(entity =>
        {
            entity.ToTable("TabMaster", "CC", tb => tb.HasComment("This table holds information about all the tabs within an application. Any tab that needs to render common control has to be added to this table."));

            entity.Property(e => e.DisplayName).HasMaxLength(50);
            entity.Property(e => e.IsLoginRequired).HasDefaultValue(true);
            entity.Property(e => e.ShowTitle).HasDefaultValue(true);
            entity.Property(e => e.TabName).HasMaxLength(50);

            entity.HasOne(d => d.Application).WithMany(p => p.TabMasters)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TabMaster_ApplicationMaste");

            entity.HasOne(d => d.ParentTab).WithMany(p => p.InverseParentTab)
                .HasForeignKey(d => d.ParentTabId)
                .HasConstraintName("FK_TabMaster_TabMaster");

            entity.HasOne(d => d.Reference).WithMany(p => p.InverseReference)
                .HasForeignKey(d => d.ReferenceId)
                .HasConstraintName("FK_TabMaster_TabMaster1");

            entity.HasOne(d => d.Template).WithMany(p => p.TabMasters)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_TabMaster_TemplateMaster");

            entity.HasMany(d => d.Roles).WithMany(p => p.Tabs)
                .UsingEntity<Dictionary<string, object>>(
                    "AssnTabRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnTabRole_RoleMaster"),
                    l => l.HasOne<TabMaster>().WithMany()
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnTabRole_TabMaster"),
                    j =>
                    {
                        j.HasKey("TabId", "RoleId");
                        j.ToTable("AssnTabRole", "CC");
                    });
        });

        modelBuilder.Entity<TassnPropContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TAssnPropContact", "PnC");

            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.AssnPropContactId).HasColumnName("AssnPropContactID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IdentifierType).HasMaxLength(50);
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
        });

        modelBuilder.Entity<Tcaselog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tcaselog");

            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CaseLogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("CaseLogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FromState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastAssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("LastAssigneeID");
            entity.Property(e => e.LastAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NewAssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("NewAssigneeID");
            entity.Property(e => e.NewAssigneeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ToState)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TeamManagement>(entity =>
        {
            entity.ToTable("TeamManagement", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<TempAcHpcertifiedProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempAcHPCertifiedProperties");

            entity.Property(e => e.AcHpNumber)
                .IsUnicode(false)
                .HasColumnName("AcHP Number");
            entity.Property(e => e.AcHpPreFinalTcoInspection)
                .IsUnicode(false)
                .HasColumnName("AcHP Pre-Final (TCO) Inspection");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.COfOClearedByAcHp)
                .IsUnicode(false)
                .HasColumnName("C Of O Cleared by AcHP");
            entity.Property(e => e.COfOIssuedByLadbs)
                .IsUnicode(false)
                .HasColumnName("C of O issued by LADBS");
            entity.Property(e => e.COfOIssuedByLosAngelesCounty)
                .IsUnicode(false)
                .HasColumnName("C of O issued by Los Angeles County");
            entity.Property(e => e.Fha11a11bAdaptableUnits)
                .IsUnicode(false)
                .HasColumnName("FHA/11A/11B Adaptable Units");
            entity.Property(e => e.HearingVisionUnits)
                .IsUnicode(false)
                .HasColumnName("Hearing/Vision Units");
            entity.Property(e => e.InitialNacInspectionRequested)
                .IsUnicode(false)
                .HasColumnName("Initial NAC Inspection Requested");
            entity.Property(e => e.InitialNacReportReceived)
                .IsUnicode(false)
                .HasColumnName("Initial NAC Report Received");
            entity.Property(e => e.LadbsPermitNumber)
                .IsUnicode(false)
                .HasColumnName("LADBS Permit Number");
            entity.Property(e => e.LahdCertificationDate)
                .IsUnicode(false)
                .HasColumnName("LAHD Certification Date");
            entity.Property(e => e.LahdSingedProjectCompletionFormDate)
                .IsUnicode(false)
                .HasColumnName("LAHD Singed Project Completion Form Date");
            entity.Property(e => e.MobilityUnits)
                .IsUnicode(false)
                .HasColumnName("Mobility Units");
            entity.Property(e => e.NacCleanReportIssuedDate)
                .IsUnicode(false)
                .HasColumnName("NAC Clean Report Issued Date");
            entity.Property(e => e.NacInitialInspectionDate)
                .IsUnicode(false)
                .HasColumnName("NAC Initial Inspection Date");
            entity.Property(e => e.NacInitialInspectionEndDate)
                .IsUnicode(false)
                .HasColumnName("NAC Initial Inspection end Date");
            entity.Property(e => e.NacRecForCitificationDate)
                .IsUnicode(false)
                .HasColumnName("NAC Rec. For Citification Date");
            entity.Property(e => e.NacReportIssuedFor1stRevisit)
                .IsUnicode(false)
                .HasColumnName("NAC Report Issued for 1st Revisit");
            entity.Property(e => e.NacReportIssuedForRevisit2)
                .IsUnicode(false)
                .HasColumnName("NAC Report Issued for Revisit 2");
            entity.Property(e => e.NacReportIssuedForRevisit3)
                .IsUnicode(false)
                .HasColumnName("NAC Report Issued for Revisit 3");
            entity.Property(e => e.NacReportIssuedForRevisit4)
                .IsUnicode(false)
                .HasColumnName("NAC Report Issued for Revisit 4");
            entity.Property(e => e.NacReportSentToContractorDeveloper)
                .IsUnicode(false)
                .HasColumnName("NAC Report Sent to Contractor Developer");
            entity.Property(e => e.NacRevisit1InspectionEndDate)
                .IsUnicode(false)
                .HasColumnName("NAC Revisit 1 inspection End Date");
            entity.Property(e => e.NacRevisit1InspectionStartDate)
                .IsUnicode(false)
                .HasColumnName("NAC Revisit 1 Inspection Start date");
            entity.Property(e => e.NacRevisit2InspectionEndDate)
                .IsUnicode(false)
                .HasColumnName("NAC Revisit 2 Inspection End Date");
            entity.Property(e => e.NacRevisit2InspectionStartDate)
                .IsUnicode(false)
                .HasColumnName("NAC Revisit 2 Inspection Start date");
            entity.Property(e => e.NacRevisit3InspectionEndDate)
                .IsUnicode(false)
                .HasColumnName("NAC Revisit 3 Inspection End Date");
            entity.Property(e => e.NacRevisit3InspectionStartDate)
                .IsUnicode(false)
                .HasColumnName("NAC Revisit 3 Inspection Start date");
            entity.Property(e => e.NacRevisit4InspectionEndDate)
                .IsUnicode(false)
                .HasColumnName("NAC Revisit 4 Inspection End Date");
            entity.Property(e => e.NacRevisit4InspectionStartDate)
                .IsUnicode(false)
                .HasColumnName("NAC Revisit 4 Inspection Start date");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.NumberOfNonCompliantItems)
                .IsUnicode(false)
                .HasColumnName("Number of Non Compliant Items");
            entity.Property(e => e.NumberOfNonCompliantItems1)
                .IsUnicode(false)
                .HasColumnName("Number of Non Compliant Items 1");
            entity.Property(e => e.NumberOfNonCompliantItems2)
                .IsUnicode(false)
                .HasColumnName("Number of Non Compliant Items 2");
            entity.Property(e => e.NumberOfNonCompliantItems3)
                .IsUnicode(false)
                .HasColumnName("Number of Non Compliant Items 3");
            entity.Property(e => e.NumberOfNonCompliantItems4)
                .IsUnicode(false)
                .HasColumnName("Number of Non Compliant Items 4");
            entity.Property(e => e.NumberOfPagesFor2ndRevisitReport)
                .IsUnicode(false)
                .HasColumnName("Number of Pages for 2nd Revisit Report");
            entity.Property(e => e.NumberOfPagesFor3rdRevisitReport)
                .IsUnicode(false)
                .HasColumnName("Number of Pages for 3rd Revisit Report");
            entity.Property(e => e.NumberOfPagesFor4thRevisitReport)
                .IsUnicode(false)
                .HasColumnName("Number of Pages for 4th Revisit Report");
            entity.Property(e => e.NumberOfPagesForInitialNacReport)
                .IsUnicode(false)
                .HasColumnName("Number of pages for Initial NAC Report");
            entity.Property(e => e.NumberOfPagesOf1stRevisitReport)
                .IsUnicode(false)
                .HasColumnName("Number of Pages of 1st Revisit Report");
            entity.Property(e => e.ProjectName)
                .IsUnicode(false)
                .HasColumnName("Project Name");
            entity.Property(e => e.ProjectedTco)
                .IsUnicode(false)
                .HasColumnName("Projected TCO");
            entity.Property(e => e.Rcs)
                .IsUnicode(false)
                .HasColumnName("RCS");
            entity.Property(e => e.RequestNacRevisit1)
                .IsUnicode(false)
                .HasColumnName("Request NAC Revisit 1");
            entity.Property(e => e.RequestNacRevisit2)
                .IsUnicode(false)
                .HasColumnName("Request NAC Revisit 2");
            entity.Property(e => e.RequestNacRevisit3)
                .IsUnicode(false)
                .HasColumnName("Request NAC Revisit 3");
            entity.Property(e => e.RequestNacRevisit4)
                .IsUnicode(false)
                .HasColumnName("Request NAC Revisit 4");
            entity.Property(e => e.Revisit1ReportSentToContractorDeveloper)
                .IsUnicode(false)
                .HasColumnName("Revisit 1 Report sent to Contractor/Developer");
            entity.Property(e => e.Revisit2ReportSentToContractorDeveloper)
                .IsUnicode(false)
                .HasColumnName("Revisit 2 Report sent to Contractor/Developer");
            entity.Property(e => e.Revisit3ReportSentToContractorDeveloper)
                .IsUnicode(false)
                .HasColumnName("Revisit 3 Report sent to Contractor/Developer");
            entity.Property(e => e.Revisit4ReportSentToContractorDeveloper)
                .IsUnicode(false)
                .HasColumnName("Revisit 4 Report sent to Contractor/Developer");
            entity.Property(e => e.TcoClearedByAcHp)
                .IsUnicode(false)
                .HasColumnName("TCO Cleared By AcHP");
            entity.Property(e => e.TcoIssuedByLadbs)
                .IsUnicode(false)
                .HasColumnName("TCO Issued By LADBS");
            entity.Property(e => e.TcoIssuedByTheCountyOfLosAngeles)
                .IsUnicode(false)
                .HasColumnName("TCO Issued by The County of Los Angeles");
            entity.Property(e => e.TotalAu)
                .IsUnicode(false)
                .HasColumnName("Total AU");
            entity.Property(e => e.TotalNumberOfUnits)
                .IsUnicode(false)
                .HasColumnName("Total Number of Units");
            entity.Property(e => e.TotalOfDaysFor1stNacRevisit)
                .IsUnicode(false)
                .HasColumnName("Total # of Days for 1st NAC Revisit");
            entity.Property(e => e.TotalOfDaysFor2ndNacRevisit)
                .IsUnicode(false)
                .HasColumnName("Total # of Days for 2nd NAC Revisit");
            entity.Property(e => e.TotalOfDaysFor3rdNacRevisit)
                .IsUnicode(false)
                .HasColumnName("Total # of Days for 3rd NAC Revisit");
            entity.Property(e => e.TotalOfDaysFor4thNacRevisit)
                .IsUnicode(false)
                .HasColumnName("Total # of Days for 4th NAC Revisit");
            entity.Property(e => e.TotalOfDaysForInitialInspectionDate)
                .IsUnicode(false)
                .HasColumnName("Total # of Days for Initial Inspection Date");
            entity.Property(e => e.TypeOfProject)
                .IsUnicode(false)
                .HasColumnName("Type of Project");
        });

        modelBuilder.Entity<TempPrefHouseId>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempPrefHouseId");

            entity.Property(e => e.Apn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.PrefHouseId)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tempdocstatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tempdocstatus");

            entity.Property(e => e.Guid).HasColumnName("guid");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
        });

        modelBuilder.Entity<TemplateDetail>(entity =>
        {
            entity.ToTable("TemplateDetail", "CC", tb => tb.HasComment("This table is used for to store template detail in form of row and number of column that template have. Each row have 1 or more columns and column increase in multiple of 2 i.e. 2,4,6...12. Max column width is 12."));

            entity.Property(e => e.RenderSection)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Template).WithMany(p => p.TemplateDetails)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_TemplateDetail_TemplateMaster");
        });

        modelBuilder.Entity<TemplateMaster>(entity =>
        {
            entity.ToTable("TemplateMaster", "CC");

            entity.Property(e => e.TemplateName).HasMaxLength(100);
        });

        modelBuilder.Entity<TppangelenoUser>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__TPPAngel__1788CC4CFBC81A27");

            entity.ToTable("TPPAngelenoUsers");

            entity.HasIndex(e => e.Email, "UQ__TPPAngel__A9D10534E604936A").IsUnique();

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.LastName).HasMaxLength(100);
        });

        modelBuilder.Entity<Tqr2fairHousingBatch1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TQR2FairHousingBatch1");

            entity.Property(e => e.AcHp)
                .HasMaxLength(255)
                .HasColumnName("AcHP #");
            entity.Property(e => e.F13).HasMaxLength(255);
            entity.Property(e => e.F2).HasMaxLength(255);
            entity.Property(e => e.LegalOwnerName)
                .HasMaxLength(255)
                .HasColumnName("Legal Owner Name");
            entity.Property(e => e.LutSignatureTitleId).HasColumnName("LutSignatureTitleID");
            entity.Property(e => e.OwnerAddress)
                .HasMaxLength(255)
                .HasColumnName("Owner Address");
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(255)
                .HasColumnName("Owner Email");
            entity.Property(e => e.OwnerPhone)
                .HasMaxLength(255)
                .HasColumnName("Owner Phone");
            entity.Property(e => e.Pmemail)
                .HasMaxLength(255)
                .HasColumnName("PMEmail");
            entity.Property(e => e.Pmname)
                .HasMaxLength(255)
                .HasColumnName("PMName");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(255)
                .HasColumnName("PMPhone");
            entity.Property(e => e.PropertyAddress)
                .HasMaxLength(255)
                .HasColumnName("Property Address");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(255)
                .HasColumnName("Property Name");
            entity.Property(e => e.QrbeginDate)
                .HasColumnType("datetime")
                .HasColumnName("QRBegin Date");
            entity.Property(e => e.QrendDate)
                .HasColumnType("datetime")
                .HasColumnName("QREnd Date");
            entity.Property(e => e.QrreportCreateDateTimeCopyFromPreviousTabColumnH)
                .HasColumnType("datetime")
                .HasColumnName("QRReport Create Date Time (Copy from Previous Tab Column H)");
            entity.Property(e => e.QuarterlyReportIdSys)
                .HasMaxLength(255)
                .HasColumnName("Quarterly Report ID (Sys)");
            entity.Property(e => e.Statement1)
                .HasMaxLength(255)
                .HasColumnName("Statement 1");
            entity.Property(e => e.Statement10)
                .HasMaxLength(255)
                .HasColumnName("Statement 10");
            entity.Property(e => e.Statement11)
                .HasMaxLength(255)
                .HasColumnName("Statement 11");
            entity.Property(e => e.Statement12)
                .HasMaxLength(255)
                .HasColumnName("Statement 12");
            entity.Property(e => e.Statement13)
                .HasMaxLength(255)
                .HasColumnName("Statement 13");
            entity.Property(e => e.Statement14)
                .HasMaxLength(255)
                .HasColumnName("Statement 14");
            entity.Property(e => e.Statement15)
                .HasMaxLength(255)
                .HasColumnName("Statement 15");
            entity.Property(e => e.Statement16)
                .HasMaxLength(255)
                .HasColumnName("Statement 16");
            entity.Property(e => e.Statement2)
                .HasMaxLength(255)
                .HasColumnName("Statement 2");
            entity.Property(e => e.Statement3)
                .HasMaxLength(255)
                .HasColumnName("Statement 3");
            entity.Property(e => e.Statement4)
                .HasMaxLength(255)
                .HasColumnName("Statement 4");
            entity.Property(e => e.Statement5)
                .HasMaxLength(255)
                .HasColumnName("Statement 5");
            entity.Property(e => e.Statement6)
                .HasMaxLength(255)
                .HasColumnName("Statement 6");
            entity.Property(e => e.Statement7)
                .HasMaxLength(255)
                .HasColumnName("Statement 7");
            entity.Property(e => e.Statement8)
                .HasMaxLength(255)
                .HasColumnName("Statement 8");
            entity.Property(e => e.Statement9)
                .HasMaxLength(255)
                .HasColumnName("Statement 9");
            entity.Property(e => e.TotalFullyAccessibleHvunit).HasColumnName("Total Fully Accessible HVUnit");
            entity.Property(e => e.TotalFullyAccessibleMobilityUnit).HasColumnName("Total Fully Accessible Mobility Unit");
            entity.Property(e => e.TotalTenantsOccupiedAuwithoutNeed).HasColumnName("Total Tenants Occupied AUWithout Need");
            entity.Property(e => e.TotalVacantAuthisQuarter).HasColumnName("Total Vacant AUThis Quarter");
            entity.Property(e => e.YearQr)
                .HasMaxLength(255)
                .HasColumnName("Year QR");
        });

        modelBuilder.Entity<Tqr2serviceRequestBatch1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TQR2ServiceRequestBatch1");

            entity.Property(e => e.AcHp)
                .HasMaxLength(255)
                .HasColumnName("AcHP #");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(255)
                .HasColumnName("Created By");
            entity.Property(e => e.CreatedOnUploadDateToIntranet)
                .HasColumnType("datetime")
                .HasColumnName("Created On (Upload Date to Intranet)");
            entity.Property(e => e.QrQuarter)
                .HasMaxLength(255)
                .HasColumnName("QR Quarter");
            entity.Property(e => e.QrStatus)
                .HasMaxLength(255)
                .HasColumnName("QR Status");
            entity.Property(e => e.QrYearYyyy).HasColumnName("QR year YYYY ");
            entity.Property(e => e.QuarterlyReportId)
                .HasMaxLength(255)
                .HasColumnName("Quarterly Report ID");
            entity.Property(e => e.ServiceRequestId)
                .HasMaxLength(255)
                .HasColumnName("Service Request ID");
        });

        modelBuilder.Entity<TqrCorrectionNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tqrCorrectionNote");

            entity.Property(e => e.CorrectionNote).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapShotId).HasColumnName("PropSnapShotID");
            entity.Property(e => e.QrcorrectionNoteId)
                .ValueGeneratedOnAdd()
                .HasColumnName("QRCorrectionNoteID");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
        });

        modelBuilder.Entity<Trainer>(entity =>
        {
            entity.HasKey(e => e.TrainerId).HasName("PkTrainer");

            entity.ToTable("Trainer", "TRN", tb => tb.HasComment("Training information"));

            entity.Property(e => e.TrainerId)
                .HasComment("Primary Key Identity column for the Trainer table")
                .HasColumnName("TrainerID");
            entity.Property(e => e.Comment)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("internal notes related to trainer");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("trainer email addresss");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("trainer first name");
            entity.Property(e => e.HireDate)
                .HasComment("date start work for provide training service")
                .HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasComment("if 0, trainer wont be assign to train session anymore");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("trainer last name");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("trainer middle name");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("trainer phone number");
            entity.Property(e => e.Profile)
                .IsUnicode(false)
                .HasComment("trainer profile, some information about the trainer");
        });

        modelBuilder.Entity<TrainingHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrainingHistory", "DPT");

            entity.Property(e => e.CancelByHostDate).HasColumnType("datetime");
            entity.Property(e => e.CancelByUserDate).HasColumnType("datetime");
            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactIdentifierEmail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierFirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ContactIdentifierIdmuserName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("ContactIdentifierIDMUserName");
            entity.Property(e => e.ContactIdentifierLastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierMiddleName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CourseDetails).IsUnicode(false);
            entity.Property(e => e.CourseName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.EnrolledDate).HasColumnType("datetime");
            entity.Property(e => e.GenerateCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.GroupAssnContactContactId).HasColumnName("GroupAssnContactContactID");
            entity.Property(e => e.GroupContactFirstName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupContactIdentifierId).HasColumnName("GroupContactIdentifierID");
            entity.Property(e => e.GroupContactLastName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupContactMiddleName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupIdmuserName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("GroupIDMUserName");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.MarkAbsentDate).HasColumnType("datetime");
            entity.Property(e => e.MarkAttendDate).HasColumnType("datetime");
            entity.Property(e => e.Staffcomments)
                .IsUnicode(false)
                .HasColumnName("staffcomments");
            entity.Property(e => e.StatementNumber)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TraineeTitle).HasMaxLength(100);
            entity.Property(e => e.TrainerComments)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerEmail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerHireDate)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerPhone)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerProfile).IsUnicode(false);
            entity.Property(e => e.TrainingCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrainingCourseId).HasColumnName("TrainingCourseID");
            entity.Property(e => e.TrainingDate).HasColumnType("datetime");
            entity.Property(e => e.TrainingLocation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedByName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.TrainingRegistryFirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryId).HasColumnName("TrainingRegistryID");
            entity.Property(e => e.TrainingRegistryLastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryMiddleName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryStatus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistyEmail).HasMaxLength(500);
            entity.Property(e => e.TrainingSessionId).HasColumnName("TrainingSessionID");
            entity.Property(e => e.TrainingSessionNotes).IsUnicode(false);
            entity.Property(e => e.TrainingType)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TransferCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateCertificateNameDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TrainingHistory20211122>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TrainingHistory_20211122", "DPT");

            entity.Property(e => e.CancelByHostDate).HasColumnType("datetime");
            entity.Property(e => e.CancelByUserDate).HasColumnType("datetime");
            entity.Property(e => e.CaptureDate).HasColumnType("smalldatetime");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactIdentifierEmail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierFirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ContactIdentifierIdmuserName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("ContactIdentifierIDMUserName");
            entity.Property(e => e.ContactIdentifierLastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierMiddleName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactIdentifierName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CourseDetails).IsUnicode(false);
            entity.Property(e => e.CourseName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.EnrolledDate).HasColumnType("datetime");
            entity.Property(e => e.GenerateCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.GroupAssnContactContactId).HasColumnName("GroupAssnContactContactID");
            entity.Property(e => e.GroupContactFirstName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupContactIdentifierId).HasColumnName("GroupContactIdentifierID");
            entity.Property(e => e.GroupContactLastName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupContactMiddleName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.GroupIdmuserName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("GroupIDMUserName");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.MarkAbsentDate).HasColumnType("datetime");
            entity.Property(e => e.MarkAttendDate).HasColumnType("datetime");
            entity.Property(e => e.Staffcomments)
                .IsUnicode(false)
                .HasColumnName("staffcomments");
            entity.Property(e => e.StatementNumber)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TraineeTitle).HasMaxLength(100);
            entity.Property(e => e.TrainerComments)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerEmail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerHireDate)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerPhone)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainerProfile).IsUnicode(false);
            entity.Property(e => e.TrainingCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TrainingDate).HasColumnType("datetime");
            entity.Property(e => e.TrainingLocation)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedByName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.TrainingRegistryFirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryId).HasColumnName("TrainingRegistryID");
            entity.Property(e => e.TrainingRegistryLastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistryStatus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TrainingRegistyEmail).HasMaxLength(500);
            entity.Property(e => e.TrainingSessionId).HasColumnName("TrainingSessionID");
            entity.Property(e => e.TrainingSessionNotes).IsUnicode(false);
            entity.Property(e => e.TrainingType)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.TransferCertificateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateCertificateNameDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TrainingRegistry>(entity =>
        {
            entity.ToTable("TrainingRegistry", "TRN");

            entity.Property(e => e.TrainingRegistryId).HasColumnName("TrainingRegistryID");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DuplicateOfTrainingRegistryId).HasColumnName("DuplicateOfTrainingRegistryID");
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.FirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.TrainingSessionId).HasColumnName("TrainingSessionID");

            entity.HasOne(d => d.Case).WithMany(p => p.TrainingRegistries)
                .HasForeignKey(d => d.CaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingRegistry_Case");

            entity.HasOne(d => d.ContactIdentifier).WithMany(p => p.TrainingRegistries)
                .HasForeignKey(d => d.ContactIdentifierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingRegistry_ContactIdentifier");

            entity.HasOne(d => d.Organization).WithMany(p => p.TrainingRegistries)
                .HasForeignKey(d => d.OrganizationId)
                .HasConstraintName("FkTrainingRegistry_OrganizationID");

            entity.HasOne(d => d.TrainingSession).WithMany(p => p.TrainingRegistries)
                .HasForeignKey(d => d.TrainingSessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingRegistry_TrainingSession");
        });

        modelBuilder.Entity<TrainingSession>(entity =>
        {
            entity.HasKey(e => e.TrainingSessionId).HasName("PkTrainingSession");

            entity.ToTable("TrainingSession", "TRN", tb => tb.HasComment("Training Session"));

            entity.HasIndex(e => e.TrainingCode, "UC_TrainingSession_TrainingCode").IsUnique();

            entity.HasIndex(e => e.RowId, "UcTrainingSession_RowID").IsUnique();

            entity.Property(e => e.TrainingSessionId)
                .HasComment("Primary Key Identity column for the TrainingSession table")
                .HasColumnName("TrainingSessionID");
            entity.Property(e => e.Capacity).HasComment("max capacity for the training session");
            entity.Property(e => e.Comment)
                .IsUnicode(false)
                .HasComment("internal comment");
            entity.Property(e => e.CourseId)
                .HasComment("Course for the training session")
                .HasColumnName("CourseID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Created by Who");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Created by date")
                .HasColumnType("datetime");
            entity.Property(e => e.Duration).HasComment("Duration for the training session");
            entity.Property(e => e.EndEnrollDate)
                .HasComment("End enrollment date")
                .HasColumnType("datetime");
            entity.Property(e => e.IsDeleted).HasComment("1 = the training session mark as deleted in system.");
            entity.Property(e => e.IsPrivate).HasComment("1 = reserve for private");
            entity.Property(e => e.LutTrainingSessionStatusId)
                .HasComment("status for the training session")
                .HasColumnName("LutTrainingSessionStatusID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_name())")
                .HasComment("Last modified by");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Last modifed date")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .IsUnicode(false)
                .HasComment("additional information related to the training session");
            entity.Property(e => e.RowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Unique ID in System")
                .HasColumnName("RowID");
            entity.Property(e => e.ScheduleDate)
                .HasComment("schedule date and time for the training session")
                .HasColumnType("datetime");
            entity.Property(e => e.StartEnrollDate)
                .HasComment("Start enrollment date")
                .HasColumnType("datetime");
            entity.Property(e => e.TrainingCode)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("human readable code for the training session");
            entity.Property(e => e.TrainingLocation)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("location hosted the training");

            entity.HasOne(d => d.Course).WithMany(p => p.TrainingSessions)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkTrainingSession_Course");

            entity.HasOne(d => d.LutTrainingSessionStatus).WithMany(p => p.TrainingSessions)
                .HasForeignKey(d => d.LutTrainingSessionStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FkTrainingSession_LutTrainingSessionStatus");
        });

        modelBuilder.Entity<TrainingSessionTrainer>(entity =>
        {
            entity.HasKey(e => new { e.TrainingSessionId, e.AssnCourseTrainerId });

            entity.ToTable("TrainingSessionTrainer", "TRN");

            entity.Property(e => e.TrainingSessionId).HasColumnName("TrainingSessionID");
            entity.Property(e => e.AssnCourseTrainerId).HasColumnName("AssnCourseTrainerID");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RowId).HasColumnName("RowID");

            entity.HasOne(d => d.AssnCourseTrainer).WithMany(p => p.TrainingSessionTrainers)
                .HasForeignKey(d => d.AssnCourseTrainerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TrainingSessionTrainer_AssnCourseTrainer");
        });

        modelBuilder.Entity<Unit>(entity =>
        {
            entity.HasKey(e => e.UnitId).HasName("PK_UnitAddress");

            entity.ToTable("Unit", "PnC", tb => tb.HasTrigger("trg_UnitLog"));

            entity.HasIndex(e => new { e.ProjectId, e.UnitId }, "IX_Unit_ProjectId_UnitId");

            entity.HasIndex(e => e.Status, "NCI_Unit");

            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.BuildingId).HasColumnName("BuildingID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.LutUnitAccessibiltyTypeId).HasColumnName("LutUnitAccessibiltyTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.RefUnitId).HasColumnName("RefUnitID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");

            entity.HasOne(d => d.Apn).WithMany(p => p.Units)
                .HasForeignKey(d => d.Apnid)
                .HasConstraintName("FK_UnitAddress_APN");

            entity.HasOne(d => d.Building).WithMany(p => p.Units)
                .HasForeignKey(d => d.BuildingId)
                .HasConstraintName("FK_Unit_Building");

            entity.HasOne(d => d.Level).WithMany(p => p.Units)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_Unit_Floor");

            entity.HasOne(d => d.LutUnitAccessibiltyType).WithMany(p => p.Units)
                .HasForeignKey(d => d.LutUnitAccessibiltyTypeId)
                .HasConstraintName("FK_Unit_LutUnitAccessibiltyType");

            entity.HasOne(d => d.Project).WithMany(p => p.Units)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK_Unit_Project");

            entity.HasOne(d => d.ProjectSite).WithMany(p => p.Units)
                .HasForeignKey(d => d.ProjectSiteId)
                .HasConstraintName("FK_Unit_ProjectSite");

            entity.HasOne(d => d.SiteAddress).WithMany(p => p.Units)
                .HasForeignKey(d => d.SiteAddressId)
                .HasConstraintName("FK_UnitAddress_SiteAddress");
        });

        modelBuilder.Entity<UnitAttribute>(entity =>
        {
            entity.HasKey(e => e.UnitAttributeId).HasName("PK_ListingUnit");

            entity.ToTable("UnitAttribute", "AAHR", tb => tb.HasTrigger("trg_UnitAttributeLog"));

            entity.HasIndex(e => e.IsDeleted, "NCI_UnitAttribute");

            entity.HasIndex(e => e.IsDeleted, "NCI_UnitAttribute1");

            entity.HasIndex(e => e.PropSnapshotId, "PK_PropsnapshotId").IsUnique();

            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(9)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentProjSitePropSnapShotId).HasColumnName("CurrentProjSitePropSnapShotID");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FloorPlanType).HasMaxLength(100);
            entity.Property(e => e.FloorPlanTypeId).HasColumnName("FloorPlanTypeID");
            entity.Property(e => e.IsAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsAdaptable).HasDefaultValue(false);
            entity.Property(e => e.IsAddedToAutl).HasColumnName("IsAddedToAUTL");
            entity.Property(e => e.IsAddedToRarmlog).HasColumnName("IsAddedToRARMLog");
            entity.Property(e => e.IsAddendumSigned).HasDefaultValue(0);
            entity.Property(e => e.IsAdvisedRightToRm).HasColumnName("IsAdvisedRightToRM");
            entity.Property(e => e.IsAvailableFromAuwaitList).HasColumnName("IsAvailableFromAUWaitList");
            entity.Property(e => e.IsAvailableFromTransferAuwaitList).HasColumnName("IsAvailableFromTransferAUWaitList");
            entity.Property(e => e.IsCes)
                .HasDefaultValue(false)
                .HasColumnName("IsCES");
            entity.Property(e => e.IsCsa).HasColumnName("IsCSA");
            entity.Property(e => e.IsEnhancedAccessible).HasDefaultValue(false);
            entity.Property(e => e.IsFullyAuneeded).HasColumnName("IsFullyAUNeeded");
            entity.Property(e => e.IsLeaseAddendumProvidedToAcHp).HasColumnName("IsLeaseAddendumProvidedToAcHP");
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.IsOccupied).HasDefaultValue(false);
            entity.Property(e => e.IsOccupiedByDisabled).HasDefaultValue(false);
            entity.Property(e => e.IsVca).HasColumnName("IsVCA");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutAmiid).HasColumnName("LutAMIID");
            entity.Property(e => e.LutEapfeatureIds1A)
                .IsUnicode(false)
                .HasColumnName("LutEAPFeatureIDs1A");
            entity.Property(e => e.LutEapfeatureIds1B)
                .IsUnicode(false)
                .HasColumnName("LutEAPFeatureIDs1B");
            entity.Property(e => e.LutEapfeatureIdsOptional)
                .IsUnicode(false)
                .HasColumnName("LutEAPFeatureIDsOptional");
            entity.Property(e => e.LutFhatypeId).HasColumnName("LutFHATypeID");
            entity.Property(e => e.LutFixedFloatingUnitId).HasColumnName("LutFixedFloatingUnitID");
            entity.Property(e => e.LutLeaseAddendumNotExecuteReasonId).HasColumnName("LutLeaseAddendumNotExecuteReasonID");
            entity.Property(e => e.LutOccupancyReasonId).HasColumnName("LutOccupancyReasonID");
            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.LutTenantSelectedFromId).HasColumnName("LutTenantSelectedFromID");
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotAddedToAutlreason).HasColumnName("NotAddedToAUTLReason");
            entity.Property(e => e.NotAddedToRarmlogReason).HasColumnName("NotAddedToRARMLogReason");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousProjSitePropSnapShotId).HasColumnName("PreviousProjSitePropSnapShotID");
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.PreviousUnitPropSnapShotId).HasColumnName("PreviousUnitPropSnapShotID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");
            entity.Property(e => e.TenantRequestedBathroomsId).HasColumnName("TenantRequestedBathroomsID");
            entity.Property(e => e.TenantRequestedBedroomsId).HasColumnName("TenantRequestedBedroomsID");
            entity.Property(e => e.TenantRequestedUnitTypeId).HasColumnName("TenantRequestedUnitTypeID");

            entity.HasOne(d => d.CurrentProjSitePropSnapShot).WithMany(p => p.UnitAttributeCurrentProjSitePropSnapShots)
                .HasForeignKey(d => d.CurrentProjSitePropSnapShotId)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot3");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.UnitAttributeCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotId)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot4");

            entity.HasOne(d => d.LutAccessibilityComplianceStatus).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutAccessibilityComplianceStatusId)
                .HasConstraintName("FK_UnitAttribute_LutAccessibilityComplianceStatus");

            entity.HasOne(d => d.LutAmi).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutAmiid)
                .HasConstraintName("FK_ListingUnit_LutAMI");

            entity.HasOne(d => d.LutFixedFloatingUnit).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutFixedFloatingUnitId)
                .HasConstraintName("FK_UnitAttribute_LutFixedFloatingUnit");

            entity.HasOne(d => d.LutLeaseAddendumNotExecuteReason).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutLeaseAddendumNotExecuteReasonId)
                .HasConstraintName("FK_UnitAttribute_LutLeaseAddendumNotExecuteReason");

            entity.HasOne(d => d.LutOccupancyReason).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutOccupancyReasonId)
                .HasConstraintName("FK_UnitAttribute_LutOccupancyReason");

            entity.HasOne(d => d.LutRentalSubsidy).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutRentalSubsidyId)
                .HasConstraintName("FK_ListingUnit_LutRentalSubsidy");

            entity.HasOne(d => d.LutTenantSelectedFrom).WithMany(p => p.UnitAttributes)
                .HasForeignKey(d => d.LutTenantSelectedFromId)
                .HasConstraintName("FK_UnitAttribute_LutTenantSelectedFrom");

            entity.HasOne(d => d.LutTotalBathroom).WithMany(p => p.UnitAttributeLutTotalBathrooms)
                .HasForeignKey(d => d.LutTotalBathroomId)
                .HasConstraintName("FK_UnitAttribute_LutTotalBathrooms");

            entity.HasOne(d => d.LutTotalBedroom).WithMany(p => p.UnitAttributeLutTotalBedrooms)
                .HasForeignKey(d => d.LutTotalBedroomId)
                .HasConstraintName("FK_UnitAttribute_LutTotalBedrooms");

            entity.HasOne(d => d.LutUnitType).WithMany(p => p.UnitAttributeLutUnitTypes)
                .HasForeignKey(d => d.LutUnitTypeId)
                .HasConstraintName("FK_ListingUnit_LutUnitType");

            entity.HasOne(d => d.PreviousProjSitePropSnapShot).WithMany(p => p.UnitAttributePreviousProjSitePropSnapShots)
                .HasForeignKey(d => d.PreviousProjSitePropSnapShotId)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot1");

            entity.HasOne(d => d.PreviousUnitPropSnapShot).WithMany(p => p.UnitAttributePreviousUnitPropSnapShots)
                .HasForeignKey(d => d.PreviousUnitPropSnapShotId)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot2");

            entity.HasOne(d => d.PropSnapshot).WithOne(p => p.UnitAttributePropSnapshot)
                .HasForeignKey<UnitAttribute>(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnitAttribute_PropSnapshot");

            entity.HasOne(d => d.TenantRequestedBathrooms).WithMany(p => p.UnitAttributeTenantRequestedBathrooms)
                .HasForeignKey(d => d.TenantRequestedBathroomsId)
                .HasConstraintName("FK_UnitAttribute_LutTotalBathrooms1");

            entity.HasOne(d => d.TenantRequestedBedrooms).WithMany(p => p.UnitAttributeTenantRequestedBedrooms)
                .HasForeignKey(d => d.TenantRequestedBedroomsId)
                .HasConstraintName("FK_UnitAttribute_LutTotalBedrooms1");

            entity.HasOne(d => d.TenantRequestedUnitType).WithMany(p => p.UnitAttributeTenantRequestedUnitTypes)
                .HasForeignKey(d => d.TenantRequestedUnitTypeId)
                .HasConstraintName("FK_UnitAttribute_LutUnitType");
        });

        modelBuilder.Entity<UnitAttributeLog>(entity =>
        {
            entity.HasKey(e => e.ListingUnitLogId);

            entity.ToTable("UnitAttributeLog", "AAHR");

            entity.Property(e => e.ListingUnitLogId).HasColumnName("ListingUnitLogID");
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(9)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentProjSitePropSnapShotId).HasColumnName("CurrentProjSitePropSnapShotID");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FloorPlanTypeId).HasColumnName("FloorPlanTypeID");
            entity.Property(e => e.IsAddedToAutl).HasColumnName("IsAddedToAUTL");
            entity.Property(e => e.IsAddedToRarmlog).HasColumnName("IsAddedToRARMLog");
            entity.Property(e => e.IsAddendumSigned).HasDefaultValue(0);
            entity.Property(e => e.IsAdvisedRightToRm).HasColumnName("IsAdvisedRightToRM");
            entity.Property(e => e.IsAvailableFromAuwaitList).HasColumnName("IsAvailableFromAUWaitList");
            entity.Property(e => e.IsAvailableFromTransferAuwaitList).HasColumnName("IsAvailableFromTransferAUWaitList");
            entity.Property(e => e.IsCes)
                .HasDefaultValue(false)
                .HasColumnName("IsCES");
            entity.Property(e => e.IsCsa).HasColumnName("IsCSA");
            entity.Property(e => e.IsFullyAuneeded).HasColumnName("IsFullyAUNeeded");
            entity.Property(e => e.IsLeaseAddendumProvidedToAcHp).HasColumnName("IsLeaseAddendumProvidedToAcHP");
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.IsOccupied).HasDefaultValue(false);
            entity.Property(e => e.IsOccupiedByDisabled).HasDefaultValue(false);
            entity.Property(e => e.IsVca).HasColumnName("IsVCA");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutAmiid).HasColumnName("LutAMIID");
            entity.Property(e => e.LutFhatypeId).HasColumnName("LutFHATypeID");
            entity.Property(e => e.LutFixedFloatingUnitId).HasColumnName("LutFixedFloatingUnitID");
            entity.Property(e => e.LutLeaseAddendumNotExecuteReasonId).HasColumnName("LutLeaseAddendumNotExecuteReasonID");
            entity.Property(e => e.LutOccupancyReasonId).HasColumnName("LutOccupancyReasonID");
            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.LutTenantSelectedFromId).HasColumnName("LutTenantSelectedFromID");
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotAddedToAutlreason).HasColumnName("NotAddedToAUTLReason");
            entity.Property(e => e.NotAddedToRarmlogReason).HasColumnName("NotAddedToRARMLogReason");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousProjSitePropSnapShotId).HasColumnName("PreviousProjSitePropSnapShotID");
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.PreviousUnitPropSnapShotId).HasColumnName("PreviousUnitPropSnapShotID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");
            entity.Property(e => e.TenantRequestedBathroomsId).HasColumnName("TenantRequestedBathroomsID");
            entity.Property(e => e.TenantRequestedBedroomsId).HasColumnName("TenantRequestedBedroomsID");
            entity.Property(e => e.TenantRequestedUnitTypeId).HasColumnName("TenantRequestedUnitTypeID");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");
        });

        modelBuilder.Entity<UnitBathroomType>(entity =>
        {
            entity.HasKey(e => e.UnitBathroomTypeId).HasName("PK__UnitBath__0129AFE45C94B7F8");

            entity.ToTable("UnitBathroomType", "AAHR");

            entity.Property(e => e.UnitBathroomTypeId).HasColumnName("UnitBathroomTypeID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LutBathroomTypeId).HasColumnName("LutBathroomTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");

            entity.HasOne(d => d.LutBathroomType).WithMany(p => p.UnitBathroomTypes)
                .HasForeignKey(d => d.LutBathroomTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UnitBathr__LutBa__641CBE4A");

            entity.HasOne(d => d.UnitAttribute).WithMany(p => p.UnitBathroomTypes)
                .HasForeignKey(d => d.UnitAttributeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UnitBathr__UnitA__4B66EA70");
        });

        modelBuilder.Entity<UnitLog>(entity =>
        {
            entity.HasKey(e => e.UnitLogId).HasName("PK_UnitLogId");

            entity.ToTable("UnitLog", "AAHR");

            entity.Property(e => e.UnitLogId).HasColumnName("UnitLogID");
            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.BuildingId).HasColumnName("BuildingID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.LutUnitAccessibiltyTypeId).HasColumnName("LutUnitAccessibiltyTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.RefUnitId).HasColumnName("RefUnitID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitNum).HasMaxLength(20);
        });

        modelBuilder.Entity<UnitSnap>(entity =>
        {
            entity.HasKey(e => e.UnitSnapId).HasName("PK__UnitSnap__D84E1A8425BEA9AF");

            entity.ToTable("UnitSnap", "Listing");

            entity.HasIndex(e => new { e.LutUnitTypeId, e.IsAccessible }, "idx_listing_UnitSnap_LutUnitTypeID");

            entity.HasIndex(e => e.ProjectSiteSnapId, "idx_listing_UnitSnap_ProjectSiteSnapID");

            entity.Property(e => e.UnitSnapId).HasColumnName("UnitSnapID");
            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(9)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentProjSitePropSnapShotId).HasColumnName("CurrentProjSitePropSnapShotID");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAvailableFromAuwaitList).HasColumnName("IsAvailableFromAUWaitList");
            entity.Property(e => e.IsAvailableFromTransferAuwaitList).HasColumnName("IsAvailableFromTransferAUWaitList");
            entity.Property(e => e.IsCes).HasColumnName("IsCES");
            entity.Property(e => e.IsLeaseAddendumProvidedToAcHp).HasColumnName("IsLeaseAddendumProvidedToAcHP");
            entity.Property(e => e.IsManagersUnit).HasDefaultValue(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutAmiid).HasColumnName("LutAMIID");
            entity.Property(e => e.LutFixedFloatingUnitId).HasColumnName("LutFixedFloatingUnitID");
            entity.Property(e => e.LutLeaseAddendumNotExecuteReasonId).HasColumnName("LutLeaseAddendumNotExecuteReasonID");
            entity.Property(e => e.LutOccupancyReasonId).HasColumnName("LutOccupancyReasonID");
            entity.Property(e => e.LutTenantSelectedFromId).HasColumnName("LutTenantSelectedFromID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalsubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousProjSitePropSnapShotId).HasColumnName("PreviousProjSitePropSnapShotID");
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.PreviousUnitPropSnapShotId).HasColumnName("PreviousUnitPropSnapShotID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TotalBathroomId).HasColumnName("TotalBathroomID");
            entity.Property(e => e.TotalBedroomId).HasColumnName("TotalBedroomID");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitNo).IsUnicode(false);
            entity.Property(e => e.UnitPropSnapshotId).HasColumnName("UnitPropSnapshotID");

            entity.HasOne(d => d.LutLeaseAddendumNotExecuteReason).WithMany(p => p.UnitSnaps)
                .HasForeignKey(d => d.LutLeaseAddendumNotExecuteReasonId)
                .HasConstraintName("FK_UnitSnap_LutLeaseAddendumNotExecuteReason");

            entity.HasOne(d => d.ProjectSiteSnap).WithMany(p => p.UnitSnaps)
                .HasForeignKey(d => d.ProjectSiteSnapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UnitSnap__Projec__6432983A");
        });

        modelBuilder.Entity<UpcomingUnitVacancy>(entity =>
        {
            entity.ToTable("UpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.UpcomingUnitVacancyId).HasColumnName("UpcomingUnitVacancyID");
            entity.Property(e => e.Auwlno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AUWLNo");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.DeletedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeletedOn).HasColumnType("datetime");
            entity.Property(e => e.IsQualifiedAutl).HasColumnName("IsQualifiedAUTL");
            entity.Property(e => e.IsQualifiedAuwl).HasColumnName("IsQualifiedAUWL");
            entity.Property(e => e.IsQualifiedNonPwdinAu).HasColumnName("IsQualifiedNonPWDInAU");
            entity.Property(e => e.LutUpcomingUnitVacancyId).HasColumnName("LutUpcomingUnitVacancyID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjSitePropSnapShotId).HasColumnName("ProjSitePropSnapShotID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");

            entity.HasOne(d => d.CurrentUnitPropSnapShot).WithMany(p => p.UpcomingUnitVacancyCurrentUnitPropSnapShots)
                .HasForeignKey(d => d.CurrentUnitPropSnapShotId)
                .HasConstraintName("FK_UpcomingUnitVacancy_PropSnapshot2");

            entity.HasOne(d => d.LutUpcomingUnitVacancy).WithMany(p => p.UpcomingUnitVacancies)
                .HasForeignKey(d => d.LutUpcomingUnitVacancyId)
                .HasConstraintName("FK_UpcomingUnitVacancy_LutUpcomingUnitVacancy");

            entity.HasOne(d => d.ProjSitePropSnapShot).WithMany(p => p.UpcomingUnitVacancyProjSitePropSnapShots)
                .HasForeignKey(d => d.ProjSitePropSnapShotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UpcomingUnitVacancy_PropSnapshot");

            entity.HasOne(d => d.UnitPropSnapShot).WithMany(p => p.UpcomingUnitVacancyUnitPropSnapShots)
                .HasForeignKey(d => d.UnitPropSnapShotId)
                .HasConstraintName("FK_UpcomingUnitVacancy_PropSnapshot1");
        });

        modelBuilder.Entity<UserSearchCriterion>(entity =>
        {
            entity.ToTable("UserSearchCriteria", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ViewConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ViewConfiguration");

            entity.ToTable("ViewConfig", "CC", tb => tb.HasComment("View Configuration for SSRSViewer Control."));

            entity.Property(e => e.Id).HasComment("Primary Key of the table");
            entity.Property(e => e.DisplayName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Name or title to be displayed during rendering of this control. If not specified, blank title will be displayed.");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Name of this configuration. This name should be unique for given type of control.");
        });

        modelBuilder.Entity<Violation>(entity =>
        {
            entity.HasKey(e => e.ViolationId).HasName("PK_Voilation_1");

            entity.ToTable("Violation", "IMS");

            entity.Property(e => e.ViolationId).HasColumnName("ViolationID");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ClearedBy).HasMaxLength(100);
            entity.Property(e => e.ClearedOn).HasColumnType("datetime");
            entity.Property(e => e.CodeInfo).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsFeeRequired).HasComment("Obsolete yes or no");
            entity.Property(e => e.IsPermitRequired).HasComment("Obsolete yes or no");
            entity.Property(e => e.Justification).IsUnicode(false);
            entity.Property(e => e.LocationCategory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocationInfo).IsUnicode(false);
            entity.Property(e => e.LutViolationId).HasColumnName("LutViolationID");
            entity.Property(e => e.MarkerLatitude).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.MarkerLongitude).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.Remedy).IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.SeverityLevelBldg)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeverityLevelProp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeverityLevelUnit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.LutViolation).WithMany(p => p.Violations)
                .HasForeignKey(d => d.LutViolationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Violation_LutViolation1");

            entity.HasOne(d => d.PropSnapshot).WithMany(p => p.Violations)
                .HasForeignKey(d => d.PropSnapshotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Violation_PropSnapshot");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.Violations)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_Violation_ServiceRequest");
        });

        modelBuilder.Entity<VwAahrdefaultContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAAHRDefaultContact", "AAHR");

            entity.Property(e => e.DefaultOwnerContactId).HasColumnName("DefaultOwnerContactID");
            entity.Property(e => e.DefaultPmcontactId).HasColumnName("DefaultPMContactID");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NoDefaultPm).HasColumnName("NoDefaultPM");
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContact)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Pmaddress)
                .HasMaxLength(361)
                .HasColumnName("PMAddress");
            entity.Property(e => e.Pmcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMCity");
            entity.Property(e => e.PmcompanyName)
                .HasMaxLength(150)
                .HasColumnName("PMCompanyName");
            entity.Property(e => e.Pmcontact)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("PMContact");
            entity.Property(e => e.PmcontactName)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("PMContactName");
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMEmail");
            entity.Property(e => e.PmhouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseFracNum");
            entity.Property(e => e.PmhouseNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseNum");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(4000)
                .HasColumnName("PMPhone");
            entity.Property(e => e.Pmstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMState");
            entity.Property(e => e.Pmstreet)
                .HasMaxLength(161)
                .HasColumnName("PMStreet");
            entity.Property(e => e.Pmunit)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMUnit");
            entity.Property(e => e.Pmzip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PMZip");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
        });

        modelBuilder.Entity<VwAahrgisfeature>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAAHRGISFeature", "AAHR");

            entity.Property(e => e.Address).HasMaxLength(4000);
            entity.Property(e => e.Lat)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("LAT");
            entity.Property(e => e.Lon)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("lon");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
        });

        modelBuilder.Entity<VwAahrpropertiesToGetLadbspermit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAAHRPropertiesToGetLADBSPermit", "AAHR");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HouseNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Pin)
                .HasMaxLength(50)
                .HasColumnName("PIN");
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PreDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.ProjectCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SourceId).HasColumnName("SourceID");
            entity.Property(e => e.SourceReferenceNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SourceType)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ZipSuffix)
                .HasMaxLength(4)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwAahrpublicContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAAHRPublicContact", "AAHR");

            entity.Property(e => e.DefaultOwnerContactId).HasColumnName("DefaultOwnerContactID");
            entity.Property(e => e.DefaultPmcontactId).HasColumnName("DefaultPMContactID");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NoDefaultPm).HasColumnName("NoDefaultPM");
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContact)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Pmaddress)
                .HasMaxLength(361)
                .HasColumnName("PMAddress");
            entity.Property(e => e.Pmcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMCity");
            entity.Property(e => e.PmcompanyName)
                .HasMaxLength(150)
                .HasColumnName("PMCompanyName");
            entity.Property(e => e.Pmcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMContact");
            entity.Property(e => e.PmcontactName)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("PMContactName");
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMEmail");
            entity.Property(e => e.PmhouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseFracNum");
            entity.Property(e => e.PmhouseNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseNum");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(4000)
                .HasColumnName("PMPhone");
            entity.Property(e => e.Pmstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMState");
            entity.Property(e => e.Pmstreet)
                .HasMaxLength(161)
                .HasColumnName("PMStreet");
            entity.Property(e => e.Pmunit)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMUnit");
            entity.Property(e => e.Pmzip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PMZip");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
        });

        modelBuilder.Entity<VwAcHpdataForHhh>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAcHPDataForHHH", "AAHR");

            entity.Property(e => e.CurrentlyOccupiedOrNotOccupied)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Currently Occupied or Not Occupied");
            entity.Property(e => e.DateCityCertificationIssued).HasColumnName("Date City Certification Issued");
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.PolicyComplianceReviewDate)
                .HasColumnType("datetime")
                .HasColumnName("Policy Compliance Review Date");
            entity.Property(e => e.ProjectName).HasMaxLength(500);
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyManagementPlanPmpUpdated2020)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Property Management Plan (PMP) - Updated 2020");
            entity.Property(e => e.SiteVisitDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Site Visit Date");
        });

        modelBuilder.Entity<VwAccessLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAccessLog", "IDM");

            entity.Property(e => e.AccessLogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AccessLogID");
            entity.Property(e => e.AppKey)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LastLogOn).HasColumnType("datetime");
            entity.Property(e => e.LogonData).UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LogonStatus)
                .HasMaxLength(10)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwAffordableApplicationCloseDateNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAffordableApplicationCloseDateNotification", "Listing");

            entity.Property(e => e.Notification)
                .HasMaxLength(109)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");
        });

        modelBuilder.Entity<VwAllPropertyList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllPropertyList", "AAHR");

            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.DefaultOwnerContactId).HasColumnName("DefaultOwnerContactID");
            entity.Property(e => e.DefaultPmcontactId).HasColumnName("DefaultPMContactID");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.Lat)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("LAT");
            entity.Property(e => e.Lon)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("lon");
            entity.Property(e => e.LowestAmi)
                .HasMaxLength(10)
                .HasColumnName("LowestAMI");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.NoDefaultPm).HasColumnName("NoDefaultPM");
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Pmaddress)
                .HasMaxLength(361)
                .HasColumnName("PMAddress");
            entity.Property(e => e.Pmcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMCity");
            entity.Property(e => e.PmcompanyName)
                .HasMaxLength(150)
                .HasColumnName("PMCompanyName");
            entity.Property(e => e.PmcontactName)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("PMContactName");
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMEmail");
            entity.Property(e => e.PmhouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseFracNum");
            entity.Property(e => e.PmhouseNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseNum");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(4000)
                .HasColumnName("PMPhone");
            entity.Property(e => e.Pmstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMState");
            entity.Property(e => e.Pmstreet)
                .HasMaxLength(161)
                .HasColumnName("PMStreet");
            entity.Property(e => e.Pmunit)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMUnit");
            entity.Property(e => e.Pmzip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PMZip");
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCestype)
                .HasMaxLength(500)
                .HasColumnName("PropertyCESType");
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.RentalSubsidy)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.Typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("typeofproject");
            entity.Property(e => e._0bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<VwAllPropertyPolicyAnalyst>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllPropertyPolicyAnalyst", "AAHR");

            entity.Property(e => e.AssigneeFullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AssigneeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
        });

        modelBuilder.Entity<VwAllPropertyPolicyAnalyst8118>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllPropertyPolicyAnalyst_8118", "AAHR");

            entity.Property(e => e.AssigneeFullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AssigneeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
        });

        modelBuilder.Entity<VwAllPurportedUnitsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllPurportedUnitsDetail", "AAHR");

            entity.Property(e => e.AccessibilityFeature)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Accessibility Feature");
            entity.Property(e => e.AffordabilityLevelAmi)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Affordability Level AMI");
            entity.Property(e => e.FundingRestriction)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Funding Restriction");
            entity.Property(e => e.IsAccessible)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.IsCes).HasColumnName("IsCES");
            entity.Property(e => e.LeaseAddendum).HasColumnName("Lease Addendum");
            entity.Property(e => e.MoveInDate).HasColumnName("Move In Date");
            entity.Property(e => e.NoOfBedrooms)
                .IsUnicode(false)
                .HasColumnName("No. of Bedrooms");
            entity.Property(e => e.OccupantDisabled).HasColumnName("Occupant Disabled");
            entity.Property(e => e.ProgramEligibility)
                .IsUnicode(false)
                .HasColumnName("Program Eligibility");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwApplication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwApplication", "IDM");

            entity.Property(e => e.AppKey)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationDomain)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicationId).ValueGeneratedOnAdd();
            entity.Property(e => e.ApplicationUrl)
                .HasMaxLength(500)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("ApplicationURL");
            entity.Property(e => e.Attributes)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ConnectionString)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EnableJwtsecurity).HasColumnName("EnableJWTSecurity");
            entity.Property(e => e.JwtaccessCode)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("JWTAccessCode");
            entity.Property(e => e.JwtsharedSecrete)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("JWTSharedSecrete");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwApplicationUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwApplicationUser", "IDM");
        });

        modelBuilder.Entity<VwAspNetRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAspNetRoles", "IDM");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwAspNetUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAspNetUsers", "IDM");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeTitle)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserId).ValueGeneratedOnAdd();
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwAspNetUserRole>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAspNetUserRoles", "IDM");
        });

        modelBuilder.Entity<VwCaseLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCaseLog", "CMS");

            entity.Property(e => e.ActionName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CaseLogId).HasColumnName("CaseLogID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserName).HasMaxLength(201);
            entity.Property(e => e.FromState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastAssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("LastAssigneeID");
            entity.Property(e => e.NewAssigneeId)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("NewAssigneeID");
            entity.Property(e => e.ToState)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCcallPropertyList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCAllPropertyList", "AAHR");

            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.DefaultOwnerContactId).HasColumnName("DefaultOwnerContactID");
            entity.Property(e => e.DefaultPmcontactId).HasColumnName("DefaultPMContactID");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.Lat)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("LAT");
            entity.Property(e => e.Lon)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("lon");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.NoDefaultPm).HasColumnName("NoDefaultPM");
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Pmaddress)
                .HasMaxLength(361)
                .HasColumnName("PMAddress");
            entity.Property(e => e.Pmcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMCity");
            entity.Property(e => e.PmcompanyName)
                .HasMaxLength(150)
                .HasColumnName("PMCompanyName");
            entity.Property(e => e.PmcontactName)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("PMContactName");
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMEmail");
            entity.Property(e => e.PmhouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseFracNum");
            entity.Property(e => e.PmhouseNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseNum");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(4000)
                .HasColumnName("PMPhone");
            entity.Property(e => e.Pmstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMState");
            entity.Property(e => e.Pmstreet)
                .HasMaxLength(161)
                .HasColumnName("PMStreet");
            entity.Property(e => e.Pmunit)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMUnit");
            entity.Property(e => e.Pmzip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PMZip");
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCestype)
                .HasMaxLength(500)
                .HasColumnName("PropertyCESType");
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.RentalSubsidy)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.Typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("typeofproject");
            entity.Property(e => e._0bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<VwCcprojectSiteUnitSummaryAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCProjectSiteUnitSummaryAll", "AAHR");

            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e._0bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<VwComment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwComment", "CC");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreatedUserName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Jsonattribute).HasColumnName("JSONAttribute");
            entity.Property(e => e.ReferenceId)
                .HasMaxLength(64)
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ReferenceType).HasMaxLength(20);
        });

        modelBuilder.Entity<VwConstructionAllProject>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwConstructionAllProject", "AAHR");

            entity.Property(e => e.AcHpConductedPreFinalAccessibilityInspectionDate)
                .HasMaxLength(4000)
                .HasColumnName("AcHP Conducted Pre-Final Accessibility Inspection Date");
            entity.Property(e => e.AcHpIssuedCorrectionsForPreFinalAccessibilityInspection)
                .HasMaxLength(4000)
                .HasColumnName("AcHP Issued Corrections for Pre-Final Accessibility Inspection");
            entity.Property(e => e.AcHpProjectedCompletionDate)
                .HasMaxLength(4000)
                .HasColumnName("AcHP Projected Completion Date");
            entity.Property(e => e.AcHpassociatedAccessorParcelNumberApn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAccessorParcelNumberAPN");
            entity.Property(e => e.AchpFileNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACHP File Number");
            entity.Property(e => e.AdditionalRcs)
                .IsUnicode(false)
                .HasColumnName("AdditionalRCS");
            entity.Property(e => e.BuildingPermitApplicationDate)
                .HasMaxLength(4000)
                .HasColumnName("Building Permit Application Date");
            entity.Property(e => e.DateAcHpApprovedFinalAccessibilityInspection)
                .HasMaxLength(4000)
                .HasColumnName("Date AcHP Approved Final Accessibility Inspection");
            entity.Property(e => e.DateAcHpClearedProjectForTcoInPcis)
                .HasMaxLength(4000)
                .HasColumnName("Date AcHP Cleared Project for TCO in PCIS");
            entity.Property(e => e.DateAcHpClearedProjectInPcisForCOfO)
                .HasMaxLength(4000)
                .HasColumnName("Date AcHP Cleared Project In PCIS for C of O");
            entity.Property(e => e.DateAcHpConductedFinalAccessibilityInspection)
                .HasMaxLength(4000)
                .HasColumnName("Date AcHP Conducted Final Accessibility Inspection");
            entity.Property(e => e.DateAcHpIssuedCorrectionsForFinalAccessibilityInspection)
                .HasMaxLength(4000)
                .HasColumnName("Date AcHP Issued Corrections for Final Accessibility Inspection");
            entity.Property(e => e.DateAcHpStampedPlansAndClearedProjectInPcis)
                .HasMaxLength(4000)
                .HasColumnName("Date AcHP Stamped Plans and Cleared Project in PCIS");
            entity.Property(e => e.DateAssignedToAcHpStaff)
                .HasMaxLength(4000)
                .HasColumnName("Date Assigned to AcHP Staff");
            entity.Property(e => e.DateCorrectionsIssuedByNac)
                .HasMaxLength(4000)
                .HasColumnName("Date corrections Issued by NAC");
            entity.Property(e => e.DateDeveloperOwnerRequestedNacInspection)
                .HasMaxLength(4000)
                .HasColumnName("Date Developer/Owner Requested NAC Inspection");
            entity.Property(e => e.DateLadbsIssuedBuildingPermit)
                .HasMaxLength(4000)
                .HasColumnName("Date LADBS Issued Building Permit");
            entity.Property(e => e.DateNacInspectionScheduled)
                .HasMaxLength(4000)
                .HasColumnName("Date NAC inspection scheduled");
            entity.Property(e => e.DateNacIssuedRecommendationToCertifyForCsa)
                .HasMaxLength(4000)
                .HasColumnName("Date NAC Issued Recommendation to Certify For CSA");
            entity.Property(e => e.DateSubmittedToAcHp)
                .HasMaxLength(4000)
                .HasColumnName("Date Submitted to AcHP");
            entity.Property(e => e.DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("Date the City certified project accessibility for new construction under CSA");
            entity.Property(e => e.DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("Date the City certified project accessibility for new construction under VCA");
            entity.Property(e => e.DateTheNacIssuedVerificationOfProjectAccessibilityForNewConstructionUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("Date the NAC issued verification of project accessibility for new construction under CSA");
            entity.Property(e => e.DateTheNacIssuedVerificationOfProjectAccessibilityForNewConstructionUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("Date the NAC issued verification of project accessibility for new construction under VCA");
            entity.Property(e => e.DueDateForAcHpInitialDesignReviewCaspDesignReview)
                .HasMaxLength(4000)
                .HasColumnName("Due Date for AcHP Initial Design Review (CASP design review)");
            entity.Property(e => e.Eapproject).HasColumnName("EAPProject");
            entity.Property(e => e.EstimatedTcoDate)
                .HasMaxLength(4000)
                .HasColumnName("Estimated TCO Date");
            entity.Property(e => e.FinalAccessibilityInspectionRequestedByDeveloperOwner)
                .HasMaxLength(4000)
                .HasColumnName("Final Accessibility Inspection Requested by Developer/Owner");
            entity.Property(e => e.FullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HimsNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMS Number");
            entity.Property(e => e.HimsProjectedCompletionDate)
                .HasMaxLength(4000)
                .HasColumnName("HIMS Projected Completion Date");
            entity.Property(e => e.IsthisaPreCsadevelopment).HasColumnName("IsthisaPreCSADevelopment");
            entity.Property(e => e.IsthisaPreVsadevelopment).HasColumnName("IsthisaPreVSADevelopment");
            entity.Property(e => e.LaCountyAssessors)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("LA County Assessors");
            entity.Property(e => e.ListedonAhupproductionSchedule).HasColumnName("ListedonAHUPProductionSchedule");
            entity.Property(e => e.LutFundingId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MaximumHearingandVisionCsacount).HasColumnName("MaximumHearingandVisionCSACount");
            entity.Property(e => e.MaximumHearingandVisionVcacount).HasColumnName("MaximumHearingandVisionVCACount");
            entity.Property(e => e.MaximumMobilityCsacount).HasColumnName("MaximumMobilityCSACount");
            entity.Property(e => e.MaximumMobilityVcacount).HasColumnName("MaximumMobilityVCACount");
            entity.Property(e => e.NacIssuedVerificationOfComplianceForVca)
                .HasMaxLength(4000)
                .HasColumnName("NAC Issued Verification of Compliance for VCA");
            entity.Property(e => e.Name)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.PreFinalAccessibilityInspectionRequestedByDeveloperOwner)
                .HasMaxLength(4000)
                .HasColumnName("Pre-Final Accessibility Inspection Requested by Developer/Owner");
            entity.Property(e => e.Project)
                .HasMaxLength(20)
                .HasColumnName("Project #");
            entity.Property(e => e.ProjectAddress)
                .IsUnicode(false)
                .HasColumnName("Project Address");
            entity.Property(e => e.ProjectDescription).IsUnicode(false);
            entity.Property(e => e.ProjectName).HasColumnName("Project Name");
            entity.Property(e => e.ProjectedRetrofitCompletionDate)
                .HasMaxLength(4000)
                .HasColumnName("Projected Retrofit Completion Date");
            entity.Property(e => e.ResponseToRetrofitSurveyEmailContent).IsUnicode(false);
            entity.Property(e => e.SiteSurveyGroup)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeOfConstructionProject).HasColumnName("Type of Construction Project");
            entity.Property(e => e.TypeOfOccupancy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Type of Occupancy");
        });

        modelBuilder.Entity<VwCoveredPropertyList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCoveredPropertyList", "AAHR");

            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CwlopenPriorRegistryDate)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("CWLOpenPriorRegistryDate");
            entity.Property(e => e.DefaultOwnerContactId).HasColumnName("DefaultOwnerContactID");
            entity.Property(e => e.DefaultPmcontactId).HasColumnName("DefaultPMContactID");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.HousingRegistryStatusDisplayName).IsUnicode(false);
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsCwlopenPriorRegistry).HasColumnName("IsCWLOpenPriorRegistry");
            entity.Property(e => e.Lat)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("LAT");
            entity.Property(e => e.Lon)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("lon");
            entity.Property(e => e.LowestAmi)
                .HasMaxLength(10)
                .HasColumnName("LowestAMI");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.NoDefaultPm).HasColumnName("NoDefaultPM");
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Pmaddress)
                .HasMaxLength(361)
                .HasColumnName("PMAddress");
            entity.Property(e => e.Pmcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMCity");
            entity.Property(e => e.PmcompanyName)
                .HasMaxLength(150)
                .HasColumnName("PMCompanyName");
            entity.Property(e => e.PmcontactName)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("PMContactName");
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMEmail");
            entity.Property(e => e.PmhouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseFracNum");
            entity.Property(e => e.PmhouseNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseNum");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(4000)
                .HasColumnName("PMPhone");
            entity.Property(e => e.Pmstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMState");
            entity.Property(e => e.Pmstreet)
                .HasMaxLength(161)
                .HasColumnName("PMStreet");
            entity.Property(e => e.Pmunit)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMUnit");
            entity.Property(e => e.Pmzip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PMZip");
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCestype)
                .HasMaxLength(500)
                .HasColumnName("PropertyCESType");
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TotalProjectSiteBothMobilityHvunit).HasColumnName("TotalProjectSiteBothMobilityHVUnit");
            entity.Property(e => e.Typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("typeofproject");
            entity.Property(e => e._0bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<VwCoveredPropertyList1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCoveredPropertyList", "Listing");

            entity.Property(e => e.AcHpfileNumber).HasColumnName("AcHPFileNumber");
            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CwlopenPriorRegistryDate)
                .HasMaxLength(23)
                .IsUnicode(false)
                .HasColumnName("CWLOpenPriorRegistryDate");
            entity.Property(e => e.DefaultOwnerContactId).HasColumnName("DefaultOwnerContactID");
            entity.Property(e => e.DefaultPmcontactId).HasColumnName("DefaultPMContactID");
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.HousingRegistryStatusDisplayName).IsUnicode(false);
            entity.Property(e => e.HousingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsCwlopenPriorRegistry).HasColumnName("IsCWLOpenPriorRegistry");
            entity.Property(e => e.Lat)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("LAT");
            entity.Property(e => e.Lon)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("lon");
            entity.Property(e => e.LowestAmi)
                .HasMaxLength(10)
                .HasColumnName("LowestAMI");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.NoDefaultPm).HasColumnName("NoDefaultPM");
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Pmaddress)
                .HasMaxLength(361)
                .HasColumnName("PMAddress");
            entity.Property(e => e.Pmcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMCity");
            entity.Property(e => e.PmcompanyName)
                .HasMaxLength(150)
                .HasColumnName("PMCompanyName");
            entity.Property(e => e.PmcontactName)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("PMContactName");
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMEmail");
            entity.Property(e => e.PmhouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseFracNum");
            entity.Property(e => e.PmhouseNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseNum");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(4000)
                .HasColumnName("PMPhone");
            entity.Property(e => e.Pmstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMState");
            entity.Property(e => e.Pmstreet)
                .HasMaxLength(161)
                .HasColumnName("PMStreet");
            entity.Property(e => e.Pmunit)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMUnit");
            entity.Property(e => e.Pmzip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PMZip");
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCestype)
                .HasMaxLength(500)
                .HasColumnName("PropertyCESType");
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Srobedroom).HasColumnName("SROBedroom");
            entity.Property(e => e.TotalProjectSiteBothMobilityHvunit).HasColumnName("TotalProjectSiteBothMobilityHVUnit");
            entity.Property(e => e.Typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("typeofproject");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4bedroom).HasColumnName("4Bedroom");
            entity.Property(e => e._5orMoreBedroom).HasColumnName("5orMoreBedroom");
        });

        modelBuilder.Entity<VwDmsdocument>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDMSDocument", "AAHR");

            entity.Property(e => e.AcHpNumber)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("AcHP Number");
            entity.Property(e => e.AcHpProjectId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("AcHP Project ID");
            entity.Property(e => e.AcHpPropertyId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("AcHP Property ID");
            entity.Property(e => e.Apn)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("APN");
            entity.Property(e => e.Audience)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CaseId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Case ID");
            entity.Property(e => e.Category)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Created By");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DefaultImage)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Default Image");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FileExtension)
                .HasMaxLength(15)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FileSize)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HimsNumber)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("HIMS Number");
            entity.Property(e => e.HimsProjectId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("HIMS Project Id");
            entity.Property(e => e.InternalUrl)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("InternalURL");
            entity.Property(e => e.LastAccessed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Last Accessed");
            entity.Property(e => e.MimeType)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Modified By");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OriginalFileName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Original File Name");
            entity.Property(e => e.PrimaryKey)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Primary Key");
            entity.Property(e => e.Received)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SubCategory)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Sub Category");
            entity.Property(e => e.SystemDescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("System Description");
            entity.Property(e => e.UniqueId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ViewOrder)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("View Order");
        });

        modelBuilder.Entity<VwGeoCounilDistrict>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGeo_CounilDistrict", "AAHR");

            entity.Property(e => e.Coordinates)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("coordinates");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(2)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FolderPath)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.GeometryType)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Wkt)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("WKT");
        });

        modelBuilder.Entity<VwHcidaahpapplicationUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHCIDAAHPApplicationUser", "IDM");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeTitle)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(256)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwHousingApplication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwHousingApplication", "AAHR");

            entity.Property(e => e.AltArea)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltContactName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AltLutPhoneTypeCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AltLutPhoneTypeCD");
            entity.Property(e => e.AltPhone)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AltPrefix)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.AltTrunk)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationCaseId).HasColumnName("ApplicationCaseID");
            entity.Property(e => e.ApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationStatus).HasMaxLength(50);
            entity.Property(e => e.Bathrooms).IsUnicode(false);
            entity.Property(e => e.Bedrooms).IsUnicode(false);
            entity.Property(e => e.BirthMmdd)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("BirthMMDD");
            entity.Property(e => e.CancelReasonId).HasColumnName("CancelReasonID");
            entity.Property(e => e.Cestype)
                .HasMaxLength(500)
                .HasColumnName("CESType");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress).HasMaxLength(401);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HousingAdvocate).HasMaxLength(150);
            entity.Property(e => e.HrmapplicationId).HasColumnName("HRMApplicationID");
            entity.Property(e => e.Hrmstatus)
                .HasMaxLength(4000)
                .HasColumnName("HRMStatus");
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(50)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.IncomeHousehold).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ListingId).HasColumnName("ListingID");
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.LutTotalBathroomsId).HasColumnName("LutTotalBathroomsID");
            entity.Property(e => e.LutTotalBedroomsId).HasColumnName("LutTotalBedroomsID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreferContactMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ProjectSitePropertSnapshotId).HasColumnName("ProjectSitePropertSnapshotID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.ReasonableAccommodations).HasMaxLength(2000);
            entity.Property(e => e.Region)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);
            entity.Property(e => e.SubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnSubscriptionDate).HasColumnType("datetime");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<VwManageAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwManageAccount", "AAHR");

            entity.Property(e => e.AccountType)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullName)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UserName)
                .HasMaxLength(256)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwOlapAllProperty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_AllProperties", "AAHR");

            entity.Property(e => e.AchpfileNumberProject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ACHPFileNumberProject");
            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ConventionalWaitListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.ConventionalWaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.DateLadbsinitialCertificateOccupancy)
                .HasColumnType("datetime")
                .HasColumnName("DateLADBSInitialCertificateOccupancy");
            entity.Property(e => e.DatePmpostedDataOnAhr)
                .HasColumnType("datetime")
                .HasColumnName("DatePMPostedDataOnAHR");
            entity.Property(e => e.DateSubsequentAumarketing)
                .HasColumnType("datetime")
                .HasColumnName("DateSubsequentAUMarketing");
            entity.Property(e => e.DistanceToNearByServices)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.DistanceToTransit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FeatureArea)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Features)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FundSources)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.HouseNum)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HousingProgram).HasMaxLength(500);
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.LastPublishedDate).HasColumnType("datetime");
            entity.Property(e => e.Lat)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("LAT");
            entity.Property(e => e.ListingStatus).HasMaxLength(50);
            entity.Property(e => e.Lon)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("lon");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.NearByServices)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.OccupancyStatus)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OpenForApplication).HasColumnType("datetime");
            entity.Property(e => e.OpenForMarketing).HasColumnType("datetime");
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParkingType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostDirCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PriorSurvey)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");
            entity.Property(e => e.ProjectSiteStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ProjectSiteStatusChangeDate)
                .HasColumnType("datetime")
                .HasColumnName("projectSiteStatusChangeDate");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCestype)
                .HasMaxLength(500)
                .HasColumnName("PropertyCESType");
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyFullAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.RegionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.ScatteredSites).HasMaxLength(4000);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("state");
            entity.Property(e => e.StreetName)
                .HasMaxLength(100)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.StreetTypeCd)
                .HasMaxLength(50)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SubmittedBy)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.TransitWithinOneMile)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ttynumber).HasColumnName("TTYNumber");
            entity.Property(e => e.TypeOfConstruction).HasMaxLength(50);
            entity.Property(e => e.Typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("typeofproject");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwOlapCertifiedUnitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_CertifiedUnitDetails", "AAHR");

            entity.Property(e => e.Ami)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AMI");
            entity.Property(e => e.CountAs)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentTenant)
                .HasMaxLength(302)
                .IsUnicode(false)
                .HasColumnName("currentTenant");
            entity.Property(e => e.FixedOrFloating)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsCertified).HasColumnName("isCertified");
            entity.Property(e => e.IsCes).HasColumnName("IsCES");
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyRestrictions).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.Projectid).HasColumnName("projectid");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TotalBathroom).IsUnicode(false);
            entity.Property(e => e.TotalBedroom).IsUnicode(false);
            entity.Property(e => e.UnitAccessibiltyType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UnitAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitAttributeDate)
                .HasColumnType("datetime")
                .HasColumnName("Unit Attribute Date");
            entity.Property(e => e.UnitFeature)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitFeatureArea)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwOlapConstructionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_ConstructionDetails", "AAHR");

            entity.Property(e => e.AcHp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AcHP #");
            entity.Property(e => e.AcHpfileProjectNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AcHPFileProjectNumber");
            entity.Property(e => e.Apn).HasColumnName("APN#");
            entity.Property(e => e.CapclosureDate)
                .HasMaxLength(4000)
                .HasColumnName("CAPClosureDate");
            entity.Property(e => e.Capsummary)
                .IsUnicode(false)
                .HasColumnName("CAPSummary");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CreatedOn)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.Hims)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMS #");
            entity.Property(e => e.ModifiedOn)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ProjectAddress)
                .IsUnicode(false)
                .HasColumnName("Project Address");
            entity.Property(e => e.ProjectAddress1)
                .IsUnicode(false)
                .HasColumnName("ProjectAddress");
            entity.Property(e => e.ProjectName).HasColumnName("Project Name");
            entity.Property(e => e.ProjectName1).HasColumnName("ProjectName");
            entity.Property(e => e.PropSnapShotId).HasColumnName("PropSnapShotID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .HasColumnName("Property_Name");
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Summary).HasMaxLength(500);
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.WithdrawReason)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e._073DateNacinspectionScheduled)
                .HasMaxLength(4000)
                .HasColumnName("073_DateNACInspectionScheduled");
            entity.Property(e => e._074020EndDateOfSurvey)
                .HasMaxLength(4000)
                .HasColumnName("074_020_EndDateOfSurvey");
            entity.Property(e => e._074StartDateOfSurvey)
                .HasMaxLength(4000)
                .HasColumnName("074_StartDateOfSurvey");
            entity.Property(e => e._075LinktoNacinspectionReport)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("075_LinktoNACInspectionReport");
            entity.Property(e => e._076DateOfNacinspectionReport)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("076_DateOfNACInspectionReport");
            entity.Property(e => e._081200NoticeToProceedWithRetrofitDate)
                .HasColumnType("datetime")
                .HasColumnName("081_200_NoticeToProceedWithRetrofitDate");
            entity.Property(e => e._081ProposedRetrofitCommenceDate)
                .HasMaxLength(4000)
                .HasColumnName("081_ProposedRetrofitCommenceDate");
            entity.Property(e => e._088100DateSiteRetrofitFinalAcHpinspectionApproved)
                .HasMaxLength(4000)
                .HasColumnName("088_100_DateSiteRetrofitFinalAcHPInspectionApproved");
            entity.Property(e => e._088200DateProjectRetrofitFinalAcHpinspectionApproved)
                .HasMaxLength(4000)
                .HasColumnName("088_200_DateProjectRetrofitFinalAcHPInspectionApproved");
            entity.Property(e => e._089100DateSiteAcHpfinalNewConstructionInspApproved)
                .HasMaxLength(4000)
                .HasColumnName("089_100_DateSiteAcHPFinalNewConstructionInspApproved");
            entity.Property(e => e._089200DateProjectAcHpfinalNewConstructionInspApproved)
                .HasMaxLength(4000)
                .HasColumnName("089_200_DateProjectAcHPFinalNewConstructionInspApproved");
            entity.Property(e => e._089300DateSiteAcHpfinalRehabInspApproved)
                .HasMaxLength(4000)
                .HasColumnName("089_300_DateSiteAcHPFinalRehabInspApproved");
            entity.Property(e => e._089400DateProjectAcHpfinalRehabInspApproved)
                .HasMaxLength(4000)
                .HasColumnName("089_400_DateProjectAcHPFinalRehabInspApproved");
            entity.Property(e => e._1126000DateTheNacissuedVerificationOfSiteAccessibilityForRetrofitUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1126_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRetrofitUnderCSA");
            entity.Property(e => e._1127000DateTheCityCertifiedSiteAccessibilityForRetrofitUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1127_000_DateTheCityCertifiedSiteAccessibilityForRetrofitUnderCSA");
            entity.Property(e => e._1128000DateTheNacissuedVerificationOfProjectAccessibilityForRetrofitUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1128_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRetrofitUnderCSA");
            entity.Property(e => e._1129000DateTheCityCertifiedProjectAccessibilityForRetrofitUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1129_000_DateTheCityCertifiedProjectAccessibilityForRetrofitUnderCSA");
            entity.Property(e => e._1130000DateTheNacissuedVerificationOfSiteAccessibilityForRehabUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1130_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRehabUnderCSA");
            entity.Property(e => e._1131000DateTheCityCertifiedSiteAccessibilityForRehabUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1131_000_DateTheCityCertifiedSiteAccessibilityForRehabUnderCSA");
            entity.Property(e => e._1132000DateTheNacissuedVerificationOfProjectAccessibilityForRehabUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1132_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRehabUnderCSA");
            entity.Property(e => e._1133000DateTheCityCertifiedProjectAccessibilityForRehabUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1133_000_DateTheCityCertifiedProjectAccessibilityForRehabUnderCSA");
            entity.Property(e => e._1134000DateTheNacissuedVerificationOfSiteAccessibilityForNewConstructionUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1134_000_DateTheNACIssuedVerificationOfSiteAccessibilityForNewConstructionUnderCSA");
            entity.Property(e => e._1135000DateTheCityCertifiedSiteAccessibilityForNewConstructionUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1135_000_DateTheCityCertifiedSiteAccessibilityForNewConstructionUnderCSA");
            entity.Property(e => e._1136000DateTheNacissuedVerificationOfProjectAccessibilityForNewConstructionUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1136_000_DateTheNACIssuedVerificationOfProjectAccessibilityForNewConstructionUnderCSA");
            entity.Property(e => e._1137000DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderCsa)
                .HasMaxLength(4000)
                .HasColumnName("1137_000_DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderCSA");
            entity.Property(e => e._1138000DateTheNacissuedVerificationOfSiteAccessibilityForRetrofitUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1138_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRetrofitUnderVCA");
            entity.Property(e => e._1139000DateTheCityCertifiedSiteAccessibilityForRetrofitUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1139_000_DateTheCityCertifiedSiteAccessibilityForRetrofitUnderVCA");
            entity.Property(e => e._1140000DateTheNacissuedVerificationOfProjectAccessibilityForRetrofitUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1140_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRetrofitUnderVCA");
            entity.Property(e => e._1141000DateTheCityCertifiedProjectAccessibilityForRetrofitUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1141_000_DateTheCityCertifiedProjectAccessibilityForRetrofitUnderVCA");
            entity.Property(e => e._1142000DateTheNacissuedVerificationOfSiteAccessibilityForRehabUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1142_000_DateTheNACIssuedVerificationOfSiteAccessibilityForRehabUnderVCA");
            entity.Property(e => e._1143000DateTheCityCertifiedSiteAccessibilityForRehabUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1143_000_DateTheCityCertifiedSiteAccessibilityForRehabUnderVCA");
            entity.Property(e => e._1144000DateTheNacissuedVerificationOfProjectAccessibilityForRehabUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1144_000_DateTheNACIssuedVerificationOfProjectAccessibilityForRehabUnderVCA");
            entity.Property(e => e._1145000DateTheCityCertifiedProjectAccessibilityForRehabUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1145_000_DateTheCityCertifiedProjectAccessibilityForRehabUnderVCA");
            entity.Property(e => e._1146000DateTheNacissuedVerificationOfSiteAccessibilityForNewConstructionUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1146_000_DateTheNACIssuedVerificationOfSiteAccessibilityForNewConstructionUnderVCA");
            entity.Property(e => e._1147000DateTheCityCertifiedSiteAccessibilityForNewConstructionUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1147_000_DateTheCityCertifiedSiteAccessibilityForNewConstructionUnderVCA");
            entity.Property(e => e._1148000DateTheNacissuedVerificationOfProjectAccessibilityForNewConstructionUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1148_000_DateTheNACIssuedVerificationOfProjectAccessibilityForNewConstructionUnderVCA");
            entity.Property(e => e._1149000DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderVca)
                .HasMaxLength(4000)
                .HasColumnName("1149_000_DateTheCityCertifiedProjectAccessibilityForNewConstructionUnderVCA");
            entity.Property(e => e._160CorrectiveActionPlanIssueDate)
                .HasMaxLength(4000)
                .HasColumnName("160_CorrectiveActionPlanIssueDate");
            entity.Property(e => e._196AssignedRcs)
                .HasMaxLength(201)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("196_AssignedRCS");
            entity.Property(e => e._5251DateOf1stPlanCheckSubmission)
                .HasMaxLength(4000)
                .HasColumnName("525_1_DateOf1stPlanCheckSubmission");
            entity.Property(e => e._5252DateOf1stBuildingPermit)
                .HasMaxLength(4000)
                .HasColumnName("525_2_DateOf1stBuildingPermit");
            entity.Property(e => e._5253BuildingPermitNumber).HasColumnName("525_3_BuildingPermitNumber");
            entity.Property(e => e._5254DateOf1stTco)
                .HasMaxLength(4000)
                .HasColumnName("525_4_DateOf1stTCO");
            entity.Property(e => e._5255DateOf1stCofO)
                .HasMaxLength(4000)
                .HasColumnName("525_5_DateOf1stCofO");
            entity.Property(e => e._5265DateOf1stCoFoforConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("526_5__DateOf1stCoFOForConversionToResidential");
            entity.Property(e => e._5271DateOfMostRecentPlanCheckSubmission)
                .HasMaxLength(4000)
                .HasColumnName("527_1_DateOfMostRecentPlanCheckSubmission");
            entity.Property(e => e._5272DateOmostRecentBuildingPermit)
                .HasMaxLength(4000)
                .HasColumnName("527_2_DateOMostRecentBuildingPermit");
            entity.Property(e => e._5273MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("527_3_MostRecentBuldingPermitNumber");
            entity.Property(e => e._5274DateOfMostRecentTco).HasColumnName("527_4_DateOfMostRecentTCO");
            entity.Property(e => e._5275DateOfMostRecentCofO).HasColumnName("527_5_DateOfMostRecentCofO");
            entity.Property(e => e._5276DateOfBuildingPermitFinaled).HasColumnName("527_6_DateOfBuildingPermitFinaled");
            entity.Property(e => e._5281DateOfCurrentPlanCheckSubmission)
                .HasMaxLength(4000)
                .HasColumnName("528_1_DateOfCurrentPlanCheckSubmission");
            entity.Property(e => e._5282DateOfCurrentBuildingPermitNumber)
                .HasMaxLength(4000)
                .HasColumnName("528_2_DateOfCurrentBuildingPermitNumber");
            entity.Property(e => e._5283CurrentBuldingPermitNumberr)
                .HasMaxLength(100)
                .HasColumnName("528_3_CurrentBuldingPermitNumberr");
            entity.Property(e => e._5284DateOfCurrentTco).HasColumnName("528_4_DateOfCurrentTCO");
            entity.Property(e => e._5285DateOfCurrentCofO).HasColumnName("528_5_DateOfCurrentCofO");
            entity.Property(e => e._5286DateOfCurrentBuildingPermitFinaled)
                .HasColumnType("datetime")
                .HasColumnName("528_6_DateOfCurrentBuildingPermitFinaled");
            entity.Property(e => e._5291DateOfRetrofitPlanCheckSubmission)
                .HasMaxLength(4000)
                .HasColumnName("529_1_DateOfRetrofitPlanCheckSubmission");
            entity.Property(e => e._5292DateOfCurrentBuildingPermitNumber)
                .HasMaxLength(4000)
                .HasColumnName("529_2_DateOfCurrentBuildingPermitNumber");
            entity.Property(e => e._5293DbsretrofitBuildingPermitNumber)
                .HasMaxLength(100)
                .HasColumnName("529_3_DBSRetrofitBuildingPermitNumber");
            entity.Property(e => e._5294DateOfCofOpostRetrofit)
                .HasMaxLength(4000)
                .HasColumnName("529_4_DateOfCofOPostRetrofit");
            entity.Property(e => e._5295DateOfBuildingPermitFinaled)
                .HasMaxLength(4000)
                .HasColumnName("529_5_DateOfBuildingPermitFinaled");
            entity.Property(e => e._649AreainSquareFeet).HasColumnName("649_AreainSquareFeet");
            entity.Property(e => e._650Floorplantype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("650_Floorplantype");
            entity.Property(e => e._652Currentstatusofprojectcase)
                .HasMaxLength(50)
                .HasColumnName("652_Currentstatusofprojectcase");
            entity.Property(e => e._653IsParkingAvailableAtBuilding)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("653_IsParkingAvailableAtBuilding");
            entity.Property(e => e._654SharedparkingLots)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("654_SharedparkingLots");
            entity.Property(e => e._655ResidentialParkingRatio).HasColumnName("655_ResidentialParkingRatio");
            entity.Property(e => e._656AssignedResidentialParking).HasColumnName("656_AssignedResidentialParking");
            entity.Property(e => e._657ApplicableAccessibilityStandard)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("657_ApplicableAccessibilityStandard");
            entity.Property(e => e._658IsthisaPreVcadevelopment).HasColumnName("658_IsthisaPreVCAdevelopment");
            entity.Property(e => e._659TotalNumberFha11aunitsRequired)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("659_TotalNumber_FHA11AUnitsRequired");
            entity.Property(e => e._660MaximumMobilityCsacount).HasColumnName("660_MaximumMobilityCSACount");
            entity.Property(e => e._661UnitsNoForAllTypes)
                .HasMaxLength(2016)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNoForAllTypes");
            entity.Property(e => e._661UnitsNumbersForAllTypesEnhancedAccessibility)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNumbersForAllTypes_EnhancedAccessibility");
            entity.Property(e => e._661UnitsNumbersForAllTypesHearingVision)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNumbersForAllTypes_HearingVision");
            entity.Property(e => e._661UnitsNumbersForAllTypesMobility)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNumbersForAllTypes_Mobility");
            entity.Property(e => e._661UnitsNumbersForAllTypesMobility1)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("661_UnitsNumbersForAllTypes_Mobility.");
            entity.Property(e => e._661UnitsNumbersForAllTypesUnitDesignation).HasColumnName("661_UnitsNumbersForAllTypes_UnitDesignation");
            entity.Property(e => e._662HudchecklistforSelection1perBuiliding)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("662_HUDChecklistforSelection1perBuiliding");
            entity.Property(e => e._663IsParkingAvailableAtBuilding)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("663_IsParkingAvailableAtBuilding");
            entity.Property(e => e._664BuildingType).HasColumnName("664_BuildingType");
            entity.Property(e => e._665AssignedResidentialParking)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("665_AssignedResidentialParking");
            entity.Property(e => e._666ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("666_ResidentialParkingRatio");
            entity.Property(e => e._667TotalResidentialParking).HasColumnName("667_TotalResidentialParking");
            entity.Property(e => e._668Residentialstandardaccessibleparkingspaces).HasColumnName("668_Residentialstandardaccessibleparkingspaces");
            entity.Property(e => e._669VanAccessibleSpaces).HasColumnName("669_VanAccessibleSpaces");
            entity.Property(e => e._670TotalResidentialParking).HasColumnName("670_TotalResidentialParking");
            entity.Property(e => e._671StandardCommercialSpaces).HasColumnName("671_StandardCommercialSpaces");
            entity.Property(e => e._672CommercialAccessibleSpaces).HasColumnName("672_CommercialAccessibleSpaces");
            entity.Property(e => e._673CommercialVanAccessibleSpaces).HasColumnName("673_CommercialVanAccessibleSpaces");
            entity.Property(e => e._674CommercialVanAccessibleSpaces).HasColumnName("674_CommercialVanAccessibleSpaces");
            entity.Property(e => e._675StandardVisitorSpaces).HasColumnName("675_StandardVisitorSpaces");
            entity.Property(e => e._676VisitorAccessibleSpaces).HasColumnName("676_VisitorAccessibleSpaces");
            entity.Property(e => e._677VisitorVanAccessibleSpaces).HasColumnName("677_VisitorVanAccessibleSpaces");
            entity.Property(e => e._678VisitorVanAccessibleSpaces).HasColumnName("678_VisitorVanAccessibleSpaces");
            entity.Property(e => e._679CommercialElectricVanAccessibleChargingStation).HasColumnName("679_CommercialElectricVanAccessibleChargingStation");
            entity.Property(e => e._680CommercialElectricAmbulatoryChargingStation).HasColumnName("680_CommercialElectricAmbulatoryChargingStation");
            entity.Property(e => e._681CommercialElectricAmbulatoryChargingStation).HasColumnName("681_CommercialElectricAmbulatoryChargingStation");
            entity.Property(e => e._682CommercialElectricAmbulatoryChargingStation).HasColumnName("682_CommercialElectricAmbulatoryChargingStation");
            entity.Property(e => e._683DateAssignedtoAcHpstaffProject)
                .HasMaxLength(4000)
                .HasColumnName("683_DateAssignedtoAcHPStaff_Project");
            entity.Property(e => e._684DateAcHpstampedPlansandClearedProjectinPcisProject)
                .HasMaxLength(4000)
                .HasColumnName("684_DateAcHPStampedPlansandClearedProjectinPCIS_Project");
            entity.Property(e => e._685ProjectedProjectCompletionDateProject)
                .HasMaxLength(4000)
                .HasColumnName("685_ProjectedProjectCompletionDate_Project");
            entity.Property(e => e._686PreFinalAccessibilityInspectionRequestedProject)
                .HasMaxLength(4000)
                .HasColumnName("686_Pre-FinalAccessibilityInspectionRequested_Project");
            entity.Property(e => e._687DateAcHpissuedCorrectionsforFinalAccessibilityInspectionProject)
                .HasMaxLength(4000)
                .HasColumnName("687_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_Project");
            entity.Property(e => e._688DatemeetingwithownerProject)
                .HasMaxLength(4000)
                .HasColumnName("688_Datemeetingwithowner_Project");
            entity.Property(e => e._689DateAssignedtoAcHpstaffSite)
                .HasMaxLength(4000)
                .HasColumnName("689_DateAssignedtoAcHPStaff_Site");
            entity.Property(e => e._690DateAcHpstampedPlansandClearedProjectinPcisSite)
                .HasMaxLength(4000)
                .HasColumnName("690_DateAcHPStampedPlansandClearedProjectinPCIS_Site");
            entity.Property(e => e._691ProjectedRetrofitCompletionDateSite)
                .HasMaxLength(4000)
                .HasColumnName("691_ProjectedRetrofitCompletionDate_Site");
            entity.Property(e => e._692PreFinalAccessibilityInspectionRequestedbyDeveloperOwnerSite)
                .HasMaxLength(4000)
                .HasColumnName("692_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_Site");
            entity.Property(e => e._693DateAcHpissuedCorrectionsforFinalAccessibilityInspectionSite)
                .HasMaxLength(4000)
                .HasColumnName("693_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_Site");
            entity.Property(e => e._694ProgressInspectionRequestbyDeveloperOwnerDateSite)
                .HasMaxLength(4000)
                .HasColumnName("694_ProgressInspectionRequestbyDeveloperOwnerDate_Site");
            entity.Property(e => e._695DateAcHpprogressInspectionApprovedSite)
                .HasMaxLength(4000)
                .HasColumnName("695_DateAcHPProgressInspectionApproved_Site");
            entity.Property(e => e._696DateAcHpissuedCorrectionsforProgressInspectionSite)
                .HasMaxLength(4000)
                .HasColumnName("696_DateAcHPIssuedCorrectionsforProgressInspection_Site");
            entity.Property(e => e._697RoughInspectionAccessibilityReportApprovedDateSite)
                .HasMaxLength(4000)
                .HasColumnName("697_RoughInspectionAccessibilityReportApprovedDate_Site");
            entity.Property(e => e._698DateAssignedtoAcHpstaffSubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("698_DateAssignedtoAcHPStaff_SubRehabProject");
            entity.Property(e => e._699DateAcHpstampedPlansandClearedProjectinPcisSubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("699_DateAcHPStampedPlansandClearedProjectinPCIS_SubRehabProject");
            entity.Property(e => e._700ProjectedProjectCompletionDateSubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("700_ProjectedProjectCompletionDate_SubRehabProject");
            entity.Property(e => e._701PreFinalAccessibilityInspectionRequestedbyDeveloperOwnerSubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("701_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_SubRehabProject");
            entity.Property(e => e._702DateAcHpissuedCorrectionsforFinalAccessibilityInspectionSubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("702_DateAcHPIssuedCorrectionsforFinalAccessibility Inspection_SubRehabProject");
            entity.Property(e => e._703DateDeveloperOwnerRequestedNacinspectionSubRehabProject)
                .HasMaxLength(4000)
                .HasColumnName("703_DateDeveloperOwnerRequestedNACInspection_SubRehabProject");
            entity.Property(e => e._704DateAssignedtoAcHpstaffSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("704_DateAssignedtoAcHPStaff_SubRehabSite");
            entity.Property(e => e._705DateAcHpstampedPlansandClearedProjectinPcisSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("705_DateAcHPStampedPlansandClearedProjectinPCIS_SubRehabSite");
            entity.Property(e => e._706ProjectedProjectCompletionDateSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("706_ProjectedProjectCompletionDate_SubRehabSite");
            entity.Property(e => e._707PreFinalAccessibilityInspectionRequestedbyDeveloperOwnerSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("707_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_SubRehabSite");
            entity.Property(e => e._708DateAcHpissuedCorrectionsforFinalAccessibilityInspectionSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("708_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_SubRehabSite");
            entity.Property(e => e._709DateDeveloperOwnerRequestedNacinspectionSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("709_DateDeveloperOwnerRequestedNACInspection_SubRehabSite");
            entity.Property(e => e._710DateAcHpissuedCorrectionsforDesignReviewSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("710_DateAcHPIssuedCorrectionsforDesignReview_SubRehabSite");
            entity.Property(e => e._711RoughInspectionRequestedbyDeveloperOwnerSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("711_RoughInspectionRequestedbyDeveloperOwner_SubRehabSite");
            entity.Property(e => e._712RoughInspectionAccessibilityReportApprovedDateSubRehabSite)
                .HasMaxLength(4000)
                .HasColumnName("712_RoughInspectionAccessibilityReportApprovedDate_SubRehabSite");
            entity.Property(e => e._810DateAssignedtoAcHpstaffNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("810_DateAssignedtoAcHPStaff_NewConstructionProject");
            entity.Property(e => e._811DateAcHpstampedPlansandClearedProjectinPcisNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("811_DateAcHPStampedPlansandClearedProjectinPCIS_NewConstructionProject");
            entity.Property(e => e._812ProjectedProjectCompletionDateNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("812_ProjectedProjectCompletionDate_NewConstructionProject");
            entity.Property(e => e._813PreFinalAccessibilityInspectionRequestedbyDeveloperOwnerNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("813_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_NewConstructionProject");
            entity.Property(e => e._814DateAcHpissuedCorrectionsforFinalAccessibilityInspectionNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("814_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_NewConstructionProject");
            entity.Property(e => e._815DateDeveloperOwnerRequestedNacinspectionNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("815_DateDeveloperOwnerRequestedNACInspection_NewConstructionProject");
            entity.Property(e => e._816DateAssignedtoAcHpstaffNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("816_DateAssignedtoAcHPStaff_NewConstructionProject");
            entity.Property(e => e._817DateAcHpstampedPlansandClearedProjectinPcisNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("817_DateAcHPStampedPlansandClearedProjectinPCIS_NewConstructionProject");
            entity.Property(e => e._818ProjectedProjectCompletionDateNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("818_ProjectedProjectCompletionDate_NewConstructionProject");
            entity.Property(e => e._819PreFinalAccessibilityInspectionRequestedbyDeveloperOwnerNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("819_Pre-FinalAccessibilityInspectionRequestedbyDeveloperOwner_NewConstructionProject");
            entity.Property(e => e._820DateAcHpissuedCorrectionsforFinalAccessibilityInspectionNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("820_DateAcHPIssuedCorrectionsforFinalAccessibilityInspection_NewConstructionProject");
            entity.Property(e => e._821DateDeveloperOwnerRequestedNacinspectionNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("821_DateDeveloperOwnerRequestedNACInspection_NewConstructionProject");
            entity.Property(e => e._822DateAcHpissuedCorrectionsforDesignReviewNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("822_DateAcHPIssuedCorrectionsforDesignReview_NewConstructionProject");
            entity.Property(e => e._823RoughInspectionRequestedbyDeveloperOwnerNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("823_RoughInspectionRequestedbyDeveloperOwner_NewConstructionProject");
            entity.Property(e => e._824RoughInspectionAccessibilityReportApprovedDateNewConstructionProject)
                .HasMaxLength(4000)
                .HasColumnName("824_RoughInspectionAccessibilityReportApprovedDate_NewConstructionProject");
            entity.Property(e => e._826500CorrectiveActionPlanCaseNumber)
                .HasMaxLength(20)
                .HasColumnName("826_500_CorrectiveActionPlanCaseNumber");
            entity.Property(e => e._826700Capstatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("826_700_CAPStatus");
            entity.Property(e => e._826CorrectiveActionPlanDueDate)
                .HasMaxLength(4000)
                .HasColumnName("826_CorrectiveActionPlanDueDate");
            entity.Property(e => e._827CorrectiveActionPlanReceivedDate)
                .HasMaxLength(4000)
                .HasColumnName("827_CorrectiveActionPlanReceivedDate");
            entity.Property(e => e._828010CorrectiveActionPlanAchievedDate)
                .HasMaxLength(4000)
                .HasColumnName("828_010_CorrectiveActionPlanAchievedDate");
            entity.Property(e => e._828CorrectiveActionPlanComplete)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("828_CorrectiveActionPlanComplete");
            entity.Property(e => e._829400SecondExtensionEndDate)
                .HasColumnType("datetime")
                .HasColumnName("829_400_SecondExtensionEndDate");
            entity.Property(e => e._829500CapnonCompliantCategoriesatDateofCapissuance).HasColumnName("829_500_CAPNon-CompliantCategoriesatDateofCAPIssuance");
            entity.Property(e => e._829CorrectiveActionPlanExtensions)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("829_CorrectiveActionPlanExtensions");
            entity.Property(e => e._830ExtensionEndDate)
                .HasColumnType("datetime")
                .HasColumnName("830_ExtensionEndDate");
            entity.Property(e => e._831NonComplianceCaseOpenDate).HasColumnName("831_Non-ComplianceCaseOpenDate");
            entity.Property(e => e._832NonComplianceCaseNumber)
                .HasMaxLength(20)
                .HasColumnName("832_Non-ComplianceCaseNumber");
            entity.Property(e => e._833OrderToComplyIssueDate).HasColumnName("833_OrderToComplyIssueDate");
            entity.Property(e => e._834ComplianceDueDate).HasColumnName("834_ComplianceDueDate");
            entity.Property(e => e._835010OtccomplianceAchievedDate).HasColumnName("835_010_OTCComplianceAchievedDate");
            entity.Property(e => e._835IsComplianceAchieved).HasColumnName("835_IsComplianceAchieved");
            entity.Property(e => e._836DueDateForAnyExtensionToComply).HasColumnName("836_DueDateForAnyExtensionToComply");
            entity.Property(e => e._837SubsequentActions)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("837_SubsequentActions");
            entity.Property(e => e._838ResponsibleCityStaff)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("838_ResponsibleCityStaff");
            entity.Property(e => e._839010EnforcementComplianceAchievedDate).HasColumnName("839_010_EnforcementComplianceAchievedDate");
            entity.Property(e => e._839500CommentsConcerningEnforcement)
                .HasMaxLength(200)
                .HasColumnName("839_500_CommentsConcerningEnforcement");
            entity.Property(e => e._839600DatePolicyComplianceDecertified).HasColumnName("839_600_DatePolicyComplianceDecertified");
            entity.Property(e => e._839700DatePolicyCertificateReIssued).HasColumnName("839_700_DatePolicyCertificateReIssued");
            entity.Property(e => e._839DateNonComplianceCaseClosed).HasColumnName("839_DateNon-ComplianceCaseClosed");
            entity.Property(e => e._843000TotalNumberOfNoncompliantConditions).HasColumnName("843_000_TotalNumberOfNoncompliantConditions");
            entity.Property(e => e._846000EstimatedTotalRemovalCost)
                .HasMaxLength(4000)
                .HasColumnName("846_000_EstimatedTotalRemovalCost");
            entity.Property(e => e._847000Region).HasColumnName("847_000_Region");
            entity.Property(e => e._848000Facility)
                .HasMaxLength(4000)
                .HasColumnName("848_000_Facility");
            entity.Property(e => e._849000AddressFromEta)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("849_000_AddressFromETA");
            entity.Property(e => e._850000SurveyStandards)
                .HasMaxLength(4000)
                .HasColumnName("850_000_SurveyStandards");
            entity.Property(e => e._851000SitePlanDrawingNumber)
                .HasMaxLength(4000)
                .HasColumnName("851_000_SitePlanDrawingNumber");
            entity.Property(e => e._900DateCertificationAccessibilityissues)
                .HasMaxLength(4000)
                .HasColumnName("90_0_DateCertificationAccessibilityissues");
            entity.Property(e => e._901DateCertificationAccessibilityissues)
                .HasMaxLength(4000)
                .HasColumnName("90_1_DateCertificationAccessibilityissues");
        });

        modelBuilder.Entity<VwOlapContactDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_ContactDetails", "AAHR");

            entity.Property(e => e.Company).HasMaxLength(150);
            entity.Property(e => e.ContactCreatedBy).HasMaxLength(50);
            entity.Property(e => e.ContactCreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ContactModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ContactModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HouseFracNum).HasMaxLength(50);
            entity.Property(e => e.HouseNum).HasMaxLength(50);
            entity.Property(e => e.IdmuserName)
                .HasMaxLength(50)
                .HasColumnName("IDMUserName");
            entity.Property(e => e.LinkType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.MiddleName).HasMaxLength(50);
            entity.Property(e => e.PhoneExtension)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PhoneHome).HasMaxLength(50);
            entity.Property(e => e.PhoneMobile).HasMaxLength(50);
            entity.Property(e => e.PhoneWork).HasMaxLength(50);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(50);
            entity.Property(e => e.StreetTypeCd).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.UnitNo).HasMaxLength(100);
            entity.Property(e => e.Zip).HasMaxLength(100);
            entity.Property(e => e.ZipSuffix).HasMaxLength(4);
        });

        modelBuilder.Entity<VwOlapDocumentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_DocumentDetails", "AAHR");

            entity.Property(e => e.AcHpNumber)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("AcHP Number");
            entity.Property(e => e.Category)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Created By");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.MimeType)
                .HasMaxLength(150)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Modified By");
            entity.Property(e => e.ModifiedOn)
                .HasMaxLength(200)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OriginalFileName)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Original File Name");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.Received)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.SubCategory)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("Sub Category");
            entity.Property(e => e.UniqueId)
                .HasMaxLength(40)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwOlapGrievance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_Grievance", "AAHR");

            entity.Property(e => e.GrievanceId).HasColumnName("GrievanceID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .HasColumnName("Property_Name");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e._1014000DoesTheGrievanceRelateToAPendingOrPriorRequestForAReasonableAccommodationFromTheProperty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1014_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_accommodation_from_the_property?");
            entity.Property(e => e._1015000TypeSOfReasonableAccommodationRequestedByTheGrievant)
                .IsUnicode(false)
                .HasColumnName("1015_000_Type(s)_of_Reasonable_Accommodation_requested_by_the_grievant");
            entity.Property(e => e._1016000DoesTheGrievantAllegeTheirReasonableAccommodationRequestHasNotBeenProcessedPromptly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1016_000_Does_the_grievant_allege_their_reasonable_accommodation_request_has_not_been_processed_promptly?");
            entity.Property(e => e._1017000DoesTheGrievantAllegeThePropertyHasUnreasonablyRequestedAThirdPartyVerification)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1017_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third-party_verification?");
            entity.Property(e => e._1018000DoesTheGrievantAllegeThePropertyHasPartiallyDeniedTheirReasonableAccommodationRequest)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1018_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_accommodation_request?");
            entity.Property(e => e._1019000DoesTheGrievantAllegeThePropertyHasDeniedTheirReasonableAccommodationRequest)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1019_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_accommodation_request?");
            entity.Property(e => e._1020000DoesTheGrievantAllegeThereAreOtherIssuesRegardingTheirReasonableAccommodationRequestNotAlreadyListed)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1020_000_Does_the_grievant_allege_there_are_other_issues_regarding_their_reasonable_accommodation_request_not_already_listed?");
            entity.Property(e => e._1021000DescriptionOfOtherIssuesRegardingReasonableAccommodationRequest)
                .IsUnicode(false)
                .HasColumnName("1021_000_Description_of_other_issues_regarding_reasonable_accommodation_request");
            entity.Property(e => e._1022000DateOfReasonableAccommodationRequest)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1022_000_Date_of_Reasonable_Accommodation_request");
            entity.Property(e => e._1022001PrevReasonableAccmQrid)
                .IsUnicode(false)
                .HasColumnName("1022_001_PrevReasonableAccmQRID");
            entity.Property(e => e._1023000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1023_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1024000DoesTheGrievanceRelateToAPendingOrPriorRequestForAReasonableModificationFromTheProperty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1024_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_modification_from_the_property?");
            entity.Property(e => e._1025000TypeSOfReasonableModificationRequestedByTheGrievant)
                .IsUnicode(false)
                .HasColumnName("1025_000_Type(s)_of_Reasonable_Modification_requested_by_the_grievant");
            entity.Property(e => e._1026000DescriptionOfRequestedFeature)
                .IsUnicode(false)
                .HasColumnName("1026_000_Description_of_requested_feature");
            entity.Property(e => e._1027000DoesTheGrievantAllegeTheirReasonableModificationHasNotBeenProcessedPromptly)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1027_000_Does_the_grievant_allege_their_reasonable_modification_has_not_been_processed_promptly?");
            entity.Property(e => e._1028000DoesTheGrievantAllegeThePropertyHasUnreasonablyRequestedAThirdPartyVerification)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1028_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third-party_verification?");
            entity.Property(e => e._1029000DoesTheGrievantAllegeThePropertyHasPartiallyDeniedTheirReasonableModificationRequest)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1029_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_modification_request?");
            entity.Property(e => e._1030000DoesTheGrievantAllegeThePropertyHasDeniedTheirReasonableModificationRequest)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1030_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_modification_request?");
            entity.Property(e => e._1031000DoesThePropertyGrievantAllegeThereAreOtherIssuesRegardingTheirReasonableModificationRequestNotAlreadyLi)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1031_000_Does_the_property_grievant_allege_there_are_other_issues_regarding_their_reasonable_modification_request_not_already_li");
            entity.Property(e => e._1032000ExplanationOfTheOtherIssuesRegardingReasonableModificationRequest)
                .IsUnicode(false)
                .HasColumnName("1032_000_Explanation_of_the_other_issues_regarding_reasonable_modification_request");
            entity.Property(e => e._1033000DateOfReasonableModificationRequest)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1033_000_Date_of_Reasonable_Modification_request");
            entity.Property(e => e._1033001PrevReasonableModfQrid)
                .IsUnicode(false)
                .HasColumnName("1033_001_PrevReasonableModfQRID");
            entity.Property(e => e._1034000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1034_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1035000DoesTheGrievanceRelateToARequestForAuxiliaryAidsAndOrServicesForEffectiveCommunicationFromTheProperty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1035_000_Does_the_grievance_relate_to_a_request_for_auxiliary_aids_and/or_services_for_effective_communication_from_the_property");
            entity.Property(e => e._1036000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("1036_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1037000DateOfEffectiveCommunicationRequest)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1037_000_Date_of_effective_communication_request");
            entity.Property(e => e._1037001PrevEffectiveCommQrid)
                .IsUnicode(false)
                .HasColumnName("1037_001_PrevEffectiveCommQRID");
            entity.Property(e => e._1038000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1038_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1039000DoesTheGrievanceRelateToTheMaintenanceOfAccessibleFeaturesOtherThanElevatorsOrToBarriersBlockingAcc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1039_000_Does_the_grievance_relate_to_the_maintenance_of_accessible_features_(other_than_elevators),_or_to_barriers_blocking_acc");
            entity.Property(e => e._1040000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("1040_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1041000DescriptionOfMaintenanceIssue)
                .IsUnicode(false)
                .HasColumnName("1041_000_Description_of_maintenance_issue");
            entity.Property(e => e._1042000DoesTheGrievanceRelateToAnElevator)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1042_000_Does_the_grievance_relate_to_an_elevator?");
            entity.Property(e => e._1043000IfYesPleaseChooseAllThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("1043_000_If_yes,_please_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._1044000DoesTheGrievanceRelateToPlacementOnAWaitingListOrTransferListOrTransferFromAWaitingListOrTransfer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1044_000_Does_the_grievance_relate_to_placement_on_a_waiting_list_or_transfer_list,_or_transfer_from_a_waiting_list_or_transfer_");
            entity.Property(e => e._1045000IfYesPleaseChooseAllThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("1045_000_If_yes,_please_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._1046000DateOfWaitingListOrUnitTransferRequest)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1046_000_Date_of_Waiting_List_or_Unit_Transfer_request");
            entity.Property(e => e._1047000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1047_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1048000DoesTheGrievantFaceAPotentialEvictionFromTheProperty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1048_000_Does_the_grievant_face_a_potential_eviction_from_the_property?");
            entity.Property(e => e._1049000IfYesHasTheGrievantBeenServedWithAnyOfTheFollowingPleaseChooseAllThatApply)
                .IsUnicode(false)
                .HasColumnName("1049_000_If_yes,_has_the_grievant_been_served_with_any_of_the_following?_Please_choose_all_that_apply");
            entity.Property(e => e._1050000DateNoticeWasServed)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1050_000_Date_Notice_was_served");
            entity.Property(e => e._1051000DoesTheGrievanceRelateToAThreatenedPendingOrPastEviction)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1051_000_Does_the_grievance_relate_to_a_threatened,_pending,_or_past_eviction?");
            entity.Property(e => e._1052000DoesTheGrievanceRelateToAProposedPendingOrCompletedRelocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1052_000_Does_the_grievance_relate_to_a_proposed,_pending,_or_completed_relocation?");
            entity.Property(e => e._1053000IfYesPleaseDescribe)
                .IsUnicode(false)
                .HasColumnName("1053_000_If_yes,_please_describe");
            entity.Property(e => e._1054000DoesTheGrievanceRelateToAProposedPendingOrCompletedRetrofit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1054_000_Does_the_grievance_relate_to_a_proposed,_pending,_or_completed_retrofit?");
            entity.Property(e => e._1055000IfYesPleaseDescribe)
                .IsUnicode(false)
                .HasColumnName("1055_000_If_yes,_please_describe");
            entity.Property(e => e._1056000NoiseComplaintsChooseAllThatApplyFromTheListOfOptions)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1056_000_Noise_complaints:_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._1057000IfTheNoiseComplaintRelatesToNoiseFromAnotherTenantPleaseProvideThatTenantSName)
                .IsUnicode(false)
                .HasColumnName("1057_000_If_the_noise_complaint_relates_to_noise_from_another_tenant,_please_provide_that_tenant's_name");
            entity.Property(e => e._1058000IfTheNoiseComplaintRelatesToNoiseFromAnotherUnitPleaseProvideThatUnitNumber)
                .IsUnicode(false)
                .HasColumnName("1058_000_If_the_noise_complaint_relates_to_noise_from_another_unit,_please_provide_that_unit_number");
            entity.Property(e => e._1059000IfTheNoiseComplaintRelatesToNoiseFromACommonAreaPleaseDescribeTheCommonAreaLocation)
                .IsUnicode(false)
                .HasColumnName("1059_000_If_the_noise_complaint_relates_to_noise_from_a_common_area,_please_describe_the_common_area_location");
            entity.Property(e => e._1060000DoesTheGrievanceRelateToAnAssistanceAnimalEitherAServiceAnimalOrEmotionalSupportAnimal)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1060_000_Does_the_grievance_relate_to_an_assistance_animal,_either_a_service_animal_or_emotional_support_animal?");
            entity.Property(e => e._1061000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("1061_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1062000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1062_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1063000DoesTheGrievanceRelateToClaimsOfDiscriminationOrDifferentTreatmentFromThePropertyBecauseTheGrievantIs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1063_000_Does_the_grievance_relate_to_claims_of_discrimination_or_different_treatment_from_the_property_because_the_grievant_is_");
            entity.Property(e => e._1064000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("1064_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1065000DoesTheGrievanceRelateToClaimsOfHarassmentOnTheProperty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1065_000_Does_the_grievance_relate_to_claims_of_harassment_on_the_property?");
            entity.Property(e => e._1066000IfYesChooseAllThatApplyFromTheListOfOptionsConcerningTheClaimedHarasserS)
                .HasMaxLength(108)
                .IsUnicode(false)
                .HasColumnName("1066_000_If_yes,_choose_all_that_apply_from_the_list_of_options_concerning_the_claimed_harasser(s)");
            entity.Property(e => e._1067000IfTheClaimedHarasserIsAnEmployeeOfThePropertyProvideNamesOfTheEmployeeS)
                .IsUnicode(false)
                .HasColumnName("1067_000_If_the_claimed_harasser_is_an_employee_of_the_property,_provide_names_of_the_employee(s)");
            entity.Property(e => e._1068000IfTheClaimedHarasserIsAnEmployeeOfThePropertyProvideTitlesOfTheEmployeeS)
                .IsUnicode(false)
                .HasColumnName("1068_000_If_the_claimed_harasser_is_an_employee_of_the_property,_provide_titles_of_the_employee(s)");
            entity.Property(e => e._1069000IfTheClaimedHarasserIsAnEmployeeOfThePropertyAndTheNameOrTitleAreUnknownPleaseProvideADescription)
                .IsUnicode(false)
                .HasColumnName("1069_000_If_the_claimed_harasser_is_an_employee_of_the_property,_and_the_name_or_title_are_unknown,_please_provide_a_description");
            entity.Property(e => e._1070000IfTheClaimedHarasserIsAContractorOrAgentOfThePropertyProvideNamesOfThePersons)
                .IsUnicode(false)
                .HasColumnName("1070_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_provide_names_of_the_persons");
            entity.Property(e => e._1071000IfTheClaimedHarasserIsAContractorOrAgentOfThePropertyProvideTitlesOfThePersons)
                .IsUnicode(false)
                .HasColumnName("1071_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_provide_titles_of_the_persons");
            entity.Property(e => e._1072000IfTheClaimedHarasserIsAContractorOrAgentOfThePropertyAndTheNameOrTitleAreUnknownPleaseProvideAD)
                .IsUnicode(false)
                .HasColumnName("1072_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_and_the_name_or_title_are_unknown,_please_provide_a_d");
            entity.Property(e => e._1073000IfTheClaimedHarasserIsATenantOrGuestProvideNamesOfThePersons)
                .IsUnicode(false)
                .HasColumnName("1073_000_If_the_claimed_harasser_is_a_tenant_or_guest,_provide_names_of_the_persons");
            entity.Property(e => e._1074000IfTheClaimedHarasserIsATenantOrGuestProvideTheUnitNumber)
                .IsUnicode(false)
                .HasColumnName("1074_000_If_the_claimed_harasser_is_a_tenant_or_guest,_provide_the_unit_number");
            entity.Property(e => e._1075000IfTheClaimedHarasserIsATenantOrGuestAndTheNameOrUnitNumberAreUnknownPleaseProvideADescriptionOf)
                .IsUnicode(false)
                .HasColumnName("1075_000_If_the_claimed_harasser_is_a_tenant_or_guest,_and_the_name_or_unit_number_are_unknown,_please_provide_a_description_of_");
            entity.Property(e => e._1076000IfTheClaimedHarasserSIsSomeoneOtherThanAnEmployeeContractorAgentTenantOrGuestProvideAsMuchIdent)
                .IsUnicode(false)
                .HasColumnName("1076_000_If_the_claimed_harasser(s)_is_someone_other_than_an_employee,_contractor,_agent,_tenant_or_guest,_provide_as_much_ident");
            entity.Property(e => e._1077000DoesTheGrievantBelieveTheyAreBeingHarassedBecauseTheyAreAMemberOfAGroupProtectedByTheFairHousingPo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1077_000_Does_the_grievant_believe_they_are_being_harassed_because_they_are_a_member_of_a_group_protected_by_the_Fair_Housing_Po");
            entity.Property(e => e._1078000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("1078_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._1079000DoesTheGrievantAllegeTheyAreBeingRetaliatedAgainstByTheProperty)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1079_000_Does_the_grievant_allege_they_are_being_retaliated_against_by_the_property?");
            entity.Property(e => e._1080000IfYesPleaseChooseTheOptionsThatBestDescribeTheAllegedReasonForTheClaimedRetaliation)
                .IsUnicode(false)
                .HasColumnName("1080_000_If_yes,_please_choose_the_options_that_best_describe_the_alleged_reason_for_the_claimed_retaliation");
            entity.Property(e => e._1081000IfYesPleaseChooseTheOptionsThatBestDescribeTheAllegedNatureOfTheRetaliatoryAction)
                .IsUnicode(false)
                .HasColumnName("1081_000_If_yes,_please_choose_the_options_that_best_describe_the_alleged_nature_of_the_retaliatory_action");
            entity.Property(e => e._1082000DoesTheGrievanceRelateToARentalApplication)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1082_000_Does_the_grievance_relate_to_a_rental_application?");
            entity.Property(e => e._1083000IfYesPleaseSelectTheOptionsThatBestDescribeTheAllegedBasisForTheGrievance)
                .IsUnicode(false)
                .HasColumnName("1083_000_If_yes,_please_select_the_options_that_best_describe_the_alleged_basis_for_the_grievance");
            entity.Property(e => e._1084000DateGrievantSubmittedRentalApplication)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1084_000_Date_grievant_submitted_Rental_Application");
            entity.Property(e => e._1085000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1085_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._1086000OtherGrievanceDescribeOtherBasisForGrievance)
                .IsUnicode(false)
                .HasColumnName("1086_000_Other_grievance:_Describe_other_basis_for_grievance");
            entity.Property(e => e._1087000DidTheCityGrievantFileAGrievanceWithThePropertyRelatedToTheSameIssueAsTheCityGrievanceVerifyByCh)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1087_000_Did_the_City_Grievant_file_a_grievance_with_the_Property_related_to_the_same_issue_as_the_City_grievance?_(Verify_by_ch");
            entity.Property(e => e._1088000IfYesDateOfThePropertyGrievance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1088_000_If_yes,_date_of_the_property_grievance");
            entity.Property(e => e._1089000IfYesDateTheGrievanceWasListedOnTheQuarterlyReportGrievanceLog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1089_000_If_yes,_date_the_grievance_was_listed_on_the_Quarterly_Report_Grievance_Log");
            entity.Property(e => e._1090000IfYesDateTheGrievantReceivedDecisionFromProperty)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1090_000_If_yes,_date_the_grievant_received_decision_from_property");
            entity.Property(e => e._1091000DidThePropertyFollowRequiredProceduresInResponseToAnyReasonableAccommodationReasonableModificationOrEff)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("1091_000_Did_the_Property_follow_required_Procedures_in_response_to_any_Reasonable_Accommodation,_Reasonable_Modification_or_Eff");
            entity.Property(e => e._1092000IfNoPleaseExplain)
                .IsUnicode(false)
                .HasColumnName("1092_000_If_no,_please_explain");
            entity.Property(e => e._1116000GrievanceSubmissionSource)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("1116_000_GrievanceSubmissionSource");
            entity.Property(e => e._1117000LastActionDate)
                .HasMaxLength(10)
                .HasColumnName("1117_000_LastActionDate");
            entity.Property(e => e._1118000NumberOfDaysSinceGrievanceReceived).HasColumnName("1118_000_NumberOfDaysSinceGrievanceReceived");
            entity.Property(e => e._1119000CaseCreatedOn)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("1119_000_CaseCreatedOn");
            entity.Property(e => e._1120000ReferredToAgency).HasColumnName("1120_000_ReferredToAgency");
            entity.Property(e => e._1121000CaseOpened)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("1121_000_CaseOpened");
            entity.Property(e => e._1122000NoticeOfDetermination)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("1122_000_NoticeOfDetermination");
            entity.Property(e => e._1123000LinkedProperties).HasColumnName("1123_000_LinkedProperties");
            entity.Property(e => e._1124000AcHpemployeeUsername)
                .HasMaxLength(200)
                .HasColumnName("1124_000_AcHPEmployeeUsername");
            entity.Property(e => e._142010GrievanceIdnumber)
                .HasMaxLength(20)
                .HasColumnName("142_010_GrievanceIDNumber");
            entity.Property(e => e._142020GrievantFirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("142_020_GrievantFirstName");
            entity.Property(e => e._142021GrievantMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("142_021_GrievantMiddleName");
            entity.Property(e => e._142022GrievantLastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("142_022_GrievantLastName");
            entity.Property(e => e._142025DateGrievanceFiled)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_025_DateGrievanceFiled");
            entity.Property(e => e._142028IsIncidentSpecificLocation)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("142_028_IsIncidentSpecificLocation");
            entity.Property(e => e._142030PropertyNameSubToGrievance)
                .HasMaxLength(500)
                .HasColumnName("142_030_PropertyNameSubToGrievance");
            entity.Property(e => e._142040PropertyAcHpNumberSubToGrievance)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("142_040_PropertyAcHpNumberSubToGrievance");
            entity.Property(e => e._142050PropertyAddressSubToGrievance)
                .IsUnicode(false)
                .HasColumnName("142_050_PropertyAddressSubToGrievance");
            entity.Property(e => e._142051IncidentAddressHouseNum).HasColumnName("142_051_IncidentAddressHouseNum");
            entity.Property(e => e._142052IncidentAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_052_IncidentAddressHouseFracNum");
            entity.Property(e => e._142053IncidentAddressLutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("142_053_IncidentAddressLutPreDirCD");
            entity.Property(e => e._142054IncidentAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("142_054_IncidentAddressStreetName");
            entity.Property(e => e._142055IncidentAddressLutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("142_055_IncidentAddressLutStreetTypeCD");
            entity.Property(e => e._142060UnitNoRelateToGrievance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_060_UnitNoRelateToGrievance");
            entity.Property(e => e._142061IncidentAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("142_061_IncidentAddressCity");
            entity.Property(e => e._142062IncidentAddressLutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("142_062_IncidentAddressLutStateCD");
            entity.Property(e => e._142063IncidentAddressZip).HasColumnName("142_063_IncidentAddressZip");
            entity.Property(e => e._142070DescriptionOfGrievance).HasColumnName("142_070_DescriptionOfGrievance");
            entity.Property(e => e._142080DevelopmentCategoryForGrievance)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("142_080_DevelopmentCategoryForGrievance");
            entity.Property(e => e._142081IsCoveredHousingDevelopment)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("142_081_IsCoveredHousingDevelopment");
            entity.Property(e => e._142082IsDisabilityRelated)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("142_082_IsDisabilityRelated");
            entity.Property(e => e._142090CityActionOnGrievance).HasColumnName("142_090_CityActionOnGrievance");
            entity.Property(e => e._142100ResolutionOnGrievance).HasColumnName("142_100_ResolutionOnGrievance");
            entity.Property(e => e._142110GrievanceOutcomeStafisfactoryOrUnsatisfactory)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("142_110_GrievanceOutcomeStafisfactoryOrUnsatisfactory");
            entity.Property(e => e._142120ReferralSourcesConcerningGrievance).HasColumnName("142_120_ReferralSourcesConcerningGrievance");
            entity.Property(e => e._142130StatusOnGrievance)
                .HasMaxLength(50)
                .HasColumnName("142_130_StatusOnGrievance");
            entity.Property(e => e._142140ModeOfGrievanceSubmission)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("142_140_ModeOfGrievanceSubmission");
            entity.Property(e => e._142150GrievanceType)
                .HasMaxLength(302)
                .IsUnicode(false)
                .HasColumnName("142_150_GrievanceType");
            entity.Property(e => e._142160GrievanceDeterminationStatus)
                .IsUnicode(false)
                .HasColumnName("142_160_GrievanceDeterminationStatus");
            entity.Property(e => e._142170DateOfGrievanceDetermination)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_170_DateOfGrievanceDetermination");
            entity.Property(e => e._142180DateOfAnticipatedImplementationInResponseToGrievance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_180_DateOfAnticipatedImplementationInResponseToGrievance");
            entity.Property(e => e._142190DateOfImplementationInResponseToGrievance)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("142_190_DateOfImplementationInResponseToGrievance");
            entity.Property(e => e._143500IsFiledRelatedGrievance)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("143_500_IsFiledRelatedGrievance");
            entity.Property(e => e._144500RelatedGrievanceQrgrievanceLogId)
                .IsUnicode(false)
                .HasColumnName("144_500_RelatedGrievanceQRGrievanceLogID");
            entity.Property(e => e._144DatesGrievancesAgainstPropertyFiledWithCity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("144_DatesGrievancesAgainstPropertyFiledWithCity");
            entity.Property(e => e._145DateAcHpreviewGrivancesWithCityAgainstProperty)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("145_DateAcHPReviewGrivancesWithCityAgainstProperty");
            entity.Property(e => e._175100CityGrievances)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("175_100_CityGrievances");
            entity.Property(e => e._175200DateCityGrievancesOpened)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("175_200_DateCityGrievancesOpened");
            entity.Property(e => e._175300DateCityGrievancesClosed)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("175_300_DateCityGrievancesClosed");
            entity.Property(e => e._175CityGrievancesDateOpenedAndClosed)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("175_CityGrievancesDateOpenedAndClosed");
            entity.Property(e => e._183400FiledLawsuitWithAnotherAgency)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("183_400_FiledLawsuitWithAnotherAgency");
            entity.Property(e => e._183500LawsuitFiledAgencyNames)
                .IsUnicode(false)
                .HasColumnName("183_500_LawsuitFiledAgencyNames");
            entity.Property(e => e._183600LawSuitFiledDates)
                .IsUnicode(false)
                .HasColumnName("183_600_LawSuitFiledDates");
            entity.Property(e => e._758GrvGrievantPrimaryPhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("758_Grv_Grievant_PrimaryPhoneType");
            entity.Property(e => e._759GrvGrievantPrimaryPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("759_Grv_Grievant_PrimaryPhoneNumber");
            entity.Property(e => e._760GrvGrievantAdditonalPhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("760_Grv_Grievant_AdditonalPhoneType");
            entity.Property(e => e._761GrvGrievantAdditionalPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("761_Grv_Grievant_AdditionalPhoneNumber");
            entity.Property(e => e._762GrvGrievantEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("762_Grv_Grievant_Email");
            entity.Property(e => e._763GrvGrievantPreferredLanguage)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("763_Grv_Grievant_PreferredLanguage");
            entity.Property(e => e._764GrvGrievantPreferredMethodOfContact)
                .HasMaxLength(26)
                .IsUnicode(false)
                .HasColumnName("764_Grv_Grievant_PreferredMethodOfContact");
            entity.Property(e => e._765GrvGrievantOtherPreferredMethodOfContact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("765_Grv_Grievant_OtherPreferredMethodOfContact");
            entity.Property(e => e._766GrvAddPobox)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("766_Grv_Add_POBOX");
            entity.Property(e => e._767100GrievantAddressHouseNum).HasColumnName("767_100_GrievantAddressHouseNum");
            entity.Property(e => e._767200GrievantAddressHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("767_200_GrievantAddressHouseFracNum");
            entity.Property(e => e._767300GrievantAddressLutPreDirCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("767_300_GrievantAddressLutPreDirCD");
            entity.Property(e => e._767400GrievantAddressStreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("767_400_GrievantAddressStreetName");
            entity.Property(e => e._767500GrievantAddressLutStreetTypeCd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("767_500_GrievantAddressLutStreetTypeCD");
            entity.Property(e => e._767600GrievantAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("767_600_GrievantAddressUnit");
            entity.Property(e => e._767700GrievantAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("767_700_GrievantAddressCity");
            entity.Property(e => e._767800GrievantAddressLutStateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("767_800_GrievantAddressLutStateCD");
            entity.Property(e => e._767900GrievantAddressZip).HasColumnName("767_900_GrievantAddressZip");
            entity.Property(e => e._767901IsFileForSomeOne)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("767_901_IsFileForSomeOne");
            entity.Property(e => e._767GrvAddPoboxnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("767_Grv_Add_POBOXNumber");
            entity.Property(e => e._768GrvPreparerRelationshipToPersonWhohasGrievance)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("768_Grv_Preparer_RelationshipToPersonWhohasGrievance");
            entity.Property(e => e._769GrvPreparerFirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("769_Grv_Preparer_FirstName");
            entity.Property(e => e._770GrvPreparerMiddleName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("770_Grv_Preparer_MiddleName");
            entity.Property(e => e._771GrvPreparerLastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("771_Grv_Preparer_LastName");
            entity.Property(e => e._772GrvPreparerPrimaryPhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("772_Grv_Preparer_PrimaryPhoneType");
            entity.Property(e => e._773GrvPreparerPrimaryPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("773_Grv_Preparer_PrimaryPhoneNumber");
            entity.Property(e => e._774GrvPreparerAdditonalPhoneType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("774_Grv_Preparer_AdditonalPhoneType");
            entity.Property(e => e._775GrvPreparerAdditionalPhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("775_Grv_Preparer_AdditionalPhoneNumber");
            entity.Property(e => e._776GrvPreparerEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("776_Grv_Preparer_Email");
            entity.Property(e => e._777GrvPreparerPreferredMethodOfContact)
                .HasMaxLength(26)
                .IsUnicode(false)
                .HasColumnName("777_Grv_Preparer_PreferredMethodOfContact");
            entity.Property(e => e._778GrvPreparerOtherPreferredMethodOfContact)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("778_Grv_Preparer_OtherPreferredMethodOfContact");
            entity.Property(e => e._779GrvPreparerAddPobox)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("779_Grv_PreparerAdd_POBOX");
            entity.Property(e => e._780GrvPreparerAddPoboxnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("780_Grv_PreparerAdd_POBOXNumber");
            entity.Property(e => e._781GrvPreparerAddHouseNumber).HasColumnName("781_Grv_PreparerAdd_HouseNumber");
            entity.Property(e => e._782GrvPreparerAddHouseFractionNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("782_Grv_PreparerAdd_HouseFractionNumber");
            entity.Property(e => e._783GrvPreparerAddStreetDirection)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("783_Grv_PreparerAdd_StreetDirection");
            entity.Property(e => e._784GrvPreparerAddStreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("784_Grv_PreparerAdd_StreetName");
            entity.Property(e => e._785100PreparerAddressUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("785_100_PreparerAddressUnit");
            entity.Property(e => e._785200PreparerAddressCity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("785_200_PreparerAddressCity");
            entity.Property(e => e._785GrvPreparerAddStreetType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("785_Grv_PreparerAdd_StreetType");
            entity.Property(e => e._786GrvPreparerAddState)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("786_Grv_PreparerAdd_State");
            entity.Property(e => e._787GrvPreparerAddZipCode).HasColumnName("787_Grv_PreparerAdd_ZipCode");
            entity.Property(e => e._788GrvLocationHouseNumber).HasColumnName("788_Grv_Location_HouseNumber");
            entity.Property(e => e._789GrvLocationHouseFractionNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("789_Grv_Location_HouseFractionNumber");
            entity.Property(e => e._790GrvLocationStreetDirection)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("790_Grv_Location_StreetDirection");
            entity.Property(e => e._791GrvLocationStreetName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("791_Grv_Location_StreetName");
            entity.Property(e => e._792GrvLocationStreetType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("792_Grv_Location_StreetType");
            entity.Property(e => e._793GrvLocationUnitNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("793_Grv_Location_UnitNumber");
            entity.Property(e => e._794GrvLocationCity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("794_Grv_Location_City");
            entity.Property(e => e._795GrvLocationState)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("795_Grv_Location_State");
            entity.Property(e => e._796GrvLocationZipCode).HasColumnName("796_Grv_Location_ZipCode");
            entity.Property(e => e._797GrvNoticeNoticeToVacateFromTheOwnerOrManager)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("797_Grv_Notice_NoticeToVacateFromTheOwnerOrManager");
            entity.Property(e => e._798GrvNoticeUnlawfulDetainerSummonsfromTheCourt)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("798_Grv_Notice_UnlawfulDetainerSummonsfromTheCourt");
            entity.Property(e => e._799GrvNoticeSheriffNoticeToVacate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("799_Grv_Notice_SheriffNoticeToVacate");
            entity.Property(e => e._800GrvNoticeWereDateToMoveOutGiven)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("800_Grv_Notice_WereDateToMoveOutGiven");
            entity.Property(e => e._801500IsUnitDenied)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("801_500_IsUnitDenied");
            entity.Property(e => e._801GrvNoticeDateGivenToMoveOut)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("801_Grv_Notice_DateGivenToMoveOut");
            entity.Property(e => e._802GrvNoticeIsItStillVacant)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("802_Grv_Notice_IsItStillVacant");
            entity.Property(e => e._803GrvNoticeWasItAnAccessibleUnit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("803_Grv_Notice_WasItAnAccessibleUnit");
            entity.Property(e => e._804500CaseStatus)
                .HasMaxLength(50)
                .HasColumnName("804_500_Case_Status");
            entity.Property(e => e._804GrvNoticeSupportingDocuments)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("804_Grv_Notice_SupportingDocuments");
            entity.Property(e => e._805GrvStatusAssignee)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("805_Grv_Status_Assignee");
            entity.Property(e => e._806GrvMilestoneCaseExtensionProvided)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("806_Grv_Milestone_CaseExtensionProvided");
            entity.Property(e => e._807GrvMilestoneNoticeOfAppeal)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("807_Grv_Milestone_NoticeOfAppeal");
            entity.Property(e => e._808GrvSystemAcHpemployeeName)
                .HasMaxLength(200)
                .HasColumnName("808_Grv_System_AcHPEmployeeName");
            entity.Property(e => e._809GrvUnitNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("809_Grv_UnitNumber");
        });

        modelBuilder.Entity<VwOlapHimscontactInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSContactInfo", "AAHR");

            entity.Property(e => e.Address)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ApplicantOrBorrower)
                .HasMaxLength(21)
                .IsUnicode(false);
            entity.Property(e => e.BusPhone)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CellPhone)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("cellPhone");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(250)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ContactPersonId).HasColumnName("ContactPersonID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Modified)
                .HasMaxLength(114)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ParticipantId).HasColumnName("ParticipantID");
            entity.Property(e => e.ParticipantType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Pname)
                .HasMaxLength(250)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("PName");
            entity.Property(e => e.ProjUniqueId).HasColumnName("ProjUniqueID");
        });

        modelBuilder.Entity<VwOlapHimscovenant>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSCovenants", "AAHR");

            entity.Property(e => e.AgreementNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.AssignedTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CalculatedMonitoringFee)
                .HasMaxLength(300)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CovRegAgreementType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CovenantLink)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CovenantNo)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DateAdditionalRefferral).HasColumnType("datetime");
            entity.Property(e => e.DateAssignedToOmmonitor)
                .HasColumnType("datetime")
                .HasColumnName("DateAssignedToOMMonitor");
            entity.Property(e => e.DateCovRegEnd).HasColumnType("datetime");
            entity.Property(e => e.DateCovRegStart).HasColumnType("datetime");
            entity.Property(e => e.DateExecute).HasColumnType("datetime");
            entity.Property(e => e.DateFirstAssignedToContractedMonitor).HasColumnType("datetime");
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HousingServicesProgram)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LutOmreportMonthCd).HasColumnName("LutOMReportMonthCD");
            entity.Property(e => e.MonitoringFlatFee).HasColumnType("money");
            entity.Property(e => e.ProjName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ProjUniqueId).HasColumnName("ProjUniqueID");
            entity.Property(e => e.ProjectCategory)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ReportingPeriod)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.UnitComments)
                .HasMaxLength(300)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwOlapHimsmilestone>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSMilestones", "AAHR");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateReceived).HasColumnType("datetime");
            entity.Property(e => e.DateRequested).HasColumnType("datetime");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LutMilestoneNameCd).HasColumnName("LutMilestoneNameCD");
            entity.Property(e => e.MilestoneName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ProjUniqueId).HasColumnName("ProjUniqueID");
        });

        modelBuilder.Entity<VwOlapHimsparticipantInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSParticipantInfo", "AAHR");

            entity.Property(e => e.Address)
                .HasMaxLength(152)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("address");
            entity.Property(e => e.ApplicantBorrower)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(203)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Csz)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("CSZ");
            entity.Property(e => e.EscrowOrOrderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FaxNumber)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.FullZip)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.LegalStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ParticipantId).HasColumnName("ParticipantID");
            entity.Property(e => e.ParticipantTypeDesc)
                .HasMaxLength(12)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Pemail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("PEmail");
            entity.Property(e => e.PfullNameOnly)
                .HasMaxLength(250)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("PFullNameOnly");
            entity.Property(e => e.PnameAndType)
                .HasMaxLength(302)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("PNameAndType");
            entity.Property(e => e.PrimaryPhoneNumber)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ProjUniqueId).HasColumnName("ProjUniqueID");
            entity.Property(e => e.Prole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("PRole");
            entity.Property(e => e.SecondaryPhoneNumber)
                .HasMaxLength(26)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Street)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.TitleDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Zip2)
                .HasMaxLength(4)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
        });

        modelBuilder.Entity<VwOlapHimsunitInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_HIMSUnitInfo", "AAHR");

            entity.Property(e => e.Address)
                .HasMaxLength(179)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("address");
            entity.Property(e => e.Apnid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("APNID");
            entity.Property(e => e.Bedroom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Bond).HasColumnName("bond");
            entity.Property(e => e.CraRestrict).HasColumnName("CRA_Restrict");
            entity.Property(e => e.FullProjectNumber)
                .HasMaxLength(9)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.HseId).HasColumnName("HSE_ID");
            entity.Property(e => e.Percent)
                .HasMaxLength(51)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ProjUniqueId).HasColumnName("ProjUniqueID");
        });

        modelBuilder.Entity<VwOlapMasterDataBySite>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_OLAP_MasterDataBySite", "AAHR");

            entity.Property(e => e.AcHpNo)
                .HasMaxLength(500)
                .HasColumnName("AcHP No.");
            entity.Property(e => e.AssistanceAnimalRefundLog)
                .HasMaxLength(500)
                .HasColumnName("Assistance Animal Refund Log");
            entity.Property(e => e.CesStatus)
                .HasMaxLength(500)
                .HasColumnName("CES Status");
            entity.Property(e => e.CommentsConcerningEnforcement).HasColumnName("Comments Concerning Enforcement");
            entity.Property(e => e.CompletedRegistryPropertyListingContactInformationUnitInformationAmenitiesImages)
                .HasMaxLength(500)
                .HasColumnName("Completed Registry Property Listing(Contact Information, Unit Information, Amenities, Images)");
            entity.Property(e => e.ComplianceAchieved)
                .HasMaxLength(500)
                .HasColumnName("Compliance Achieved?");
            entity.Property(e => e.ComplianceDueDate)
                .HasColumnType("datetime")
                .HasColumnName("Compliance Due Date");
            entity.Property(e => e.ConventionalUnitWaitingList)
                .HasMaxLength(500)
                .HasColumnName("Conventional Unit Waiting List");
            entity.Property(e => e.CorrectiveActionPlanCompleteYesNoPartially)
                .HasMaxLength(500)
                .HasColumnName("Corrective Action Plan Complete (Yes/No/Partially)");
            entity.Property(e => e.CorrectiveActionPlanDueDate)
                .HasColumnType("datetime")
                .HasColumnName("Corrective Action Plan Due Date");
            entity.Property(e => e.CorrectiveActionPlanExtensionSGrantedYesNo)
                .HasMaxLength(500)
                .HasColumnName("Corrective Action Plan Extension(s) Granted (Yes/No)");
            entity.Property(e => e.CorrectiveActionPlanIssueDate)
                .HasColumnType("datetime")
                .HasColumnName("Corrective Action Plan Issue Date");
            entity.Property(e => e.CorrectiveActionPlanReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Corrective Action Plan Received Date");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateCityCertificationDecertified)
                .HasColumnType("datetime")
                .HasColumnName("Date City Certification Decertified");
            entity.Property(e => e.DateCityCertificationIssued)
                .HasColumnType("datetime")
                .HasColumnName("Date City Certification Issued");
            entity.Property(e => e.DateCityCertificationRecertified)
                .HasColumnType("datetime")
                .HasColumnName("Date City Certification Recertified");
            entity.Property(e => e.DateNonComplianceCaseClosed)
                .HasColumnType("datetime")
                .HasColumnName("Date Non-Compliance Case Closed");
            entity.Property(e => e.DevelopmentOwnerCompany)
                .HasMaxLength(500)
                .HasColumnName("Development Owner (Company)");
            entity.Property(e => e.DisabilityCoordinatorCompany)
                .HasMaxLength(500)
                .HasColumnName("Disability Coordinator (Company)");
            entity.Property(e => e.DueDateForAnyExtensionToComply)
                .HasColumnType("datetime")
                .HasColumnName("Due Date for Any Extension to Comply");
            entity.Property(e => e.ExtensionEndDate)
                .HasColumnType("datetime")
                .HasColumnName("Extension End Date");
            entity.Property(e => e.GrievanceCoordinatorCompany)
                .HasMaxLength(500)
                .HasColumnName("Grievance Coordinator (Company)");
            entity.Property(e => e.HimsNo)
                .HasMaxLength(500)
                .HasColumnName("HIMS No.");
            entity.Property(e => e.HousingType).HasColumnName("Housing Type");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.LastFairHousingTrainingAttendedAdaCoordinator)
                .HasMaxLength(500)
                .HasColumnName("Last Fair Housing Training Attended - ADA Coordinator");
            entity.Property(e => e.LastFairHousingTrainingAttendedDesignatedOwnerRepresentative)
                .HasMaxLength(500)
                .HasColumnName("Last Fair Housing Training Attended - Designated Owner Representative");
            entity.Property(e => e.LastFairHousingTrainingAttendedGrievanceCoordinator)
                .HasMaxLength(500)
                .HasColumnName("Last Fair Housing Training Attended - Grievance Coordinator");
            entity.Property(e => e.LastFairHousingTrainingAttendedOnSiteManager)
                .HasMaxLength(500)
                .HasColumnName("Last Fair Housing Training Attended - On-Site Manager");
            entity.Property(e => e.LastFairHousingTrainingAttendedPropertyManager)
                .HasMaxLength(500)
                .HasColumnName("Last Fair Housing Training Attended - Property Manager");
            entity.Property(e => e.LastFairHousingTrainingAttendedRegionalManager)
                .HasMaxLength(500)
                .HasColumnName("Last Fair Housing Training Attended - Regional Manager");
            entity.Property(e => e.LeasingAgentCompany)
                .HasMaxLength(500)
                .HasColumnName("Leasing Agent (Company)");
            entity.Property(e => e.ManagingGeneralPartnerCompany)
                .HasMaxLength(500)
                .HasColumnName("Managing General Partner (Company)");
            entity.Property(e => e.NameOfPrimaryOwner)
                .HasMaxLength(500)
                .HasColumnName("Name of Primary Owner");
            entity.Property(e => e.NewOwnershipPropertyManagementDate)
                .HasColumnType("datetime")
                .HasColumnName("New Ownership/Property Management Date");
            entity.Property(e => e.NonComplianceCaseNumber)
                .HasMaxLength(500)
                .HasColumnName("Non-Compliance Case Number");
            entity.Property(e => e.NonComplianceCaseOpenDate)
                .HasColumnType("datetime")
                .HasColumnName("Non-Compliance Case Open Date");
            entity.Property(e => e.OccupancyStatus90OrAbove)
                .HasMaxLength(500)
                .HasColumnName("Occupancy Status (90% or Above)");
            entity.Property(e => e.OnSiteManagerCompany)
                .HasMaxLength(500)
                .HasColumnName("On-Site Manager (Company)");
            entity.Property(e => e.OpmEmail).HasColumnName("OPM Email");
            entity.Property(e => e.OpmPhone).HasColumnName("OPM Phone");
            entity.Property(e => e.OrderToComplyIssueDate)
                .HasColumnType("datetime")
                .HasColumnName("Order to Comply Issue Date");
            entity.Property(e => e.PolicyComplianceDueDate)
                .HasColumnType("datetime")
                .HasColumnName("Policy Compliance Due Date");
            entity.Property(e => e.PolicyComplianceReviewDate)
                .HasMaxLength(500)
                .HasColumnName("Policy Compliance Review Date");
            entity.Property(e => e.PostingRequirementsVerifiedUponSiteAuditRevPoliciesApps110DfehEngSpanHudPosters)
                .HasMaxLength(500)
                .HasColumnName("Posting Requirements (Verified Upon Site Audit) Rev. Policies, Apps 1-10, DFEH (Eng/Span) & HUD Posters");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(500)
                .HasColumnName("Project Name");
            entity.Property(e => e.PropertyAddress).HasColumnName("Property Address");
            entity.Property(e => e.PropertyManagementCompany)
                .HasMaxLength(500)
                .HasColumnName("Property Management (Company)");
            entity.Property(e => e.PropertyManagementPlanPmpUpdated2020)
                .HasMaxLength(500)
                .HasColumnName("Property Management Plan (PMP) - Updated 2020");
            entity.Property(e => e.PropertyName).HasColumnName("Property Name");
            entity.Property(e => e.ReceiptOfVcaAndAcknowledgement)
                .HasMaxLength(500)
                .HasColumnName("Receipt of VCA and Acknowledgement");
            entity.Property(e => e.RegionalOrComplianceManagerCompany)
                .HasMaxLength(500)
                .HasColumnName("Regional or Compliance Manager (Company)");
            entity.Property(e => e.ReportedDateOfFullOccupancy)
                .HasColumnType("datetime")
                .HasColumnName("Reported Date of Full Occupancy");
            entity.Property(e => e.ResponsibleCityStaff)
                .HasMaxLength(500)
                .HasColumnName("Responsible City Staff");
            entity.Property(e => e.RevisedPoliciesDistributionReceiptOfTenantAcknowledgements)
                .HasMaxLength(500)
                .HasColumnName("Revised Policies Distribution & Receipt of Tenant Acknowledgements");
            entity.Property(e => e.SelfCertificationOfAdoptionAndCompliance)
                .HasMaxLength(500)
                .HasColumnName("Self-Certification of Adoption and Compliance");
            entity.Property(e => e.SubsequentActions).HasColumnName("Subsequent Actions");
            entity.Property(e => e.TotalUnitCount).HasColumnName("Total Unit Count");
            entity.Property(e => e.TypeOfConstruction)
                .HasMaxLength(500)
                .HasColumnName("Type of Construction");
            entity.Property(e => e.UtilizationSurveyOfOccupancy)
                .HasMaxLength(500)
                .HasColumnName("Utilization Survey of Occupancy");
            entity.Property(e => e._1stQuarterReport)
                .HasMaxLength(500)
                .HasColumnName("1st Quarter Report");
            entity.Property(e => e._2ndQuarterReport)
                .HasMaxLength(500)
                .HasColumnName("2nd Quarter Report");
            entity.Property(e => e._3rdQuarterReport)
                .HasMaxLength(500)
                .HasColumnName("3rd Quarter Report");
            entity.Property(e => e._4thQuarterReport)
                .HasMaxLength(500)
                .HasColumnName("4th Quarter Report");
        });

        modelBuilder.Entity<VwOlapPmpdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_PMPDetails", "AAHR");

            entity.Property(e => e.CaseId).HasColumnName("caseID");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PmplogStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMPLogStatus");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.ServiceRequestNumber).HasMaxLength(20);
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<VwOlapPmpdetailsUpdated>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_PMPDetails_Updated", "AAHR");

            entity.Property(e => e.ApplicationEndDate)
                .HasColumnType("datetime")
                .HasColumnName("Application End Date");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.DatePmpsubmittedOnline)
                .HasColumnType("datetime")
                .HasColumnName("DatePMPSubmittedOnline");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Pmpid).HasColumnName("PMPID");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.StatusOfPmponline)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("StatusOfPMPOnline");
            entity.Property(e => e._101001OwnerOrLegalEntityName).HasColumnName("101_001_OwnerOrLegalEntityName");
            entity.Property(e => e._101002LegalEntityType)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("101_002_LegalEntityType");
            entity.Property(e => e._111100DatePmppreliminaryCertificate)
                .HasColumnType("datetime")
                .HasColumnName("111_100_DatePMPPreliminaryCertificate");
            entity.Property(e => e._111200DatePmpfinalCertificate)
                .HasColumnType("datetime")
                .HasColumnName("111_200_DatePMPFinalCertificate");
            entity.Property(e => e._112DatePropertyInitiallyBeginsAcceptingLotteryApplications)
                .HasColumnType("datetime")
                .HasColumnName("112_DatePropertyInitiallyBeginsAcceptingLotteryApplications");
            entity.Property(e => e._113DateInitiallyOpenforMarketing)
                .HasColumnType("datetime")
                .HasColumnName("113_DateInitiallyOpenforMarketing");
            entity.Property(e => e._116DateCuwaitingListOpened)
                .HasColumnType("datetime")
                .HasColumnName("116_DateCUWaitingListOpened");
            entity.Property(e => e._122DocumentSubmissionforOutreachMarketingtoHcidladate)
                .HasColumnType("datetime")
                .HasColumnName("122_DocumentSubmissionforOutreachMarketingtoHCIDLADate");
            entity.Property(e => e._142DateOfOutreach)
                .HasColumnType("datetime")
                .HasColumnName("142_Date of Outreach");
            entity.Property(e => e._526DateProjectEstimatedOpenforOccupancy)
                .HasColumnType("datetime")
                .HasColumnName("526_DateProjectEstimatedOpenforOccupancy");
            entity.Property(e => e._621LotteryDrawDate)
                .HasColumnType("datetime")
                .HasColumnName("621_LotteryDrawDate");
            entity.Property(e => e._622SpecialNoteForOtherProjectType)
                .IsUnicode(false)
                .HasColumnName("622_Special Note(For Other project Type)");
            entity.Property(e => e._623OrganizationName)
                .HasMaxLength(500)
                .HasColumnName("623_OrganizationName");
            entity.Property(e => e._624ContactName)
                .HasMaxLength(500)
                .HasColumnName("624_ContactName");
            entity.Property(e => e._625ContactPhone)
                .HasMaxLength(20)
                .HasColumnName("625_ContactPhone");
            entity.Property(e => e._626TargetAudience).HasColumnName("626_Target Audience");
            entity.Property(e => e._627LocationofDistribution).HasColumnName("627_LocationofDistribution");
            entity.Property(e => e._628TypeofOutreach)
                .IsUnicode(false)
                .HasColumnName("628_TypeofOutreach");
            entity.Property(e => e._629PartyResponsibleforDistribution)
                .IsUnicode(false)
                .HasColumnName("629_PartyResponsibleforDistribution");
            entity.Property(e => e._630OrganizationResourceList)
                .HasMaxLength(500)
                .HasColumnName("630_Organization (Resource list)");
            entity.Property(e => e._631LeaseUpBannerResponsibleParty)
                .IsUnicode(false)
                .HasColumnName("631_LeaseUpBanner_ResponsibleParty");
            entity.Property(e => e._632LeaseUpBannerDatePostedAvailable)
                .HasColumnType("datetime")
                .HasColumnName("632_LeaseUpBanner_DatePostedAvailable");
            entity.Property(e => e._633LeaseUpPhoneLineReponsibleParty)
                .IsUnicode(false)
                .HasColumnName("633_LeaseUpPhoneLine_ReponsibleParty");
            entity.Property(e => e._634LeaseUpPhoneLineDatePostedAvailable)
                .HasColumnType("datetime")
                .HasColumnName("634_LeaseUpPhoneLine_DatePostedAvailable");
            entity.Property(e => e._635OtherName)
                .IsUnicode(false)
                .HasColumnName("635_OtherName");
            entity.Property(e => e._636OtherDatePostedAvailable)
                .HasColumnType("datetime")
                .HasColumnName("636_OtherDatePostedAvailable");
            entity.Property(e => e._637OtherResponsibleParty)
                .IsUnicode(false)
                .HasColumnName("637_Other-ResponsibleParty");
            entity.Property(e => e._638LotteryAvailableAdditionalMethods).HasColumnName("638_Lottery available additional methods");
            entity.Property(e => e._639LotterySubmitMethods).HasColumnName("639_Lottery Submit methods");
            entity.Property(e => e._640MoreDetail).HasColumnName("640_MoreDetail");
            entity.Property(e => e._641MethodDevelopmentConductLottery).HasColumnName("641_MethodDevelopmentConductLottery");
            entity.Property(e => e._642VacancyPolicyDescription).HasColumnName("642_Vacancy Policy Description");
            entity.Property(e => e._643WaitListAdditionalInformation).HasColumnName("643_WaitListAdditionalInformation");
            entity.Property(e => e._644WaitListDescriptionForHopwa).HasColumnName("644_WaitListDescriptionForHOPWA");
            entity.Property(e => e._645NameofAuthorizedSignatoryPerson)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("645_NameofAuthorizedSignatoryPerson");
            entity.Property(e => e._646TitleofSignatoryPerson)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("646_TitleofSignatoryPerson");
            entity.Property(e => e._647Review1By).HasColumnName("647_Review1By");
            entity.Property(e => e._647Review2By).HasColumnName("647_Review2By");
            entity.Property(e => e._648Comments).HasColumnName("648_Comments");
        });

        modelBuilder.Entity<VwOlapPolicyCaseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_PolicyCaseDetails", "AAHR");

            entity.Property(e => e.Analyst)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CheckListItems).IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ProjectType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReportDescription).IsUnicode(false);
            entity.Property(e => e.ReportItem)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ReviewReportDetailId).HasColumnName("ReviewReportDetailID");
            entity.Property(e => e.Rn).HasColumnName("rn");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<VwOlapProjectDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_ProjectDetails", "AAHR");

            entity.Property(e => e.AhupproductionScheduleYear).HasColumnName("AHUPProductionScheduleYear");
            entity.Property(e => e.Ahupscore).HasColumnName("AHUPScore");
            entity.Property(e => e.AssignedRcs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AssignedRCS");
            entity.Property(e => e.CaseStatus).HasMaxLength(50);
            entity.Property(e => e.Casetype)
                .HasMaxLength(50)
                .HasColumnName("casetype");
            entity.Property(e => e.DoFairHousingActAccessibilityProvisionsApply)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsthisaPreVsadevelopment).HasColumnName("IsthisaPreVSADevelopment");
            entity.Property(e => e.ListedOnAhupproductionSchedule).HasColumnName("ListedOnAHUPProductionSchedule");
            entity.Property(e => e.MaximumMobilityCsacount).HasColumnName("MaximumMobilityCSACount");
            entity.Property(e => e.Nacrecommendation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NACRecommendation");
            entity.Property(e => e.Occupiedstatus)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PreSettlementDevelopment)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.TypeOfProject)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwOlapProjectDetailsUpdated>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_ProjectDetails_Updated", "AAHR");

            entity.Property(e => e.AhupproductionScheduleYear).HasColumnName("AHUPProductionScheduleYear");
            entity.Property(e => e.Ahupscore).HasColumnName("AHUPScore");
            entity.Property(e => e.AssignedRcs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AssignedRCS");
            entity.Property(e => e.CaseStatus).HasMaxLength(50);
            entity.Property(e => e.Casetype)
                .HasMaxLength(50)
                .HasColumnName("casetype");
            entity.Property(e => e.DoFairHousingActAccessibilityProvisionsApply)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsthisaPreVsadevelopment).HasColumnName("IsthisaPreVSADevelopment");
            entity.Property(e => e.ListedOnAhupproductionSchedule).HasColumnName("ListedOnAHUPProductionSchedule");
            entity.Property(e => e.MaximumMobilityCsacount).HasColumnName("MaximumMobilityCSACount");
            entity.Property(e => e.Nacrecommendation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NACRecommendation");
            entity.Property(e => e.Occupiedstatus)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PreSettlementDevelopment)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.TypeOfProject)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwOlapPurportedUnitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_PurportedUnitDetails", "AAHR");

            entity.Property(e => e.Ami)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AMI");
            entity.Property(e => e.CountAs)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentTenant)
                .HasMaxLength(302)
                .IsUnicode(false)
                .HasColumnName("currentTenant");
            entity.Property(e => e.FixedOrFloating)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsCertified).HasColumnName("isCertified");
            entity.Property(e => e.IsCes).HasColumnName("IsCES");
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyRestrictions).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.Projectid).HasColumnName("projectid");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TotalBathroom).IsUnicode(false);
            entity.Property(e => e.TotalBedroom).IsUnicode(false);
            entity.Property(e => e.UnitAccessibiltyType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UnitAttributeDate)
                .HasColumnType("datetime")
                .HasColumnName("Unit Attribute Date");
            entity.Property(e => e.UnitFeature)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitFeatureArea)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwOlapQrautransferWaitList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRAUTransferWaitList", "AAHR");

            entity.Property(e => e.AccessibilieWaitListDate).HasColumnType("datetime");
            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.AutransferWaitListId).HasColumnName("AUTransferWaitListID");
            entity.Property(e => e.Bathroom).IsUnicode(false);
            entity.Property(e => e.Bedroom).IsUnicode(false);
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.CurrentUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.CurrentUnitStatus).HasMaxLength(20);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsPreviousAuwaitList)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsPreviousAUWaitList");
            entity.Property(e => e.IsTransferred)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxQrId).HasColumnName("MaxQrID");
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MoveInSiteAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MoveInUnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MoveInUnitPropSnapShotId).HasColumnName("MoveInUnitPropSnapShotID");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName).HasColumnName("Project_name");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .HasColumnName("Property_name");
            entity.Property(e => e.QrautransferWaitListId).HasColumnName("QRAUTransferWaitListID");
            entity.Property(e => e.QrreportCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("QRReportCreateDate");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.ReasonDate).HasColumnType("datetime");
            entity.Property(e => e.TransferReason)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TransferRequestDate).HasColumnType("datetime");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearQr)
                .HasMaxLength(14)
                .HasColumnName("YearQR");
            entity.Property(e => e._132100TransferListTenantFirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("132_100_TransferListTenantFirstName");
            entity.Property(e => e._132200TransferListTenantMiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("132_200_TransferListTenantMiddleInitial");
            entity.Property(e => e._132300TransferListTenantLastName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("132_300_TransferListTenantLastName");
            entity.Property(e => e._133100TransferRequestDate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("133_100_TransferRequestDate");
            entity.Property(e => e._316000TenantCurrentUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("316_000_TenantCurrentUnitNumber");
            entity.Property(e => e._317000TenantPreviouslyOnAccessibleUnitWaitlist)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("317_000_TenantPreviouslyOnAccessibleUnitWaitlist");
            entity.Property(e => e._318000DateWhenTenantPlacedOnAccessibleUnitWaitlist)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("318_000_DateWhenTenantPlacedOnAccessibleUnitWaitlist");
            entity.Property(e => e._319000DateTenantOnAutransferListMovesIntoAu)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("319_000_DateTenantOnAUTransferListMovesIntoAU");
            entity.Property(e => e._320000NewAuunitAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("320_000_NewAUUnitAddress");
            entity.Property(e => e._320100NewUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("320_100_NewUnitNumber");
        });

        modelBuilder.Entity<VwOlapQrauwaitList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRAUWaitList", "AAHR");

            entity.Property(e => e.AccessibilityRequest).IsUnicode(false);
            entity.Property(e => e.ApplicantMovedUnit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationDateTime).HasColumnType("datetime");
            entity.Property(e => e.ApplicationType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AuwaitListId).HasColumnName("AUWaitListID");
            entity.Property(e => e.Bathroom).IsUnicode(false);
            entity.Property(e => e.Bedroom).IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxQrId).HasColumnName("MaxQrID");
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MoveInUnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.MoveInUnitPropSnapShotId).HasColumnName("MoveInUnitPropSnapShotID");
            entity.Property(e => e.MovedInDate).HasColumnType("datetime");
            entity.Property(e => e.NatureOfRarequests)
                .IsUnicode(false)
                .HasColumnName("NatureOfRARequests");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName).HasColumnName("Project_Name");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .HasColumnName("Property_Name");
            entity.Property(e => e.QrauwaitListId).HasColumnName("QRAUWaitListID");
            entity.Property(e => e.QrreportCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("QRReportCreateDate");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.TenantAutransferDate)
                .HasColumnType("datetime")
                .HasColumnName("TenantAUTransferDate");
            entity.Property(e => e.TenantPutOnAutrasnferWaitListDate)
                .HasColumnType("datetime")
                .HasColumnName("TenantPutOnAUTrasnferWaitLIstDate");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearQr)
                .HasMaxLength(14)
                .HasColumnName("YearQR");
            entity.Property(e => e._126100WaitListApplicantFirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("126_100_WaitListApplicantFirstName");
            entity.Property(e => e._126200WaitListApplicantMiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("126_200_WaitListApplicantMiddleInitial");
            entity.Property(e => e._126300WaitListApplicantLastName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("126_300_WaitListApplicantLastName");
            entity.Property(e => e._127100WaitListApplicationDateTime)
                .HasColumnType("datetime")
                .HasColumnName("127_100_WaitListApplicationDateTime");
            entity.Property(e => e._127200WaitListMoveInDate)
                .HasColumnType("datetime")
                .HasColumnName("127_200_WaitListMoveInDate");
            entity.Property(e => e._321000AccessibleUnitWaitListPosition).HasColumnName("321_000_AccessibleUnitWaitListPosition");
            entity.Property(e => e._322000LotteryPosition).HasColumnName("322_000_LotteryPosition");
            entity.Property(e => e._323000ConventionalWaitListPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("323_000_ConventionalWaitListPosition");
            entity.Property(e => e._324000WaitListMoveInDate)
                .HasColumnType("datetime")
                .HasColumnName("324_000_WaitListMoveInDate");
            entity.Property(e => e._325000ApplicantMovedIntoAccessbleOrConventionalUnit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("325_000_ApplicantMovedIntoAccessbleOrConventionalUnit");
            entity.Property(e => e._326000DateTenantPlacedOnAutransferList)
                .HasColumnType("datetime")
                .HasColumnName("326_000_DateTenantPlacedOnAUTransferList");
            entity.Property(e => e._327000DidTenantMakeReasonableAccommodationOrModificationForAccessibilityFeatures)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("327_000_DidTenantMakeReasonableAccommodationOrModificationForAccessibilityFeatures");
            entity.Property(e => e._327100DateTenantMakeReasonableAccommodationOrModificationForAccessibilityFeatures)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("327_100_DateTenantMakeReasonableAccommodationOrModificationForAccessibilityFeatures");
        });

        modelBuilder.Entity<VwOlapQrauwaitListAggProjSiteCount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRAUWaitListAggProjSiteCount", "AAHR");

            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.ModifiedOn)
                .HasColumnType("datetime")
                .HasColumnName("Modified On");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e._126000AuwaitListCount).HasColumnName("126_000_AUWaitList_Count");
        });

        modelBuilder.Entity<VwOlapQreffectiveCommunication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QREffectiveCommunication", "AAHR");

            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.EcrequestType)
                .HasMaxLength(100)
                .HasColumnName("ECRequestType");
            entity.Property(e => e.EffectiveCommunicationId).HasColumnName("EffectiveCommunicationID");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.IsGrievanceField)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsGrievanceProcedureProvided)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxQrId).HasColumnName("MaxQrID");
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName).HasColumnName("Project_Name");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .HasColumnName("Property_Name");
            entity.Property(e => e.QreffectiveCommunicationId).HasColumnName("QREffectiveCommunicationID");
            entity.Property(e => e.QrreportCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("QRReportCreateDate");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestorAddress).HasMaxLength(300);
            entity.Property(e => e.UserType).HasMaxLength(50);
            entity.Property(e => e.YearQr)
                .HasMaxLength(14)
                .HasColumnName("YearQR");
            entity.Property(e => e._1109000SubCategoryLanguageAccess)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("1109_000_SubCategory_LanguageAccess");
            entity.Property(e => e._1109100SubCategoryLanguageAccessLanguage)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("1109_100_SubCategory_LanguageAccess_Language");
            entity.Property(e => e._280000EffectiveCommunicationsThisQurter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("280_000_EffectiveCommunicationsThisQurter");
            entity.Property(e => e._281000EffectiveCommunicationsGrantedAndPartiallyGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("281_000_EffectiveCommunicationsGrantedAndPartiallyGrantedOnReport");
            entity.Property(e => e._281000EffectiveCommunicationsGrantedAndPartiallyGrantedOnReportThisQurter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("281_000_EffectiveCommunicationsGrantedAndPartiallyGrantedOnReportThisQurter");
            entity.Property(e => e._281000EffectiveCommunicationsGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("281_000_EffectiveCommunicationsGrantedOnReport");
            entity.Property(e => e._281000EffectiveCommunicationsGrantedThisQurter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("281_000_EffectiveCommunicationsGrantedThisQurter");
            entity.Property(e => e._282000EffectiveCommunicationsDeniedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("282_000_EffectiveCommunicationsDeniedOnReport");
            entity.Property(e => e._282000EffectiveCommunicationsDeniedThisQurter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("282_000_EffectiveCommunicationsDeniedThisQurter");
            entity.Property(e => e._283000EffectiveCommunicationsPendingOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("283_000_EffectiveCommunicationsPendingOnReport");
            entity.Property(e => e._347000ApplicantOrTenantEclog)
                .HasMaxLength(50)
                .HasColumnName("347_000_ApplicantOrTenant_ECLog");
            entity.Property(e => e._347100RequestorFirstNameEclog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("347_100_RequestorFirstName_ECLog");
            entity.Property(e => e._347200RequestorMiddleInitialEclog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("347_200_RequestorMiddleInitial_ECLog");
            entity.Property(e => e._347300RequestorLastNameEclog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("347_300_RequestorLastName_ECLog");
            entity.Property(e => e._347400DateOfRequestForEffectiveCommunication)
                .HasColumnType("datetime")
                .HasColumnName("347_400_DateOfRequestForEffectiveCommunication");
            entity.Property(e => e._347500TenantsCurrentUnitAddress)
                .HasMaxLength(300)
                .HasColumnName("347_500_TenantsCurrentUnitAddress");
            entity.Property(e => e._347600TenantsCurrentUnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("347_600_TenantsCurrentUnitNum");
            entity.Property(e => e._347700ApplicantsAddress)
                .HasMaxLength(300)
                .HasColumnName("347_700_ApplicantsAddress");
            entity.Property(e => e._348000TypeOfEffectiveCommunicationsRequestEclog)
                .HasMaxLength(100)
                .HasColumnName("348_000_TypeOfEffectiveCommunicationsRequest_ECLog");
            entity.Property(e => e._348010SubCategoryEffectiveCommunication)
                .HasMaxLength(1000)
                .HasColumnName("348_010_SubCategory_EffectiveCommunication");
            entity.Property(e => e._348020SubCategoryEffectiveCommunicationCommonArea)
                .HasMaxLength(1000)
                .HasColumnName("348_020_SubCategory_Effective Communication_Common Area");
            entity.Property(e => e._348030SubCategoryOther).HasColumnName("348_030_SubCategory_Other");
            entity.Property(e => e._348100DescriptionOfEcrequest).HasColumnName("348_100_DescriptionOfECRequest");
            entity.Property(e => e._366000DeterminationStatusEclog)
                .HasMaxLength(50)
                .HasColumnName("366_000_DeterminationStatus_ECLog");
            entity.Property(e => e._366100DateOfWithdrawal).HasColumnName("366_100_DateOfWithdrawal");
            entity.Property(e => e._366200ReasonForWithdrawal).HasColumnName("366_200_ReasonForWithdrawal");
            entity.Property(e => e._367000DateOfDeterminationEclog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("367_000_DateOfDetermination_ECLog");
            entity.Property(e => e._367100ExplanationOfDetermination).HasColumnName("367_100_ExplanationOfDetermination");
            entity.Property(e => e._368000DateOfAnticipatedImplementationEclog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("368_000_DateOfAnticipatedImplementation_ECLog");
            entity.Property(e => e._369000DateOfImplementationCompletionEclog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("369_000_DateOfImplementationCompletion_ECLog");
            entity.Property(e => e._369100ImplementationInformationEclog).HasColumnName("369_100_ImplementationInformation_ECLog");
            entity.Property(e => e._369200AdditionalImplementationInformationEclog)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("369_200_AdditionalImplementationInformation_ECLog");
            entity.Property(e => e._369300IfDeniedCheckAllThatApplyEclog)
                .HasMaxLength(71)
                .IsUnicode(false)
                .HasColumnName("369_300_IfDenied_CheckAllThatApply_ECLog");
            entity.Property(e => e._370000DateOfGrievanceEclog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("370_000_DateOfGrievance_ECLog");
            entity.Property(e => e._371000CorrespondingGrievanceNumberEclog)
                .HasMaxLength(50)
                .HasColumnName("371_000_CorrespondingGrievanceNumber_ECLog");
        });

        modelBuilder.Entity<VwOlapQrgrievanceLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRGrievanceLog", "AAHR");

            entity.Property(e => e.AnticipatedDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicantAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationDetail).IsUnicode(false);
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceDetail).IsUnicode(false);
            entity.Property(e => e.GrievanceLogId).HasColumnName("GrievanceLogID");
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.ImplementationInformation).IsUnicode(false);
            entity.Property(e => e.IsEffectiveCommunication)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsFairHousingComplaint)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsFairHousingComplaintFiled)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsHcidlacompliantFiled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsHCIDLACompliantFiled");
            entity.Property(e => e.IsHudcompliantFiled)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsHUDCompliantFiled");
            entity.Property(e => e.IsReasonableAccommodation)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxQrId).HasColumnName("MaxQrID");
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.QrgrievanceLogId).HasColumnName("QRGrievanceLogID");
            entity.Property(e => e.QrreportCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("QRReportCreateDate");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.UnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.YearQr)
                .HasMaxLength(14)
                .HasColumnName("YearQR");
            entity.Property(e => e._1000000DecisionProvidedDateForPropertyGrievancePartiallyGranted).HasColumnName("1000_000_DecisionProvidedDateForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._1001000FinalDeterminationPersonNamePartiallyGranted)
                .IsUnicode(false)
                .HasColumnName("1001_000_FinalDeterminationPersonName_Partially_Granted");
            entity.Property(e => e._1002000FinalDeterminationPersonTitlePartiallyGranted)
                .IsUnicode(false)
                .HasColumnName("1002_000_FinalDeterminationPersonTitle_Partially_Granted");
            entity.Property(e => e._1003000FinalDeterminationPersonPhonePartiallyGranted)
                .IsUnicode(false)
                .HasColumnName("1003_000_FinalDeterminationPersonPhone_Partially_Granted");
            entity.Property(e => e._1004000DeterminationDateForPropertyGrievanceDenied)
                .HasColumnType("datetime")
                .HasColumnName("1004_000_DeterminationDateForPropertyGrievance_Denied");
            entity.Property(e => e._1005000ExplanationOfDeterminationForPropertyGrievanceDenied)
                .IsUnicode(false)
                .HasColumnName("1005_000_ExplanationOfDeterminationForPropertyGrievance_Denied");
            entity.Property(e => e._1006000IsDecisionReceivedForPropertyGrievanceDenied).HasColumnName("1006_000_IsDecisionReceivedForPropertyGrievance_Denied");
            entity.Property(e => e._1007000DecisionProvidedDateForPropertyGrievanceDenied)
                .HasColumnType("datetime")
                .HasColumnName("1007_000_DecisionProvidedDateForPropertyGrievance_Denied");
            entity.Property(e => e._1008000FinalDeterminationPersonName)
                .IsUnicode(false)
                .HasColumnName("1008_000_FinalDeterminationPersonName");
            entity.Property(e => e._100900FinalDeterminationPersonTitle)
                .IsUnicode(false)
                .HasColumnName("1009_00_FinalDeterminationPersonTitle");
            entity.Property(e => e._1010000FinalDeterminationPersonPhone)
                .IsUnicode(false)
                .HasColumnName("1010_000_FinalDeterminationPersonPhone");
            entity.Property(e => e._1011000WithdrawalDate).HasColumnName("1011_000_WithdrawalDate");
            entity.Property(e => e._1012000WithdrawalReason)
                .IsUnicode(false)
                .HasColumnName("1012_000_WithdrawalReason");
            entity.Property(e => e._1013000GrievanceSubmitType)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("1013_000_GrievanceSubmitType");
            entity.Property(e => e._328000GrievanceRelatedToReasonableAccommodationGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("328_000_GrievanceRelatedToReasonableAccommodation_GLog");
            entity.Property(e => e._329000GrievanceRelatedToEffectiveCommunicationGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("329_000_GrievanceRelatedToEffectiveCommunication_GLog");
            entity.Property(e => e._330000GrievanceRelatedToFairHousingGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("330_000_GrievanceRelatedToFairHousing_GLog");
            entity.Property(e => e._331000IsGrievantApplicantGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("331_000_IsGrievantApplicant_GLog");
            entity.Property(e => e._332000IsGrievantTenantGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("332_000_IsGrievantTenant_GLog");
            entity.Property(e => e._333000GrievanceLogDeterminationStatusGlog)
                .HasMaxLength(50)
                .HasColumnName("333_000_GrievanceLogDeterminationStatus_GLog");
            entity.Property(e => e._334000DescriptionOfGrievanceGlog)
                .IsUnicode(false)
                .HasColumnName("334_000_DescriptionOfGrievance_GLog");
            entity.Property(e => e._335000DateOfAnticipatedImplementationGlog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("335_000_DateOfAnticipatedImplementation_GLog");
            entity.Property(e => e._336000DateOfImplementationCompletionGlog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("336_000_DateOfImplementationCompletion_GLog");
            entity.Property(e => e._500000GrievanceLogNumber)
                .HasMaxLength(50)
                .HasColumnName("500_000_GrievanceLogNumber");
            entity.Property(e => e._501000GrievantFirstNameGlog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("501_000_GrievantFirstName_GLog");
            entity.Property(e => e._502000GrievantMiddleInitialGlog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("502_000_GrievantMiddleInitial_GLog");
            entity.Property(e => e._503000GrievantLastNameGlog)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("503_000_Grievant_Last_Name_GLog");
            entity.Property(e => e._504000DateGrievanceFiledGlog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("504_000_DateGrievanceFiled_GLog");
            entity.Property(e => e._505000PropertyNameSubjectToGrievanceGlog)
                .HasMaxLength(500)
                .HasColumnName("505_000_PropertyNameSubjectToGrievance_GLog");
            entity.Property(e => e._506000PropertyAcHpnumberSubjectToGrievanceGlog)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("506_000_PropertyAcHPNumberSubjectToGrievance_GLog");
            entity.Property(e => e._507000PropertyAddressSubjectToGrievanceGlog)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("507_000_PropertyAddressSubjectToGrievance_GLog");
            entity.Property(e => e._508000IfApplicableUnitNumberRelevantToGrievanceGlog)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("508_000_IfApplicable_UnitNumberRelevantToGrievance_GLog");
            entity.Property(e => e._509000DescriptionOfGrievanceGlog)
                .IsUnicode(false)
                .HasColumnName("509_000_DescriptionOfGrievance_GLog");
            entity.Property(e => e._510000DevelopmentCategoryForGrievanceGlog)
                .HasMaxLength(100)
                .HasColumnName("510_000_DevelopmentCategoryForGrievance_GLog");
            entity.Property(e => e._511000CityPropertyActionOnGrievance).HasColumnName("511_000_City_PropertyActionOn Grievance");
            entity.Property(e => e._512000ResolutionOfGrievanceGlog)
                .IsUnicode(false)
                .HasColumnName("512_000_ResolutionOfGrievance_GLog");
            entity.Property(e => e._515000GrievanceLogDeterminationStatusGlog)
                .HasMaxLength(50)
                .HasColumnName("515_000_GrievanceLogDeterminationStatus_GLog");
            entity.Property(e => e._517000PropertyGrievanceType)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("517_000_Property_GrievanceType");
            entity.Property(e => e._518000GrievanceLogDeterminationStatusGlog)
                .HasMaxLength(50)
                .HasColumnName("518_000_GrievanceLogDeterminationStatus_GLog");
            entity.Property(e => e._519000GrievanceLogDeterminationDateGlog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("519_000_GrievanceLogDeterminationDate_GLog");
            entity.Property(e => e._520000GrievanceLogAnticipatedDateGlog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("520_000_GrievanceLogAnticipatedDate_GLog");
            entity.Property(e => e._521000GrievanceLogImplementationDateGlog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("521_000_GrievanceLogImplementationDate_GLog");
            entity.Property(e => e._522000GrievanceLogAnyComplaintsFiledGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("522_000_GrievanceLogAnyComplaintsFiled_GLog");
            entity.Property(e => e._522100GrievanceLogIisHcidlacompliantFiledGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("522_100_GrievanceLogIIsHCIDLACompliantFiled_GLog");
            entity.Property(e => e._522100GrievanceLogIsFairHousingComplaintFiledGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("522_100_GrievanceLogIsFairHousingComplaintFiled_GLog");
            entity.Property(e => e._522100GrievanceLogIsHudcompliantFiledGlog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("522_100_GrievanceLogIsHUDCompliantFiled_GLog");
            entity.Property(e => e._900000DoesTheGrievanceRelateToAPendingOrPriorRequestForAReasonableAccommodationFromTheProperty)
                .IsUnicode(false)
                .HasColumnName("900_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_accommodation_from_the_property?");
            entity.Property(e => e._901000TypeSOfReasonableAccommodationRequestedByTheGrievant)
                .IsUnicode(false)
                .HasColumnName("901_000_Type(s)_of_Reasonable_Accommodation_requested_by_the_grievant");
            entity.Property(e => e._902000DoesTheGrievantAllegeTheirReasonableAccommodationRequestHasNotBeenProcessedPromptly)
                .IsUnicode(false)
                .HasColumnName("902_000_Does_the_grievant_allege_their_reasonable_accommodation_request_has_not_been_processed_promptly?");
            entity.Property(e => e._903000DoesTheGrievantAllegeThePropertyHasUnreasonablyRequestedAThirdPartyVerification)
                .IsUnicode(false)
                .HasColumnName("903_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third-party_verification?");
            entity.Property(e => e._904000DoesTheGrievantAllegeThePropertyHasPartiallyDeniedTheirReasonableAccommodationRequest)
                .IsUnicode(false)
                .HasColumnName("904_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_accommodation_request?");
            entity.Property(e => e._905000DoesTheGrievantAllegeThePropertyHasDeniedTheirReasonableAccommodationRequest)
                .IsUnicode(false)
                .HasColumnName("905_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_accommodation_request?");
            entity.Property(e => e._906000DoesTheGrievantAllegeThereAreOtherIssuesRegardingTheirReasonableAccommodationRequestNotAlreadyListed)
                .IsUnicode(false)
                .HasColumnName("906_000_Does_the_grievant_allege_there_are_other_issues_regarding_their_reasonable_accommodation_request_not_already_listed?");
            entity.Property(e => e._907000DescriptionOfOtherIssuesRegardingReasonableAccommodationRequest)
                .IsUnicode(false)
                .HasColumnName("907_000_Description_of_other_issues_regarding_reasonable_accommodation_request");
            entity.Property(e => e._908000DateOfReasonableAccommodationRequest)
                .IsUnicode(false)
                .HasColumnName("908_000_Date_of_Reasonable_Accommodation_request");
            entity.Property(e => e._909000DateRequestWasListedOnTheQuarterlyReportReasonableAccommodationLog)
                .IsUnicode(false)
                .HasColumnName("909_000_Date_request_was_listed_on_the_Quarterly_Report_Reasonable_Accommodation_log");
            entity.Property(e => e._910000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .IsUnicode(false)
                .HasColumnName("910_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._911000DoesTheGrievanceRelateToAPendingOrPriorRequestForAReasonableModificationFromTheProperty)
                .IsUnicode(false)
                .HasColumnName("911_000_Does_the_grievance_relate_to_a_pending_or_prior_request_for_a_reasonable_modification_from_the_property?");
            entity.Property(e => e._912000TypeSOfReasonableModificationRequestedByTheGrievant)
                .IsUnicode(false)
                .HasColumnName("912_000_Type(s)_of_Reasonable_Modification_requested_by_the_grievant");
            entity.Property(e => e._913000DescriptionOfRequestedFeature)
                .IsUnicode(false)
                .HasColumnName("913_000_Description_of_requested_feature");
            entity.Property(e => e._914000DoesTheGrievantAllegeTheirReasonableModificationHasNotBeenProcessedPromptly)
                .IsUnicode(false)
                .HasColumnName("914_000_Does_the_grievant_allege_their_reasonable_modification_has_not_been_processed_promptly?");
            entity.Property(e => e._915000DoesTheGrievantAllegeThePropertyHasUnreasonablyRequestedAThirdPartyVerification)
                .IsUnicode(false)
                .HasColumnName("915_000_Does_the_grievant_allege_the_property_has_unreasonably_requested_a_third-party_verification?");
            entity.Property(e => e._916000DoesTheGrievantAllegeThePropertyHasPartiallyDeniedTheirReasonableModificationRequest)
                .IsUnicode(false)
                .HasColumnName("916_000_Does_the_grievant_allege_the_property_has_partially_denied_their_reasonable_modification_request?");
            entity.Property(e => e._917000DoesTheGrievantAllegeThePropertyHasDeniedTheirReasonableModificationRequest)
                .IsUnicode(false)
                .HasColumnName("917_000_Does_the_grievant_allege_the_property_has_denied_their_reasonable_modification_request?");
            entity.Property(e => e._918000DoesThePropertyGrievantAllegeThereAreOtherIssuesRegardingTheirReasonableModificationRequestNotAlreadyLis)
                .IsUnicode(false)
                .HasColumnName("918_000_Does_the_property_grievant_allege_there_are_other_issues_regarding_their_reasonable_modification_request_not_already_lis");
            entity.Property(e => e._919000ExplanationOfTheOtherIssuesRegardingReasonableModificationRequest)
                .IsUnicode(false)
                .HasColumnName("919_000_Explanation_of_the_other_issues_regarding_reasonable_modification_request");
            entity.Property(e => e._920000DateOfReasonableModificationRequest)
                .IsUnicode(false)
                .HasColumnName("920_000_Date_of_Reasonable_Modification_request");
            entity.Property(e => e._921000DateRequestWasListedOnTheQuarterlyReportReasonableModificationLog)
                .IsUnicode(false)
                .HasColumnName("921_000_Date_request_was_listed_on_the_Quarterly_Report_Reasonable_Modification_log");
            entity.Property(e => e._922000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .IsUnicode(false)
                .HasColumnName("922_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._923000DoesTheGrievanceRelateToARequestForAuxiliaryAidsAndOrServicesForEffectiveCommunicationFromTheProperty)
                .IsUnicode(false)
                .HasColumnName("923_000_Does_the_grievance_relate_to_a_request_for_auxiliary_aids_and/or_services_for_effective_communication_from_the_property?");
            entity.Property(e => e._924000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("924_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._925000DateOfEffectiveCommunicationRequest)
                .IsUnicode(false)
                .HasColumnName("925_000_Date_of_effective_communication_request");
            entity.Property(e => e._926000DateRequestWasListedOnTheQuarterlyReportEffectiveCommunicationLog)
                .IsUnicode(false)
                .HasColumnName("926_000_Date_request_was_listed_on_the_Quarterly_Report_Effective_Communication_log");
            entity.Property(e => e._927000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .IsUnicode(false)
                .HasColumnName("927_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._928000DoesTheGrievanceRelateToTheMaintenanceOfAccessibleFeaturesOtherThanElevatorsOrToBarriersBlockingAcce)
                .IsUnicode(false)
                .HasColumnName("928_000_Does_the_grievance_relate_to_the_maintenance_of_accessible_features_(other_than_elevators),_or_to_barriers_blocking_acce");
            entity.Property(e => e._929000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("929_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._929500DescriptionOfMaintenanceIssue)
                .IsUnicode(false)
                .HasColumnName("929_500_Description_of_maintenance_issue");
            entity.Property(e => e._930000DoesTheGrievanceRelateToAnElevator)
                .IsUnicode(false)
                .HasColumnName("930_000_Does_the_grievance_relate_to_an_elevator?");
            entity.Property(e => e._931000IfYesPleaseChooseAllThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("931_000_If_yes,_please_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._932000DoesTheGrievanceRelateToPlacementOnAWaitingListOrTransferListOrTransferFromAWaitingListOrTransferL)
                .IsUnicode(false)
                .HasColumnName("932_000_Does_the_grievance_relate_to_placement_on_a_waiting_list_or_transfer_list,_or_transfer_from_a_waiting_list_or_transfer_l");
            entity.Property(e => e._933000IfYesPleaseChooseAllThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("933_000_If_yes,_please_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._934000DateOfWaitingListOrUnitTransferRequest)
                .IsUnicode(false)
                .HasColumnName("934_000_Date_of_Waiting_List_or_Unit_Transfer_request");
            entity.Property(e => e._935000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .IsUnicode(false)
                .HasColumnName("935_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._936000DoesTheGrievantFaceAPotentialEvictionFromTheProperty)
                .IsUnicode(false)
                .HasColumnName("936_000_Does_the_grievant_face_a_potential_eviction_from_the_property?");
            entity.Property(e => e._937000IfYesHasTheGrievantBeenServedWithAnyOfTheFollowingPleaseChooseAllThatApply)
                .IsUnicode(false)
                .HasColumnName("937_000_If_yes,_has_the_grievant_been_served_with_any_of_the_following?_Please_choose_all_that_apply");
            entity.Property(e => e._938000DateNoticeWasServed)
                .IsUnicode(false)
                .HasColumnName("938_000_Date_Notice_was_served");
            entity.Property(e => e._939000DoesTheGrievanceRelateToAThreatenedPendingOrPastEviction)
                .IsUnicode(false)
                .HasColumnName("939_000_Does_the_grievance_relate_to_a_threatened,_pending,_or_past_eviction?");
            entity.Property(e => e._940000DoesTheGrievanceRelateToAProposedPendingOrCompletedRelocation)
                .IsUnicode(false)
                .HasColumnName("940_000_Does_the_grievance_relate_to_a_proposed,_pending,_or_completed_relocation?");
            entity.Property(e => e._941000IfYesPleaseDescribe)
                .IsUnicode(false)
                .HasColumnName("941_000_If_yes,_please_describe");
            entity.Property(e => e._942000DoesTheGrievanceRelateToAProposedPendingOrCompletedRetrofit)
                .IsUnicode(false)
                .HasColumnName("942_000_Does_the_grievance_relate_to_a_proposed,_pending,_or_completed_retrofit?");
            entity.Property(e => e._943000IfYesPleaseDescribe)
                .IsUnicode(false)
                .HasColumnName("943_000_If_yes,_please_describe");
            entity.Property(e => e._944000NoiseComplaintsChooseAllThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("944_000_Noise_complaints:_choose_all_that_apply_from_the_list_of_options");
            entity.Property(e => e._945000IfTheNoiseComplaintRelatesToNoiseFromAnotherTenantPleaseProvideThatTenantSName)
                .IsUnicode(false)
                .HasColumnName("945_000_If_the_noise_complaint_relates_to_noise_from_another_tenant,_please_provide_that_tenant's_name");
            entity.Property(e => e._945100IfTheNoiseComplaintRelatesToNoiseFromAnotherUnitPleaseProvideThatUnitNumber)
                .IsUnicode(false)
                .HasColumnName("945_100_If_the_noise_complaint_relates_to_noise_from_another_unit,_please_provide_that_unit_number");
            entity.Property(e => e._945200IfTheNoiseComplaintRelatesToNoiseFromACommonAreaPleaseDescribeTheCommonAreaLocation)
                .IsUnicode(false)
                .HasColumnName("945_200_If_the_noise_complaint_relates_to_noise_from_a_common_area,_please_describe_the_common_area_location");
            entity.Property(e => e._946000DoesTheGrievanceRelateToAnAssistanceAnimalEitherAServiceAnimalOrEmotionalSupportAnimal)
                .IsUnicode(false)
                .HasColumnName("946_000_Does_the_grievance_relate_to_an_assistance_animal,_either_a_service_animal_or_emotional_support_animal?");
            entity.Property(e => e._947000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("947_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._948000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .IsUnicode(false)
                .HasColumnName("948_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._949000DoesTheGrievanceRelateToClaimsOfDiscriminationOrDifferentTreatmentFromThePropertyBecauseTheGrievantIsA)
                .IsUnicode(false)
                .HasColumnName("949_000_Does_the_grievance_relate_to_claims_of_discrimination_or_different_treatment_from_the_property_because_the_grievant_is_a");
            entity.Property(e => e._950000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("950_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._951000DoesTheGrievanceRelateToClaimsOfHarassmentOnTheProperty)
                .IsUnicode(false)
                .HasColumnName("951_000_Does_the_grievance_relate_to_claims_of_harassment_on_the_property?");
            entity.Property(e => e._952000IfYesChooseAllThatApplyFromTheListOfOptionsConcerningTheClaimedHarasserS)
                .IsUnicode(false)
                .HasColumnName("952_000_If_yes,_choose_all_that_apply_from_the_list_of_options_concerning_the_claimed_harasser(s)");
            entity.Property(e => e._953000IfTheClaimedHarasserIsAnEmployeeOfThePropertyProvideNamesOfTheEmployeeS)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("953_000_If_the_claimed_harasser_is_an_employee_of_the_property,_provide_names_of_the_employee(s)");
            entity.Property(e => e._954000IfTheClaimedHarasserIsAnEmployeeOfThePropertyProvideTitlesOfTheEmployeeS)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("954_000_If_the_claimed_harasser_is_an_employee_of_the_property,_provide_titles_of_the_employee(s)");
            entity.Property(e => e._955000IfTheClaimedHarasserIsAnEmployeeOfThePropertyAndTheNameOrTitleAreUnknownPleaseProvideADescription)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("955_000_If_the_claimed_harasser_is_an_employee_of_the_property,_and_the_name_or_title_are_unknown,_please_provide_a_description_");
            entity.Property(e => e._956000IfTheClaimedHarasserIsAContractorOrAgentOfThePropertyProvideNamesOfThePersons)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("956_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_provide_names_of_the_persons");
            entity.Property(e => e._957000IfTheClaimedHarasserIsAContractorOrAgentOfThePropertyProvideTitlesOfThePersons)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("957_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_provide_titles_of_the_persons");
            entity.Property(e => e._958000IfTheClaimedHarasserIsAContractorOrAgentOfThePropertyAndTheNameOrTitleAreUnknownPleaseProvideADe)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("958_000_If_the_claimed_harasser_is_a_contractor_or_agent_of_the_property,_and_the_name_or_title_are_unknown,_please_provide_a_de");
            entity.Property(e => e._959000IfTheClaimedHarasserIsATenantOrGuestProvideNamesOfThePersons)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("959_000_If_the_claimed_harasser_is_a_tenant_or_guest,_provide_names_of_the_persons");
            entity.Property(e => e._960000IfTheClaimedHarasserIsATenantOrGuestProvideTheUnitNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("960_000_If_the_claimed_harasser_is_a_tenant_or_guest,_provide_the_unit_number");
            entity.Property(e => e._961000IfTheClaimedHarasserIsATenantOrGuestAndTheNameOrUnitNumberAreUnknownPleaseProvideADescriptionOfT)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("961_000_If_the_claimed_harasser_is_a_tenant_or_guest,_and_the_name_or_unit_number_are_unknown,_please_provide_a_description_of_t");
            entity.Property(e => e._962000IfTheClaimedHarasserSIsSomeoneOtherThanAnEmployeeContractorAgentTenantOrGuestProvideAsMuchIdenti)
                .IsUnicode(false)
                .HasColumnName("962_000_If_the_claimed_harasser(s)_is_someone_other_than_an_employee,_contractor,_agent,_tenant_or_guest,_provide_as_much_identi");
            entity.Property(e => e._963000DoesTheGrievantBelieveTheyAreBeingHarassedBecauseTheyAreAMemberOfAGroupProtectedByTheFairHousingPol)
                .IsUnicode(false)
                .HasColumnName("963_000_Does_the_grievant_believe_they_are_being_harassed_because_they_are_a_member_of_a_group_protected_by_the_Fair_Housing_Pol");
            entity.Property(e => e._964000IfYesPleaseChooseAllClaimsThatApplyFromTheListOfOptions)
                .IsUnicode(false)
                .HasColumnName("964_000_If_yes,_please_choose_all_claims_that_apply_from_the_list_of_options");
            entity.Property(e => e._965000DoesTheGrievantAllegeTheyAreBeingRetaliatedAgainstByTheProperty)
                .IsUnicode(false)
                .HasColumnName("965_000_Does_the_grievant_allege_they_are_being_retaliated_against_by_the_property?");
            entity.Property(e => e._966000IfYesPleaseChooseTheOptionsThatBestDescribeTheAllegedReasonForTheClaimedRetaliation)
                .IsUnicode(false)
                .HasColumnName("966_000_If_yes,_please_choose_the_options_that_best_describe_the_alleged_reason_for_the_claimed_retaliation");
            entity.Property(e => e._967000IfYesPleaseChooseTheOptionsThatBestDescribeTheAllegedNatureOfTheRetaliatoryAction)
                .IsUnicode(false)
                .HasColumnName("967_000_If_yes,_please_choose_the_options_that_best_describe_the_alleged_nature_of_the_retaliatory_action");
            entity.Property(e => e._968000DoesTheGrievanceRelateToARentalApplication)
                .IsUnicode(false)
                .HasColumnName("968_000_Does_the_grievance_relate_to_a_rental_application?");
            entity.Property(e => e._969000IfYesPleaseSelectTheOptionsThatBestDescribeTheAllegedBasisForTheGrievance)
                .IsUnicode(false)
                .HasColumnName("969_000_If_yes,_please_select_the_options_that_best_describe_the_alleged_basis_for_the_grievance");
            entity.Property(e => e._970000DateGrievantSubmittedRentalApplication)
                .IsUnicode(false)
                .HasColumnName("970_000_Date_grievant_submitted_Rental_Application");
            entity.Property(e => e._971000DateGrievantWasNotifiedOfDenialPartialDenialOrDelay)
                .IsUnicode(false)
                .HasColumnName("971_000_Date_grievant_was_notified_of_denial,_partial_denial,_or_delay");
            entity.Property(e => e._972000OtherGrievanceDescribeOtherBasisForGrievance)
                .IsUnicode(false)
                .HasColumnName("972_000_Other_grievance:_Describe_other_basis_for_grievance");
            entity.Property(e => e._973000PropertyGrievanceDeterminationStatus)
                .HasMaxLength(29)
                .IsUnicode(false)
                .HasColumnName("973_000_PropertyGrievanceDeterminationStatus");
            entity.Property(e => e._974000PendingStatusDescription)
                .IsUnicode(false)
                .HasColumnName("974_000_PendingStatusDescription");
            entity.Property(e => e._975000IsRecordsRequested).HasColumnName("975_000_IsRecordsRequested");
            entity.Property(e => e._976000RecordsRequestDate).HasColumnName("976_000_RecordsRequestDate");
            entity.Property(e => e._977000IsRecordsProvided).HasColumnName("977_000_IsRecordsProvided");
            entity.Property(e => e._978000PropertyGrievancePendingIfYesRecordsProvidedDate).HasColumnName("978_000_PropertyGrievancePending_If_Yes_RecordsProvidedDate");
            entity.Property(e => e._979000PropertyGrievancePendingIfNoRecordsProvidedDate).HasColumnName("979_000_PropertyGrievancePending_If_No_RecordsProvidedDate");
            entity.Property(e => e._980000IsMeetingRequested).HasColumnName("980_000_IsMeetingRequested");
            entity.Property(e => e._981000MeetingRequestDate).HasColumnName("981_000_MeetingRequestDate");
            entity.Property(e => e._982000IsMeetingScheduled).HasColumnName("982_000_IsMeetingScheduled");
            entity.Property(e => e._983000MeetingScheduledDate).HasColumnName("983_000_MeetingScheduledDate");
            entity.Property(e => e._984000MeetingManagerName)
                .IsUnicode(false)
                .HasColumnName("984_000_MeetingManagerName");
            entity.Property(e => e._985000MeetingManagerTitle)
                .IsUnicode(false)
                .HasColumnName("985_000_MeetingManagerTitle");
            entity.Property(e => e._986000IsAssistanceProvided).HasColumnName("986_000_IsAssistanceProvided");
            entity.Property(e => e._987000IsDecisionReceived).HasColumnName("987_000_IsDecisionReceived");
            entity.Property(e => e._988000DecisionProvidedDate)
                .HasColumnType("datetime")
                .HasColumnName("988_000_DecisionProvidedDate");
            entity.Property(e => e._989000DeterminationDateForPropertyGrievanceGranted)
                .HasColumnType("datetime")
                .HasColumnName("989_000_DeterminationDateForPropertyGrievance_Granted");
            entity.Property(e => e._990000ExplanationOfDeterminationForPropertyGrievanceGranted)
                .IsUnicode(false)
                .HasColumnName("990_000_ExplanationOfDeterminationForPropertyGrievance_Granted");
            entity.Property(e => e._991000DateOfAnticipatedImplementationForPropertyGrievanceGranted)
                .HasColumnType("datetime")
                .HasColumnName("991_000_DateOfAnticipatedImplementationForPropertyGrievance_Granted");
            entity.Property(e => e._992000ImplementationDelayReasonForPropertyGrievanceGranted)
                .IsUnicode(false)
                .HasColumnName("992_000_ImplementationDelayReasonForPropertyGrievance_Granted");
            entity.Property(e => e._993000IsDecisionReceivedForPropertyGrievanceGranted).HasColumnName("993_000_IsDecisionReceivedForPropertyGrievance_Granted");
            entity.Property(e => e._994000DecisionProvidedDateForPropertyGrievanceGranted).HasColumnName("994_000_DecisionProvidedDateForPropertyGrievance_Granted");
            entity.Property(e => e._995000DeterminationDateForPropertyGrievancePartiallyGranted)
                .HasColumnType("datetime")
                .HasColumnName("995_000_DeterminationDateForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._996000ExplanationOfDeterminationForPropertyGrievancePartiallyGranted)
                .IsUnicode(false)
                .HasColumnName("996_000_ExplanationOfDeterminationForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._997000DateOfAnticipatedImplementationForPropertyGrievancePartiallyGranted)
                .HasColumnType("datetime")
                .HasColumnName("997_000_DateOfAnticipatedImplementationForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._998000ImplementationDelayReasonForPropertyGrievancePartiallyGranted)
                .IsUnicode(false)
                .HasColumnName("998_000_ImplementationDelayReasonForPropertyGrievance_Partially_Granted");
            entity.Property(e => e._999000IsDecisionReceivedForPropertyGrievancePartiallyGranted).HasColumnName("999_000_IsDecisionReceivedForPropertyGrievance_Partially_Granted");
        });

        modelBuilder.Entity<VwOlapQroccupancyUnit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QROccupancyUnit", "AAHR");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.AgencyName).HasMaxLength(50);
            entity.Property(e => e.Ami)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AMI");
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(9)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.Bathroom).IsUnicode(false);
            entity.Property(e => e.Bedroom).IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsAvailabeFromAutransferList)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsAvailabeFromAUTransferList");
            entity.Property(e => e.IsAvailableFromAuwaitList)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsAvailableFromAUWaitList");
            entity.Property(e => e.IsCesunit).HasColumnName("IsCESUnit");
            entity.Property(e => e.IsOccupied)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsOccupiedWithNeeded)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LeaseAddendumExecutedDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LeaseAddendumExpirationDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxQrId).HasColumnName("MaxQrID");
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MoveInDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MoveOutDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyReason).HasMaxLength(50);
            entity.Property(e => e.PreviousLiveInProperty).HasMaxLength(10);
            entity.Property(e => e.PreviousUnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ProgramEligibilityPsh)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ProgramEligibility - PSH");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.QroccupancyUnitId).HasColumnName("QROccupancyUnitID");
            entity.Property(e => e.QrreportCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("QRReportCreateDate");
            entity.Property(e => e.QualifiedTenantCurrentUnitAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.QualifiedTenantCurrentUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.ReferralRecipientEmail).HasMaxLength(100);
            entity.Property(e => e.ReferralRecipientPhone).HasMaxLength(30);
            entity.Property(e => e.ReferralRequestDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RelocationDate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TenantSelectedFrom).HasMaxLength(50);
            entity.Property(e => e.UnitCity).HasMaxLength(50);
            entity.Property(e => e.UnitHouseFracNum).HasMaxLength(50);
            entity.Property(e => e.UnitHouseNum).HasMaxLength(50);
            entity.Property(e => e.UnitLutPreDirCd)
                .HasMaxLength(50)
                .HasColumnName("UnitLutPreDirCD");
            entity.Property(e => e.UnitLutStateCd)
                .HasMaxLength(50)
                .HasColumnName("UnitLutStateCD");
            entity.Property(e => e.UnitLutStreetTypeCd)
                .HasMaxLength(50)
                .HasColumnName("UnitLutStreetTypeCD");
            entity.Property(e => e.UnitNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnitPostDirCd)
                .HasMaxLength(50)
                .HasColumnName("UnitPostDirCD");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.UnitStreetName).HasMaxLength(100);
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnitZip).HasMaxLength(5);
            entity.Property(e => e.YearQr)
                .HasMaxLength(14)
                .HasColumnName("YearQR");
            entity.Property(e => e._056100NameOfCurrentTenant)
                .IsUnicode(false)
                .HasColumnName("056_100_NameOfCurrentTenant");
            entity.Property(e => e._056101FirstNameOfCurrentTenant)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("056_101_FirstNameOfCurrentTenant");
            entity.Property(e => e._056102MiddleInitialOfCurrentTenant)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("056_102_MiddleInitialOfCurrentTenant");
            entity.Property(e => e._056103LastNameOfCurrentTenant)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("056_103_LastNameOfCurrentTenant");
            entity.Property(e => e._056110IsOccupiedByPwdWhoNeedsTheFeatures)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("056_110_IsOccupiedByPWD_WhoNeedsTheFeatures");
            entity.Property(e => e._056120IsLeaseAddendum)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("056_120_IsLeaseAddendum");
            entity.Property(e => e._056130BeginningDateMostCurrentAddendum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("056_130_BeginningDateMostCurrentAddendum");
            entity.Property(e => e._056131DoesTheLeaseAddendumHaveExpirationDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("056_131_DoesTheLeaseAddendumHaveExpirationDate");
            entity.Property(e => e._056135ExpirationDateMostCurrentAddendum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("056_135_ExpirationDateMostCurrentAddendum");
            entity.Property(e => e._056240TenantSelectedFrom)
                .HasMaxLength(50)
                .HasColumnName("056_240_TenantSelectedFrom");
            entity.Property(e => e._226000NumberOfVacantAccessibleUnits)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("226_000_NumberOfVacantAccessibleUnits");
            entity.Property(e => e._226100NumberOfVacantHvunits)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("226_100_NumberOfVacantHVUnits");
            entity.Property(e => e._226200NumberOfVacantAccessibleUnits)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("226_200_NumberOfVacantAccessibleUnits");
            entity.Property(e => e._373000MoveInDate)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("373_000_Move-InDate");
            entity.Property(e => e._374000TenantSelectedFrom)
                .HasMaxLength(50)
                .HasColumnName("374_000_TenantSelectedFrom");
        });

        modelBuilder.Entity<VwOlapQrreasonableAccommodation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRReasonableAccommodation", "AAHR");

            entity.Property(e => e.AnticipatedImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.Bathrooms).IsUnicode(false);
            entity.Property(e => e.Bedrooms).IsUnicode(false);
            entity.Property(e => e.DeterminationDate).HasColumnType("datetime");
            entity.Property(e => e.DeterminationStatus).HasMaxLength(50);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrievanceDate).HasColumnType("datetime");
            entity.Property(e => e.GrievanceLogNumber).HasMaxLength(50);
            entity.Property(e => e.ImplementationDate).HasColumnType("datetime");
            entity.Property(e => e.IsGrievanceField)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsGrievanceProcedureProvided)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.IsNeedAuunit)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsNeedAUUnit");
            entity.Property(e => e.IsOnAutransferList)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsOnAUTransferList");
            entity.Property(e => e.IsOnAuwaitList)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("IsOnAUWaitList");
            entity.Property(e => e.IsTransferRequest)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxQrId).HasColumnName("MaxQrID");
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.MiddleInitial)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.QrreasonableAccommodationId).HasColumnName("QRReasonableAccommodationID");
            entity.Property(e => e.QrreportCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("QRReportCreateDate");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.RaquarterReportId).HasColumnName("RAQuarterReportID");
            entity.Property(e => e.RarequestType)
                .HasMaxLength(50)
                .HasColumnName("RARequestType");
            entity.Property(e => e.ReasonableAccommodationId).HasColumnName("ReasonableAccommodationID");
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RequestorAddress).HasMaxLength(300);
            entity.Property(e => e.UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.UserType).HasMaxLength(50);
            entity.Property(e => e.YearQr)
                .HasMaxLength(14)
                .HasColumnName("YearQR");
            entity.Property(e => e._047000UnitNumberSubjectToReasonableModification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("047_000_UnitNumberSubjectToReasonableModification");
            entity.Property(e => e._047110SubCategoryInstallNewFeatureUnit).HasColumnName("047_110_Sub Category - Install New Feature - Unit");
            entity.Property(e => e._047120SubCategoryModifyExistingFeatureUnit).HasColumnName("047_120_Sub Category - Modify Existing Feature - Unit");
            entity.Property(e => e._047130SubCategoryInstallNewFeatureCommonArea).HasColumnName("047_130_Sub Category - Install New Feature - Common Area");
            entity.Property(e => e._047140SubCategoryModifyExistingFeatureCommonArea).HasColumnName("047_140_Sub Category - Modify Existing Feature – Common Area");
            entity.Property(e => e._047150SubCategoryOther).HasColumnName("047_150_Sub Category - Other");
            entity.Property(e => e._047200DescribeReasonableModificationRequest).HasColumnName("047_200_Describe reasonable modification request");
            entity.Property(e => e._047300TypeOfReasonableAccommodation)
                .HasMaxLength(50)
                .HasColumnName("047_300_Type of reasonable accommodation");
            entity.Property(e => e._047301SubCategoryRent).HasColumnName("047_301_Sub Category - Rent");
            entity.Property(e => e._047302SubCategoryAlternateTenantContacts).HasColumnName("047_302_Sub Category - Alternate Tenant Contacts");
            entity.Property(e => e._047303SubCategoryDocumentSubmissionRequirements).HasColumnName("047_303_Sub Category - Document Submission Requirements");
            entity.Property(e => e._047304SubCategoryUnitTransfer).HasColumnName("047_304_Sub Category - Unit Transfer");
            entity.Property(e => e._047305SubCategoryInHomeSupport).HasColumnName("047_305_Sub Category - In-Home Support");
            entity.Property(e => e._047306SubCategoryAccessibilityRequestsCommonAreas).HasColumnName("047_306_Sub Category - Accessibility Requests - Common Areas");
            entity.Property(e => e._047307SubCategoryTenantNotices).HasColumnName("047_307_Sub Category - Tenant Notices");
            entity.Property(e => e._047308SubCategoryAccessibilityRequestsUnit).HasColumnName("047_308_Sub Category - Accessibility Requests - Unit");
            entity.Property(e => e._047309SubCategoryApplicationsAndLottery).HasColumnName("047_309_Sub Category - Applications and Lottery");
            entity.Property(e => e._047310SubCategorySupportAnimals).HasColumnName("047_310_Sub Category - Support Animals");
            entity.Property(e => e._047311SubCategoryOther).HasColumnName("047_311_Sub Category - Other");
            entity.Property(e => e._047400DescribeReasonableAccomadationRequest).HasColumnName("047_400_Describe reasonable accomadation request");
            entity.Property(e => e._1093000RequestorFirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("1093_000_RequestorFirstName");
            entity.Property(e => e._1094000RequestorMiddleName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("1094_000_RequestorMiddleName");
            entity.Property(e => e._1095000RequestorLastName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("1095_000_RequestorLastName");
            entity.Property(e => e._1096000TenantsCurrentUnitAddress)
                .HasMaxLength(300)
                .HasColumnName("1096_000_TenantsCurrentUnitAddress");
            entity.Property(e => e._1097000TenantsCurrentUnitNumber)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("1097_000_TenantsCurrentUnitNumber");
            entity.Property(e => e._1098000IsOnAutransferList).HasColumnName("1098_000_IsOnAUTransferList");
            entity.Property(e => e._1099000ApplicantsCurrentAddress)
                .HasMaxLength(300)
                .HasColumnName("1099_000_ApplicantsCurrentAddress");
            entity.Property(e => e._1100000IsOnAuwaitList).HasColumnName("1100_000_IsOnAUWaitList");
            entity.Property(e => e._1104000IsAdditionalInfoReq).HasColumnName("1104_000_IsAdditionalInfoReq");
            entity.Property(e => e._1105000DateForAdditionalInfo).HasColumnName("1105_000_DateForAdditionalInfo");
            entity.Property(e => e._1106000ReasonForAddVerification).HasColumnName("1106_000_ReasonForAddVerification");
            entity.Property(e => e._1107000DateForResponse).HasColumnName("1107_000_DateForResponse");
            entity.Property(e => e._1108000ReasonForDelay).HasColumnName("1108_000_ReasonForDelay");
            entity.Property(e => e._137100DateOfRequestForReasonableAccommodationOrReasonableModification)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("137_100_DateOfRequestForReasonableAccommodationOrReasonableModification");
            entity.Property(e => e._270000ReasonableAccommodationId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("270_000_ReasonableAccommodationID");
            entity.Property(e => e._270000ReasonableAccommodationRequestThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("270_000_ReasonableAccommodationRequestThisQuarter");
            entity.Property(e => e._271000ReasonableAccommodationGrantedAndPartiallyGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("271_000_ReasonableAccommodationGrantedAndPartiallyGrantedOnReport");
            entity.Property(e => e._271000ReasonableAccommodationGrantedAndPartiallyGrantedOnReportThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("271_000_ReasonableAccommodationGrantedAndPartiallyGrantedOnReportThisQuarter");
            entity.Property(e => e._271000ReasonableAccommodationGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("271_000_ReasonableAccommodationGrantedOnReport");
            entity.Property(e => e._271000ReasonableAccommodationGrantedThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("271_000_ReasonableAccommodationGrantedThisQuarter");
            entity.Property(e => e._272000ReasonableAccommodationDeniedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("272_000_ReasonableAccommodationDeniedOnReport");
            entity.Property(e => e._272000ReasonableAccommodationDeniedThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("272_000_ReasonableAccommodationDeniedThisQuarter");
            entity.Property(e => e._273000ReasonableAccommodationPendingOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("273_000_ReasonableAccommodationPendingOnReport");
            entity.Property(e => e._275000ReasonableModificationId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("275_000_ReasonableModificationID");
            entity.Property(e => e._275000ReasonableModificationThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("275_000_ReasonableModificationThisQuarter");
            entity.Property(e => e._276000ReasonableModificationGrantedAndPartiallyGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("276_000_ReasonableModificationGrantedAndPartiallyGrantedOnReport");
            entity.Property(e => e._276000ReasonableModificationGrantedAndPartiallyGrantedOnReportThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("276_000_ReasonableModificationGrantedAndPartiallyGrantedOnReportThisQuarter");
            entity.Property(e => e._276000ReasonableModificationGrantedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("276_000_ReasonableModificationGrantedOnReport");
            entity.Property(e => e._276000ReasonableModificationGrantedThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("276_000_ReasonableModificationGrantedThisQuarter");
            entity.Property(e => e._277000ReasonableModificationDeniedOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("277_000_ReasonableModificationDeniedOnReport");
            entity.Property(e => e._277000ReasonableModificationDeniedThisQuarter)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("277_000_ReasonableModificationDeniedThisQuarter");
            entity.Property(e => e._278000ReasonableModificationPendingOnReport)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("278_000_ReasonableModificationPendingOnReport");
            entity.Property(e => e._337000ApplicantOrTenantRalog)
                .HasMaxLength(50)
                .HasColumnName("337_000_ApplicantOrTenant_RALog");
            entity.Property(e => e._338000DoTheyNeedAnAccessibleUnitRalog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("338_000_DoTheyNeedAnAccessibleUnit_RALog");
            entity.Property(e => e._339000RequestedUnitSizeBedRalog)
                .IsUnicode(false)
                .HasColumnName("339_000_RequestedUnitSizeBed_RALog");
            entity.Property(e => e._339100RequestedUnitSizeBathroomRalog)
                .IsUnicode(false)
                .HasColumnName("339_100_RequestedUnitSizeBathroom_RALog");
            entity.Property(e => e._340000RaOrRmRequestRalog)
                .HasMaxLength(50)
                .HasColumnName("340_000_RA_Or_RM_Request_RALog");
            entity.Property(e => e._341000DeterminationStatusPartiallyGrantedRalog)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("341_000_DeterminationStatusPartiallyGranted_RALog");
            entity.Property(e => e._341100DateOfWithdrawal).HasColumnName("341_100_DateOfWithdrawal");
            entity.Property(e => e._341200ReasonForWithdrawal).HasColumnName("341_200_ReasonForWithdrawal");
            entity.Property(e => e._342000DateOfDeterminationRalog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("342_000_DateOfDetermination_RALog");
            entity.Property(e => e._342100ExplanationOfDetermination).HasColumnName("342_100_ExplanationOfDetermination");
            entity.Property(e => e._343000DateOfAnticipatedImplementationRalog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("343_000_DateOfAnticipatedImplementation_RALog");
            entity.Property(e => e._343100ReasonForDelay).HasColumnName("343_100_ReasonForDelay");
            entity.Property(e => e._344000DateOfImplementationRalog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("344_000_DateOfImplementation_RALog");
            entity.Property(e => e._344100AnyAdditionalImplementationInformation).HasColumnName("344_100_AnyAdditionalImplementationInformation");
            entity.Property(e => e._344200NotificationDates)
                .HasMaxLength(163)
                .IsUnicode(false)
                .HasColumnName("344_200_NotificationDates");
            entity.Property(e => e._345000DateOfGrievanceRalog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("345_000_DateOfGrievance_RALog");
            entity.Property(e => e._346000CorrespondingGrievanceNumberRalog)
                .HasMaxLength(50)
                .HasColumnName("346_000_CorrespondingGrievanceNumber_RALog");
        });

        modelBuilder.Entity<VwOlapQrupcomingUnitVacancy>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QRUpcomingUnitVacancy", "AAHR");

            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MaxQrId).HasColumnName("MaxQrID");
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.QrreportCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("QRReportCreateDate");
            entity.Property(e => e.QrupcomingUnitVacancyId).HasColumnName("QRUpcomingUnitVacancyID");
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.YearQr)
                .HasMaxLength(14)
                .HasColumnName("YearQR");
            entity.Property(e => e._1110000IsUnitBecomeVacant).HasColumnName("1110_000_IsUnitBecomeVacant");
            entity.Property(e => e._1111000UnitNum)
                .HasMaxLength(20)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("1111_000_UnitNum");
            entity.Property(e => e._1111100IsQualifiedAutl).HasColumnName("1111_100_IsQualifiedAUTL");
            entity.Property(e => e._1111200CurrentUnitPropSnapShotIdForQualifiedAutl).HasColumnName("1111_200_CurrentUnitPropSnapShotID_ForQualifiedAUTL");
            entity.Property(e => e._1111300IsQualifiedAutlifNo).HasColumnName("1111_300_IsQualifiedAUTLIfNo");
            entity.Property(e => e._1111400IsQualifiedAuwl).HasColumnName("1111_400_IsQualifiedAUWL");
            entity.Property(e => e._1111500Auwlno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("1111_500_AUWLNo");
            entity.Property(e => e._1111600IsQualifiedNonPwdinAu).HasColumnName("1111_600_IsQualifiedNonPWDInAU");
            entity.Property(e => e._1111700CurrentUnitNumForQualifiedNonPwdinAu).HasColumnName("1111_700_CurrentUnitNum_ForQualifiedNonPWDInAU");
            entity.Property(e => e._1111800IsQualifiedNonPwdinAuifNo).HasColumnName("1111_800_IsQualifiedNonPWDInAUIfNo");
            entity.Property(e => e._1112000NoticeDate).HasColumnName("1112_000_NoticeDate");
            entity.Property(e => e._1113000ExpectedVacancyDate).HasColumnName("1113_000_ExpectedVacancyDate");
            entity.Property(e => e._1114000ActualVacancyDate).HasColumnName("1114_000_ActualVacancyDate");
        });

        modelBuilder.Entity<VwOlapQuarterlyReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QuarterlyReport", "AAHR");

            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropSnapShotId).HasColumnName("PropSnapShotID");
            entity.Property(e => e.QrcreatedOn)
                .HasColumnType("datetime")
                .HasColumnName("QRCreatedOn");
            entity.Property(e => e.QrreviwedBy)
                .HasColumnType("datetime")
                .HasColumnName("QRReviwedBy");
            entity.Property(e => e.QrreviwedOn)
                .HasColumnType("datetime")
                .HasColumnName("QRReviwedOn");
            entity.Property(e => e.QrsubmittedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QRSubmittedBy");
            entity.Property(e => e.QrsubmittedOn)
                .HasColumnType("datetime")
                .HasColumnName("QRSubmittedOn");
            entity.Property(e => e.Quarter).HasMaxLength(2);
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<VwOlapQuarterlyReportMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_QuarterlyReportMaster", "AAHR");

            entity.Property(e => e.AcceptedStatement1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 1");
            entity.Property(e => e.AcceptedStatement10)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 10");
            entity.Property(e => e.AcceptedStatement11)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 11");
            entity.Property(e => e.AcceptedStatement12)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 12");
            entity.Property(e => e.AcceptedStatement13)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 13");
            entity.Property(e => e.AcceptedStatement14)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 14");
            entity.Property(e => e.AcceptedStatement15)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 15");
            entity.Property(e => e.AcceptedStatement16)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 16");
            entity.Property(e => e.AcceptedStatement2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 2");
            entity.Property(e => e.AcceptedStatement3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 3");
            entity.Property(e => e.AcceptedStatement4)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 4");
            entity.Property(e => e.AcceptedStatement5)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 5");
            entity.Property(e => e.AcceptedStatement6)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 6");
            entity.Property(e => e.AcceptedStatement7)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 7");
            entity.Property(e => e.AcceptedStatement8)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 8");
            entity.Property(e => e.AcceptedStatement9)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Accepted Statement 9");
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CaseStatus).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FinalReviewDate)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FirstQrreport).HasColumnName("FirstQRReport");
            entity.Property(e => e.FirstReviewedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstReviewedOn).HasColumnType("datetime");
            entity.Property(e => e.FirstSubmittedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstSubmittedOn).HasColumnType("datetime");
            entity.Property(e => e.LastQrreport).HasColumnName("LastQRReport");
            entity.Property(e => e.LastQrreviewReportId).HasColumnName("LastQRReviewReportID");
            entity.Property(e => e.LastReviewBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastReviewOn).HasColumnType("datetime");
            entity.Property(e => e.LastSubmittedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastSubmittedOn).HasColumnType("datetime");
            entity.Property(e => e.LegalOwnerName).HasMaxLength(500);
            entity.Property(e => e.MaxQrId).HasColumnName("MaxQrID");
            entity.Property(e => e.MaxYearQr)
                .HasMaxLength(14)
                .HasColumnName("MaxYearQR");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OwnerEmail).HasMaxLength(100);
            entity.Property(e => e.OwnerPhone).HasMaxLength(30);
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .HasColumnName("PMEmail");
            entity.Property(e => e.Pmname)
                .HasMaxLength(300)
                .HasColumnName("PMName");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(30)
                .HasColumnName("PMPhone");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName).HasColumnName("Project_Name");
            entity.Property(e => e.PropSnapShotId).HasColumnName("PropSnapShotID");
            entity.Property(e => e.PropertyAddress).HasColumnName("Property Address");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyName)
                .HasMaxLength(500)
                .HasColumnName("Property_Name");
            entity.Property(e => e.QrbeginDate).HasColumnName("QRBeginDate");
            entity.Property(e => e.QrendDate).HasColumnName("QREndDate");
            entity.Property(e => e.QrfairHousingId).HasColumnName("QRFairHousingID");
            entity.Property(e => e.QrpropertyName)
                .HasMaxLength(500)
                .HasColumnName("QRPropertyName");
            entity.Property(e => e.Quarter).HasMaxLength(2);
            entity.Property(e => e.QuarterlyReportId).HasColumnName("QuarterlyReportID");
            entity.Property(e => e.QuarterlyReportIdstatus)
                .HasMaxLength(50)
                .HasColumnName("QuarterlyReportIDStatus");
            entity.Property(e => e.ReviewAction)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReviewFromStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReviewToStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReviewedCaseLogId).HasColumnName("ReviewedCaseLogID");
            entity.Property(e => e.ReviewedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.SignerName).HasMaxLength(300);
            entity.Property(e => e.SubmitAction)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubmitFromStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubmitToStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubmittedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubmittedCaseLogId).HasColumnName("SubmittedCaseLogID");
            entity.Property(e => e.SubmittedOn).HasColumnType("datetime");
            entity.Property(e => e.TitleRegionalManagerOrPropertyManager)
                .HasMaxLength(50)
                .HasColumnName("Title : (Regional Manager or Property Manager)");
            entity.Property(e => e.TotalFullyAccessibleHvunit).HasColumnName("TotalFullyAccessibleHVUnit");
            entity.Property(e => e.TotalTenantsOccupiedAuwithoutNeed).HasColumnName("TotalTenantsOccupiedAUWithoutNeed");
            entity.Property(e => e.TotalVacantAuthisQuarter).HasColumnName("TotalVacantAUThisQuarter");
            entity.Property(e => e.YearQr)
                .HasMaxLength(14)
                .HasColumnName("YearQR");
            entity.Property(e => e._114000DatesOfSubsequentAuMarketing)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("114_000_DatesOfSubsequentAuMarketing");
            entity.Property(e => e._135000DateOfCompletionReviewQuarterlyReport)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("135_000_DateOfCompletionReviewQuarterlyReport");
            entity.Property(e => e._143000DateAcHpreviewGrievancesFiledWithProperty)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("143_000_DateAcHPReviewGrievancesFiledWithProperty");
            entity.Property(e => e._152000DateOfSubmissionQuarterlyReport)
                .HasColumnType("datetime")
                .HasColumnName("152_000_DateOfSubmissionQuarterlyReport");
            entity.Property(e => e._154000QuarterlyReportQuarter)
                .HasMaxLength(14)
                .HasColumnName("154_000_QuarterlyReportQuarter");
            entity.Property(e => e._155000QuarterlyReportStatus)
                .HasMaxLength(50)
                .HasColumnName("155_000_QuarterlyReportStatus");
            entity.Property(e => e._156000DatesAcHpreviewofQuarterlyReportCompleted)
                .HasColumnType("datetime")
                .HasColumnName("156_000_DatesAcHPReviewofQuarterlyReportCompleted");
        });

        modelBuilder.Entity<VwOlapStructureDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_StructureDetails", "AAHR");

            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DateOf1stBuildingPermitForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stCoFoforConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("DateOf1stCoFOForConversionToResidential");
            entity.Property(e => e.DateOf1stPlanCheckSubmissionForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stTco).HasColumnName("DateOf1stTCO");
            entity.Property(e => e.DateOmostRecentBuildingPermit).HasColumnName("DateOMostRecentBuildingPermit");
            entity.Property(e => e.Elevator)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.FirstPlanCheckSubmissionForConversionToResidential).HasMaxLength(100);
            entity.Property(e => e.FivePlusBrunitCnt).HasColumnName("FivePlusBRUnitCnt");
            entity.Property(e => e.FourBrunitCnt).HasColumnName("FourBRUnitCnt");
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.OneBrunitCnt).HasColumnName("OneBRUnitCnt");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.SrounitCnt).HasColumnName("SROUnitCnt");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.StructurePropSnapShotId).HasColumnName("StructurePropSnapShotID");
            entity.Property(e => e.ThreeBrunitCnt).HasColumnName("ThreeBRUnitCnt");
            entity.Property(e => e.TwoBrunitCnt).HasColumnName("TwoBRUnitCnt");
            entity.Property(e => e._074020EndDateOfSurvey)
                .HasMaxLength(4000)
                .HasColumnName("074_020_EndDateOfSurvey");
            entity.Property(e => e._074StartDateOfSurvey)
                .HasMaxLength(4000)
                .HasColumnName("074_StartDateOfSurvey");
            entity.Property(e => e._846000EstimatedTotalRemovalCost)
                .HasMaxLength(4000)
                .HasColumnName("846_000_EstimatedTotalRemovalCost");
            entity.Property(e => e._847000Region).HasColumnName("847_000_Region");
            entity.Property(e => e._848000Facility)
                .HasMaxLength(4000)
                .HasColumnName("848_000_Facility");
            entity.Property(e => e._849000AddressFromEta)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasColumnName("849_000_AddressFromETA");
            entity.Property(e => e._850000SurveyStandards)
                .HasMaxLength(4000)
                .HasColumnName("850_000_SurveyStandards");
            entity.Property(e => e._851000SitePlanDrawingNumber)
                .HasMaxLength(4000)
                .HasColumnName("851_000_SitePlanDrawingNumber");
        });

        modelBuilder.Entity<VwOlapTrainingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_TrainingDetails", "AAHR");

            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.TrainingId).HasColumnName("TrainingID");
            entity.Property(e => e._164100TrainingDate)
                .HasColumnType("datetime")
                .HasColumnName("164_100_TrainingDate");
            entity.Property(e => e._164200TraineeTitle)
                .HasMaxLength(100)
                .HasColumnName("164_200_TraineeTitle");
            entity.Property(e => e._164300TraineeName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_300_TraineeName");
            entity.Property(e => e._164300TrainingCourseName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_300_TrainingCourseName");
            entity.Property(e => e._164400TrainingType)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("164_400_TrainingType");
            entity.Property(e => e._164500DateOfTrainingCertificate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("164_500_DateOfTrainingCertificate");
            entity.Property(e => e._164600ExpiryDateOfTrainingCertificates)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("164_600_ExpiryDateOfTrainingCertificates");
            entity.Property(e => e._164700TraineeFirstName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_700_TraineeFirstName");
            entity.Property(e => e._164710TraineeMiddleName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_710_TraineeMiddleName");
            entity.Property(e => e._164720TraineeLastName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("164_720_TraineeLastName");
            entity.Property(e => e._738TrnTrainerEmail)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("738_Trn_Trainer_Email");
            entity.Property(e => e._739TrnTrainerPhone)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("739_Trn_Trainer_Phone");
            entity.Property(e => e._740TrnTrainerProfile)
                .IsUnicode(false)
                .HasColumnName("740_Trn_Trainer_Profile");
            entity.Property(e => e._741TrnTrainerHireDate)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("741_Trn_Trainer_HireDate");
            entity.Property(e => e._742TrnTrainerComments)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("742_Trn_Trainer_Comments");
            entity.Property(e => e._743TrnCourseCourseDetails)
                .IsUnicode(false)
                .HasColumnName("743_Trn_Course_CourseDetails");
            entity.Property(e => e._744TrnCourseTargetAudience)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("744_Trn_Course_TargetAudience");
            entity.Property(e => e._745TrnCourseTrainers).HasColumnName("745_Trn_Course_Trainers");
            entity.Property(e => e._746TrnCourseOnlyAllowEnrollmentForAccountsWithLinkedProperties).HasColumnName("746_Trn_Course_OnlyAllowEnrollmentForAccountsWithLinkedProperties");
            entity.Property(e => e._747TrnSessionTrainingLocation)
                .IsUnicode(false)
                .HasColumnName("747_Trn_Session_TrainingLocation");
            entity.Property(e => e._748TrnSessionDuration).HasColumnName("748_Trn_Session_Duration");
            entity.Property(e => e._749TrnSessionCapacity).HasColumnName("749_Trn_Session_Capacity");
            entity.Property(e => e._750TrnSessionIsPrivate).HasColumnName("750_Trn_Session_IsPrivate");
            entity.Property(e => e._751TrnSessionInternalStaffCommentOnly)
                .IsUnicode(false)
                .HasColumnName("751_Trn_Session_InternalStaffCommentOnly");
            entity.Property(e => e._752TrnSessionTrainersName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("752_Trn_Session_TrainersName");
            entity.Property(e => e._753TrnSessionNotes)
                .IsUnicode(false)
                .HasColumnName("753_Trn_Session_Notes");
            entity.Property(e => e._754TrnEnrollEmailId)
                .HasMaxLength(500)
                .HasColumnName("754_Trn_Enroll_EmailId");
            entity.Property(e => e._755TrnGroupEmail)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("755_Trn_Group_Email");
            entity.Property(e => e._756TrnGroupLinkAssociatedPropertyAddress)
                .HasMaxLength(4000)
                .HasColumnName("756_Trn_Group_LinkAssociatedPropertyAddress");
            entity.Property(e => e._767TrnGroupLinkOnSiteManagerName)
                .HasMaxLength(401)
                .IsUnicode(false)
                .HasColumnName("767_Trn_Group_LinkOnSiteManagerName");
        });

        modelBuilder.Entity<VwOlapUnitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOLAP_UnitDetails", "AAHR");

            entity.Property(e => e.Ami)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AMI");
            entity.Property(e => e.CountAs)
                .HasMaxLength(8)
                .IsUnicode(false);
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentTenant)
                .HasMaxLength(302)
                .IsUnicode(false);
            entity.Property(e => e.FixedOrFloating)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IsCertified).HasColumnName("isCertified");
            entity.Property(e => e.IsCes).HasColumnName("IsCES");
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OccupancyRestrictions).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousTenantMoved)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.Projectid).HasColumnName("projectid");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TotalBathroom).IsUnicode(false);
            entity.Property(e => e.TotalBedroom).IsUnicode(false);
            entity.Property(e => e.UnitAccessibiltyType)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UnitAttributeDate)
                .HasColumnType("datetime")
                .HasColumnName("Unit Attribute Date");
            entity.Property(e => e.UnitFeature)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitFeatureArea)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitNum).HasMaxLength(20);
            entity.Property(e => e.UnitPropSnapShotId).HasColumnName("UnitPropSnapShotID");
            entity.Property(e => e.UnitType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPcmsgroupMember>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PCMSGroupMember");

            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.Contsource)
                .HasMaxLength(50)
                .HasColumnName("contsource");
            entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");
            entity.Property(e => e.MemberName).HasColumnName("Member Name");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryContactId).HasColumnName("PrimaryContactID");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.SecondaryContactId).HasColumnName("SecondaryContactID");
            entity.Property(e => e.SiteAddress).HasMaxLength(463);
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .HasColumnName("source");
            entity.Property(e => e.Title).HasMaxLength(50);
        });

        modelBuilder.Entity<VwProjectAttributeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectAttributeLogs", "AAHR");

            entity.Property(e => e.AcHpassociatedAccessorParcelNumberApn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAccessorParcelNumberAPN");
            entity.Property(e => e.AcHpfileNumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AcHPFileNumber");
            entity.Property(e => e.AhupproductionScheduleYear).HasColumnName("AHUPProductionScheduleYear");
            entity.Property(e => e.Ahupscore).HasColumnName("AHUPScore");
            entity.Property(e => e.AssignedRcs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AssignedRCS");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HimsassociatedAssessorParcelNumberApn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("HIMSAssociatedAssessorParcelNumberAPN");
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.IsthisaPreCsadevelopment).HasColumnName("IsthisaPreCSADevelopment");
            entity.Property(e => e.IsthisaPreVsadevelopment).HasColumnName("IsthisaPreVSADevelopment");
            entity.Property(e => e.ListedonAhupproductionSchedule).HasColumnName("ListedonAHUPProductionSchedule");
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutFundingId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.MaximumHearingandVisionCsacount).HasColumnName("MaximumHearingandVisionCSACount");
            entity.Property(e => e.MaximumHearingandVisionVcacount).HasColumnName("MaximumHearingandVisionVCACount");
            entity.Property(e => e.MaximumMobilityCsacount).HasColumnName("MaximumMobilityCSACount");
            entity.Property(e => e.MaximumMobilityVcacount).HasColumnName("MaximumMobilityVCACount");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PProjectName).HasColumnName("P_ProjectName");
            entity.Property(e => e.ProjectAttributeId).HasColumnName("ProjectAttributeID");
            entity.Property(e => e.ProjectAttributeLogId).HasColumnName("ProjectAttributeLogID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PsFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_FileNumber");
            entity.Property(e => e.PsHimsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PS_HIMSNumber");
            entity.Property(e => e.PsPrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PrimaryAPN");
            entity.Property(e => e.PsProjectId).HasColumnName("PS_ProjectId");
            entity.Property(e => e.PsSiteAddress)
                .IsUnicode(false)
                .HasColumnName("PS_SiteAddress");
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectLogs", "AAHR");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LutProjSourceCd)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LutProjSourceCD");
            entity.Property(e => e.LutProjectFundId).HasColumnName("LutProjectFundID");
            entity.Property(e => e.LutTypeofProjectId).HasColumnName("LutTypeofProjectID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectLogId).HasColumnName("ProjectLogID");
            entity.Property(e => e.PsFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_FileNumber");
            entity.Property(e => e.PsHimsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PS_HIMSNumber");
            entity.Property(e => e.PsPrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PrimaryAPN");
            entity.Property(e => e.PsProjectId).HasColumnName("PS_ProjectId");
            entity.Property(e => e.PsSiteAddress)
                .IsUnicode(false)
                .HasColumnName("PS_SiteAddress");
            entity.Property(e => e.RefProjectId).HasColumnName("RefProjectID");
            entity.Property(e => e.SettlementAddress).IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.YearEnd)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwProjectSiteAttributeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteAttributeLogs", "AAHR");

            entity.Property(e => e.AmmenitiesDescription).IsUnicode(false);
            entity.Property(e => e.ApplicationEndDate).HasColumnType("datetime");
            entity.Property(e => e.ApplicationFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ApplicationStartDate).HasColumnType("datetime");
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CwlopenPriorRegistryDate)
                .HasColumnType("datetime")
                .HasColumnName("CWLOpenPriorRegistryDate");
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.DocSubmitDateForOutreach).HasColumnType("datetime");
            entity.Property(e => e.HearingAndVisionUnitsPercentageRequired).IsUnicode(false);
            entity.Property(e => e.HousingTypeId).HasColumnName("HousingTypeID");
            entity.Property(e => e.InitialOccupiedDate).HasColumnType("datetime");
            entity.Property(e => e.IsCwlopenPriorRegistry).HasColumnName("IsCWLOpenPriorRegistry");
            entity.Property(e => e.LotteryDrawOn).HasColumnType("datetime");
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutNacRecomadationId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LutNacRecomadationID");
            entity.Property(e => e.LutexternalGroupId)
                .IsUnicode(false)
                .HasColumnName("LUTExternalGroupId");
            entity.Property(e => e.MarketOpenDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ParkingComments).IsUnicode(false);
            entity.Property(e => e.ParkingFees).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ParkingTypeId).HasColumnName("ParkingTypeID");
            entity.Property(e => e.ProjectSiteAttributeId).HasColumnName("ProjectSiteAttributeID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PropertyAttributeLogId).HasColumnName("PropertyAttributeLogID");
            entity.Property(e => e.PropertyName).IsUnicode(false);
            entity.Property(e => e.PsFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_FileNumber");
            entity.Property(e => e.PsHimsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PS_HIMSNumber");
            entity.Property(e => e.PsPrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PrimaryAPN");
            entity.Property(e => e.PsProjectId).HasColumnName("PS_ProjectId");
            entity.Property(e => e.PsSiteAddress)
                .IsUnicode(false)
                .HasColumnName("PS_SiteAddress");
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInfo).IsUnicode(false);
            entity.Property(e => e.RentalPolicy).IsUnicode(false);
            entity.Property(e => e.RentalSpecialNotes).IsUnicode(false);
            entity.Property(e => e.ScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SeniorDesignated).IsUnicode(false);
            entity.Property(e => e.Ttynumber).HasColumnName("TTYNumber");
            entity.Property(e => e.WailtListCloseDate).HasColumnType("datetime");
            entity.Property(e => e.WaitListOpenDate).HasColumnType("datetime");
            entity.Property(e => e.WebSite).IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectSiteLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteLogs", "AAHR");

            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.ConstructionHvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("ConstructionHVRatio");
            entity.Property(e => e.ConstructionMobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HimsprojUniqueId).HasColumnName("HIMSProjUniqueId");
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsWillAuwlopen).HasColumnName("IsWillAUWLOpen");
            entity.Property(e => e.LacountyServicePlanningAreaId).HasColumnName("LACountyServicePlanningAreaID");
            entity.Property(e => e.LutCestypeId).HasColumnName("LutCESTypeID");
            entity.Property(e => e.LutOccupancyStatusId).HasColumnName("LutOccupancyStatusID");
            entity.Property(e => e.LutProjectSiteStatusId).HasColumnName("LutProjectSiteStatusID");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NeighborhoodCouncil)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ProjectSiteLogId).HasColumnName("ProjectSiteLogID");
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.PsFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_FileNumber");
            entity.Property(e => e.PsHimsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PS_HIMSNumber");
            entity.Property(e => e.PsPrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PrimaryAPN");
            entity.Property(e => e.PsProjectId).HasColumnName("PS_ProjectId");
            entity.Property(e => e.PsSiteAddress)
                .IsUnicode(false)
                .HasColumnName("PS_SiteAddress");
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.SiteAddress).IsUnicode(false);
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId).HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
        });

        modelBuilder.Entity<VwProjectSitePrimaryContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwProjectSitePrimaryContacts");

            entity.Property(e => e.Address).HasMaxLength(361);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyName).HasMaxLength(150);
            entity.Property(e => e.ContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.ContactType).IsUnicode(false);
            entity.Property(e => e.DefaultContactId).HasColumnName("DefaultContactID");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.HouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.State)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Street).HasMaxLength(161);
            entity.Property(e => e.Unit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Zip)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectSiteUnitActualCnt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitActualCNT", "AAHR");

            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.TotalActualBothMobilityHvunit).HasColumnName("TotalActualBothMobilityHVUnit");
        });

        modelBuilder.Entity<VwProjectSiteUnitActualCnt1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitActualCNT", "Listing");

            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.TotalActualBothMobilityHvunit).HasColumnName("TotalActualBothMobilityHVUnit");
        });

        modelBuilder.Entity<VwProjectSiteUnitSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitSummary", "AAHR");

            entity.Property(e => e.LowestAmi)
                .HasMaxLength(10)
                .HasColumnName("LowestAMI");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e._0bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<VwProjectSiteUnitSummary1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitSummary", "Listing");

            entity.Property(e => e.LowestAmi)
                .HasMaxLength(10)
                .HasColumnName("LowestAMI");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.Srobedroom).HasColumnName("SROBedroom");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4bedroom).HasColumnName("4Bedroom");
            entity.Property(e => e._5orMoreBedroom).HasColumnName("5orMoreBedroom");
        });

        modelBuilder.Entity<VwProjectSiteUnitSummaryAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSiteUnitSummaryAll", "AAHR");

            entity.Property(e => e.LowestAmi)
                .HasMaxLength(10)
                .HasColumnName("LowestAMI");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e._0bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<VwPropertyContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_propertyContact", "PnC");

            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Fullname)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("fullname");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
        });

        modelBuilder.Entity<VwPropertyContactdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_propertyContactdetails", "AAHPCC");

            entity.Property(e => e.ContactCompany).HasMaxLength(150);
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.ContactType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LutContactTypeId).HasColumnName("LutContactTypeID");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
        });

        modelBuilder.Entity<VwPropertySearch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPropertySearch", "AAHR");

            entity.Property(e => e.Accessibility)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.AchpSiteZip)
                .HasMaxLength(5)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Apn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APN");
            entity.Property(e => e.ApplicationEndDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ApplicationStartDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListCloseDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.ConventionalWaitListOpenDate)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.CouncilDistrict)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.DefaultOwnerContactId).HasColumnName("DefaultOwnerContactID");
            entity.Property(e => e.DefaultPmcontactId).HasColumnName("DefaultPMContactID");
            entity.Property(e => e.FileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HasUnitData)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.HousingRegistryStatus).HasMaxLength(4000);
            entity.Property(e => e.Hvratio)
                .HasColumnType("decimal(18, 5)")
                .HasColumnName("HVRatio");
            entity.Property(e => e.IsListed)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Lat)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("LAT");
            entity.Property(e => e.Lon)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("lon");
            entity.Property(e => e.LowestAmi)
                .HasMaxLength(10)
                .HasColumnName("LowestAMI");
            entity.Property(e => e.MobilityRatio).HasColumnType("decimal(18, 5)");
            entity.Property(e => e.MobilitywHvunitCnt).HasColumnName("MobilitywHVUnitCnt");
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NeighborhoodId).HasColumnName("NeighborhoodID");
            entity.Property(e => e.NoDefaultPm).HasColumnName("NoDefaultPM");
            entity.Property(e => e.OpenForApplication)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OpenForMarketing)
                .HasMaxLength(23)
                .IsUnicode(false);
            entity.Property(e => e.OwnerAddress).HasMaxLength(361);
            entity.Property(e => e.OwnerCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerCompanyName).HasMaxLength(150);
            entity.Property(e => e.OwnerContactName)
                .HasMaxLength(201)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerHouseNum)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OwnerPhone).HasMaxLength(4000);
            entity.Property(e => e.OwnerState)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OwnerStreet).HasMaxLength(161);
            entity.Property(e => e.OwnerUnit)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerZip)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Pmaddress)
                .HasMaxLength(361)
                .HasColumnName("PMAddress");
            entity.Property(e => e.Pmcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PMCity");
            entity.Property(e => e.PmcompanyName)
                .HasMaxLength(150)
                .HasColumnName("PMCompanyName");
            entity.Property(e => e.PmcontactName)
                .HasMaxLength(201)
                .IsUnicode(false)
                .HasColumnName("PMContactName");
            entity.Property(e => e.Pmemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMEmail");
            entity.Property(e => e.PmhouseFracNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseFracNum");
            entity.Property(e => e.PmhouseNum)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMHouseNum");
            entity.Property(e => e.Pmphone)
                .HasMaxLength(4000)
                .HasColumnName("PMPhone");
            entity.Property(e => e.Pmstate)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PMState");
            entity.Property(e => e.Pmstreet)
                .HasMaxLength(161)
                .HasColumnName("PMStreet");
            entity.Property(e => e.Pmunit)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PMUnit");
            entity.Property(e => e.Pmzip)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PMZip");
            entity.Property(e => e.Policy).IsUnicode(false);
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PropertyAddress).HasMaxLength(4000);
            entity.Property(e => e.PropertyCestype)
                .HasMaxLength(500)
                .HasColumnName("PropertyCESType");
            entity.Property(e => e.PropertyDescription).IsUnicode(false);
            entity.Property(e => e.PropertyName).HasMaxLength(500);
            entity.Property(e => e.PropertyWebsite).IsUnicode(false);
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.RegionId).HasColumnName("RegionID");
            entity.Property(e => e.RentalApplicationLink).IsUnicode(false);
            entity.Property(e => e.RentalInformation).IsUnicode(false);
            entity.Property(e => e.RentalSubsidy)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SpecialNotes).IsUnicode(false);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.Typeofproject)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("typeofproject");
            entity.Property(e => e._0bedroom).HasColumnName("0Bedroom");
            entity.Property(e => e._1bedroom).HasColumnName("1Bedroom");
            entity.Property(e => e._2bedroom).HasColumnName("2Bedroom");
            entity.Property(e => e._3bedroom).HasColumnName("3Bedroom");
            entity.Property(e => e._4orMoreBedroom).HasColumnName("4orMoreBedroom");
        });

        modelBuilder.Entity<VwSrsummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSRSummary", "IMS");

            entity.Property(e => e.AcHpfileProjectNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AcHPFileProjectNumber");
            entity.Property(e => e.Apn)
                .HasMaxLength(40)
                .HasColumnName("APN");
            entity.Property(e => e.Assignee)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CaseNo).HasMaxLength(20);
            entity.Property(e => e.CaseType).HasMaxLength(50);
            entity.Property(e => e.CaseTypeId).HasColumnName("CaseTypeID");
            entity.Property(e => e.CouncilDistrict).HasMaxLength(10);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(4000)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.Himsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HIMSNumber");
            entity.Property(e => e.IdentifierType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .UseCollation("SQL_Latin1_General_CP1_CI_AS");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Neighborhood)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PrimaryAPN");
            entity.Property(e => e.ProjSource)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ProjectFund)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefProjectId).HasColumnName("RefProjectID");
            entity.Property(e => e.RefProjectSiteId).HasColumnName("RefProjectSiteID");
            entity.Property(e => e.Region)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TypeofProject)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.YearStart)
                .HasMaxLength(4)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwStructureAttributeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStructureAttributeLogs", "AAHR");

            entity.Property(e => e.AcHpassociatedApn)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("AcHPAssociatedAPN");
            entity.Property(e => e.BuildingDescription).IsUnicode(false);
            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClearedByAcHpforTco).HasColumnName("ClearedByAcHPForTCO");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.CurrentBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.CurrentBuldingPermitNumber).HasMaxLength(100);
            entity.Property(e => e.DateOf1stBuildingPermitForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stCoFoforConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("DateOf1stCoFOForConversionToResidential");
            entity.Property(e => e.DateOf1stPlanCheckSubmissionForConversionToResidential).HasColumnType("datetime");
            entity.Property(e => e.DateOf1stTco).HasColumnName("DateOf1stTCO");
            entity.Property(e => e.DateOf1stTcoforConversionToResidential)
                .HasColumnType("datetime")
                .HasColumnName("DateOf1stTCOForConversionToResidential");
            entity.Property(e => e.DateOfCofOpostRetrofit).HasColumnName("DateOfCofOPostRetrofit");
            entity.Property(e => e.DateOfCurrentBuildingPermitFinaled).HasColumnType("datetime");
            entity.Property(e => e.DateOfFco)
                .HasColumnType("datetime")
                .HasColumnName("DateOfFCO");
            entity.Property(e => e.DateOfMostRecentTco).HasColumnName("DateOfMostRecentTCO");
            entity.Property(e => e.DateOmostRecentBuildingPermit).HasColumnName("DateOMostRecentBuildingPermit");
            entity.Property(e => e.DbsretrofitBuildingPermitNumber)
                .HasMaxLength(100)
                .HasColumnName("DBSRetrofitBuildingPermitNumber");
            entity.Property(e => e.EnhancedAccessibilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fha11adesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("FHA_11ADesignatedUnitNumbers");
            entity.Property(e => e.FirstBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstPlanCheckSubmissionForConversionToResidential).HasMaxLength(100);
            entity.Property(e => e.HearingVisionDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Himsapn)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("HIMSAPN");
            entity.Property(e => e.HistoricBuildingCofOdate)
                .HasColumnType("datetime")
                .HasColumnName("HistoricBuildingCofODate");
            entity.Property(e => e.HistoricBuildingPermitApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitIssueDate).HasColumnType("datetime");
            entity.Property(e => e.HistoricBuildingPermitNumber).IsUnicode(false);
            entity.Property(e => e.HistoricBuildingPermitResearchNotes).IsUnicode(false);
            entity.Property(e => e.LadbsissuedTcodate).HasColumnName("LADBSIssuedTCODate");
            entity.Property(e => e.Ladbsjson)
                .IsUnicode(false)
                .HasColumnName("LADBSjson");
            entity.Property(e => e.LutApplicableAccessibilityStandardId)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.LutBuildingTypeId).HasColumnName("LutBuildingTypeID");
            entity.Property(e => e.LutFhastandardId).HasColumnName("LutFHAStandardId");
            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.LutVoilationChecklistId).HasMaxLength(100);
            entity.Property(e => e.MobilityDesignatedUnitNumbers)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModificationsGrantedByLadbsunitsBuildings)
                .IsUnicode(false)
                .HasColumnName("ModificationsGrantedByLADBSUnitsBuildings");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MostRecentBuldingPermitNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OtherStructureType).HasMaxLength(100);
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PsFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_FileNumber");
            entity.Property(e => e.PsHimsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PS_HIMSNumber");
            entity.Property(e => e.PsPrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PrimaryAPN");
            entity.Property(e => e.PsProjectId).HasColumnName("PS_ProjectId");
            entity.Property(e => e.PsSiteAddress)
                .IsUnicode(false)
                .HasColumnName("PS_SiteAddress");
            entity.Property(e => e.ResidentialParkingRatio)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeniorDesignated)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StructureAttributeId).HasColumnName("StructureAttributeID");
            entity.Property(e => e.StructureAttributeLogId).HasColumnName("StructureAttributeLogID");
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwStructureLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStructureLogs", "AAHR");

            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.BuildingFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateBuilt).HasColumnType("datetime");
            entity.Property(e => e.DateDemolished).HasColumnType("smalldatetime");
            entity.Property(e => e.Label)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Lat).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.Long).HasColumnType("decimal(9, 6)");
            entity.Property(e => e.LutStructureTypeId).HasColumnName("LutStructureTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PsFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_FileNumber");
            entity.Property(e => e.PsHimsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PS_HIMSNumber");
            entity.Property(e => e.PsPrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PrimaryAPN");
            entity.Property(e => e.PsProjectId).HasColumnName("PS_ProjectId");
            entity.Property(e => e.PsSiteAddress)
                .IsUnicode(false)
                .HasColumnName("PS_SiteAddress");
            entity.Property(e => e.RefBuildingId).HasColumnName("RefBuildingID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.SourceRefId)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("SourceRefID");
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StructureId).HasColumnName("StructureID");
            entity.Property(e => e.StructureLogId).HasColumnName("StructureLogID");
            entity.Property(e => e.StructureNo)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTrainingCertificate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTrainingCertificates", "TRN");

            entity.Property(e => e.AudienceCategory)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.CaseId).HasColumnName("CaseID");
            entity.Property(e => e.CaseStatus).HasMaxLength(50);
            entity.Property(e => e.ContactIdentifierId).HasColumnName("ContactIdentifierID");
            entity.Property(e => e.CourseId).HasColumnName("CourseID");
            entity.Property(e => e.CourseName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CourseTypeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocTemplateId).HasColumnName("DocTemplateID");
            entity.Property(e => e.DocumentEntityId).HasColumnName("DocumentEntityID");
            entity.Property(e => e.DocumentNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.FirstName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LutAudienceCd).HasColumnName("LutAudienceCD");
            entity.Property(e => e.LutCourseTypeId).HasColumnName("LutCourseTypeID");
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.RowId).HasColumnName("RowID");
            entity.Property(e => e.TrainingRegistryId).HasColumnName("TrainingRegistryID");
            entity.Property(e => e.TrainingSessionId).HasColumnName("TrainingSessionID");
        });

        modelBuilder.Entity<VwUnitAttributeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUnitAttributeLogs", "AAHR");

            entity.Property(e => e.AgencyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Attributes).IsUnicode(false);
            entity.Property(e => e.AuwaitListPosition)
                .HasMaxLength(9)
                .HasColumnName("AUWaitListPosition");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CreditScreeningFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CurrentProjSitePropSnapShotId).HasColumnName("CurrentProjSitePropSnapShotID");
            entity.Property(e => e.CurrentUnitPropSnapShotId).HasColumnName("CurrentUnitPropSnapShotID");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FloorPlanTypeId).HasColumnName("FloorPlanTypeID");
            entity.Property(e => e.IsAddedToAutl).HasColumnName("IsAddedToAUTL");
            entity.Property(e => e.IsAddedToRarmlog).HasColumnName("IsAddedToRARMLog");
            entity.Property(e => e.IsAdvisedRightToRm).HasColumnName("IsAdvisedRightToRM");
            entity.Property(e => e.IsAvailableFromAuwaitList).HasColumnName("IsAvailableFromAUWaitList");
            entity.Property(e => e.IsAvailableFromTransferAuwaitList).HasColumnName("IsAvailableFromTransferAUWaitList");
            entity.Property(e => e.IsCes).HasColumnName("IsCES");
            entity.Property(e => e.IsCsa).HasColumnName("IsCSA");
            entity.Property(e => e.IsFullyAuneeded).HasColumnName("IsFullyAUNeeded");
            entity.Property(e => e.IsLeaseAddendumProvidedToAcHp).HasColumnName("IsLeaseAddendumProvidedToAcHP");
            entity.Property(e => e.IsVca).HasColumnName("IsVCA");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ListingUnitLogId).HasColumnName("ListingUnitLogID");
            entity.Property(e => e.LutAmiid).HasColumnName("LutAMIID");
            entity.Property(e => e.LutFhatypeId).HasColumnName("LutFHATypeID");
            entity.Property(e => e.LutFixedFloatingUnitId).HasColumnName("LutFixedFloatingUnitID");
            entity.Property(e => e.LutLeaseAddendumNotExecuteReasonId).HasColumnName("LutLeaseAddendumNotExecuteReasonID");
            entity.Property(e => e.LutOccupancyReasonId).HasColumnName("LutOccupancyReasonID");
            entity.Property(e => e.LutRentalSubsidyId).HasColumnName("LutRentalSubsidyID");
            entity.Property(e => e.LutTenantSelectedFromId).HasColumnName("LutTenantSelectedFromID");
            entity.Property(e => e.LutTotalBathroomId).HasColumnName("LutTotalBathroomID");
            entity.Property(e => e.LutTotalBedroomId).HasColumnName("LutTotalBedroomID");
            entity.Property(e => e.LutUnitTypeId).HasColumnName("LutUnitTypeID");
            entity.Property(e => e.MaxDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MaxRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MinDeposit).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinRent).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NotAddedToAutlreason).HasColumnName("NotAddedToAUTLReason");
            entity.Property(e => e.NotAddedToRarmlogReason).HasColumnName("NotAddedToRARMLogReason");
            entity.Property(e => e.OtherOccupancyReason).IsUnicode(false);
            entity.Property(e => e.OtherRentalSubsidy).IsUnicode(false);
            entity.Property(e => e.PreviousProjSitePropSnapShotId).HasColumnName("PreviousProjSitePropSnapShotID");
            entity.Property(e => e.PreviousTenantMoved).HasMaxLength(10);
            entity.Property(e => e.PreviousUnitPropSnapShotId).HasColumnName("PreviousUnitPropSnapShotID");
            entity.Property(e => e.PropSnapshotId).HasColumnName("PropSnapshotID");
            entity.Property(e => e.PsFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_FileNumber");
            entity.Property(e => e.PsHimsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PS_HIMSNumber");
            entity.Property(e => e.PsPrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PrimaryAPN");
            entity.Property(e => e.PsProjectId).HasColumnName("PS_ProjectId");
            entity.Property(e => e.PsSiteAddress)
                .IsUnicode(false)
                .HasColumnName("PS_SiteAddress");
            entity.Property(e => e.ReferralRecipientEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRecipientPhone)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferralRequestDate).HasColumnType("datetime");
            entity.Property(e => e.TenantRequestedBathroomsId).HasColumnName("TenantRequestedBathroomsID");
            entity.Property(e => e.TenantRequestedBedroomsId).HasColumnName("TenantRequestedBedroomsID");
            entity.Property(e => e.TenantRequestedUnitTypeId).HasColumnName("TenantRequestedUnitTypeID");
            entity.Property(e => e.UnitAttributeId).HasColumnName("UnitAttributeID");
            entity.Property(e => e.UnitNum).HasMaxLength(20);
        });

        modelBuilder.Entity<VwUnitLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUnitLogs", "AAHR");

            entity.Property(e => e.Apnid).HasColumnName("APNID");
            entity.Property(e => e.BuildingId).HasColumnName("BuildingID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LevelId).HasColumnName("LevelID");
            entity.Property(e => e.LutUnitAccessibiltyTypeId).HasColumnName("LutUnitAccessibiltyTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.PsFileNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_FileNumber");
            entity.Property(e => e.PsHimsnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PS_HIMSNumber");
            entity.Property(e => e.PsPrimaryApn)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PS_PrimaryAPN");
            entity.Property(e => e.PsProjectId).HasColumnName("PS_ProjectId");
            entity.Property(e => e.PsSiteAddress)
                .IsUnicode(false)
                .HasColumnName("PS_SiteAddress");
            entity.Property(e => e.RefUnitId).HasColumnName("RefUnitID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.SiteAddressId).HasColumnName("SiteAddressID");
            entity.Property(e => e.Source).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitLogId).HasColumnName("UnitLogID");
            entity.Property(e => e.UnitNum).HasMaxLength(20);
        });

        modelBuilder.Entity<VwWaitListCloseDateNotification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWaitListCloseDateNotification", "Listing");

            entity.Property(e => e.ProjectSiteId).HasColumnName("ProjectSiteID");
            entity.Property(e => e.ProjectSiteSnapId).HasColumnName("ProjectSiteSnapID");
        });

        modelBuilder.Entity<WarrantDetail>(entity =>
        {
            entity.ToTable("WarrantDetail", "IMS");

            entity.Property(e => e.WarrantDetailId).HasColumnName("WarrantDetailID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.WarrantRequestedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Inspection).WithMany(p => p.WarrantDetails)
                .HasForeignKey(d => d.InspectionId)
                .HasConstraintName("FK_WarrantDetail_Inspection");
        });

        modelBuilder.Entity<WfAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WF_Transition");

            entity.ToTable("WF_Action", "CC");

            entity.Property(e => e.ActionViewId).HasColumnName("ActionViewID");
            entity.Property(e => e.CaseConditionId).HasColumnName("CaseConditionID");
            entity.Property(e => e.CaseConditionParam).HasMaxLength(200);
            entity.Property(e => e.DefinitionId).HasColumnName("DefinitionID");
            entity.Property(e => e.DestinationStateId).HasColumnName("DestinationStateID");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.SourceStateId).HasColumnName("SourceStateID");

            entity.HasOne(d => d.ActionView).WithMany(p => p.WfActions)
                .HasForeignKey(d => d.ActionViewId)
                .HasConstraintName("FK_WF_Action_WF_ActionView");

            entity.HasOne(d => d.CaseCondition).WithMany(p => p.WfActions)
                .HasForeignKey(d => d.CaseConditionId)
                .HasConstraintName("FK_WF_Action_WF_CaseCondition");

            entity.HasOne(d => d.Definition).WithMany(p => p.WfActions)
                .HasForeignKey(d => d.DefinitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_Action_WF_Definition");

            entity.HasOne(d => d.DestinationState).WithMany(p => p.WfActionDestinationStates)
                .HasForeignKey(d => d.DestinationStateId)
                .HasConstraintName("FK_WF_Action_WF_State_Dest");

            entity.HasOne(d => d.SourceState).WithMany(p => p.WfActionSourceStates)
                .HasForeignKey(d => d.SourceStateId)
                .HasConstraintName("FK_WF_Action_WF_State_Source");

            entity.HasMany(d => d.Roles).WithMany(p => p.Wfactions)
                .UsingEntity<Dictionary<string, object>>(
                    "WfAssnWfactionAccessRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssnWFActionRole_RM"),
                    l => l.HasOne<WfAction>().WithMany()
                        .HasForeignKey("WfactionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WF_AssnWFActionRole_WF_Act"),
                    j =>
                    {
                        j.HasKey("WfactionId", "RoleId").HasName("PK_WF_AssnWFActionRole");
                        j.ToTable("WF_AssnWFActionAccessRole", "CC");
                        j.IndexerProperty<int>("WfactionId").HasColumnName("WFActionID");
                        j.IndexerProperty<int>("RoleId").HasColumnName("RoleID");
                    });

            entity.HasMany(d => d.RolesNavigation).WithMany(p => p.WfactionsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "WfAssnWfactionAssigneeRole",
                    r => r.HasOne<RoleMaster>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WF_AssnWFActionARM"),
                    l => l.HasOne<WfAction>().WithMany()
                        .HasForeignKey("WfactionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_WF_AssnWFAAR_WF_A"),
                    j =>
                    {
                        j.HasKey("WfactionId", "RoleId").HasName("PK_WF_AssnWFActionAR");
                        j.ToTable("WF_AssnWFActionAssigneeRole", "CC");
                        j.IndexerProperty<int>("WfactionId").HasColumnName("WFActionID");
                        j.IndexerProperty<int>("RoleId").HasColumnName("RoleID");
                    });
        });

        modelBuilder.Entity<WfActionView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WF_Action");

            entity.ToTable("WF_ActionView", "CC");

            entity.Property(e => e.Action).HasMaxLength(50);
            entity.Property(e => e.Area).HasMaxLength(50);
            entity.Property(e => e.Controller).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Parameters).HasMaxLength(500);
        });

        modelBuilder.Entity<WfActionViewPermission>(entity =>
        {
            entity.HasKey(e => e.ActionViewPermissionId);

            entity.ToTable("WF_ActionViewPermission", "CC");

            entity.Property(e => e.ActionViewPermissionId).HasColumnName("ActionViewPermissionID");
            entity.Property(e => e.ActionViewId).HasColumnName("ActionViewID");
            entity.Property(e => e.FieldName).HasMaxLength(100);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");

            entity.HasOne(d => d.ActionView).WithMany(p => p.WfActionViewPermissions)
                .HasForeignKey(d => d.ActionViewId)
                .HasConstraintName("FK_WF_ActionViewPermission_WF_ActionView");

            entity.HasOne(d => d.Role).WithMany(p => p.WfActionViewPermissions)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_WF_ActionViewPermission_RoleMaster");
        });

        modelBuilder.Entity<WfCaseCondition>(entity =>
        {
            entity.ToTable("WF_CaseCondition", "CC", tb => tb.HasComment("This table holds condition based on assignee or creator of the case. \r\ne.g. \r\nAssignee/Craetor Only will ignore previlleage to Role category and only the assignee/creator will view the option."));

            entity.Property(e => e.Condition).HasMaxLength(50);
        });

        modelBuilder.Entity<WfDefinition>(entity =>
        {
            entity.ToTable("WF_Definition", "CC");

            entity.Property(e => e.DiagramData).IsUnicode(false);
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.Application).WithMany(p => p.WfDefinitions)
                .HasForeignKey(d => d.ApplicationId)
                .HasConstraintName("FK_WF_Definition_AppMast");
        });

        modelBuilder.Entity<WfState>(entity =>
        {
            entity.ToTable("WF_State", "CC");

            entity.Property(e => e.AutoNextActionId).HasColumnName("AutoNextActionID");
            entity.Property(e => e.DefinitionId).HasColumnName("DefinitionID");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Type).HasMaxLength(10);

            entity.HasOne(d => d.AutoNextAction).WithMany(p => p.WfStates)
                .HasForeignKey(d => d.AutoNextActionId)
                .HasConstraintName("FK_WF_State_WF_Action");

            entity.HasOne(d => d.Definition).WithMany(p => p.WfStates)
                .HasForeignKey(d => d.DefinitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WF_State_WF_Definition1");
        });

        modelBuilder.Entity<WflogDisplayConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WFLog_DisplayConfiguration");

            entity.ToTable("WFLog_DisplayConfig", "CC");

            entity.Property(e => e.LogGroupedBy)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.WfdefinitionId).HasColumnName("WFDefinitionID");

            entity.HasOne(d => d.Wfdefinition).WithMany(p => p.WflogDisplayConfigs)
                .HasForeignKey(d => d.WfdefinitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFLog_DC_WF_Def");
        });

        modelBuilder.Entity<WfnavigationDisplayConfig>(entity =>
        {
            entity.ToTable("WFNavigation_DisplayConfig", "CC");

            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.NavigationStyle).HasMaxLength(50);
            entity.Property(e => e.WfdefinitionId).HasColumnName("WFDefinitionID");

            entity.HasOne(d => d.Wfdefinition).WithMany(p => p.WfnavigationDisplayConfigs)
                .HasForeignKey(d => d.WfdefinitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WFNavigation_DC_WF_Def");
        });

        modelBuilder.Entity<WfstateFlag>(entity =>
        {
            entity.HasKey(e => e.WorkFlowFlagId);

            entity.ToTable("WFStateFlag", "IMS");

            entity.Property(e => e.WorkFlowFlagId).HasColumnName("WorkFlowFlagID");
            entity.Property(e => e.WfstateId).HasColumnName("WFStateID");
        });

        modelBuilder.Entity<WorkExtension>(entity =>
        {
            entity.HasKey(e => e.WorkExtensionId).HasName("PK_Extension");

            entity.ToTable("WorkExtension", "IMS");

            entity.Property(e => e.WorkExtensionId).HasColumnName("WorkExtensionID");
            entity.Property(e => e.ApprovedDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PreferredDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.Inspection).WithMany(p => p.WorkExtensions)
                .HasForeignKey(d => d.InspectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Extension_Inspection");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.WorkExtensions)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Extension_ServiceRequest");
        });

        modelBuilder.Entity<WorkLog>(entity =>
        {
            entity.ToTable("WorkLog", "IMS");

            entity.Property(e => e.WorkLogId).HasColumnName("WorkLogID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.LutWorkLogTypeId).HasColumnName("LutWorkLogTypeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

            entity.HasOne(d => d.LutWorkLogType).WithMany(p => p.WorkLogs)
                .HasForeignKey(d => d.LutWorkLogTypeId)
                .HasConstraintName("FK_WorkLog_LutWorkLogType");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.WorkLogs)
                .HasForeignKey(d => d.ServiceRequestId)
                .HasConstraintName("FK_WorkLog_ServiceRequest");
        });

        modelBuilder.Entity<WorkOrder>(entity =>
        {
            entity.ToTable("WorkOrder", "IMS");

            entity.Property(e => e.WorkOrderId).HasColumnName("WorkOrderID");
            entity.Property(e => e.ContractorId).HasColumnName("ContractorID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateAward).HasColumnType("datetime");
            entity.Property(e => e.DateSignedOff).HasColumnType("datetime");
            entity.Property(e => e.DateSubmittedAcc).HasColumnType("datetime");
            entity.Property(e => e.EncumberedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EstimatedCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ExtendedDueDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.InvoicingDate).HasColumnType("datetime");
            entity.Property(e => e.LateDay).HasMaxLength(50);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PackageId).HasColumnName("PackageID");
            entity.Property(e => e.ReleasedDate).HasColumnType("datetime");
            entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");
            entity.Property(e => e.ServiceTrackingId)
                .HasMaxLength(100)
                .HasColumnName("ServiceTrackingID");
            entity.Property(e => e.TotalWocost)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("TotalWOCost");
            entity.Property(e => e.WcdueDate)
                .HasColumnType("datetime")
                .HasColumnName("WCDueDate");
            entity.Property(e => e.WorkCompletionDate).HasColumnType("datetime");
            entity.Property(e => e.WorkOrderReference)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasComputedColumnSql("(replicate('0',(9)-len(rtrim([WorkOrderID])))+rtrim([WorkOrderID]))", true);
            entity.Property(e => e.WotalliedAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("WOTalliedAmount");

            entity.HasOne(d => d.Contractor).WithMany(p => p.WorkOrders)
                .HasForeignKey(d => d.ContractorId)
                .HasConstraintName("FK_WorkOrder_AssnUserContractor");

            entity.HasOne(d => d.ServiceRequest).WithMany(p => p.WorkOrders)
                .HasForeignKey(d => d.ServiceRequestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WorkOrder_ServiceRequest");
        });

        modelBuilder.Entity<WsdetailViewColumnConfig>(entity =>
        {
            entity.ToTable("WSDetailView_ColumnConfig", "CC");

            entity.Property(e => e.ColumnName).HasMaxLength(20);
            entity.Property(e => e.DisplayName).HasMaxLength(20);
            entity.Property(e => e.LinkTarget).HasMaxLength(20);
            entity.Property(e => e.WsconfigId).HasColumnName("WSConfigId");
            entity.Property(e => e.WsdisplayConfigId).HasColumnName("WSDisplayConfigId");

            entity.HasOne(d => d.Wsconfig).WithMany(p => p.WsdetailViewColumnConfigs)
                .HasForeignKey(d => d.WsconfigId)
                .HasConstraintName("FK_WSDetailView_ColumnConfig_WSView_WSConfig");

            entity.HasOne(d => d.WsdisplayConfig).WithMany(p => p.WsdetailViewColumnConfigs)
                .HasForeignKey(d => d.WsdisplayConfigId)
                .HasConstraintName("FK_WSDetailView_ColumnConfig_WSDetailView_DisplayConfig");
        });

        modelBuilder.Entity<WsdetailViewDisplayConfig>(entity =>
        {
            entity.ToTable("WSDetailView_DisplayConfig", "CC");

            entity.Property(e => e.WsconfigId).HasColumnName("WSConfigId");
            entity.Property(e => e.WstypeId).HasColumnName("WSTypeId");

            entity.HasOne(d => d.Wsconfig).WithMany(p => p.WsdetailViewDisplayConfigs)
                .HasForeignKey(d => d.WsconfigId)
                .HasConstraintName("FK_WSDetailView_DisplayConfig_WSView_WSConfig");
        });

        modelBuilder.Entity<WsgridViewColumnConfig>(entity =>
        {
            entity.ToTable("WSGridView_ColumnConfig", "CC");

            entity.Property(e => e.Alignment).HasMaxLength(20);
            entity.Property(e => e.ColumnName).HasMaxLength(20);
            entity.Property(e => e.DataFormat).HasMaxLength(20);
            entity.Property(e => e.DataType).HasMaxLength(20);
            entity.Property(e => e.DisplayName).HasMaxLength(20);
            entity.Property(e => e.LinkTarget).HasMaxLength(20);
            entity.Property(e => e.SortingDir).HasMaxLength(20);
            entity.Property(e => e.SortingType).HasMaxLength(20);
            entity.Property(e => e.WsconfigId).HasColumnName("WSConfigId");
            entity.Property(e => e.WsdisplayConfigId).HasColumnName("WSDisplayConfigId");

            entity.HasOne(d => d.Wsconfig).WithMany(p => p.WsgridViewColumnConfigs)
                .HasForeignKey(d => d.WsconfigId)
                .HasConstraintName("FK_WSGridView_ColumnConfig_WSView_WSConfig");

            entity.HasOne(d => d.WsdisplayConfig).WithMany(p => p.WsgridViewColumnConfigs)
                .HasForeignKey(d => d.WsdisplayConfigId)
                .HasConstraintName("FK_WSGridView_ColumnConfig_WSGridView_DisplayConfig");
        });

        modelBuilder.Entity<WsgridViewDisplayConfig>(entity =>
        {
            entity.ToTable("WSGridView_DisplayConfig", "CC");

            entity.Property(e => e.IsExportPdf).HasColumnName("IsExportPDF");
            entity.Property(e => e.ViewAllUrl).HasColumnName("ViewAllURL");
            entity.Property(e => e.WsconfigId).HasColumnName("WSConfigId");

            entity.HasOne(d => d.Wsconfig).WithMany(p => p.WsgridViewDisplayConfigs)
                .HasForeignKey(d => d.WsconfigId)
                .HasConstraintName("FK_WSGridView_DisplayConfig_WSView_WSConfig");
        });

        modelBuilder.Entity<WsviewWsconfig>(entity =>
        {
            entity.ToTable("WSView_WSConfig", "CC");

            entity.Property(e => e.WstypeId).HasColumnName("WSTypeId");
            entity.Property(e => e.Wsurl).HasColumnName("WSUrl");

            entity.HasOne(d => d.Wstype).WithMany(p => p.WsviewWsconfigs)
                .HasForeignKey(d => d.WstypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WSView_WSConfig_WSView_WSType1");
        });

        modelBuilder.Entity<WsviewWstype>(entity =>
        {
            entity.ToTable("WSView_WSType", "CC");

            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .IsFixedLength();
        });
        modelBuilder.HasSequence<int>("orderseq")
            .StartsAt(0L)
            .IncrementsBy(100);
        modelBuilder.HasSequence("SeqAcHPCert", "AAHPCC");
        modelBuilder.HasSequence("SeqAcHPCertAdopt", "AAHPPC");
        modelBuilder.HasSequence("SeqAcHPCourse", "TRN").StartsAt(82L);

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
