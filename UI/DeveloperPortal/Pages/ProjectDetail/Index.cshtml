@page
@model DeveloperPortal.Pages.ProjectDetails.IndexModel
@{
	ViewData["Title"] = "Project Details";
}
<style>
	/* === Layout helpers used by tables/sections === */
.table-responsive .row { margin-bottom: 15px; }
.datatbl { width: 100% !important; }
#unitKgrid .k-grid-add { margin-right: 110px; }
.k-grid-content tr:last-child { border-bottom: 1px solid lightgray; }

/* Tab: Site Information pagination fixes (plugin uses <li><a>) */
#tabSiteInformation .pagination { display: list-item !important; text-align: start; }
#tabSiteInformation .paginate_button a { margin-left: -5px !important; }
#tabSiteInformation .paginate_button:first-child a { margin-left: -5px; }

/* Generic DataTables pager alignment */
a.paginate_button { float: left !important; }
.paginate_button:first-child a {
  margin-left: 0;
  border-top-left-radius: .25rem;
  border-bottom-left-radius: .25rem;
}
.paginate_button:last-child a {
  border-top-right-radius: .25rem;
  border-bottom-right-radius: .25rem;
}
.paginate_button.active a { color: #fff !important; background: #2C3E5C; }

/* === Consolidated DataTables pagers (3 IDs share the same look) === */
#dtPrkingData_paginate a.paginate_button,
#dtSiteData_paginate a.paginate_button,
#dtPermitNumberData_paginate a.paginate_button {
  position: relative;
  padding: .5rem .75rem !important;
  margin: 1px !important;
  line-height: 1.25;
  color: #fff !important;
  background-color: #2C3E5C !important;
  border: 1px solid #2C3E5C !important;
}

#dtPrkingData_paginate .paginate_button:hover,
#dtSiteData_paginate .paginate_button:hover,
#dtPermitNumberData_paginate .paginate_button:hover,
#dtPrkingData_paginate .paginate_button.current,
#dtSiteData_paginate .paginate_button.current,
#dtPermitNumberData_paginate .paginate_button.current {
  color: #fff !important;
  border: 1px solid #111 !important;
  background: #111 !important;
}

/* === Project Checklist (same card feel as summary) === */
.tpp-checklist {
  background: #fff;
  border: 1px solid #e5e7eb;
  border-radius: 14px;
  box-shadow: 0 10px 25px rgba(0,0,0,.06);
  overflow: hidden; /* keeps header/body corners rounded */
}
.tpp-checklist__header {
  background: #fafafa; /* match summary spacing, lighter header */
  padding: 10px 14px;
  display: flex;
  align-items: center;
  gap: 12px;
}
.tpp-checklist__header h3 { margin: 0; }
.tpp-checklist__header .progressbar {
  flex: 1 1 auto;
  height: 8px;
  background: #eef2f7;
  border-radius: 999px;
  overflow: hidden;
}
.tpp-checklist__header .progressbar > span {
  display: block; height: 100%; width: 0;
  background: linear-gradient(90deg, #2563eb, #7c3aed);
  transition: width .35s ease;
}
.tpp-checklist__body { padding: 16px; }


.tpp-steps {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 12px;
  margin: 0; padding: 0; list-style: none;
}
.tpp-step {
  display: flex; align-items: center; gap: 12px;
  padding: 10px 12px;
  border: 1px solid #e5e7eb;
  border-radius: 10px;
  background: #fff;
  cursor: pointer;
}
.tpp-step.locked { opacity: .6; cursor: not-allowed; }
.tpp-step-idx {
  width: 26px; height: 26px; flex: 0 0 26px;
  display: inline-flex; align-items: center; justify-content: center;
  border-radius: 999px; font-weight: 700; font-size: 12px;
  background: #eef2ff; color: #2563eb;
}
.tpp-step.complete .tpp-step-idx { background: #ecfdf5; color: #16a34a; }
.tpp-step-label { font-weight: 600; flex: 1 1 auto; }
.tpp-step-badge {
  margin-left: auto;
  font-size: 12px;
  padding: 4px 8px;
  border-radius: 999px;
  border: 1px solid #e5e7eb;
  color: #6b7280;
}
.tpp-step.complete .tpp-step-badge { color: #16a34a; border-color: #bbf7d0; background: #f0fdf4; }

/* Reusable page gutter so cards align (replaces inline styles) */
.tpp-gutter { padding-left: 10px; padding-right: 10px; }

@@media (min-width: 1200px) {
  .tpp-gutter { padding-left: 22px; padding-right: 22px; }
}

/* Visually unstyled button that still behaves like a button */
.tablink-plain{
  background: none;
  border: 0;
  padding: 0;
  margin: 0;
  color: inherit;        /* same color as surrounding text */
  font: inherit;         /* inherit font/size/weight */
  cursor: pointer;
  text-decoration: none; /* remove underline; add on hover if you like */
}
.tablink-plain:hover{ text-decoration: underline; }
.tablink-plain:focus{
  outline: 2px solid #94a3b8;   /* visible focus ring */
  outline-offset: 2px;
}


</style>

@* Page Script *@

<script src="~/PageScripts/ProjectDetail/ProjectInformation.js"></script>
<script src="~/PageScripts/ProjectDetail/UnitMatrixInformation.js"></script>
<script src="~/PageScripts/ProjectDetail/ParkingInformation.js"></script>
<script src="~/PageScripts/ProjectDetail/LadbsInfomation.js"></script>
<script src="~/PageScripts/BuildingIntake/BuildingInformation.js"></script>
<script src="~/PageScripts/ProjectDetail/SiteInformation.js"></script>
<script src="~/pagescripts/ProjectDetail/DMS.js"></script>
<script src="~/pagescripts/ProjectDetail/FundingSource.js"></script>
<div class="page-content">
    <div class="container-fluid">
    <!-- Project Notification -->
    @* Project Notification *@
    @if (Model.ProjectSummary?.ReviewNote != null && Model.ProjectSummary.ReviewNote.Any())
    {
        <div class="project-notifications mt-4">
            <div class="bg-warning1 p-3 text-center position-relative">
                <span class="close-btn"></span>
                <p>
                    <b>You have new comments on @Model.ProjectSummary.ProjectName:</b>
                    <br />
                    @foreach (var note in Model.ProjectSummary.ReviewNote)
                    {
                        @note <br />
                    }
                </p>
            </div>
        </div>
    }

    <!-- End Project Notification -->
    </div>
	<div class="tpp-gutter">
        @{
            Html.RenderPartial("_ProjectSummary", Model.ProjectSummary);
        }
    </div>
	
	<br />

	<!-- Project Checklist (same card style as summary) -->


	<div class="tpp-gutter">
		<section class="tpp-checklist" id="panel-checklist" aria-label="Project Checklist">
		  <div class="tpp-checklist__header">
			<h4>Project Checklist</h4>
			
		  </div>

		  <div class="tpp-checklist__body">
			<ol class="tpp-steps" id="steps">
			  
			 <li class="tpp-step step" data-step="Documents">
				<span class="tpp-step-idx idx">1</span>
					<button class="tablink-plain"  onclick="ProjectInformation.openTab(event, 'tabDocuments')">Project Documents</button>
				<span class="tpp-step-badge badge">Required</span>
			  </li>
			  <li class="tpp-step step" data-step="team">
				<span class="tpp-step-idx idx">2</span>
					<button class="tablink-plain" onclick="ProjectInformation.openTab(event, 'tabProjectParticipants')">Project Team Information</button>
				<span class="tpp-step-badge badge">Required</span>
			  </li>
			  <li class="tpp-step step" data-step="site">
				<span class="tpp-step-idx idx">3</span>
					<button   class="tablink-plain"  onclick="ProjectInformation.openTab(event, 'tabSiteInformation')" id="btnSiteInformation">Site Information </button>
				<span class="tpp-step-badge badge">Required</span>
			  </li>
			  <li class="tpp-step step" data-step="floor">
				<span class="tpp-step-idx idx">5</span>
					<button  class="tablink-plain"  onclick="ProjectInformation.openTab(event, 'partialContainer')">Floor Plan Type</button>
				<span class="tpp-step-badge badge">Required</span>
			  </li>
			  <li class="tpp-step step" data-step="Building & Units">
				<span class="tpp-step-idx idx">6</span>
				  <button  class="tablink-plain"   onclick="ProjectInformation.openTab(event, 'tabProjectInformation')" id="btnProjectInformation">Building & Unit Information </button>
				<span class="tpp-step-badge badge">Required</span>
			  </li>
			  <li class="tpp-step step" data-step="parking">
				<span class="tpp-step-idx idx">7</span>
				<span class="tpp-step-label">Parking Information</span>
				<span class="tpp-step-badge badge">Required</span>
			  </li>
			  <li class="tpp-step step" data-step="Funding">
				<span class="tpp-step-idx idx">7</span>
				 <button  class="tablink-plain"  onclick="ProjectInformation.openTab(event, 'tabFundingSource')">Funding Source</button>
				<span class="tpp-step-badge badge">Required</span>
			  </li>
			 @*  <button class="tablinks hide" onclick="ProjectInformation.openTab(event, 'tabLogs')">Plan Review</button> *@
		@* 	   <li class="tpp-step step locked" data-step="building">
				<span class="tpp-step-idx idx">4</span>
				<span class="tpp-step-label">Building Information</span>
				<span class="tpp-step-badge badge">Locked</span>
			  </li> *@
			</ol>
		  </div>
		</section>
	</div>

	<br />

	<div class="tpp-gutter">
		<!-- Tab content -->
		<div id="tabProjectInformation" class="tabcontent">
			@{
				Html.RenderPartial("_ProjectInformation");
			}
		</div>
		<div id="partialContainer" class="tabcontent">
			@{
				Html.RenderPartial(@"~/Pages/FloorPlanType/_FloorPlanType.cshtml", Model.FloorPlanTypes);
			}
		</div>
		<div id="tabSiteInformation" class="tabcontent">
			<table id="dtSiteData"></table>
		</div>
		<div id="tabImportantDates" class="tabcontent">
			<div id="divImportantDates"></div>
		</div>
		<div id="tabProjectParticipants" class="tabcontent">
			<div id="divProjectParticipants"></div>
		</div>
		<div id="tabPolicyContacts" class="tabcontent">
			<div id="divPolicyContacts"></div>
		</div>
		<div id="tabDocuments" class="tabcontent"  style="display: block">
			<div id="divDocument"></div>
		</div>
		<div id="tabFundingSource" class="tabcontent">
			<div id="divFundingSource"></div>
		</div>
		<div id="tabLogs" class="tabcontent">
			<div id="divLogs"></div>
		</div>
	</div>
</div>

@{
	Html.RenderPartial("UploadUnitInfo", Model.ProjectSummary);
}
<div id="Help">
	@{
		Html.RenderPartial("_Help", Model.ProjectSummary);
	}
</div>

@* <!--START Printing Deatils Popup -->
<div class="modal" id="printDetailsPopup" data-backdrop="static" aria-labelledby="LinkPropertyPopupTitle" aria-modal="true" role="dialog" tabindex="-1" aria-hidden="true" style="overflow: hidden;">
	<div class="modal-dialog modal-dialog-centered" role="document">
		<div class="modal-content" style="width:660px">
			<div class="modal-header">
				<div class="modal-title" id="EditAccountTitle">Print Case Details</div>
			</div>

			<div class="row">
				<div id="checkboxContainerPart1" class="col-md-5" style="margin-left:20px">  </div>
				<div id="checkboxContainerPart2" class="col-md-5" style="margin-left:20px"> </div>
			</div>

			<div class="modal-footer multi-button">
				<button id="cancelButton" class="modal-button left-button">Cancel</button>
				<button id="printButton" class="modal-button right-button">Print Details</button>

			</div>
		</div>
	</div>
</div> *@

<script type="text/javascript">
	var baseUrl = window.location.origin;
	var Id = @Model.Id;
	var ProjectId = @Model.ProjectId;
	var isEditAccess = true;
	var reloadUntiGrid = false;
	var documentControlViewModelId = 7313;
	var logsControlViewModelId = 1006;
	var ContactControlViewModelId = 1028;
	// var PolicyContactControlViewModelId = 12505;
	var popupCaseId = 0;
	var popuprefProjectSiteID = 0;
	var popupTitle = "";
	var oldPageSize = 0;
	var selectedEvents = [];
	var reloadParkingGrid = false;
	var accessType="FULLACCESS";
	var SiteInformationData = [];
	var IsLoadSiteInformationTab = false;
	$.fn.dataTableExt.pager.numbers_length = 50;

	//Load on init
	UnitMatrixInformation.LoadUnitMatrix();
	BuildingInformation.load();
	SiteInformation.LoadSiteInformation()


</script>


<script>
  (function () {
    function showDocsDefault() {
      // 1) Try the top tab bar button first
      var btnDocs =
        document.getElementById('btnDocuments') ||
        document.querySelector('.tab .tablinks[onclick*="tabDocuments"]') ||
        // 2) Then try the checklist trigger
        document.querySelector('[id="lnkChecklistDocuments"], .tpp-checklist [onclick*="tabDocuments"], .tpp-checklist [data-target="tabDocuments"]');

      // If we found any real trigger, click it (lets your existing logic run)
      if (btnDocs && typeof btnDocs.click === 'function') {
        btnDocs.click();
        return;
      }

      // 3) Hard fallback: manually show the pane and set active state
      var panes = document.querySelectorAll('.tabcontent');
      panes.forEach(el => el.style.display = 'none');
      var docsPane = document.getElementById('tabDocuments');
      if (docsPane) docsPane.style.display = 'block';

      // best-effort: mark whichever button exists as active
      var active = document.querySelector('.tab .tablinks.active');
      if (active) active.classList.remove('active');
      var topBtn = document.getElementById('btnDocuments');
      if (topBtn) topBtn.classList.add('active');
    }

    // Run AFTER everything else wires up (other scripts may set a default)
    window.addEventListener('load', function () {
      setTimeout(showDocsDefault, 0);
    });
  })();
</script>