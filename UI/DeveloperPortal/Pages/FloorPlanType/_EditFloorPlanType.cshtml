@model DeveloperPortal.Domain.ProjectDetail.FloorPlanTypeModel
@* popup for delete 	 *@
<div id="deletefloorPlanAlert" class="alert alert-primary alert-dismissible fade show" role="alert" style="display:none;">
        <span id="deletefloorPlanAlertMessage">Floor Plan updated successfully!</span>
    </div>

<form id="editFloorPlanForm" method="post" asp-controller="FloorPlanType" asp-action="_EditFloorPlanType" style="overflow-x:hidden;">
	<div class="row">
		<div class="col-md-6 mb-3">
			<input type="hidden" name="FloorPlanTypeID" value="@Model.FloorPlanTypeID" />
			<label class="wraping_label" for="floorplan_edit">Floor Plan Type <span class="text-danger">*</span></label>
			<input type="hidden" name="ProjectID" value="@Model.ProjectID" />
			<input class="form-control" type="text" id="floorplan_edit" name="Name" value="@Model.Name" autocomplete="off" />
			<div class="invalid-feedback"></div>
			<span class="text-danger" id="lblError_fp_floorplan_edit"></span>
		</div>
		<div class="col-md-6 mb-3">
			<label class="wraping_label" for="squarefeet_edit">Square Footage <span class="text-danger">*</span></label>
			<input class="form-control" type="number" name="SquareFeet" min="0" id="squarefeet_edit" onkeydown="javascript: return event.keyCode == 69 ? false : true" value="@Model.SquareFeet" maxlength="5" />
			<div class="invalid-feedback"></div>
			<span class="text-danger" id="lblError_fp_squarefeet_edit"></span>
		</div>
	</div>
	<div class="row">
		<div class="col-md-6 mb-3">
			<label class="wraping_label" for="bedroom_edit">Number of Bedroom <span class="text-danger">*</span></label>
			<select class="form-control" id="bedroom_edit" name="LutTotalBedroomID">
				<option>Select</option>
				@foreach (var bedroom in Model.LutTotalBedrooms)
				{
					var isSelected = bedroom.Value == Model.LutTotalBedroomID.ToString() ? "selected" : "";
					@:<option value="@bedroom.Value" @isSelected>@bedroom.Text</option>
				}
			</select>
			<div class="invalid-feedback"></div>
			<span class="text-danger" id="lblError_fp_bedroom_edit"></span>
		</div>

	</div>
	<div class="row">
		<div class="col-md-6 mb-3 ">
			<label class="wraping_label" for="bathroom_edit">Number of Bathroom <span class="text-danger">*</span></label>
			<select class="form-control" id="bathroom_edit" onchange="FloorPlanType.onSelectBathroomCount_Edit();" name="LutTotalBathroomID" autocomplete="off">
				<option>Select</option>
				@foreach (var bathroom in Model.LutTotalBathrooms)
				{
					var isSelected = bathroom.Value == Model.LutTotalBathroomID.ToString() ? "selected" : "";
					@:<option value="@bathroom.Value" @isSelected>@bathroom.Text</option>
				} 
			</select>
			<div class="invalid-feedback"></div>
			<span class="text-danger" id="lblError_fp_bathroom_edit"></span>
		</div>
	</div>
	<div class="row">
		<div class="col-md-12" id="bathroomTypeDiv_edit">
			<h6>Bathroom Type  <span class="text-danger">*</span></h6>
			<table class="table table-bordered text-center table-fixed">
				<thead>
					<tr>
						<th>Sr. no.</th>
						<th>Type</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
					@for (int i = 0; i < Model.FloorPlanBathroomType.Count; i++)
					{
						var isFull = Model.FloorPlanBathroomType.ElementAt(i).LutBathroomTypeID == 3;
						var selectedValue = Model.FloorPlanBathroomType[i].LutBathroomTypeID.ToString();
						<tr>
							<td>@(i + 1)</td>
							<td>
								<select class="form-control edit_bTypes" name="bathroomTypes" id="bTypes_@(i)_edit" onchange="FloorPlanType.toggleBathroomOptionEdit(this);" required>
									<option value="0">-- Select Bathroom Type --</option>
									@foreach (var type in Model.LutBathroomType)
									{
										var isSelected = type.Value == selectedValue ? "selected" : "";
										@:<option value="@type.Value" @isSelected>@type.Text</option>
									}
								</select><span class="text-danger" id="bTypes_@(i)_edit_span"></span>
							</td>
							<td>
								<select class="form-control" name="bathroomOption" style="@( !isFull ? "display:none;" : "" )" id="bTypes_@(i)_edit_option" @(isFull ? "required" : "")>
									<option value="0">-- Select Bathroom Option --</option>
									@{
										var selectedOptionValue = Model.FloorPlanBathroomType.ElementAt(i).LutBathroomTypeOptionID.ToString();
									}
									@foreach (var type in Model.LutFloorBathrommOptions)
									{
										var isSelected = type.Value == selectedOptionValue ? "selected" : "";
										@:<option value="@type.Value" @isSelected>@type.Text</option>
									}
								</select>

								<span class="text-danger" style="@(!isFull ? "display:none;" : "")" id="bTypes_0_edit_span_option"></span>

							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
	<div class="row">

		<div class="row">
			<div class="col-md-6 mb-3" id="bathroomTypeDiv">
			</div>
		</div>

	</div>

<div class="row">
	 <div class="col-md-12">
		 <div class="table-responsive">
		<table class="table table-bordered table-striped align-middle w-100" id="existingFilesTable">

        <thead class="table-light">
            <tr>
                <th>Document Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.File != null && Model.File.Any())
            {
                foreach (var file in Model.File)
                {
                    <tr id="fileRow_@file.Name">
                        <td class="text-wrap" style="max-width: 300px;">@file.Name</td>
                        <td>
                            <div class="d-flex flex-row align-items-center">
                                <!-- Download Button -->
								<button type="button"
										class="btn btn-sm"
										style="background-color: #135b79; color: #fff; padding: 0.25rem 0.5rem;"
										onclick="downloadFileWithProgress('@Url.Action("DownloadDocument", "FundingSource", new { fileName = file.Name, filePath = file.URl })', '@file.Name')">
									<i class="fas fa-download fa-sm"></i>
								</button>

								<!-- Delete Button -->
								<button type="button"
										class="btn btn-sm btn-danger"
										onclick="FloorPlanType.deleteFloorPlanFile('@file.DocID', '@file.Name')">
									<i class="fas fa-trash-alt fa-sm"></i>
								</button>

                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="2" class="text-center">No files uploaded</td>
                </tr>
            }
        </tbody>
    </table>
	</div>
	</div>
</div>

<div class="row">
	<div class="col-md-12">
		<div id="divDropZoneFloorPlanEdit" class="custom-dropzone d-flex flex-wrap dz-clickable">
			<div class="dz-message">
				<strong class="drop-strong">➜ Drop files</strong>
				<span class="drop-light">to upload</span>
				<div class="drop-small">(or click)</div>
			</div>
		</div>

		<div class="text-left mt-2">
			<small>
				Supported files: .gif, .jpeg, .jpg, .pdf, .png <br>
				Max. file size: 20Mb
			</small>
		</div>					
	</div>
	</div>
</form>
@* <script>
    window.FloorPlanEditData = {
        FloorPlanTypeID: @Model.FloorPlanTypeID,
        ExistingFiles: @Html.Raw(Json.Serialize(Model.File)) 
    };
</script> *@
<script src="@Url.Content("~/PageScripts/FloorPlanType/FloorPlanType.js")"></script>
<script>
	var FloorPlanType = FloorPlanType || {};
	FloorPlanType.LutBathroomType = @Html.Raw(Json.Serialize(Model.LutBathroomType));
	FloorPlanType.LutFloorBathrommOptions = @Html.Raw(Json.Serialize(Model.LutFloorBathrommOptions));

		 function downloadFileWithProgress(url, fileName) {
		   LoadingOverlay.show();
		   
			fetch(url)
				.then(response => {
					if (!response.ok) {
						throw new Error(`Download failed: ${response.status}`);
					}
					return response.blob();
				})
				.then(blob => {
					// Create and trigger download
					const downloadUrl = window.URL.createObjectURL(blob);
					const a = document.createElement('a');
					a.href = downloadUrl;
					a.download = fileName;
					document.body.appendChild(a);
					a.click();

					// Cleanup
					document.body.removeChild(a);
					window.URL.revokeObjectURL(downloadUrl);
				 
					// Hide loading overlay
					LoadingOverlay.hide();
				})
				.catch(error => {
				 
					console.error('Download error:', error);
					LoadingOverlay.hide();
					alert('Download failed');
				});
		}
		


</script>