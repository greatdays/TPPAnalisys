@model DMSModel
@using DeveloperPortal.Domain.DMS
@using Newtonsoft.Json

<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">Project Documents</h5>
        <button type="button" id="btn-add-file" class="btn btn-primary">
            <i class="fas fa-plus"></i> Add Document
        </button>
    </div>

    <!-- Documents Table -->
    <div class="table-responsive">
        <table id="dmsDataTable" class="table table-striped table-bordered align-middle w-100">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Filename</th>
                    <th>Category</th>
                    <th>Uploader</th>
                    <th>Comment</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.FolderModel?.Files != null && Model.FolderModel.Files.Any())
                {
                    foreach (var file in Model.FolderModel.Files)
                    {
                        var driveFileId = !string.IsNullOrEmpty(file.Link) ? file.Link : "";

                        <tr>
                            <td>@file.UploadedDate.ToString("MM/dd/yyyy")</td>
                            <td><span title="@file.Name">@file.Name</span></td>
                            <td>@file.Category</td>
                            <td>@file.UploadedBy</td>
                      @*       <td>@file.Roles</td> *@
                            <td></td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(file.Link))
                                {
                                    <a href="javascript:void(0)"
                                       onclick="downloadFileWithProgress('@Url.Action("DownloadDocument", "DMS", new { fileName = file.Name, filePath = driveFileId })', '@file.Name')"
                                       class="btn btn-sm btn-primary" title="Download @file.Name">
                                        <i class="fas fa-download"></i> Download
                                    </a>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <!-- Important: leave tbody empty, DataTables will inject "emptyTable" message -->
                }
            </tbody>

        </table>
    </div>
</div>

@{
    string projectIdFromName = "";

    if (Model?.FolderModel?.Name != null)
    {
        var folderNameParts = Model.FolderModel.Name.Split('_');
        projectIdFromName = folderNameParts.Length > 1 ? folderNameParts[^1] : Convert.ToString(Model.ProjectId);
    }
    else
    {
        projectIdFromName = Convert.ToString(Model.ProjectId);
    }
}

<!-- Hidden Inputs -->
<input type="hidden" id="ProjectId" value="@projectIdFromName" />
<input type="hidden" id="FolderName" value="@Model.FolderModel?.Name" />
<input type="hidden" id="FolderId" value="@Model.FolderModel?.Id" />

<!-- Include File Upload Modal Partial -->
@await Html.PartialAsync("~/Pages/DMS/_FileUploadModal.cshtml", Model)

<!-- Configuration Script -->
<script>
    // Configure DMS with server-side values
    window.dmsConfig = {
        uploadUrl: '@Url.Action("UploadFile", "DMS")',
        reloadUrl: '@Url.Action("GetFilesById", "DMS")',
        projectId: '@projectIdFromName',
        folderName: '@(Model.FolderModel?.Name ?? "")',
        folderId: '@(Model.FolderModel?.Id ?? "")'
    };

    function downloadFileWithProgress(url, fileName) {
        LoadingOverlay.show();

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Download failed: ${response.status}`);
                }
                return response.blob();
            })
            .then(blob => {
                // Create and trigger download
                const downloadUrl = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = downloadUrl;
                a.download = fileName;
                document.body.appendChild(a);
                a.click();

                // Cleanup
                document.body.removeChild(a);
                window.URL.revokeObjectURL(downloadUrl);

                // Hide loading overlay
                LoadingOverlay.hide();
            })
            .catch(error => {
                console.error('Download error:', error);
                LoadingOverlay.hide();
                alert('Download failed');
            });
    }
</script>

<style>
    /* Custom styles for better UX */
    .table th {
        background-color: #f8f9fa;
        border-top: 2px solid #dee2e6;
        font-weight: 600;
    }

    .btn-sm {
        font-size: 0.875rem;
    }

    #dmsDataTable tbody tr:hover {
        background-color: #f8f9fa;
    }

    /* Empty table row styling */
    .no-data-row td {
        background-color: #f8f9fa !important;
        border: 1px solid #dee2e6 !important;
        font-style: italic;
    }
</style>
