@using DeveloperPortal.Domain.ProjectDetail
@model BuildingModel
<div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-xl">
    <div class="modal-content">
        <div class="modal-header">
            <h4 class="modal-title">Add Building</h4>
            <button type="button" class="close" data-bs-dismiss="modal"><i class="far fa-times-circle"></i></button>
        </div>
        @* @using (Ajax.BeginForm("SaveAddBuildingFromNewCompliance", "BuildingIntake", FormMethod.Post, new AjaxOptions
        {
            HttpMethod = "POST",
            InsertionMode = InsertionMode.Replace,
            OnBegin = "return BeginSaveAddBuilding();",
            OnSuccess = "SuccessSaveAddBuilding"
        }, new { id = "frmSaveAddBuilding" }))
        { *@
            <div class="modal-body">
                @Html.HiddenFor(m => m.siteAddressId)
                @Html.HiddenFor(m => m.ProjectId)
                @Html.HiddenFor(m => m.APNId)
                @Html.HiddenFor(m => m.IsAddAddress)
                <!-- Modal body -->
                <div class="form-row">
                    <div class="col-md-12 mb-1">
                        @Html.LabelFor(model => model.ProjectSiteId, "Site", new { @class = " control-label required-label" })
                        @Html.DropDownListFor(x => x.ProjectSiteId, new SelectList(Model.SiteList, "Value", "Text"), "Select Site", new { @class = "form-control", @name = "Comment", @id = "ProjectSiteId" })
                        @Html.ValidationMessageFor(model => model.ProjectSiteId, "", new { @class = "text-danger" })
                    <p id="LblProjectSiteId" class="text-danger"></p>

                    </div>
                </div>
                <div class="form-row">
                    <div class="col-md-12 mb-1">
                        @Html.LabelFor(model => model.BuildingName, "Building Name", new { @class = " control-label required-label" })
                        @Html.TextBoxFor(x => x.BuildingName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BuildingName, "", new { @class = "text-danger" })
                        <p id="LblAssigneeValidation" class="text-danger"></p>
                    </div>
                </div>
                <div id="divExistingAddress">
                    <div class="form-row">
                        <div class="col-md-12 mb-1">
                            @Html.LabelFor(model => model.BuildingAddressID, "Building Address", new { @class = " control-label required-label" })
                            @Html.DropDownListFor(x => x.BuildingAddressID, new SelectList(Model.BuildingAddressList, "Value", "Text"), "Choose Building Address", new { @class = "form-control", @name = "Comment", @id = "BuildingAddressID" })
                            @Html.ValidationMessageFor(model => model.BuildingAddressID, "", new { @class = "text-danger" })
                        <p id="LblBuildingAddress" class="text-danger"></p>

                        </div>
                    </div>
                </div>
                <div class="form-row mb-3">
                    <div class="col-md-12 mb-1">
                        <div class="custom-control custom-checkbox">
                            <input type="checkbox" class="ChkbxBedrooms custom-control-input" value="0" id="AddAddress" onclick="HideShowAddressPanel();">
                            <label class="custom-control-label" for="AddAddress">Add AddressInfo</label>
                        </div>
                    </div>
                </div>
                <div id="divAddressDetails" style="display:none">
                    <div class="form-row mb-2">
                        @Html.LabelFor(model => model.HouseNum, new { @class = "col-md-4 control-label" })
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.HouseNum, new { @class = "form-control", maxlength = 9, placeholder = "House Number", @autocomplete = "address-line1", @type = "number" })
                            @Html.ValidationMessageFor(model => model.HouseNum, "", new { @class = "text-danger", @role = "alert" })
                        </div>
                    </div>
                    <div class="form-row mb-2">
                        @Html.LabelFor(model => model.HouseFracNum, new { @class = "col-md-4 control-label" })
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.HouseFracNum, new { @class = "form-control", maxlength = 10, placeholder = "Fraction", @aria_label = "HouseFracNum" })
                            @Html.ValidationMessageFor(model => model.HouseFracNum, "", new { @class = "text-danger", @role = "alert" })
                        </div>
                    </div>
                    <div class="form-row mb-2">
                        @Html.LabelFor(model => model.LutPreDirCd, new { @class = "col-md-4 control-label" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.LutPreDirCd, new SelectList(Model.LutPreDirCdList, "LutPreDirCD", "LutPreDirCD"), "Select", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.LutPreDirCd, "", new { @class = "text-danger", @role = "alert" })
                        </div>
                    </div>
                    <div class="form-row mb-2">
                        @Html.LabelFor(model => model.StreetName, new { @class = "col-md-4 control-label required-label" })
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.StreetName, new { @class = "form-control", maxlength = 50, placeholder = "StreetName", @autocomplete = "address-level3" })
                            @Html.ValidationMessageFor(model => model.StreetName, "", new { @class = "text-danger", @role = "alert" })
                        </div>
                    </div>
                    <div class="form-row mb-2">
                        @Html.LabelFor(model => model.LutStreetTypeCD, new { @class = "col-md-4 control-label" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.LutStreetTypeCD, new SelectList(Model.LutStreetTypeList, "LutStreetTypeCd", "LutStreetTypeCd"), "Select", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.LutStreetTypeCD, "", new { @class = "text-danger", @role = "alert" })
                        </div>
                    </div>
                    <div class="form-row mb-2">
                        @Html.LabelFor(model => model.City, new { @class = "col-md-4 control-label required-label" })
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.City, new { @class = "form-control", maxlength = 20, placeholder = "City", @autocomplete = "address-level2" })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger", @role = "alert" })
                        </div>
                    </div>
                    <div class="form-row mb-2">
                        @Html.LabelFor(model => model.LutStateCD, new { @class = "col-md-4 control-label required-label" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(model => model.LutStateCD, new SelectList(Model.LutStateCDList, "LutStateCD", "Description"), "Select", new { @class = "form-control", @aria_label = "LutStateCD", @autocomplete = "address-level1" })
                            @Html.ValidationMessageFor(model => model.LutStateCD, "", new { @class = "text-danger", @role = "alert" })
                        </div>
                    </div>
                    <div class="form-row mb-2">
                        @Html.LabelFor(model => model.Zip, new { @class = "col-md-4 control-label required-label" })
                        <div class="col-md-8 ">
                            @Html.TextBoxFor(model => model.Zip, new { @class = "form-control", maxlength = 5, placeholder = "ZipCode", @autocomplete = "postal-code", @type = "number" })
                            @Html.ValidationMessageFor(model => model.Zip, "", new { @class = "text-danger", @role = "alert" })
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="col-md-12 mb-1">
                    @Html.LabelFor(model => model.NumberofUnits, "Number of Units", new { @class = " control-label required-label" })
                        @Html.TextBoxFor(model => model.NumberofUnits, new { @class = "form-control", @maxlength = "15" })
                        @Html.ValidationMessageFor(model => model.NumberofUnits, "", new { @class = "text-danger" })
                        <p id="Lblnumbertext" class="text-danger"></p>
                        <p id="LblNumberOfUnit" class="text-danger"></p>
                    </div>
                </div>
                <div class="form-row">
                    <div class="col-md-12 mb-1">
                        @Html.LabelFor(model => model.BuildingDescription, new { @class = "control-label" })
                        <select id="BuildingDescription" name="BuildingDescription" class="form-control">
                            <option value="">Select</option>
                            <option value="Parking structure">Parking structure</option>
                            <option value="Common area">Common area</option>
                            <option value="Community room">Community room</option>
                            <option value="Gym">Gym</option>
                            <option value="Exterior area">Exterior area</option>
                            <option value="Conference Room">Conference Room</option>
                            <option value="Pools">Pools</option>
                            <option value="Rec area">Rec area</option>
                            <option value="Common Parking">Common Parking</option>
                            <option value="Dog walk area">Dog walk area</option>
                            <option value="Medical building/area">Medical building/area</option>
                            <option value="Daycare">Daycare</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.BuildingDescription, "", new { @class = "text-danger", @role = "alert" })
                    </div>
                </div>
                <div class="form-row mt-3">
                    <div class="col-md-12 mb-3">
                        @Html.LabelFor(model => model.IsNonResidential)
                        <div class="d-flex">
                            <div class="custom-control custom-radio mr-3">
                                @Html.RadioButtonFor(model => model.IsNonResidential, "True", new { @id = "NonResidentialTrue", @class = "custom-control-input" })
                                <label for="NonResidentialTrue" class="custom-control-label">
                                    Yes
                                </label>
                            </div>
                            <div class="custom-control custom-radio">
                                @Html.RadioButtonFor(model => model.IsNonResidential, "False", new { @id = "NonResidentialFalse", @checked = "checked", @class = "custom-control-input" })
                                <label for="NonResidentialFalse" class="custom-control-label">
                                    No
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer multi-button comcom-fotter">
            <button type="button" class="btn btn-light" data-bs-dismiss="modal" title="Cancel">Cancel</button>
                <button class="btn btn-primary" type="submit" title="Save">Save</button>
            </div>
       @*  } *@
    </div>
</div>

<script>
    // form begin.
    function BeginSaveAddBuilding() {
        var errorCnt = 0;
        var form = $("#frmSaveAddBuilding");
        $(form).removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($(form));
        var validator = $(form).validate();
        var isModelValid = $(form).valid();

        if (false == isModelValid) {
            validator.focusInvalid();
            return false;
        }

        return true;
    }

    // form success.
    function SuccessSaveAddBuilding(data) {
        if (data.Result.Status) {
            reloadParkingGrid = true;
            ReloadBuildingDt();
            $("#modal-building-add").modal('hide');
        }
        else {
            alert('error occured...');
        }
    }

    function HideShowAddressPanel() {
        var addAddress = document.getElementById('AddAddress');
        if (addAddress.checked == true) {
            $("#IsAddAddress").val("True");
            $("#BuildingAddressID").prop("disabled", true);
            $("#divAddressDetails").show();
            $('span[data-valmsg-for="BuildingAddressID"]').empty();
            $("#BuildingAddressID").val("");
        }
        else {
            $("#IsAddAddress").val("False");
            $("#BuildingAddressID").prop("disabled", false);
            $("#divAddressDetails").hide();
        }
    }
</script>


